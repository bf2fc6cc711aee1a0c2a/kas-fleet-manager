// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package openapi generated by go-bindata.// sources:
// ../../openapi/managed-services-api.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _managedServicesApiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdd\x6e\x1b\xbb\x11\xbe\xd7\x53\x0c\xd0\x16\x6a\x01\x5b\x92\xcf\x39\xbd\xa8\x80\x5c\x24\x6d\x53\xa4\xcd\x5f\xe3\xa4\xbd\x28\x0a\x79\x44\xce\x6a\x19\xef\x92\x9b\xe1\xd0\xb6\xd2\xf6\xdd\x0b\x72\x57\xda\xd5\x6a\x25\xcb\x69\x0a\x27\xc0\xf1\x95\x77\x38\x33\x9c\x6f\x7e\x3e\x92\x72\x15\x59\xac\xcc\x1c\x7e\x9c\xcc\x26\xb3\x91\xb1\x99\x9b\x8f\x00\xc4\x48\x41\x73\x78\x85\x16\x57\xa4\xe1\x92\xf8\xc6\x28\x82\xa7\x6f\x5f\x8c\x00\x34\x79\xc5\xa6\x12\xe3\xec\x21\x95\x1b\x62\x9f\x96\x67\x93\xd9\xe4\x62\xe4\x89\xa3\x24\x7a\x3e\x87\xc0\xc5\x1c\x72\x91\xca\xcf\xa7\x53\xac\xcc\x24\xc6\xe0\x73\x93\xc9\x44\xb9\x72\x04\xb0\xb7\x83\xb1\xf0\xeb\x8a\x9d\x0e\x2a\x4a\x7e\x03\xb5\xbb\x61\x67\x5e\x70\x45\xf7\xb9\xbc\x14\x5c\x19\xbb\xda\x73\x34\xdd\x57\x55\x81\x99\xac\x80\x76\x25\x1a\x3b\xaa\x50\xf2\x84\x23\x6e\x36\x2d\x6b\xf0\xe7\xbe\x06\xef\xcf\xa3\xf0\xe6\x62\x7a\x8d\xd9\x35\xfa\xe9\xbf\x8c\xfe\xcf\x3c\xb9\x5c\x91\xd4\xff\x00\xf8\x50\x96\xc8\xeb\x39\xfc\x89\x04\x10\x92\x2a\x30\x7d\x0a\xe4\x05\x96\x6b\x30\x7a\xa3\x48\x2a\xb0\x91\xf5\xc6\x30\x46\xf9\x8c\x90\x89\xe7\xf0\x8f\x7f\x36\x42\x26\x5f\x39\xeb\xc9\xb7\x5a\xe3\x1f\x66\xb3\x71\xfb\xd9\xc3\xf3\x97\x9d\xfd\x32\x17\xac\xde\xd9\x35\xfe\x29\x67\x85\xac\x74\x7d\x00\x60\x55\x15\x46\x61\xf4\x32\xfd\xe8\x9d\xdd\x5d\x05\xf0\x2a\xa7\x12\xfb\x52\x80\x5f\x32\x65\x73\x18\xff\x62\xaa\x5c\x59\x39\x4b\x56\xfc\xb4\xd6\xf5\xd3\x14\xcc\xbb\x3a\x96\x71\x0b\xe0\xa7\xd9\xc5\x61\x00\x4f\x83\xe4\x20\xee\x9a\x2c\x18\x0f\xc6\xde\x60\xf1\x38\xc1\xff\x91\xd9\xf1\x4e\xd4\x3f\x1e\x8e\xfa\x83\xc5\x20\xb9\x63\xf3\x99\x34\x88\x83\x8a\x38\x73\x5c\x82\xab\x88\x53\x58\xdf\x06\x82\x9f\x0e\x23\x78\xed\x7a\xbd\x7a\x6b\x24\x07\x5f\x91\x32\x99\x21\x0d\x46\x03\xdd\x19\x2f\xfe\x5b\x40\xf2\xdb\x63\x23\xf0\xc1\xd2\x5d\x45\x4a\x48\x03\x45\x3b\x70\x2a\x4d\xf9\x63\x77\x51\x85\x8c\x25\x49\x43\x94\x90\x06\x7e\xc8\xb4\xd5\x9b\x1a\x3d\x3e\x8d\x8b\x6a\x8f\x95\xf3\xfb\x3c\xf4\x7b\x26\x14\x02\x04\x4b\xb7\x4d\x89\x9b\x91\x7c\x18\x11\x25\x93\x67\x4e\x77\xf4\x06\x98\x47\xa3\xe0\x76\x3d\x1a\x19\x26\x3d\x07\xe1\x40\xa3\x23\xc9\x3f\x9e\xfa\xe1\xc4\x3f\x94\x79\x86\xb9\xf4\x87\x23\x54\xa4\x14\x55\xf2\x38\x7d\x73\x90\x3a\x8f\x34\xfe\xdf\x22\x55\xa6\x30\xea\xc6\xf7\xdf\x4a\xe7\xc3\xcf\xac\xff\x98\x08\x7e\x77\xdf\x75\x01\x0b\x26\xd4\xeb\xef\x85\xe0\x9f\x5a\x08\x87\x38\x1e\x54\xa4\xbb\x78\xf9\x93\x9c\x1a\x78\xbb\x74\xf7\x18\xb8\xda\x95\x68\xbe\x21\xdc\xcb\xa8\xb4\xa1\xa3\x86\x71\x1b\xef\xb2\xae\xa8\xbe\xf8\x8e\x3a\x9b\xd3\x1c\x96\x49\xad\x11\xd6\x1f\xcf\x1d\x97\x28\x73\xf8\xf3\xdf\xdf\x8f\x36\x51\x36\x4e\xdf\x2c\x3f\x92\x92\x77\x94\x11\x93\x55\xb4\xeb\xdd\xa5\xc5\x46\x54\x71\x6c\x5a\x31\x5d\x76\x34\xba\x0b\xb6\x36\xf2\xc2\xc6\xae\xb6\xe2\x6b\x63\xef\x57\xca\x63\x82\x8e\x29\xbd\x34\xed\xb9\x75\x62\x6c\x27\x6d\x5c\xe1\x8a\xf6\x95\x8c\x15\x5a\x6d\x73\x08\xe0\xcd\xe7\x13\xb4\xc4\x09\x16\xf7\xa9\x6d\x0f\xbc\xce\x51\x1a\x23\xed\x7c\xc6\x98\x3a\x9f\x71\xf3\xce\x67\xda\xa5\xf3\x6d\x84\xca\x7a\x20\x53\x27\x6d\xfc\x62\x51\xbc\xc9\xba\x9b\x1c\xeb\xc1\x5e\x13\x8c\xbb\xdb\xed\x27\xfb\x50\xc2\x21\x8d\x8d\xa6\x7e\xff\x0f\x26\xbe\xce\x05\x0e\x0c\xd1\x41\xf5\x2d\x67\x2e\x76\xdb\x6e\xd0\x28\x25\xa3\xdb\x35\x0f\x4a\x48\x34\xfc\x1f\xb2\x90\x6a\x32\x1c\x22\x32\xe3\xba\xb7\x32\xa8\x7e\x32\x1b\x76\xef\x01\x8f\x5d\xfd\x22\x78\x21\x7e\xf1\x87\x93\x6b\xea\x05\x25\x1c\x48\xd5\x80\xba\x2a\x5c\xd0\x8b\x8a\xdd\x8d\xd1\x2d\x15\xde\x6b\x56\x86\x42\xcc\x02\x3f\x0f\x1b\x2c\x9d\x2b\x08\x6d\xaf\x35\x57\xe6\x21\xad\x79\x6b\x1f\x10\x8e\xc5\xf2\xf4\x21\x49\xa7\x15\xe9\x05\xca\xc9\x26\x00\x59\x43\xf8\x1a\x85\xce\xc5\x94\xb4\xb3\x1e\x2a\xfd\xb5\x5c\x76\x9b\xef\xfb\x9e\xb6\x5e\xc4\xed\xdf\xf1\xd8\xfb\xb7\xf0\xfe\x13\xae\xa5\xaa\x54\xf5\xf6\x67\x16\x63\xe7\x50\xa1\xe4\xcd\xe7\xce\xf5\xe5\x7d\x4e\xf1\x35\xed\x32\x60\x52\x8e\x75\xff\xec\xe8\x3e\x96\xfa\x77\x8e\xbd\x12\x76\x8f\xb8\x3a\x86\xce\x01\x13\xa3\xf8\x14\x88\xd7\x43\x61\xbc\xc5\x15\x81\x0d\xe5\x92\xb8\x8d\x05\x0a\x13\x9f\xfe\x39\xd9\x1d\x01\xdd\x29\x22\xed\x3b\x3f\x07\xc4\x5d\xba\x87\xd7\x70\xa0\xfd\x43\x54\x53\x86\xa1\x90\x39\x5c\x6c\x45\xa5\xb1\xa6\x0c\x65\x2b\x6a\xf3\x90\x61\xe1\x6b\xff\xdd\x23\xba\x46\xd9\xd9\xfa\x28\xca\x57\x78\x17\xdd\xef\x01\xf5\xf1\xbe\xce\x24\x81\xed\x17\x22\x98\xcd\xf6\x31\xcc\x8e\x61\x20\x64\x95\xf7\x50\x24\xd9\x01\x1c\x43\x4e\x7a\xe8\xfe\x7d\xbe\x8d\xe1\xb2\x29\x8d\x4f\x17\xdf\xda\x31\x28\x36\x42\x6c\x70\x92\x9a\xce\xaf\xad\xe0\x5d\xcc\x81\xe4\xc6\xb7\xcd\x0c\xc6\x77\x2e\x43\xa5\x29\x90\x63\x76\xa4\x67\x42\xb0\xb8\xcd\x89\x69\x01\xaa\xc0\xe0\x29\x4a\xd1\xc2\xe5\x5f\x5f\x26\xa2\xa7\x92\xac\x9c\x6d\x1d\x05\xbf\xb9\x84\x47\xa8\x7e\xe3\x22\x5e\xac\x01\x45\xd8\x2c\x83\x90\x87\x29\x28\x57\x84\xd2\xee\x6a\xa1\x52\x2e\x58\x99\xc0\xd6\xdd\x73\xc7\x40\x77\x58\x56\x05\x9d\x81\xb1\xe0\x58\x13\x37\x35\x64\x43\x37\x14\x47\xbc\x6b\xeb\xeb\x1f\xb0\x10\x82\x27\x8e\xce\x5b\x88\x82\x9c\x5e\x08\x49\xe1\xaa\x5c\x5f\xcd\x47\xdb\xc5\xab\xab\x2b\xff\xa9\xe8\xa0\xa8\x8d\xa1\x30\xd7\x04\xe3\x72\xfd\xab\x71\x57\xb5\xb5\x7b\xbf\x9f\x74\x50\x68\x01\x0b\xef\x60\x49\xf5\xe3\x82\x34\xb8\x38\x58\x45\x24\x68\x60\xf2\x2e\xb0\xa2\xc9\x17\x80\xf4\x61\xb9\x6d\x03\x0f\x05\x2e\xa9\xa0\xf4\x43\xef\x55\xe6\xdc\x93\x25\xf2\xd5\xd9\x41\x4c\x5d\xdb\x45\x32\xf5\x93\x6b\x5a\xc3\x13\x18\x67\xce\x8d\x01\xad\x1e\xd4\xb9\xc1\x22\x50\xd4\x5a\x22\x1f\xc8\xc2\x8b\xba\x7c\xdd\xce\xb2\x63\x81\xe6\x48\xd7\x67\xe0\x18\x4c\xad\x53\x7b\x33\x1e\xa8\xac\x64\x7d\x16\x65\xed\x21\xbd\x57\x4b\xc9\x51\x92\x24\x16\x04\x72\xf4\xf1\xad\x5d\x1a\xef\x8d\xb3\x31\x41\x9e\x08\x6e\x4d\x51\xc0\xb2\xad\x73\x3d\xdd\xa4\x27\xa7\x72\x69\x4a\xf7\xb3\xf5\xee\x88\x36\xc2\xff\xc3\x8c\xd6\xd5\x5d\xae\xbf\xfa\x94\x6e\x1c\x9f\x36\xa8\xcb\x20\x0f\x1e\xd6\xde\x98\x3e\xb0\x81\xb7\x55\x4d\xcb\x75\xdf\x6e\x06\xed\x84\x51\x44\xaf\x86\xbb\xef\x0d\x7f\xd9\x9e\xb0\x40\xab\x17\x90\x19\xf6\x02\xa7\x07\x71\x56\x5b\xbc\x3e\x1a\xd3\xd7\x9a\x08\xeb\x80\xee\xaa\xc2\x28\x23\x35\x84\x9a\xc0\x52\xc7\x6f\xc8\xe5\xa4\x46\xff\x6f\x00\x00\x00\xff\xff\x91\x93\x36\xde\x12\x1c\x00\x00")

func managedServicesApiYamlBytes() ([]byte, error) {
	return bindataRead(
		_managedServicesApiYaml,
		"managed-services-api.yaml",
	)
}

func managedServicesApiYaml() (*asset, error) {
	bytes, err := managedServicesApiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "managed-services-api.yaml", size: 7186, mode: os.FileMode(420), modTime: time.Unix(1600350373, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"managed-services-api.yaml": managedServicesApiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"managed-services-api.yaml": &bintree{managedServicesApiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
