// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package openapi generated by go-bindata.// sources:
// ../../openapi/managed-services-api.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _managedServicesApiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x5b\x6f\xf3\x36\x0c\x7d\xf7\xaf\x20\xb0\x01\xd9\x1e\x12\xa7\xdf\xb7\x3d\xcc\x6f\xed\x2e\x40\x37\x0c\x2d\xda\x5d\x1e\x86\x21\x60\x25\x3a\x56\x63\x4b\x1a\x45\xa7\x4d\x7f\xfd\x20\xdb\x49\xec\x36\x57\x60\x58\xfb\x96\x90\x87\x47\xe7\x50\x34\xe5\x3c\x59\xf4\x26\x83\xcf\x93\xe9\x64\x9a\x18\x9b\xbb\x2c\x01\x10\x23\x25\x65\xf0\x2b\x5a\x9c\x93\x86\x7b\xe2\xa5\x51\x04\x97\xb7\xd7\x09\x80\xa6\xa0\xd8\x78\x31\xce\xee\x83\x2c\x89\x43\x93\x9e\x4e\xa6\x93\x8b\x24\x10\xc7\x48\x64\x1e\x43\xcd\x65\x06\x85\x88\x0f\x59\x9a\xa2\x37\x93\xa8\x21\x14\x26\x97\x89\x72\x55\x02\xf0\xe6\x04\x63\xe1\x2b\xcf\x4e\xd7\x2a\x46\xbe\x86\x96\x6e\x37\x59\x10\x9c\xd3\x31\xca\x7b\xc1\xb9\xb1\xf3\x37\x44\xe9\x5b\xa8\xaa\x99\xc9\x0a\x68\x57\xa1\xb1\x89\x47\x29\x1a\x1f\xf1\xb0\xb4\x6a\xcd\x8f\x43\x6b\x3e\x8c\x63\x70\x79\x91\x2e\x30\x5f\x60\x03\x03\xf0\x2e\x48\xfb\x0b\x20\xd4\x55\x85\xbc\xca\xe0\x7b\x26\x14\x02\x04\x4b\x4f\xd0\xa0\xe1\x8e\xfe\xa9\x29\xc8\x1a\x49\xaa\x66\x23\xab\x75\x65\x94\x78\x45\xc8\xc4\x19\xfc\xf5\x77\x17\xe4\xb6\xe4\xca\xe9\x1e\x6e\xa0\xfe\x97\x86\x5a\xa3\xe0\x26\x1f\x8b\x0c\x93\xce\x40\xb8\xa6\x4d\x58\x39\x2b\x64\x65\xcb\x03\x80\xde\x97\x46\x61\x64\x4a\x1f\x83\xb3\xfd\x1c\x40\x50\x05\x55\x38\x8c\x01\x7c\xc9\x94\x67\x30\xfa\x22\x55\xae\xf2\xce\x92\x95\x90\xb6\xc8\x90\x36\x62\x3a\x9b\xa3\x8d\x85\xe0\x9d\x0d\x14\xb6\x44\xa3\x4f\xd3\x4f\xa3\x3e\xef\xc0\xd1\xa5\x52\xe4\x85\x74\x2f\xbf\x43\xfa\x31\xf1\xfb\xe4\x9f\x6f\x00\x60\xf4\xcd\x74\xba\x5f\xef\x1f\x58\x1a\xdd\xc8\x00\x62\x76\x1c\xc0\xa9\x66\xa6\xde\xc5\xc1\x8f\x51\xc2\x40\xfa\xc5\x81\x56\xd7\x52\x80\xb8\x05\x59\x30\x01\x8c\x5d\x46\x2b\x1f\x43\xf5\xe7\xfd\xaa\x7f\xb7\x58\x4b\xe1\xd8\xbc\x90\x06\x71\xe0\x89\x73\xc7\x15\x38\x4f\xdc\xc8\xfa\x18\x0e\xbe\xdb\xef\xa0\xfd\x68\xb1\x64\x42\xbd\x02\x7a\x36\x41\xc2\x47\x10\xfd\xed\xa1\x39\xbf\xb4\x50\x5b\x7a\xf6\xa4\x84\x74\x3b\xea\x9b\x49\x07\x15\xd7\x5d\x5c\xb8\x52\x50\x67\x6f\xb8\xee\xde\xc3\xd7\x36\x13\xcb\xd7\x0b\xf7\x3e\x82\xd6\xeb\xa8\xdb\xb8\x1d\xbb\xac\x3c\xb5\x8f\x4d\xd2\x3b\x9c\x32\x78\x68\x60\x5d\xb0\xfd\xf3\x93\xe3\x0a\x25\x83\x9f\xff\xfc\x2d\x59\xab\xec\x48\x6f\x1e\x1e\x49\xc9\x1d\xe5\xc4\x64\x15\x0d\xd9\x5d\x93\xec\x42\x9e\xe3\xd0\x8a\xe9\x6f\x47\xa3\xfb\x66\xdb\xa2\x20\x6c\xec\x7c\x13\x5e\x18\x7b\x1c\x54\xc4\x06\x1d\x02\x35\x5d\x5a\x23\xb0\x2c\x6f\xf2\xfe\x5b\x74\xa8\xbf\xaf\x0c\x8e\x7a\x65\x3b\x4c\xee\x33\xda\x8e\x84\xa6\xd7\x77\xbb\xd3\x0d\x34\x4f\x09\xee\x18\x90\xbd\xf0\xcd\x3e\x98\x0d\x5b\xba\xb3\xa8\xbf\xf9\xff\xa7\x9e\xa0\xd6\x26\xca\xc3\xf2\x76\xdb\x9d\xe1\x9b\x7d\xa0\x71\x65\x1d\x84\xf8\xfa\x87\x93\xdb\x11\x04\xa5\x0e\x27\xc3\x55\xe9\x6a\x3d\xf3\xec\x96\x46\x6f\xbf\x90\xa3\x65\x55\x5d\x8a\x99\xe1\xcb\x19\x97\x3a\x37\xe7\x5c\xea\x93\x3d\x43\x8d\xc5\xea\xf4\xf1\x6a\x76\x18\xe9\x19\xca\xc9\x25\x00\x79\xb7\x06\x34\x0a\x8d\xc5\x54\x34\xc8\xd7\x5e\xff\x07\x94\xff\x06\x00\x00\xff\xff\x61\x42\x3a\x36\xc3\x0b\x00\x00")

func managedServicesApiYamlBytes() ([]byte, error) {
	return bindataRead(
		_managedServicesApiYaml,
		"managed-services-api.yaml",
	)
}

func managedServicesApiYaml() (*asset, error) {
	bytes, err := managedServicesApiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "managed-services-api.yaml", size: 3011, mode: os.FileMode(420), modTime: time.Unix(1600279278, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"managed-services-api.yaml": managedServicesApiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"managed-services-api.yaml": &bintree{managedServicesApiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
