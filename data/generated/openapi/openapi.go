// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package openapi generated by go-bindata.// sources:
// ../../openapi/managed-services-api.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _managedServicesApiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4b\x73\xdb\x36\x10\xbe\xeb\x57\xec\xa8\x9d\x51\x7b\xb0\x44\x27\xce\xa1\xbc\x39\x7d\xbf\x92\x8c\x9d\xb6\x87\x4e\xc7\xb3\x26\x56\x22\x62\x12\x40\x80\xa5\x6c\xb9\xd3\xff\xde\x01\xa8\x07\x44\x51\x94\xd4\xa6\x95\x32\x63\x9f\x4c\x70\x77\xf1\x7d\x8b\x7d\x81\xd2\x86\x14\x1a\x99\xc2\xf3\x61\x32\x4c\x7a\x52\x8d\x75\xda\x03\x60\xc9\x05\xa5\xf0\x33\x2a\x9c\x90\x80\x6b\xb2\x53\x99\x11\x5c\xbe\xf9\xbe\x07\x30\x25\xeb\xa4\x56\x29\x24\xc3\x64\x78\xde\x03\x10\xe4\x32\x2b\x0d\x87\xc5\x36\x1d\x47\xd6\x2b\x79\xcb\x67\x50\xd9\x22\x85\x9c\xd9\xb8\x74\x34\x42\x23\x87\x1e\x83\xcb\xe5\x98\x87\x99\x2e\x7b\x00\x1b\x06\xa5\x82\xcf\x8c\xd5\xa2\xca\xfc\xca\xe7\x50\x9b\x6b\x37\xe6\x18\x27\xb4\xcb\xe4\x35\xe3\x44\xaa\xc9\x86\xa1\xd1\xa6\x68\x56\x59\x4b\x8a\x41\xe8\x12\xa5\xea\x19\xe4\x3c\xf0\xf0\x9b\x8d\xca\x9a\xeb\x99\xab\xb9\xba\x33\xbf\x38\x3d\x1f\xdd\xe1\xf8\x0e\xdd\xe8\x4f\x29\xfe\x4a\x83\xc9\x09\x71\xfd\x0f\x80\x25\x67\xb4\x72\xe4\x16\x0b\x00\xfd\x67\x49\xd2\x5f\x3d\x02\x64\x5a\x31\x29\x8e\x97\x00\xd0\x98\x42\x66\xe8\x61\x8d\xde\x39\xad\xd6\xdf\x02\xb8\x2c\xa7\x12\x9b\xab\x00\x9f\x5a\x1a\xa7\x30\xf8\x64\x94\xe9\xd2\x68\x45\x8a\xdd\xa8\x96\x75\xa3\x1f\x3d\xd0\x2b\x7a\x5f\x91\xe3\x41\xa4\xb9\xe6\x82\x20\x04\xb6\x96\x82\xb1\xae\x94\x80\xdb\x19\x48\xb1\x22\x70\x91\x9c\x1f\x87\xc0\xd7\xd6\x6a\xbb\x15\xf9\x65\xc5\x39\xb0\xbe\x23\x05\xd2\x81\x54\x53\x2c\xd6\x51\x3f\x3f\x45\xd4\xbf\x28\xac\x38\xd7\x56\x3e\x92\x00\xd6\x60\xc8\x8e\xb5\x2d\x41\x1b\xb2\x01\x47\xcc\xe0\xe2\x14\x19\xbc\xd2\x70\xb7\x16\x34\xf7\x92\x73\x70\x86\x32\x39\x96\x24\x40\x0a\xa0\x07\xe9\xd8\xad\x98\xbc\x38\x56\x0a\xec\x3a\x0b\x7a\x30\x94\x31\x09\x20\x2f\x08\x3a\x0b\x15\x61\x11\x45\x8e\xb2\xca\x4a\x9e\xad\xf6\x3c\x83\x97\x84\x96\x6c\x0a\xbf\xff\xb1\x10\xaa\xca\x12\xed\x2c\x85\x6f\x89\x01\x1b\xae\x59\x65\x92\xa0\x82\x98\xba\xeb\xc4\x49\x1e\xf7\x57\x01\xf8\x53\x39\xf8\x6f\x50\x3f\x95\x83\xd3\x61\xb2\xb3\x1c\x2c\x32\xbd\x4e\x89\x8e\x64\x37\x68\xb1\x24\x9e\x4f\x45\x10\x0a\x47\x8d\xab\xbf\x86\x6b\x25\x37\x92\xa2\xbf\xdf\xe0\x51\x5b\x34\xda\x2d\xfd\xb5\xb9\x9b\xdf\x4f\xaa\x14\xde\x57\x64\x67\x11\x5d\x85\x25\xa5\x80\x6e\xa6\xb2\x6d\x4e\x78\x33\x0f\x40\xce\x09\x30\x8c\x64\x20\x15\xa0\xaa\xb5\x72\xab\x95\xae\x1c\x94\xa8\x54\x98\xad\xba\x4e\x83\x67\x86\x52\xb8\xd5\xba\x20\x54\xd1\x1b\xef\x2f\x69\x49\xa4\xc0\xb6\xa2\xde\x6a\x91\x1c\xbf\xd4\x22\x2a\xb7\x2d\x93\x8a\x40\xc6\x5e\x47\xe0\x74\x87\x4d\x7b\xd0\x1c\x3e\x44\x6d\xa1\xd0\x56\xd4\x9f\x9d\xf0\xf0\x77\x99\x65\x64\x1a\xc5\xfd\x24\x53\xf3\x57\x5f\xcc\xc3\x86\x75\x6a\xba\x66\x6e\x3e\xf5\xa5\x23\xf6\xa5\x2f\x4e\x91\x41\x5d\x2e\xb0\xb0\x84\x62\xf6\xb1\xb4\xa0\x4b\x05\xd5\xb6\x2e\x04\x99\x25\x64\x7f\xb3\xf5\xb5\xb9\xa6\x37\x4f\xf0\x7f\x34\xaf\x7e\xe9\xcd\xf9\x2e\xa6\xe8\x7e\xde\xc9\x62\x73\xd1\xad\x76\xa9\x72\x45\x5c\x59\xe5\x00\xa1\x90\x8e\x41\x8f\xd7\xaf\x8f\xee\x10\x1c\x2d\xd5\x72\xf0\x2c\x49\x06\xe9\x56\xdf\x74\x6f\xfa\xbf\x9e\x62\x5c\x5d\x7f\x92\x71\x85\x1d\x5c\x24\xe7\x1d\x1c\x3a\x8b\xc1\xf1\xc2\x70\x70\x91\x3c\xdf\x8e\x7a\xff\x62\x70\x44\x06\x2f\xba\x62\x67\xd7\x68\x77\x3c\xe4\xed\xc3\x5b\x9b\x7a\x34\x2c\x1a\x9c\xd0\x60\x7f\x71\x27\x1f\x69\xd0\x5b\xbd\xf3\x3b\xcd\xc1\xd4\x9b\xbe\xbe\x7d\x47\x19\x5f\xd1\x98\x2c\xa9\x6c\x79\x4b\xad\x07\x38\x1d\x5e\x2e\xe0\x5a\x7f\xe8\x2c\xe3\xb4\x95\x22\xe6\x5f\x2b\x39\xb6\x52\x4d\x96\xcb\x77\x52\xed\x16\xca\x3d\x8b\x2e\x21\x9f\x69\x69\x34\x2f\x86\x09\x2c\x72\x83\xdf\x25\x7a\xf4\x5e\x8a\x1e\xbd\x17\xa2\x47\xd6\x8c\x45\x3c\x2f\x33\x95\xee\x30\xe2\x7b\xb1\xf2\x28\x36\x85\xa4\x62\x9a\x44\x13\xb4\x07\xb7\x5b\x2a\x60\xee\x16\x0b\xc1\xb5\x10\xc1\xa2\x78\x3d\xde\x8c\xab\x7e\x6b\x58\x36\x82\xa0\x1f\xfb\x6a\xd3\x1f\xdb\x7c\x02\x21\x93\x04\x35\x53\xa2\xd5\x37\x10\x0e\x12\x5b\xf2\x6a\xab\xf8\xb2\xe6\xdc\xac\x87\x5d\xab\x52\x70\x46\x1c\x35\x07\x39\xc4\x2b\xfe\x0b\x2f\x84\x80\x6a\x87\x88\xd6\xe2\xac\xf1\xa6\x55\x1c\x3a\x01\x06\x7a\x35\xc2\xb8\x21\x1d\xf9\xf4\x1d\x23\x57\x5b\x88\xb7\x1c\x68\x56\xe8\x4a\xdc\x18\xab\xa7\x52\x90\xdd\x5b\xad\xac\x0a\x96\x37\xf8\xd8\xae\xb0\x79\xe9\xf4\x81\x36\x91\x87\x04\xda\xbd\x3a\x00\x4e\xb8\x59\xef\x2b\x7c\xab\x35\x3b\xb6\x68\xae\xc3\x4f\x14\xdf\x45\x77\xf9\xdd\xee\x0a\x53\x9b\xb8\xc1\x0d\x15\xdf\x92\x91\x53\x7f\x43\xa6\x33\x96\x25\xed\x6b\xb2\x32\xe2\x43\x99\x6c\xce\x45\x1f\x6f\xde\x35\x10\xaf\xfe\xba\xb1\xc7\x0e\xf0\x1c\x9a\xed\x7d\x55\xb4\xea\x6f\x31\xcb\xe9\x6f\x6d\x5c\x79\x9b\x13\x48\xe1\x47\x5d\x4b\x99\xb6\xcb\x0f\x50\x8d\x61\xa3\xe5\x44\xa5\x4a\xc1\x20\xe7\xcd\x2e\xb9\xfa\x4e\x11\xf7\xa3\x1a\x43\xd4\x27\x9b\x1f\x8d\xd6\x3f\x0d\xe1\x84\x40\x2a\x41\x0f\xb0\x61\x7e\x8c\x85\xa3\xfd\x61\xd2\x03\x96\xa6\x88\x4f\xae\xd9\x26\xa7\x58\x54\x94\x42\xff\xbc\x8e\x84\xb8\x3f\xd6\xa8\xa3\x76\xde\x89\xfa\x55\x55\xde\x92\xf5\xbe\x0c\x27\x0d\x52\x01\x61\x96\xc7\xac\x3f\x20\x8d\x66\x1f\x5f\xd2\x48\x12\x4f\x64\x71\x33\xba\xf6\xb6\x17\x7a\xf3\xab\x51\xbc\xad\x2f\x61\x61\x75\xbe\x58\x3f\x7c\x33\x4f\xc7\x1f\x7e\x7b\xbb\x36\xa8\xe4\xcc\x26\x2c\xf4\xfe\x0e\x00\x00\xff\xff\xd3\x84\x44\x75\xf2\x1d\x00\x00")

func managedServicesApiYamlBytes() ([]byte, error) {
	return bindataRead(
		_managedServicesApiYaml,
		"managed-services-api.yaml",
	)
}

func managedServicesApiYaml() (*asset, error) {
	bytes, err := managedServicesApiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "managed-services-api.yaml", size: 7666, mode: os.FileMode(420), modTime: time.Unix(1601544077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"managed-services-api.yaml": managedServicesApiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"managed-services-api.yaml": &bintree{managedServicesApiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
