// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/managed-services-api.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _managedServicesApiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x69\x73\xdb\x38\x93\xfe\xee\x5f\xd1\xab\xd9\x2d\xce\x6c\x45\x12\x75\xf8\x88\xaa\xe6\x83\x63\x3b\x8e\x27\xf1\x11\x1f\x71\x9c\xad\x2d\x0f\x44\x42\x14\x6c\x12\xa0\x00\x50\xb6\xf2\xd6\xfb\xdf\xdf\x02\x48\x8a\xe0\x21\x4a\x76\x9c\xb1\x33\x13\x7f\x99\x08\x68\x34\xba\x1f\x34\x1e\x34\x0e\x0e\x0b\x31\x45\x21\x19\x40\xaf\x65\xb7\xec\x35\x42\x47\x6c\xb0\x06\x20\x89\xf4\xf1\x00\x0e\x11\x45\x1e\x76\xe1\x0c\xf3\x29\x71\x30\x6c\x9f\x1c\xac\x01\x4c\x31\x17\x84\xd1\x01\xd8\x2d\xbb\xd5\x59\x03\x70\xb1\x70\x38\x09\xa5\x2e\xac\x6a\x23\x30\x57\x8d\x94\xe6\x26\x44\xdc\x1f\xc0\x58\xca\x50\x0c\xda\x6d\x14\x92\x96\xb2\x41\x8c\xc9\x48\xb6\x1c\x16\xac\x01\x94\x14\x12\x0a\xbf\x86\x9c\xb9\x91\xa3\x4a\x7e\x83\x58\x5d\xb5\x32\x21\x91\x87\x97\xa9\x3c\x93\xc8\x23\xd4\xab\x54\x34\x68\xb7\x7d\xe6\x20\x7f\xcc\x84\x1c\x6c\xd9\xb6\x5d\x6e\x3e\xaf\xcf\x5a\xb6\xcb\x52\x4e\xc4\x39\xa6\x12\x5c\x16\x20\x42\xd7\x42\x24\xc7\x1a\x01\x65\x66\x3b\x88\x51\x6a\x8a\x18\x25\xd1\x54\x85\xd3\x4e\xfb\x16\x8d\x6e\x91\x68\xff\x8b\xb8\xff\x1e\x68\x95\x1e\x96\xf1\x3f\x00\x58\x88\x39\x52\xba\x0f\xdc\x81\x2a\x7f\xaf\x64\xdf\xcc\x0e\xdc\xa4\x9e\x63\x11\x32\x2a\xb0\x48\x1b\x00\x34\xba\xb6\xdd\xc8\x7e\x02\x38\x8c\x4a\x4c\xa5\x59\x04\x80\xc2\xd0\x27\x8e\x56\xdd\xbe\x11\x8c\xe6\x6b\x01\x84\x33\xc6\x01\x2a\x96\x02\xfc\x37\xc7\xa3\x01\x58\xbf\xb4\x1d\x16\x84\x8c\x62\x2a\x45\x3b\x96\x15\x6d\x6d\xdc\x29\x9e\x44\x58\x48\xcb\x68\x99\x83\x48\x0b\x01\x8f\xa5\x60\xc4\x22\xea\xc2\x70\x06\xc4\xcd\x1c\xe8\xdb\x9d\xe7\x71\x60\x8f\x73\xc6\xad\x42\x13\x7c\x8f\x82\xd0\x37\x11\x4e\xff\xfa\x76\x67\x2f\xae\x2c\xd7\x55\x77\x94\xea\x6a\x67\x4d\x17\x02\xb5\x1d\xc9\x31\x48\x76\x8b\x29\x10\x01\x84\x4e\x91\x9f\x07\xa9\xff\x83\x80\xd4\x7f\x3c\x48\xfd\x65\x20\x1d\x31\xb8\xcd\x05\xd4\x1d\x91\x63\x10\x21\x76\xc8\x88\x60\x17\x88\x0b\xf8\x9e\x08\x29\x32\xe0\xd6\x9f\x6b\x7a\x3c\x10\xb8\x75\xdb\x7e\x2c\x70\x59\xd3\x85\xc0\x5d\x50\x7c\x1f\x62\x47\x62\x17\xb0\xb2\x0b\x98\xa3\xc9\x2b\x8d\x30\x81\x9d\x88\x13\x39\xcb\xfa\x6e\xc2\x1b\x8c\x38\xe6\x03\xf8\xbf\xff\x4f\x85\xa2\x20\x40\x7c\x36\x80\x7d\x2c\x01\x15\x46\x22\x9b\xd4\x2e\xf6\xb1\xc4\x95\x94\x16\x57\xad\xc6\x6a\x2f\x30\xde\x8b\x9a\x7e\x39\x62\xb0\x13\x1b\xb6\x08\xf8\x5d\xed\xf1\x4f\xb6\xfb\xdb\xb2\x5d\x3c\xc0\xdf\xc0\x79\x39\x05\xff\x50\xe6\xfb\x36\x10\x8b\x0a\x1e\xcf\x82\x29\xc1\xc5\xea\x6a\x38\x6e\x25\xc6\x0c\x11\x47\x01\x96\x49\x5a\x1c\x8b\xc4\x8e\x34\x72\x8e\x64\x72\x6d\xe2\x36\x56\xcb\x1f\x63\x8d\xa1\xca\x60\xab\x88\xd6\xe1\x18\x25\x44\x9b\x54\x97\x8d\x51\xe6\x10\x3a\x80\x49\x84\xf9\xcc\x80\x8c\xa2\x00\x0f\x00\x89\x19\x75\x16\x01\x79\x82\xf9\x88\xf1\x00\xe4\x18\x03\xd2\x29\x3b\x10\x0a\x88\xc6\xad\xc6\x9c\x51\x16\x09\x08\x10\xa5\x3a\xf7\xae\x0b\x26\x39\x0b\xf1\x00\x86\x8c\xf9\x18\x51\xa3\x46\x61\x4e\x38\x76\x07\x20\x79\x84\xd7\xb2\x42\x2c\xe4\x1b\xe6\x1a\xb8\x57\xe4\x9b\x2e\x92\x68\x5e\x5f\x11\xf7\xf5\x51\x5f\x1d\xf3\xab\xa6\xc2\x27\x68\xe6\x33\xe4\xe6\xe3\x7f\x51\xf4\x5f\x9c\x9d\x62\x8f\x94\xa7\xdd\x92\x88\x4f\x9b\x55\x04\xbc\xfa\xdb\xbb\x78\x94\xd6\xb4\x59\x49\xeb\x82\xb1\xa8\x5a\xb5\xbb\x2f\x6b\x2f\x52\x87\x3d\x40\x6e\xd8\x98\x90\xa7\x89\x4b\x8f\x25\x22\x53\xdf\xd2\x15\xd0\x71\x70\x58\xc8\x0c\x7e\x0c\xbe\xee\xdb\xf6\x8e\xa2\x97\x2c\x52\x1e\xb1\xec\x15\x55\x2c\xc4\xe9\x93\xca\x0c\xb4\x64\xcc\xd9\xa2\x48\xda\x3f\x73\xaa\xbf\x5d\x4e\xf5\x1d\x77\x90\xe7\x63\x9c\xae\x22\xd8\x55\x1c\xc6\x22\xee\x60\x70\x19\x16\xd4\x92\x71\x0e\xf5\x43\xa6\x50\xdf\x71\xf3\xb8\x4d\x21\x5a\x94\x39\xc5\x99\x06\xa1\x9e\xce\x05\xe2\xd5\x37\x61\xc0\x47\x6d\x2d\x35\x2d\xa8\xcc\x8b\xe2\xbb\x24\xfb\x32\xd5\x19\x67\x65\xf3\x26\xa7\x58\x46\x9c\x0a\x40\xe0\x13\x21\x81\x8d\xf2\x87\x4e\xa2\x2a\x3f\x52\x92\x5a\x4a\x3c\xc4\xca\x8a\x25\xcf\xea\xda\xb6\x35\x58\x88\x5c\xbd\x49\x7f\x69\x48\x99\x8b\xd3\x07\x62\x2e\x93\x56\xdf\xee\xd4\xf8\x50\x4b\x2b\x2f\x77\x4e\x3c\x31\xd9\x5a\xeb\x75\x03\xbd\x6c\x67\xf1\x92\x81\x7a\x52\xf2\xa8\xde\x66\x54\x29\x31\x76\x3d\x21\xf2\x0c\xa4\x97\x8a\x0b\xf2\x55\x8b\xd7\x6e\x93\x1c\x9f\x45\xee\x75\xc8\xd9\x94\xb8\x73\x6b\x16\xd0\x07\x27\x78\x8a\x85\x66\xb0\x74\xbe\x8a\x28\x0c\x19\x57\xe3\xa9\x15\xc1\x5c\x51\x6b\x11\x9d\xec\x28\xb9\x93\x54\xec\xbb\xd2\x4a\x6a\xb2\xbb\xdc\xdc\xe7\x88\xbf\x1c\x12\x3f\xa9\xe6\x27\xd5\xcc\xff\xfe\x11\x54\xa3\xaf\xf6\xda\x5c\x6f\xa5\xbf\x81\x77\x12\x05\xaa\x50\x09\x2c\x9a\xe1\xab\xf1\x51\xbc\xb1\x7f\x31\xac\x94\x3a\xf7\x6c\xec\x14\xe3\xf1\x93\x9b\x7e\x72\xd3\xfc\xef\x2f\xe3\xa6\x25\x87\xbf\x79\xe1\xa7\x25\xb2\xac\x4e\x99\x95\x00\x15\x5b\x78\x3c\xbc\xc1\x8e\x3c\xc5\x23\xcc\x31\x75\xe6\x18\xc4\xc7\xb3\x4c\x57\xa6\xbe\x71\xc5\x35\x92\x98\x20\x12\xd7\x04\x2d\x6e\x24\x24\x27\xd4\x9b\x17\xdf\x12\xba\x5c\x68\xac\xbc\xa8\x13\x52\x53\x76\x30\x67\xa8\xe4\x58\xd2\x80\x41\xf5\x62\xfc\x54\x28\x19\x3f\x15\x0a\xc6\x4f\xc9\x24\xf2\x8d\xdf\x44\xe2\x40\x3c\xcc\xf1\x95\xbc\x52\x56\x94\x85\x08\x95\xd8\x33\xce\xc7\x95\x71\xcb\xa5\xb4\xcd\xf5\x62\x3a\xf0\x53\x11\xe4\xfb\xc7\xa3\x65\x41\x98\x4e\x99\x42\x10\x98\xe1\x58\x81\xc7\x22\x4c\x40\xcf\x72\xb7\x34\x8f\x2a\xb1\x01\x3d\x90\xa8\x62\xce\x2f\x14\x9f\x2f\x75\xd7\xf9\xb0\xab\x6c\xa4\xc1\x30\xa3\xe6\x41\x80\xa8\x86\xdf\x80\x82\x0e\xa8\x6a\x13\x11\xe7\x68\x56\xa8\xa9\x14\x87\x5a\x03\xb5\x7b\xb1\x85\xe6\x06\xff\x99\x47\x5f\x48\x24\xa3\x05\x8e\x57\x0c\x68\x3e\x81\x5a\xb9\x59\x10\xf9\x92\x5c\xa3\xaf\xd5\x0d\xca\x57\x4a\x90\xa4\x1d\xab\x07\xda\x1d\x7d\x80\x39\xfa\xde\x6c\x55\xe1\x21\x63\x52\x48\x8e\xc2\x33\xfd\x40\xed\x9d\x71\x91\xb7\x1c\x2e\x7d\x46\xe6\x5e\xa3\x52\x93\x11\xe3\x01\x92\x03\x70\x91\xc4\x4d\x49\x02\xbc\xaa\xca\x28\x74\x9f\x56\x65\xe5\x8b\x89\xaa\xe0\xab\xbb\x3c\x29\xc7\xf5\xf7\x9e\xc8\x95\x66\x6b\x8e\x87\x46\xd1\x8e\x46\x4e\x48\x73\x3c\x34\x3a\xf9\x52\xcd\xe9\xa5\xd2\x98\xc3\x4b\xc5\x6a\xfa\x17\xe1\xff\x96\xfb\xa6\xef\xcb\x4a\x05\xf8\xb3\xbf\xfa\x81\x30\x6d\x2e\x8f\x6f\x72\x79\x9a\xaa\xcd\x3f\xe9\xd4\x1a\x54\x40\xea\x0d\xd1\xfc\x52\x9e\xb9\x33\x10\x98\x4a\x90\x0c\x92\xdb\x71\x38\x39\x3e\x3b\xaf\xc9\x12\xd4\x54\x7d\xd8\x3a\xbf\x98\xa2\x4a\xd7\x0b\xf9\xbd\x0e\xdc\x8d\x31\xc7\xc6\xe9\xb8\xe3\x47\x42\xaa\x72\xe2\xfb\x30\xc4\xe9\x6c\x06\x42\x97\xa5\x11\x55\x7c\x97\x47\x08\x4b\x90\x63\x22\x14\x12\x92\x47\x58\xfd\xd7\x61\x74\x44\xbc\xa8\xd2\x04\xc9\x94\x01\x5a\xed\xf6\x97\x52\xef\x45\x02\x2d\xf2\x5b\xc9\x71\x25\x90\x6e\x57\x73\x1d\x2d\x73\xac\x4c\xcb\x15\x77\x36\x4a\xe4\x89\xc0\x2c\x1d\x50\x3d\x17\xa5\x94\x0c\x79\x7e\x4e\xc9\x99\xf4\xa3\x90\x4a\xce\xe8\x46\x36\xc6\xd9\x36\xff\x59\x47\x38\x33\xe3\x85\x8c\xef\xc2\xd7\x23\x2f\x77\x74\x63\x93\x1b\xe5\xf9\x5b\xb9\x56\x58\x3b\xf9\x43\x32\xeb\x01\x5b\xb8\xbc\xa2\x03\xea\x12\x07\xc9\xe4\x98\x4e\xb9\x1c\x53\x1c\x11\x49\x20\xb4\xe0\x32\x21\x1f\xcb\xca\x19\x66\x59\xe0\x13\x7a\xdb\xb2\x96\xd1\x1f\xa9\xe9\xfe\x82\x92\x49\x84\x81\xb8\x98\x4a\x32\x22\x98\xa7\x04\x9b\x74\xbe\x54\xb9\x4b\x44\xe8\xa3\xd9\x75\x2d\x7b\x5b\x47\x06\x75\x17\xd6\x2f\xb5\xde\x26\x4a\x20\x8c\x78\xc8\x04\x16\xcb\xbb\xad\xef\xee\x5d\x14\x20\x0a\x23\x4e\x30\x75\xfd\x59\x85\x77\x79\x1b\x5e\x69\x23\x92\x10\x86\x3f\xd1\x9d\xf8\x73\xb9\x05\x98\xa2\xa1\x8f\x6b\xa0\xbd\x1c\x63\x39\xc6\xbc\xca\x67\x22\xd2\xe6\xb1\xfb\x38\xf4\xd9\x8c\x50\x0f\x10\x85\xe3\xb3\xdd\x74\xd9\xa9\x30\x22\xbf\x68\x56\xe5\x1e\x89\xe2\x22\x49\x55\x87\xf1\x6e\xf6\x4b\x41\x83\xd2\x75\x50\xff\xdb\x79\xbe\x18\x8f\x6d\xb6\xac\x1f\x2e\xb8\x13\xfc\xaa\x82\xba\x10\x65\x47\x2d\xf8\x44\xb8\x47\x28\x41\x4f\x1d\x6d\x89\x11\x4f\x15\x65\x71\x67\x23\x14\xf9\x72\x00\x23\xe4\x0b\xbc\x52\xf8\x15\xcf\x28\xb3\x91\x8a\x5f\x80\xce\x8f\xb7\x4b\xc9\x18\x71\x15\x9c\x1c\x3b\x8c\xcf\x9f\xc3\x16\x0e\x68\x2b\x40\x22\x74\x00\x21\x92\xe3\xa2\x71\xd9\xa3\x42\xf3\x9c\x2c\xb6\xc1\x38\xbf\x2b\x3e\x55\xcd\x3f\x48\x45\x1e\x06\x42\x5d\x7c\x5f\xd2\x6e\x02\xb2\x82\x95\xe5\x03\xe2\xe2\xe9\xdd\x14\xf9\x91\xb1\x40\x9b\xc7\x76\xb1\xd1\xc6\x29\x63\xad\xd1\x47\x51\x30\x8c\x63\x5e\xaf\x97\x40\x28\x60\xe4\x8c\x4d\xa7\x9f\xd0\x8d\xe2\xf1\xe2\xdc\x0d\xdb\x56\x8e\xa4\x77\x42\x7a\x97\x95\xb6\x4b\x2e\x85\xcc\x6e\x55\xf4\xe9\xd2\xa4\x30\xfe\xf1\x36\x39\x25\xf8\xe3\xf2\x3c\xb7\xaf\x1a\x4b\x19\xae\x15\xad\x29\xbc\x5e\x4d\xd5\xc7\x06\x15\x37\x05\xd0\x88\x44\x13\x23\x21\x9b\x46\xe6\x53\xd8\x8d\x41\x03\xdd\x89\x46\x7e\xed\x81\x46\x72\x4d\x87\x42\x22\xe7\x7b\xcd\xc2\x13\xd7\x65\x5d\xe3\xa8\x79\x87\x9f\xa8\xeb\x8a\xcd\xfa\x82\xee\x89\x4a\x1c\x3b\xe4\xec\x6a\xe3\xf4\x63\xef\x8f\xf7\x07\x5b\x1f\xed\xe3\xf3\xe0\xe6\xe3\x5b\xb7\xc7\x9c\xb7\xa7\x5e\x23\x4f\xeb\xd0\xd0\x9b\xde\xac\x74\x1c\xe7\x52\xab\x7c\x85\xb8\x52\x2f\xc9\x69\x1e\x34\x54\x6e\xe6\x63\x89\x57\x45\x63\xbe\x61\x35\xdf\x0d\xd7\x8f\x6c\x7c\xe4\x06\xd0\x40\x21\xb9\xd6\x46\x5e\x27\xa6\xd7\x80\x9c\x55\x55\x1d\xab\x99\x92\xcd\x0e\x11\xb3\x0d\x3e\xe9\xdd\xdc\x92\xad\x89\xcd\x64\x70\x33\x19\x29\x87\x47\xdc\x6b\xa1\x30\x14\xad\x40\x34\x87\x52\x7a\xf6\x0d\xed\x6c\xda\xe3\xb0\x75\xbf\x1e\x6d\xb5\x44\xa7\xe5\xe2\x69\xfc\xb9\x29\xe3\x06\x34\xc6\x51\x9c\x7e\xfd\x6c\x37\x3b\x76\xd3\x5e\x3f\xef\x74\x07\xeb\x9d\x41\xb7\xdf\xb2\xd7\x7b\x9d\x7e\xf7\x4b\xd6\xc2\x38\x69\x2b\xb5\xd8\x18\xf4\x36\x5a\xbd\x8d\x6e\xd7\xde\xfa\x52\x91\xe9\xd6\x47\x4d\xd5\x96\xb2\x91\x8f\xa9\xaa\x50\xcd\x95\xe5\xd6\x53\x68\x6c\x07\xe8\x2b\xa3\x70\x89\x87\xe9\xb7\xbe\x86\x6c\xba\xe2\x65\x63\x5b\xde\x5a\xac\x60\xaa\x99\xd7\xcf\x0d\xad\x08\x8c\x82\x69\x17\x67\xb0\x87\x84\x7c\x05\xc6\x32\x5d\x67\xdb\xe2\x47\xcb\x95\x93\xcf\xee\x95\x26\x99\x71\xd2\xbe\xea\x24\x8b\x1f\x2c\xb7\x73\xda\xf4\xc5\x08\x34\x8e\x77\x0e\x9b\x7b\x9f\x9b\xb9\xaa\xe4\x1a\x04\x1a\x67\xc6\x47\x14\xc9\xe7\x15\xbf\xce\xdf\x59\xe6\x3e\x49\x11\xbf\xa9\x2c\x22\xa2\xf3\x9b\xf6\x57\x10\x09\x1c\x7f\x86\xf1\xbb\x3e\x02\x9a\xaf\xf2\xc6\x1c\x33\xef\x4f\x14\xd3\x5c\x1e\x90\x60\xb2\xef\xf0\xdd\xe8\xc3\x46\x07\x5d\xdc\x1f\x7c\x99\xbc\x39\x9f\x1c\x9d\x26\x88\x96\x5f\xe4\x56\x61\xd6\xb7\xfb\x0f\xc1\xcc\x43\x12\xdf\xa1\x99\x01\x53\x4e\x41\x02\xd3\xfe\xf6\xf9\xde\xe5\xf6\x55\x33\x57\x37\xc7\x69\x95\xc7\xbc\x73\x17\x2a\xbf\x31\xaa\x70\xc4\xda\xb4\x0a\x6e\x68\x2f\x1e\x33\xf0\x9b\x45\x7f\x92\x51\xdf\x2c\xb9\x92\x2c\x0e\x89\x03\xfa\xdb\x2e\xe2\xfe\x6e\x75\xc8\xfb\x9e\x1b\x7d\xba\x3a\x98\x4e\xd7\xaf\xa6\x1f\xfc\xd9\xd7\x4e\xb0\x7f\xda\xfb\x63\x36\x39\xb2\x80\xb2\xe4\x83\xea\x05\x03\xdb\x21\x57\xc7\x9b\x5e\xd7\xdb\x78\x77\xee\x5e\xbc\xbf\x40\xdd\x5b\xf1\x6e\xab\x7b\xfb\x71\xb7\x37\x4b\x30\x29\xbe\x0c\xa8\x9c\x0a\x9d\xa7\x9c\x09\x9d\x85\x13\xa1\x53\x31\xbe\x17\x7a\x1a\x83\x64\x30\xc5\x9c\x8c\x66\x2a\xbd\x88\xdf\x60\x0c\xf4\xab\x60\x95\x19\x01\x8a\xe4\x98\x71\xf2\x35\xfe\x46\x20\x7e\xa1\x31\x87\xa6\x26\xe8\xaf\x7a\x17\xe3\xbd\xf1\x5d\xf0\xf9\x4d\x78\x79\x32\x3a\xe8\xfa\x47\xf8\x36\x74\xfb\x5f\x76\xe3\x36\xe5\xe7\x00\x55\xb1\xf2\xfa\xc9\x62\xe5\x75\x11\x99\xc3\xfd\xdd\xe6\xd9\xde\xe9\xa7\xe6\xf6\xc9\x41\xf3\x75\x09\x9c\x0b\x9a\x7d\xfc\x87\x73\x9d\x16\xa3\x00\xef\x7d\x98\xbe\x7d\x7d\x73\xf8\xf1\x6a\xe3\xca\x1b\x8f\x0e\x5f\x7b\xfb\xa7\xe2\xdd\x74\xef\x32\xf5\x73\xe5\x99\xf1\x1d\xbd\x4d\xc2\xa0\xec\xa7\x15\x3f\x24\xd1\x5f\x0e\xeb\xff\xa1\xc3\x8c\x3a\x02\xcb\xac\x85\x4a\x8d\x89\xda\x43\x49\x96\x7c\x5f\x9c\xc9\xe0\x7b\xd9\xcc\x2d\xfe\xf7\x76\xcf\xa7\xae\x1f\x4c\xec\xc9\xc8\xd9\x14\x44\xa2\x75\xe1\xdf\x4c\xb7\xcc\x5b\x2d\xb5\x17\x4b\xcf\x95\x35\x82\xde\xba\xbb\xb5\x35\xb1\x7d\xee\xb8\xd3\xbe\xb7\x89\xfc\xe1\xa6\xf0\x47\x1e\xbd\xe9\xb9\xe3\xa1\xb8\xf9\x9f\xff\xfa\x75\xef\xf3\xf9\xe9\x36\xfc\x6f\xec\x5c\x4b\xa3\xf2\x7b\xb6\xab\x35\x74\x13\x01\x96\xd5\xb7\xfb\x96\xf5\x4a\x3b\x1e\x17\xec\x7c\xb8\x38\x3b\xdf\x3b\x3d\x6b\x1e\xee\x1f\x9e\x37\x75\x35\x20\xea\x66\x23\x69\x6e\x91\x75\x8b\x8e\xb7\xce\xf8\xba\x3d\x25\x91\xbd\xc9\xb0\x1a\xaa\x31\xbf\x75\xba\x1b\xae\x37\x92\x37\x1d\xe4\x58\xb9\x37\x3a\x3b\x89\x37\xba\x5d\xad\x2f\x96\x41\x2b\xbf\x59\x8b\x89\xe5\x5c\x5c\xf2\xd9\x06\x15\x93\x61\x57\x1c\x05\x6f\x6f\xd6\x87\x9f\xc3\xdd\xcd\x1d\xb4\xf6\x9f\x00\x00\x00\xff\xff\x3f\x9c\x24\xbd\x6e\x44\x00\x00")

func managedServicesApiYamlBytes() ([]byte, error) {
	return bindataRead(
		_managedServicesApiYaml,
		"managed-services-api.yaml",
	)
}

func managedServicesApiYaml() (*asset, error) {
	bytes, err := managedServicesApiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "managed-services-api.yaml", size: 17518, mode: os.FileMode(436), modTime: time.Unix(1606320598, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"managed-services-api.yaml": managedServicesApiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"managed-services-api.yaml": &bintree{managedServicesApiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
