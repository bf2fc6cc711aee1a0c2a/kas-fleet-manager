// Code generated by go-bindata.
// sources:
// ../../openapi/ocm-example-service.yaml
// DO NOT EDIT!

package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ocmExampleServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x6f\xdb\xc8\x11\x7f\xd7\xa7\x18\xa0\x2d\xd4\x02\xb6\x24\x37\xe9\x43\x05\xe4\x21\x49\x93\x22\x41\x12\xa7\x71\xd2\x7b\x38\x1c\xec\x11\x39\x14\x37\x26\x77\x99\x9d\x59\xdb\xca\xdd\x7d\xf7\xc3\x72\x25\x92\xa2\x28\x5a\x0a\x92\xc8\x39\xd8\x4f\xe6\x68\x76\x76\x7e\xf3\xe7\xb7\xc3\xa5\x29\x48\x63\xa1\xa6\xf0\x60\x34\x19\x4d\x06\x4a\x27\x66\x3a\x00\x10\x25\x19\x4d\xe1\xf4\xe9\x6b\x78\x76\x83\x79\x91\x11\x9c\x91\xbd\x52\x11\xc1\xe3\xb7\x2f\x06\x00\x31\x71\x64\x55\x21\xca\xe8\x3e\xb5\x2b\xb2\x5c\xaa\x4c\x46\x93\xd1\xc9\x80\xc9\x7a\xc9\x74\x70\x0c\xce\x66\x53\x48\x45\x0a\x9e\x8e\xc7\x58\xa8\x91\xf7\x84\x53\x95\xc8\x28\x32\x79\x7b\x87\xd7\xa8\x34\xfc\xbd\xb0\x26\x76\x91\x97\xfc\x03\x82\xa9\x2e\x43\x2c\x38\xa7\x7e\x73\x67\x82\x73\xa5\xe7\x2d\x23\xe3\xb6\x5a\xe4\xac\x25\x2d\x10\x9b\x1c\x95\x1e\x14\x28\x29\xfb\xe8\xf8\x6d\xc6\xb1\xd2\x86\xd1\x59\x3e\xcf\xe7\xb9\x8c\xaf\x4e\x6a\x89\xd7\x01\x98\x93\x84\x7f\x00\xd8\xe5\x39\xda\xc5\x14\xde\x91\x38\xab\x19\x10\x32\xc5\x02\x26\x81\x6a\xd1\x4a\x95\x22\x67\x95\x2c\x56\x4b\x01\x8e\xe1\x09\xa1\x25\x3b\x85\x9f\x7f\x59\x0a\x2d\x71\x61\x34\x13\xd7\x5a\xc3\x7f\x4e\x26\xc3\xfa\xb1\x85\xe4\x31\xbc\x3c\x3b\x7d\x03\x68\x2d\x2e\x9a\xbb\x82\x99\x7d\xa4\x48\xb8\xb1\x2e\x32\x5a\x48\x4b\xd3\x14\x00\x16\x45\xa6\x22\xf4\xc6\xc6\x1f\xd9\xe8\xf5\x5f\x01\x38\x4a\x29\xc7\xb6\x14\xe0\xaf\x96\x92\x29\x0c\xff\x32\x8e\x4c\x5e\x18\x4d\x5a\x78\x1c\x74\x79\xfc\x9f\xa5\x0f\xaf\x14\xcb\xb0\xc6\xf1\x70\x72\xd2\x83\xc3\x49\x0a\x62\x2e\x49\x83\x62\x50\xfa\x0a\x33\x15\x1f\xc2\xf9\x67\xd6\x1a\xbb\xe6\xf5\x83\xed\x5e\x7f\xd0\xe8\x24\x35\x56\x7d\xa6\x18\xc4\x40\x41\x36\x31\x36\x07\x53\x90\x2d\xdd\xba\x0b\x08\xfe\xd5\x57\x3f\x1f\x34\xdd\x14\x14\x09\xc5\x40\x7e\x1d\x98\xa8\x6c\x8e\xc3\xc7\xbe\x40\x8b\x39\x09\xd9\xaa\x17\x8e\x3b\x17\xd7\x7a\xe3\x02\xe7\x34\xdc\x55\x99\xd5\xe7\x3d\x94\x09\x6d\x94\xee\xac\x6e\x6c\x4c\xf6\xc9\x22\xe8\x17\x86\x37\xf9\xe2\xa9\x25\x14\x02\x04\x4d\xd7\x55\xd3\xee\xc7\x14\x9f\x1c\xb1\x3c\x31\x71\x43\x6f\x2d\xb5\xab\x36\x84\x18\x05\x2b\x15\xbf\x4e\x59\x8a\xa7\x20\xd6\xd1\xa0\x27\xc7\xfd\x19\xee\xce\xef\x2e\xb4\x30\xec\xe5\xba\x1e\x8e\x08\x31\x3b\x48\x65\xb6\x7d\x2f\x89\xa1\xa7\xad\xfe\xef\xe9\xab\x74\x21\xb4\x15\xdf\x9d\xbe\xba\x67\xe2\x03\x22\xf8\xf7\x76\x04\x55\xbb\x62\x66\x09\xe3\x05\xd0\x8d\xe2\xc3\x1c\xe0\x7b\x9d\x20\x8f\x35\xb8\x6d\x87\x08\x44\xbe\x65\xfd\x40\x26\x29\xb5\x69\xee\x30\x90\x6e\x1b\xf1\xc6\xbf\xaa\xf8\xf7\xed\x73\xde\x7f\x49\x00\x75\x3d\x66\xcd\x16\x50\x75\xc7\xb7\x99\xf0\xaa\xba\x48\x8c\xd3\xf1\xda\x86\xdf\x35\x82\x9d\x14\x78\xcf\x23\x87\x41\xf0\x70\x3b\x82\x37\xa6\xae\xce\x6b\x25\x29\x70\x41\x91\x4a\x14\xc5\xa0\xe2\x1f\x85\x54\xee\xea\x58\x5a\xa0\x44\xe9\x06\x29\x7c\x28\xe2\x72\x98\xd3\xdf\x68\x92\x0b\xf6\xe3\x3a\xaf\x77\x6c\xa2\x7b\xeb\xa3\xf2\x2e\xc0\xe8\x9f\xee\x76\xe1\x39\xb7\x44\xcb\x2e\x8a\x88\x39\x71\x59\xb6\xb8\x33\x84\x77\x3f\xf3\x7d\x67\xaf\xef\xb9\xfa\x4e\x80\xf8\x13\x0e\xae\x1b\x67\x4c\x49\x3c\x7e\x58\xbd\x13\x83\xea\xe6\x0d\xc8\xad\xd7\x0e\x2a\x1e\x0e\xea\x5f\xfc\xa2\xd5\x01\x74\xe6\xad\xaf\xb8\x78\x79\x02\x2d\xdd\x92\x45\x41\xe1\x9e\x75\xd0\xf0\x9a\xa6\x30\x2b\xd5\x96\xc2\xf0\xf0\xdc\xd8\x1c\x65\x0a\x2f\x7f\x7a\x3f\x58\xc1\x5b\x1a\x3d\x2d\xef\x1b\xdf\x51\x42\x96\x74\x44\xeb\xd6\xc3\x65\xe4\x52\x54\x58\xdf\xa0\xa2\x9a\x47\x83\x8a\x9b\x51\x0a\x8b\x58\xac\xd2\xf3\x4a\x7c\xa9\xf4\xed\x4a\xa9\x0f\x50\x9f\xd2\x2b\x55\x5f\xc6\xec\xe8\xdb\x4e\x1b\x17\x38\xa7\x4d\x25\xa5\x85\xe6\x54\xd7\x11\xab\xcf\x3b\x68\x89\x11\xcc\x6e\x53\xab\x4e\xfd\xc6\x68\xe1\x3d\x6d\x3c\x7a\x9f\x1a\x8f\x7e\xf3\xc6\x63\xb9\x4b\xe3\x59\x09\xe5\xa1\x69\xcb\x12\x5c\xd9\xc5\x2c\x3b\x4d\xfa\x6f\xe0\x56\xa5\xdb\x2a\x81\xfa\xb6\xac\x23\xd0\xdd\xa1\xf6\x7d\x16\xd3\x7a\xc3\x74\x86\xdb\xe3\xc7\x8d\x8e\xdb\xa2\x5a\x9d\x07\xe7\xeb\x65\xd6\xb1\xa0\x84\xde\xac\x91\x3d\xe0\x37\xaf\xbb\xf7\xc2\x5c\x46\xbe\xcb\xb1\xf2\x56\x7f\x4d\xde\xa1\xba\x33\x9d\xac\x78\xfa\x40\x99\x2d\x8f\x36\xea\xc4\xd9\x48\x40\xf3\xdb\xc1\x8f\x94\x83\x35\x1f\x57\x7f\xfd\xbe\xae\xcf\x97\x5d\xb3\xf4\x9e\x44\xd5\x11\xe1\x56\x7c\xdb\x27\x4a\xdd\x0f\x1a\x3d\xe5\x57\x43\x9f\xd2\x53\xff\xae\x93\x2e\x1f\xd7\xce\xcd\xf7\x29\xf9\xe9\xc4\x24\x60\x29\x32\x36\x6e\x13\x52\xf3\x35\xa4\x7d\x02\x6e\xe4\xbb\xc9\x9b\xc1\x87\x06\x6b\x79\x2f\x3e\x39\xb2\x8b\x2e\x37\xde\xe2\x9c\x40\xbb\x7c\x46\xb6\xf6\x25\x7c\x7d\xbb\x4e\x49\xaf\x09\xe8\x26\x22\x8a\xb9\x31\x5e\xf9\x5d\x9a\x8c\xd8\xed\x68\x9b\x99\x63\x4a\xd0\x65\x32\x85\x93\x4a\x94\x2b\xad\x72\x97\xd7\xa2\x3a\x0e\x09\x66\x1c\xec\x37\x79\x3f\xa0\x6c\x6c\xdd\x8b\xf2\x35\xde\x78\xf3\x1b\x40\xd9\x0f\xbc\xb6\xfc\xe8\xf8\x85\x08\x26\x93\x4d\x0c\x93\x3e\x0c\xe5\x27\x90\x16\x8a\x52\xb6\x05\x47\x97\x91\x16\xba\xdf\x8e\x2b\x1f\xce\x96\xa9\xe1\xf2\xaa\x30\x18\x86\xc8\x2a\x21\xab\x70\x54\x16\x1d\x2f\xb4\xe0\x8d\x8f\x81\xa4\x8a\xeb\x62\x06\xc5\x8d\x13\x36\x57\x19\x5a\x1f\x1d\x69\x2d\x21\x38\xbf\x4e\xc9\xd2\x39\x44\x19\x3a\x26\x2f\x45\x0d\x67\xff\x7b\x05\x2c\x28\x94\x93\x96\xa3\xca\x90\xe3\xd5\xb5\xa5\x87\xca\x2b\x13\x7e\xcc\x03\x14\xb1\x6a\xe6\x84\x18\xc6\x10\x99\xcc\xe5\x7a\x5d\x0b\xa3\xc8\x38\x2d\x23\xa8\xcc\x3d\x37\x16\x28\x7c\x49\x3f\x02\xa5\xa1\xfc\x42\xb4\xcc\xa1\x55\x74\x45\x9e\x41\x9a\x6b\x39\xbc\x10\x20\x38\x26\xeb\x8d\xd7\x10\x05\x6d\x39\xa6\x96\x0a\x17\xf9\xe2\x62\x3a\xa8\x7e\xbc\xb8\xb8\xe0\x4f\x59\x03\x45\x58\x0c\x99\xba\x24\x18\xe6\x8b\xbf\x0d\x9b\xaa\xf5\xba\xf7\x9b\x41\x87\x08\x35\x60\xc6\x06\x66\x14\x46\x5d\x8a\xc1\xf8\xc6\xca\xca\xf7\x73\x4b\x6c\x9c\x8d\x68\xf4\x05\x20\xd9\xcd\xaa\x32\x60\xc8\x70\x46\x19\x95\x77\x9b\x17\x89\x31\x8f\x66\x68\x2f\x8e\xb6\x62\x6a\xae\x3d\x2f\x97\xf2\xe8\x92\x16\xf0\x08\x86\x89\x31\x43\x40\x1d\x77\xea\x5c\x61\xe6\xc8\x6b\xcd\xd0\x6e\x89\xc2\x8b\x90\xbe\x66\x65\xe9\xa1\x78\xb2\xbd\x52\x31\xc5\x47\x60\x2c\xa8\xa0\x13\xac\x29\x06\xca\x0b\x59\x1c\x79\x59\xfd\xbe\xb9\x91\x4b\x49\x51\x4a\x89\x4f\x08\xa4\xc8\xfe\x65\x35\x57\xcc\xca\x68\x1f\x20\x26\x82\x6b\x95\x65\x30\xab\xf3\x1c\xba\x9b\xe2\xd1\xae\x5c\xba\xfc\xea\xb8\xde\xa2\x4b\xe1\x37\xe8\xd1\x90\xdd\xd9\xe2\xab\x77\xe9\xca\xf0\x6e\x8d\x3a\x73\xb2\x77\xb3\xb6\xda\x74\xcf\x02\xae\xb2\x5a\xfe\x1c\xea\x76\xd5\x68\x3b\xb4\x22\x72\xd4\x5d\x7d\xa7\xf6\xcb\xf6\x84\x73\xd4\xf1\x39\x24\xca\xb2\xc0\xee\x4e\x1c\x85\x15\x6f\x7a\x7d\xfa\x5a\x1d\xa1\x0d\xd0\x8d\x7f\x5b\x56\x12\x20\x04\x02\x2b\x2b\x7e\x45\x2e\x3b\x15\xfa\x1f\x01\x00\x00\xff\xff\x81\x4f\xdc\x27\xd8\x24\x00\x00")

func ocmExampleServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_ocmExampleServiceYaml,
		"ocm-example-service.yaml",
	)
}

func ocmExampleServiceYaml() (*asset, error) {
	bytes, err := ocmExampleServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ocm-example-service.yaml", size: 9432, mode: os.FileMode(436), modTime: time.Unix(1574366047, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ocm-example-service.yaml": ocmExampleServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ocm-example-service.yaml": &bintree{ocmExampleServiceYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

