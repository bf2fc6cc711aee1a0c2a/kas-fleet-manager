// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/managed-services-api.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _managedServicesApiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x19\x5d\x6f\xdb\x46\xf2\x5d\xbf\x62\x80\xbb\x83\xee\x00\x5b\x92\x2f\xe9\x43\x05\xe4\xc1\x49\x9b\x22\x69\x1c\xa7\x71\xd2\x02\x2d\x0a\x79\xb4\x1c\x8a\x1b\x93\xbb\xcc\xee\xac\x6d\xa5\xed\x7f\x2f\x76\x97\x12\x29\x89\xfa\x0a\x92\xc8\x29\xac\x27\x71\x38\x33\x3b\xdf\x33\x3b\xd4\x25\x29\x2c\xe5\x10\x1e\xf4\x06\xbd\x41\x47\xaa\x54\x0f\x3b\x00\x2c\x39\xa7\x21\x9c\x3f\x39\x83\x33\x54\x38\xa1\x04\x2e\xc8\x5c\x4b\x41\x70\xfa\xea\x59\x07\x20\x21\x2b\x8c\x2c\x59\x6a\xb5\x09\xed\x9a\x8c\x0d\x28\x83\xde\xa0\x77\xd2\xb1\x64\x3c\xc4\x9f\x70\x0c\xce\xe4\x43\xc8\x98\x4b\x3b\xec\xf7\xb1\x94\x3d\x2f\x8b\xcd\x64\xca\x3d\xa1\x8b\x0e\xc0\xd2\x29\x67\x28\x15\xfc\xb7\x34\x3a\x71\xc2\x43\xfe\x07\x91\x5d\x3b\x33\xcb\x38\xa1\x6d\x2c\x2f\x18\x27\x52\x4d\x56\x18\xf5\x57\x51\x85\x33\x86\x14\x43\xa2\x0b\x94\xaa\x53\x22\x67\x41\x0f\x7f\x58\x5f\x8b\xe2\x98\x6e\xb1\x28\x73\x3a\xb6\xd1\x00\xfd\xeb\x93\xfe\x15\xa6\x57\x18\xb0\x00\x26\xc4\xf1\x0f\x80\x75\x45\x81\x66\x3a\x84\xd7\xc4\xce\x28\x0b\x08\xb9\xb4\x0c\x3a\x85\x48\x31\xc3\x23\xe1\x8c\xe4\xe9\x8c\xce\x8b\xf7\x98\xd0\x90\x19\xc2\x6f\xbf\x57\x40\x43\xb6\xd4\xca\x92\xad\xb1\xba\xff\x1f\x0c\xba\xf5\xe3\x92\x22\xa7\xf0\xfc\xe2\xfc\x25\xa0\x31\x38\x9d\x1f\x09\x7a\xfc\x8e\x04\xdb\x06\x91\xd0\x8a\x49\x71\x93\x0f\x00\x96\x65\x2e\x05\x7a\x4e\xfd\x77\x56\xab\xc5\xb7\x00\x56\x64\x54\xe0\x32\x14\xe0\xdf\x86\xd2\x21\x74\xff\xd5\x17\xba\x28\xb5\x22\xc5\xb6\x1f\x71\x6d\xff\x47\x2f\xc0\x0b\x69\xb9\x5b\x6b\xf0\x70\x70\xb2\x41\x03\xc7\x19\xb0\xbe\x22\x05\xd2\x82\x54\xd7\x98\xcb\xe4\x10\x92\x7f\x6f\x8c\x36\x0b\x52\x3f\x58\x2f\xf5\x5b\x85\x8e\x33\x6d\xe4\x07\x4a\x80\x35\x94\x64\x52\x6d\x0a\xd0\x25\x99\x20\xd6\x5d\xd0\xe0\x9b\x4d\x91\xf3\x56\xd1\x6d\x49\x82\x29\x01\xf2\x74\xa0\x45\xc8\x8a\xc3\xdb\xbe\x44\x83\x05\x71\x55\x5a\xe2\xef\xb8\x95\xbc\xc6\xec\x97\x38\xa1\xee\xee\xe8\x56\x7e\xd8\x0b\x9d\xd0\x88\x6c\x0f\x02\x6d\x12\x32\x8f\xa7\x91\xa2\xd4\x76\xb5\x5c\x3c\x31\x84\x4c\x80\xa0\xe8\x26\xa6\xed\x7e\x85\xe2\xbd\x23\xcb\x8f\x75\xd2\xc0\x5b\xf0\x6f\x48\x44\x48\x90\x71\xfe\xde\x13\x49\x43\xc9\x10\xd8\x38\xea\x6c\xf0\xf2\x66\x1f\xb7\x7b\x78\x6b\x55\xe8\x6e\x2c\x72\x1b\x4a\x44\x34\xd5\x41\x02\x73\x41\xf0\x50\x14\x36\xa4\xd4\xcf\xbe\x74\x85\xf3\x63\x4a\xd9\xbb\x93\x53\xf7\x55\xf8\x80\x1a\x7c\xbb\x5e\x83\x98\xa5\x98\x1b\xc2\x64\x0a\x74\x2b\xed\x61\xda\xf6\x5e\xad\xe3\x54\x81\x5b\xd7\x3d\x40\xf8\x64\xf5\x63\x18\x67\xb4\x50\xd7\x0e\xa3\xcf\xf6\x89\xae\xff\x87\x4c\xfe\x5a\x3f\xd6\xfd\x40\x0c\xa8\xaa\xc1\x6a\x3c\x85\x79\x5a\x7c\x9e\x81\x2e\x06\x44\xaa\x9d\x4a\x16\x4e\xfb\xa2\xd6\x5b\xad\x7a\xf7\xa5\xe3\x30\x1a\x3c\x5c\xaf\xc1\x4b\x5d\x05\xe5\x8d\xe4\x0c\x6c\x49\x42\xa6\x92\x12\x90\xc9\xd7\x52\x47\xee\xea\x08\x5a\x22\x8b\x6c\xa5\x10\xbc\x2d\x93\x30\xb0\xa9\xcf\x31\xad\x45\xe6\x49\xe5\xd1\xbb\x34\xb5\xbd\xf2\xc6\x78\x1d\x15\xd8\x3c\xc1\x6d\xad\x6a\xae\x52\xd2\x3a\x21\xc8\xda\xd4\xe5\xf9\xf4\x6e\x94\xb7\xfb\xa1\xee\x0b\x4b\x7d\x5f\x99\x0f\xaf\xc1\x3f\x6d\x2c\x5d\x69\x27\xa1\xde\xf8\x51\xf4\xf0\x63\x68\xdb\x56\x63\xeb\x12\x41\x26\xdd\x4e\xfd\xc6\x93\xcd\xba\xcd\x85\xe7\x3f\x2b\xbf\x55\xbb\xa9\xb8\xf2\xb4\xa4\xb8\x3c\xed\x34\xe4\xa6\x21\x8c\x03\x5a\x05\x8c\x0f\x4f\xb5\x29\x90\x87\xf0\xfc\x97\x37\x9d\x99\x82\x15\xd3\xf3\xb0\x42\x7c\x4d\x29\x19\x52\x82\x16\xb9\xc7\xfd\x62\x05\x2a\x8d\xcf\x4c\x96\xcd\x6e\x20\x93\xa6\x9d\x22\x91\x65\x23\xd5\x64\x0e\xbe\x92\x6a\x3b\x52\xe6\x0d\xb4\x09\xe9\x85\xac\x57\x2b\x3b\xca\xb6\xd3\xc1\x25\x4e\x68\x15\x49\x2a\xa6\xc9\xdc\x86\x00\x56\x7e\xd8\x01\x8b\x35\x63\xbe\x0d\x6d\xde\xe5\x1b\x73\x84\x97\xb4\xf1\xe8\x65\x6a\x3c\xfa\xc3\x1b\x8f\xe1\x94\xc6\xb3\x64\x2a\x62\xce\x86\x20\x9c\xf1\xc5\x3c\x3f\x4f\xb7\xed\xd5\x66\xe1\xbb\x14\x04\xcd\xfd\x57\x8b\xb1\xd7\x19\x1c\x42\xc6\x25\xb4\x9c\x3a\xad\x86\x8f\xb6\xc0\x96\xfc\x5b\x8b\x3e\x6f\x0c\xa3\xc5\xb0\x6b\x25\x0a\xc6\x68\x46\xcd\x5e\x06\x59\x5c\x6c\xef\x6d\x85\xe0\x93\x76\x11\xc3\x06\x7f\xe9\x4d\x2b\xfa\xce\x05\x27\xd4\xf0\x43\xbb\x3d\x77\x96\xc9\x3c\xfb\x6e\x67\x67\x5a\x46\x76\x6b\x6c\xd4\x82\x2e\x72\xed\x92\x51\x69\xf4\xb5\x4c\xea\x1a\xb8\x95\xac\x70\x39\xcb\xd3\x5f\xf7\x88\xc8\x89\xdc\x23\x22\x15\x16\xbb\x47\xbb\x88\xdb\xcd\x11\xf2\xce\x24\x00\x69\x55\xb9\xfd\x40\x7d\xcc\xb2\xa0\x85\xf7\xd5\xa0\xfd\x29\x58\xce\xbf\xe7\x7c\xbd\xf9\xb2\x24\x71\xfd\xdb\x2c\x7b\xe3\x96\xb0\x72\x11\xda\xb3\xe5\x54\x69\x30\xda\xd8\x16\x97\x07\x84\x1a\x39\x84\x53\xbd\x0a\x92\x6a\xe8\xaf\xa8\x59\xf5\xb8\x30\x03\xbd\xc9\xc8\x8f\x99\x3a\x05\x43\x42\x9b\x64\xb9\xbb\x34\xef\x90\xcb\x03\xcd\x4a\x6c\x34\x9b\x60\x94\xa1\xd1\x82\xbc\x14\xef\x1d\x99\x69\x9b\x18\xaf\x70\x42\xa0\x5c\x31\x26\x53\xcb\x12\xbf\x8b\xde\x64\xa4\x16\x00\x74\x2b\x88\x12\xdb\x98\x93\xfd\x29\xcd\xf6\xd6\x2e\xe8\x72\x9b\x4d\x28\x45\x97\xf3\x10\x4e\xe6\xa0\x42\x2a\x59\xb8\xa2\x06\xd5\x76\x48\x31\xb7\x91\x7f\xb3\x89\x47\x2d\x1b\x47\x6f\xd4\xf2\x0c\x6f\x3d\xfb\x15\x45\xad\xbf\xb6\x98\xf0\x39\xf8\x23\x35\x18\x0c\x56\x75\x18\x6c\xd2\x21\x7c\x9f\x5a\xd2\x22\xc0\xd6\xe8\xd1\xc6\x64\x49\xbb\x3f\x8f\xe7\x32\x5c\x54\xae\xb1\x61\xa9\x1b\x19\x83\x30\x92\xc9\x48\xec\x85\xa0\xb3\x53\xc5\x78\xeb\x6d\xc0\x99\xb4\x75\x30\x83\xb4\x8d\x71\xa9\x90\x39\x1a\x6f\x1d\x5e\x22\x21\x18\xdd\x64\x64\x68\x04\x22\x47\x67\xc9\x43\x51\xc1\xc5\x4f\x2f\x42\x47\xa0\x82\x14\x1f\xcd\x19\x39\x3b\x5b\x30\x7b\x55\xed\x8c\x85\x9f\xda\x01\x99\x8d\x1c\x3b\x26\x0b\x7d\x10\x3a\x77\x85\x5a\xc4\x42\x21\xb4\x53\xdc\x83\x39\xbb\xa7\xda\x40\xb5\x1e\x3e\x02\xa9\x20\x7c\xbc\xab\x7c\x68\x24\x5d\x93\x2f\x21\x4d\x5a\x1b\x6f\x76\x08\xce\x92\xf1\xcc\x6b\x15\x19\x4d\xb8\x72\x04\x84\xcb\x62\x7a\x39\xec\xcc\x5f\x5e\x5e\x5e\xda\xf7\x79\x43\x8b\x48\x0c\xb9\xbc\x22\xe8\x16\xd3\xff\x74\x9b\xa8\x35\xdd\x9b\x55\xa3\x83\x40\x05\x98\x5b\x0d\x63\x8a\x37\x17\x4a\x40\xfb\xc4\xca\xc3\x8a\xc5\x90\xd5\xce\x08\xea\x7d\x84\x92\xd6\x8d\xe7\x61\x60\x21\xc7\x31\xe5\x14\x96\xd1\x97\xa9\xd6\x8f\xc6\x68\x2e\x8f\xd6\xea\xd4\xa4\x1d\x05\x52\xdb\xbb\xa2\x29\x3c\x82\x6e\xaa\x75\x17\x50\x25\xad\x38\xd7\x98\x3b\xf2\x58\x63\x34\x6b\xac\xf0\x2c\xba\xaf\x19\x59\xaa\xcb\x50\xf5\xfe\xe4\x08\xb4\x01\x19\x71\x22\x37\x69\x81\x8a\x92\xa7\x47\x1e\x56\x6f\x0d\x56\x7c\xc9\x19\x72\x80\x78\x87\x40\x86\x16\x4a\x32\x85\xb4\x56\x6a\xe5\x0d\x64\x89\xe0\x46\xe6\x39\x8c\x6b\x3f\xc7\xec\xa6\xa4\xb7\x6b\x2d\xad\x3e\x08\x2f\xa6\x68\x05\xfc\x0c\x39\x1a\xbd\x3b\x9e\x7e\xf2\x2c\x9d\x31\xde\x2d\x51\xc7\x8e\xf7\x4e\xd6\xa5\x34\xdd\x33\x80\xe7\x5e\x0d\xaf\x63\xdc\xce\x12\x6d\x87\x54\x44\x2b\xda\xa3\xef\xdc\x7c\xdc\x99\x30\x42\x95\x8c\x20\x95\xc6\x32\xec\x2e\xc4\x51\xa4\x78\xb9\x51\xa6\x4f\x95\x11\x4a\x03\xdd\x96\xb9\x14\x92\xa3\x0a\xb1\x80\x85\x88\x9f\x15\x97\x9d\x02\xfd\xef\x00\x00\x00\xff\xff\xf2\x95\xc6\x46\x80\x26\x00\x00")

func managedServicesApiYamlBytes() ([]byte, error) {
	return bindataRead(
		_managedServicesApiYaml,
		"managed-services-api.yaml",
	)
}

func managedServicesApiYaml() (*asset, error) {
	bytes, err := managedServicesApiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "managed-services-api.yaml", size: 9856, mode: os.FileMode(436), modTime: time.Unix(1599549945, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"managed-services-api.yaml": managedServicesApiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"managed-services-api.yaml": &bintree{managedServicesApiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
