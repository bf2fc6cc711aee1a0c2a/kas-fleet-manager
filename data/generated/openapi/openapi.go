// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../openapi/managed-services-api.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _managedServicesApiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x73\xdb\x36\x10\xbe\xeb\x57\xec\xb8\x9d\x49\x7b\xb0\x28\x27\xe9\xa1\xbc\x39\x4d\x1f\xe9\x2b\x9d\x38\x6d\x0f\x9d\x8e\x07\x06\x96\xe2\xc6\x24\x80\x02\x4b\x3b\x72\xa7\xff\xbd\x03\x90\x34\x21\x8a\x96\xa5\x3e\xc6\xca\x8c\x7d\x32\xa0\xc5\xe2\xdb\x0f\xbb\x1f\x16\x34\x16\xb5\xb0\x94\xc3\xb3\xf9\x62\xbe\x98\x91\x2e\x4c\x3e\x03\x60\xe2\x0a\x73\xf8\x41\x68\xb1\x44\x05\x67\xe8\xae\x48\x22\x9c\xfe\xf4\x6a\x06\x70\x85\xce\x93\xd1\x39\x2c\xe6\x8b\xf9\xc9\x0c\x40\xa1\x97\x8e\x2c\xc7\xc9\xa9\x35\x1e\x5d\x58\x14\x3c\x1f\x43\xe3\xaa\x1c\x4a\x66\xeb\xf3\x2c\x13\x96\xe6\x01\x83\x2f\xa9\xe0\xb9\x34\xf5\x0c\x60\xc3\x21\x69\xf8\xc4\x3a\xa3\x1a\x19\x66\x3e\x85\xd6\xdd\xb4\x33\xcf\x62\x89\xf7\xb9\x3c\x63\xb1\x24\xbd\xdc\x70\x94\x6d\x9a\xca\xc6\x39\xd4\x0c\xca\xd4\x82\xf4\xcc\x0a\x2e\x63\x1c\x61\xb3\xac\x6e\x63\x3d\xf6\x6d\xac\xfe\x38\x4c\x5e\x9d\x64\x97\xa2\xb8\x14\x3e\xfb\x93\xd4\x5f\x79\x74\xb9\x44\x6e\xff\x01\x70\xe8\xad\xd1\x1e\x7d\x3f\x01\x70\xf4\x74\xb1\x38\x1a\x86\x00\xd2\x68\x46\xcd\xe9\x14\x80\xb0\xb6\x22\x29\x02\xac\xec\x9d\x37\x7a\xfd\x57\x00\x2f\x4b\xac\xc5\x78\x16\xe0\x63\x87\x45\x0e\x4f\x3e\xca\xa4\xa9\xad\xd1\xa8\xd9\x67\xad\xad\xcf\xbe\x0b\x40\xdf\xe0\x1f\x0d\x7a\x7e\x92\xac\x5c\xa3\x20\x1a\x81\x6b\xad\xa0\x30\x8d\x56\x70\xb1\x02\x52\x43\x00\xcf\x17\x27\x0f\x13\xc0\x97\xce\x19\x77\x27\xf2\xd3\x86\x4b\x60\x73\x89\x1a\xc8\x03\xe9\x2b\x51\xad\xa3\x7e\x76\x88\xa8\x7f\xd6\xa2\xe1\xd2\x38\xba\x41\x05\x6c\xc0\xa2\x2b\x8c\xab\xc1\x58\x74\x11\x47\x1a\xc1\xf3\x43\x8c\xe0\x47\x03\x97\x6b\x49\x73\x4d\x5c\x82\xb7\x28\xa9\x20\x54\x40\x0a\xf0\x3d\x79\xf6\x43\x24\x9f\x3d\x54\x09\xdc\x77\x16\xf8\xde\xa2\x64\x54\x80\xc1\x10\x8c\x8c\x8a\xd0\x67\x91\x47\xd9\x38\xe2\xd5\xb0\xe7\x31\xbc\x40\xe1\xd0\xe5\xf0\xdb\xef\xbd\x51\x53\xd7\xc2\xad\x72\xf8\x1a\x19\xc4\x88\x9a\xa1\x92\x14\x56\xc8\xb8\x5d\x27\x9e\x1e\x22\x49\x2f\x23\xf0\x47\x39\xf8\x7f\x50\x3f\xca\xc1\xe1\x44\x72\xaf\x1c\xf4\x95\xde\x96\xc4\x96\x62\xb7\xc2\x89\x1a\xb9\xeb\x8a\x20\x0a\x47\x8b\xeb\x68\x0d\xd7\x60\x97\x91\x3a\xda\xad\xf1\x68\x3d\x5a\xe3\x93\xa6\x23\xee\xff\xc2\xa8\x44\xa9\x26\x2e\x79\x25\x58\xcc\xb6\x70\xbe\x9d\xf1\x69\xbe\xf7\xef\x3f\x02\x5a\x72\xa8\x72\x60\xd7\xe0\x21\xea\xe1\x4e\x7d\xd3\xa9\x94\x68\x47\xba\x78\x90\x59\xfd\x4b\xd0\xc1\xb8\x61\x9b\xd5\x7e\x9c\xd6\x8f\x92\xfe\x80\x92\xfe\xf9\x21\x46\xd0\xca\x85\xa8\x1c\x0a\xb5\xfa\x50\xd4\xfb\x54\x43\x73\x97\x80\x83\x74\x28\x38\x3c\x0a\xb9\xc4\x2e\xbc\xae\xc0\xff\x51\xab\xf7\x45\x70\x17\x2e\x00\x8d\xd7\xdd\x25\xd0\xbb\x1b\x70\x07\x57\x1d\xf4\xd6\xeb\xeb\x8b\x77\x28\xf9\x0d\x16\xe8\x50\xcb\xdb\x5e\x90\x57\x16\x73\x30\xf1\xc7\x6e\xca\xba\x90\x2c\x4c\xa9\x1e\x92\x4a\xd9\x6a\x17\x79\x76\xa4\x97\xb7\xd3\x97\xa4\xef\x37\x2a\x03\xc3\xdb\x8c\xbe\xa7\xf5\xab\x25\x8a\x75\x42\x4b\xd8\x25\x19\x5a\xb1\xc4\x64\xe8\xe9\x26\x1d\xb2\x61\x51\x25\x63\x62\xac\xfd\x7e\x81\xef\x14\x55\x40\xb1\x69\x44\x9a\x71\x19\xbf\x01\x74\x07\x48\x37\x3b\x58\x45\xcc\xdb\xcd\x62\x2a\xf6\x26\xa2\xaa\x5e\x17\x29\x43\x53\x57\x7d\x9f\xc4\xa3\x24\x38\x4a\xb9\xda\xe4\xe3\x2e\x4e\x20\xd6\x9d\xc2\x71\x01\x4d\x72\x03\xf1\x20\xc5\x44\x15\xde\x69\x7e\xab\x55\xe7\xeb\x69\x37\xb9\x28\x92\x91\x66\xcd\x5e\x84\x84\x85\xff\x82\x85\x98\x50\xd3\x10\x85\x73\x62\x35\xfa\x65\xd2\x1c\xb6\x02\x8c\xe1\xb5\x08\xd3\xce\xe0\xa1\x4f\xbf\x6a\x3c\xa3\x7b\xf5\x72\xe7\x33\xf5\x2c\xb8\xb9\x83\xaa\x09\x73\x59\x99\x46\x9d\x5b\x67\xae\x48\xa1\xdb\x79\x59\xdd\x54\x4c\xe7\xe2\x66\x7a\xc1\x85\x31\x15\x0a\x3d\x4a\xcd\x25\xed\x93\x9a\xd7\x7a\x0f\x38\x5a\xd4\xbb\x17\xc9\x85\x31\xec\xd9\x09\x7b\x16\x3f\x1d\x7e\x93\xf4\xd8\xf7\xd3\x15\xaf\x04\x75\x2e\x36\x96\x84\xcb\x5f\x70\x1e\xda\x6f\x3c\x66\xaa\x71\x57\x97\x8d\x55\xff\x95\xcb\x34\x71\x3f\xec\x4a\x1d\x21\x1e\xfe\xb6\x63\x4f\x09\x08\x31\x8c\x5f\x68\x83\xcc\xc5\x8c\x19\xbe\x7f\xae\xf5\x18\x6f\x4b\x0c\xef\x59\x53\x80\x43\x69\xdc\xed\xc3\x70\xd4\xcc\x4c\x9c\x28\xe9\x1c\xac\xe0\x72\x7c\xaf\xf6\x8f\xa0\xbe\xff\x38\x0b\xae\x7a\xe6\xba\x06\x24\xdd\x25\xd4\x50\x9c\xed\x26\xdb\xc1\x57\x5d\x3e\x7c\xfb\xeb\xdb\xb5\xbb\xb5\x64\xb6\x7f\x07\x00\x00\xff\xff\x11\x28\x40\x5b\x05\x18\x00\x00")

func managedServicesApiYamlBytes() ([]byte, error) {
	return bindataRead(
		_managedServicesApiYaml,
		"managed-services-api.yaml",
	)
}

func managedServicesApiYaml() (*asset, error) {
	bytes, err := managedServicesApiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "managed-services-api.yaml", size: 6149, mode: os.FileMode(436), modTime: time.Unix(1601284846, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"managed-services-api.yaml": managedServicesApiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"managed-services-api.yaml": &bintree{managedServicesApiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
