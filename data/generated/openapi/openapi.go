// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/managed-services-api.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _managedServicesApiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x5f\x6f\x1b\x37\x12\x7f\xd7\xa7\x18\xe0\xee\xa0\x3b\xc0\x96\xe4\xe4\xee\xe1\x04\xe4\x21\xb9\x6b\x80\xb4\x49\x93\xc6\x69\xfb\x50\x14\xf2\x88\x9c\xd5\x32\xde\x25\x37\xc3\xa1\x6d\x05\xfd\xf0\x05\xb9\xab\x15\xf5\xd7\x72\x9a\x22\xa9\x9e\xb4\xc3\x99\xe1\xef\x37\x9c\x3f\xa4\x6b\xc8\x62\x63\xa6\xf0\x78\x34\x19\x4d\x06\xc6\x16\x6e\x3a\x00\x10\x23\x15\x4d\xe1\x15\x5a\x5c\x90\x86\x4b\xe2\x1b\xa3\x08\x9e\xbe\x79\x31\x00\xd0\xe4\x15\x9b\x46\x8c\xb3\x87\x54\x6e\x88\x7d\x5a\x9e\x8c\x26\xa3\x8b\x81\x27\x8e\x92\xe8\xf9\x1c\x02\x57\x53\x28\x45\x1a\x3f\x1d\x8f\xb1\x31\xa3\x88\xc1\x97\xa6\x90\x91\x72\xf5\x00\x60\x67\x07\x63\xe1\x9f\x0d\x3b\x1d\x54\x94\xfc\x0b\x5a\x77\xfb\x9d\x79\xc1\x05\xdd\xe7\xf2\x52\x70\x61\xec\x62\xc7\xd1\x78\x57\x55\x05\x66\xb2\x02\xda\xd5\x68\xec\xa0\x41\x29\x13\x8f\xb8\xd9\xb8\x6e\xc9\x9f\xfb\x96\xbc\x3f\x8f\xc2\x9b\x8b\xf1\x35\x16\xd7\x98\xd4\x00\x1a\xe7\xa5\xfd\x07\xe0\x43\x5d\x23\x2f\xa7\xf0\x3f\x26\x14\x02\x04\x4b\xb7\x90\xb4\xe1\x2d\x7d\x08\xe4\x65\xa5\x49\x2a\xb0\x91\xe5\xca\x32\x42\x7c\x46\xc8\xc4\x53\xf8\xe5\xd7\x4e\xc8\xad\xc9\x33\xa7\x33\xbd\x0d\xf4\xdf\x25\xd7\x1a\x05\xfb\xf5\x68\x64\x98\xf4\x14\x84\x03\xf5\x62\xe5\xac\x90\x95\xb5\x1f\x00\x6c\x9a\xca\x28\x8c\x9e\xc6\xef\xbd\xb3\xf9\x1a\x80\x57\x25\xd5\xb8\x29\x03\xf8\x3b\x53\x31\x85\xe1\xdf\xc6\xca\xd5\x8d\xb3\x64\xc5\x8f\x5b\x4d\x3f\x4e\x60\x3a\x9a\xc3\x9e\x82\x6f\x9c\xf5\xe4\xd7\x8e\x86\x8f\x26\x8f\x86\xb9\xdf\x0d\x46\x4f\x95\xa2\x46\x48\x67\xeb\x7b\xa0\xdf\x07\xfe\x10\xfc\x87\x13\x00\x18\xfe\x7b\x32\x39\x8c\xf7\x27\xac\x8c\x4e\x30\x80\x98\x1d\x7b\x70\x2a\xe5\xd4\x17\x61\xf0\x4d\x84\xb0\x01\xfd\xe2\x48\xa8\x83\x94\x20\xee\x9a\x2c\x18\x0f\xc6\xde\x44\x2a\x5f\x07\xea\xc7\x87\x51\xff\x68\x31\x48\xe9\xd8\x7c\x24\x0d\xe2\xa0\x21\x2e\x1c\xd7\xe0\x1a\xe2\x04\xeb\xeb\x60\xf0\xdf\xc3\x0c\xda\xa2\xc5\x8a\x09\xf5\x12\xe8\xce\x78\xf1\x5f\x03\xe8\xff\x1c\xcb\xf3\xa7\x16\x82\xa5\xbb\x86\x94\x90\x6e\x53\xbd\xcf\x74\x50\xb1\xdd\xc5\x86\x2b\x25\x75\xf4\x36\xdb\xdd\x97\xe0\xb5\x5e\x89\xe6\xab\x86\x7b\x19\x95\x56\xed\xa8\xeb\xb8\x9d\x77\x59\x36\xd4\x0e\x9b\x41\xb6\x39\x4d\x61\x9e\xd4\x3a\x61\xfb\xf1\xdc\x71\x8d\x32\x85\x6f\x7f\x7e\x37\x58\xa1\xec\x9c\xbe\x9e\xbf\x27\x25\x6f\xa9\x20\x26\xab\x68\xd3\xbb\x4b\x8b\x9d\xa8\xe1\x98\xb4\x62\xf2\xee\x68\x74\x4e\xb6\x35\xf2\xc2\xc6\x2e\x7a\xf1\xb5\xb1\xf7\x2b\x95\x31\x40\xc7\x94\x5e\x9a\xf5\xdc\x3a\x11\xdb\x49\x1b\x37\xb8\xa0\x5d\x25\x63\x85\x16\x7d\x0c\x01\xbc\xf9\x78\x82\x96\x38\xc1\xea\x3e\xb5\x7e\xe0\x65\xa3\x34\x22\xcd\x3e\x23\xa6\xec\x33\x6e\x9e\x7d\xa6\x5d\xb2\x6f\x23\x54\xb7\x05\x99\x32\x69\xe5\x17\xab\xea\x75\x91\x6f\x72\x2c\x07\xb7\x92\x60\x98\x6f\xb7\x1b\xec\x43\x01\x87\x54\x36\x9a\xb6\xf3\x7f\x6f\xe0\xdb\x58\xe0\x9e\x22\x3a\xa8\xde\xf7\xcc\xd9\x66\xda\xed\x35\x4a\xc1\xc8\xb3\xe6\x41\x01\x89\x86\x7f\x20\x0a\xe9\x4c\xf6\x43\x44\x66\x5c\x6e\xad\xec\x55\x3f\xb9\x1b\xe6\xf7\x80\x2f\x7d\xfa\x55\xf0\x42\xfc\xe2\xff\x27\x9f\xa9\x17\x94\x70\x20\x54\x7b\xd4\x55\xe5\x82\x9e\x35\xec\x6e\x8c\x5e\xb7\xc2\x7b\xcd\xea\x50\x89\x99\xe1\xc7\x07\x64\xe6\xc2\x3c\x24\x33\x6f\xed\x03\xd0\x58\xac\x4f\xaf\x91\x34\xac\x48\xcf\x50\x4e\x36\x01\x28\xba\x7e\xaf\x51\xe8\x5c\x4c\x4d\x1b\xeb\xa1\xd1\x9f\xcb\x65\x9e\x7b\x7f\xed\x62\xdb\x42\xbc\xfe\x1d\xc7\xbe\x7d\x09\x6f\x90\xb1\x26\xe9\x9e\x97\xf9\x80\x4c\xa7\x0e\xfd\x95\xd5\xd8\x29\xc4\xe7\x5b\xf7\xb9\x71\x7b\x79\x57\x12\x18\x0d\xae\x00\x26\xe5\x58\x6f\x8f\x8e\xfc\xad\xb4\x7d\xe5\xd8\x39\xc2\x7c\xc2\xb5\x18\xb2\xf9\x12\x51\x7c\x08\xc4\xcb\x7d\x30\xde\xe0\x82\xc0\x86\x7a\x4e\xbc\xc6\x02\x95\xf1\x02\xb7\x25\xd9\x0d\x01\xdd\x29\x22\xed\xc1\x37\xa4\x4c\x61\x48\xa7\x5d\xf2\xd9\xb5\x1f\xe8\xf6\x0c\xd5\x54\x60\xa8\x64\x0a\x17\xbd\xa8\x36\xd6\xd4\xa1\x5e\x8b\xd6\x71\x28\xb0\xf2\xad\xff\x7c\x42\xb7\x2c\xb3\xad\x8f\xb2\x7c\x85\x77\xd1\xfd\x0e\x51\x1f\xaf\xeb\x4c\x12\xd8\x7e\x22\x83\xc9\x64\x97\xc3\xe4\x18\x07\x42\x56\xe5\x16\x8b\x24\x3b\xc0\x63\x9f\x93\x2d\x76\xbf\x9d\xf7\x18\x2e\xbb\xa3\xf1\xe9\xde\xdb\x3a\x06\xc5\x46\x88\x0d\x8e\x52\xd2\xf9\xa5\x15\xbc\x8b\x31\x90\xd2\xf8\x75\x32\x83\xf1\xd9\x5d\xa8\x36\x15\x72\x8c\x8e\x6c\x99\x10\xcc\x6e\x4b\x62\x9a\x81\xaa\x30\x78\x8a\x52\xb4\x70\xf9\xc3\xcb\xd4\xe7\xa9\x26\x2b\x67\xbd\xa3\xe0\x57\x77\xf0\x48\xd5\xaf\x5c\xc4\x7b\x35\xa0\x08\x9b\x79\x10\xf2\x30\x06\xe5\xaa\x50\xdb\x4d\x2d\x54\xca\x05\x2b\x23\xe8\xdd\x3d\x77\x0c\x74\x87\x75\x53\xd1\x19\x18\x0b\x8e\x35\x71\x77\x86\x6c\xe8\x86\x62\x89\xe7\xb6\x1e\x6e\x8d\x94\x80\x10\x3c\x71\x74\xbe\xa6\x28\xc8\xe9\x81\x90\x14\xae\xea\xe5\xd5\x74\xd0\x2f\x5e\x5d\x5d\xf9\x0f\x55\xc6\xa2\x35\x86\xca\x5c\x13\x0c\xeb\xe5\x3f\x86\xb9\xea\xda\xee\xdd\x6e\xd0\x41\xa1\x05\xac\xbc\x83\x39\xb5\x6f\x0b\xd2\xe0\x62\x61\x55\xb1\x41\x03\x93\x77\x81\x15\x8d\x3e\x81\xa4\x0f\xf3\x3e\x0d\x3c\x54\x38\xa7\x8a\x34\xcc\x97\x70\x55\x38\xf7\x64\x8e\x7c\x75\x76\x90\x53\x6e\x3b\x4b\xa6\x7e\x74\x4d\x4b\x78\x02\xc3\xc2\xb9\x21\xa0\xd5\x7b\x75\x6e\xb0\x0a\x14\xb5\xe6\xc8\x07\xa2\xf0\xa2\x3d\xbe\x3c\xb3\xec\x50\xa0\x9b\xe8\xfa\x0c\x1c\x83\x69\x75\x5a\x6f\xc6\x03\xd5\x8d\x2c\xcf\xa2\x6c\xfd\x5a\xde\x39\x4b\x29\x51\x92\x24\x1e\x08\x94\xe8\xe3\x53\xbb\x36\xde\x1b\x67\x63\x80\x3c\x11\xdc\x9a\xaa\x82\xf9\xfa\x9c\xdb\xea\x26\x3d\x3a\xb5\x97\xa6\x70\x3f\x5b\x6e\x96\x68\x27\xfc\x13\x6a\xb4\x3d\xdd\xf9\xf2\xb3\x57\xe9\xca\xf1\x69\x85\x3a\x0f\xf2\xe0\x62\xdd\x2a\xd3\x07\x26\x70\x7f\xaa\x69\xb9\xcd\xdb\x55\xa1\x9d\x50\x8a\xe8\xd5\xfe\xec\x7b\xcd\x9f\xb6\x27\xcc\xd0\xea\x19\x14\x86\xbd\xc0\xe9\x20\xce\x5a\x8b\xef\x8f\x62\xfa\x5c\x15\x61\x1d\xd0\x5d\x53\x19\x65\xa4\xa5\xd0\x36\xb0\x94\xf1\xab\xe6\x72\x52\xa2\xff\x1e\x00\x00\xff\xff\x21\x7f\xb6\x79\x85\x17\x00\x00")

func managedServicesApiYamlBytes() ([]byte, error) {
	return bindataRead(
		_managedServicesApiYaml,
		"managed-services-api.yaml",
	)
}

func managedServicesApiYaml() (*asset, error) {
	bytes, err := managedServicesApiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "managed-services-api.yaml", size: 6021, mode: os.FileMode(436), modTime: time.Unix(1599835954, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"managed-services-api.yaml": managedServicesApiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"managed-services-api.yaml": &bintree{managedServicesApiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
