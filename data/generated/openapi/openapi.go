// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/managed-services-api.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _managedServicesApiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xcd\x92\xdb\x36\x0c\xbe\xfb\x29\x30\x6e\x67\xdc\x1e\xd6\xd6\x26\x9b\x43\x75\xdb\xf4\xff\x2f\xc9\x64\xd3\xf6\xd0\xe9\xec\x60\x45\xd8\x62\x56\x22\x19\x12\x72\xd6\xe9\xf4\xdd\x3b\xa4\x6c\x8b\x96\x65\xd9\x6e\xd3\xda\x99\x89\x4e\x26\x05\x80\xdf\x07\x02\x20\x28\x6b\x43\x0a\x8d\x4c\xe1\xf1\x38\x19\x27\x03\xa9\xa6\x3a\x1d\x00\xb0\xe4\x82\x52\xf8\x19\x15\xce\x48\xc0\x0d\xd9\xb9\xcc\x08\xae\x5f\x7c\x3f\x00\x98\x93\x75\x52\xab\x14\x92\x71\x32\xbe\x1c\x00\x08\x72\x99\x95\x86\xc3\x64\x97\x8e\x23\xeb\x95\xbc\xe5\x0b\xa8\x6c\x91\x42\xce\x6c\x5c\x3a\x99\xa0\x91\x63\x8f\xc1\xe5\x72\xca\xe3\x4c\x97\x03\x80\x2d\x83\x52\xc1\x67\xc6\x6a\x51\x65\x7e\xe6\x73\xa8\xcd\x75\x1b\x73\x8c\x33\xda\x67\xf2\x86\x71\x26\xd5\x6c\xcb\xd0\x64\x5b\x34\xab\xac\x25\xc5\x20\x74\x89\x52\x0d\x0c\x72\x1e\x78\xf8\xc5\x26\x65\xcd\xf5\xc2\xd5\x5c\xdd\x85\x9f\x9c\x5f\x4e\xee\x71\x7a\x8f\x6e\xf2\xa7\x14\x7f\xa5\xc1\xe4\x8c\xb8\xfe\x01\x60\xc9\x19\xad\x1c\xb9\xd5\x04\xc0\xf0\x51\x92\x0c\x9b\x21\x40\xa6\x15\x93\xe2\x78\x0a\x00\x8d\x29\x64\x86\x1e\xd6\xe4\xb5\xd3\x6a\xf3\x2d\x80\xcb\x72\x2a\xb1\x3d\x0b\xf0\xa9\xa5\x69\x0a\xa3\x4f\x26\x99\x2e\x8d\x56\xa4\xd8\x4d\x6a\x59\x37\xf9\xd1\x03\x7d\x49\x6f\x2a\x72\x3c\x8a\x34\x37\x5c\x10\x84\xc0\xd6\x52\x30\xd5\x95\x12\x70\xb7\x00\x29\x1a\x02\x57\xc9\xe5\x69\x08\x7c\x6d\xad\xb6\x3b\x91\x5f\x57\x9c\x03\xeb\x7b\x52\x20\x1d\x48\x35\xc7\x62\x13\xf5\xe3\x73\x44\xfd\x8b\xc2\x8a\x73\x6d\xe5\x3b\x12\xc0\x1a\x0c\xd9\xa9\xb6\x25\x68\x43\x36\xe0\x88\x19\x5c\x9d\x23\x83\x67\x1a\xee\x37\x82\xe6\xad\xe4\x1c\x9c\xa1\x4c\x4e\x25\x09\x90\x02\xe8\x41\x3a\x76\x0d\x93\x27\xa7\x4a\x81\x7d\x7b\x41\x0f\x86\x32\x26\x01\xe4\x05\x41\x67\xa1\x22\xac\xa2\xc8\x51\x56\x59\xc9\x8b\x66\xcd\x0b\x78\x4a\x68\xc9\xa6\xf0\xfb\x1f\x2b\xa1\xaa\x2c\xd1\x2e\x52\xf8\x96\x18\xb0\xe5\x9a\x26\x93\x04\x15\xc4\xd4\x5f\x27\xce\x72\xbb\xbf\x0a\xc0\x3f\x96\x83\xff\x06\xf5\xc7\x72\x70\x3e\x4c\xf6\x96\x83\x55\xa6\xd7\x29\xd1\x93\xec\x06\x2d\x96\xc4\xcb\xae\x08\x42\xe1\xa8\x71\x0d\x37\x70\x35\x72\x13\x29\x86\x87\x35\x1e\xb5\x45\xa3\x5d\xd4\x74\x84\xf5\x9f\x6a\x11\x55\xaa\x8e\x43\x5e\x20\xe3\xa0\xc7\xe7\xfd\x1e\xef\xf6\xf7\xf1\xfd\x87\x47\x2b\x2d\x89\x14\xd8\x56\xd4\x5b\x0f\x1f\x9d\x71\xdf\x74\x9d\x65\x64\x5a\x75\xf1\x2c\xa3\xfa\x57\x5f\x07\xc3\x82\x75\x54\xbb\x76\x58\x7f\x2c\xe9\x27\x2c\xe9\x5f\x9c\x23\x83\xba\x5c\x60\x61\x09\xc5\xe2\x43\xa9\xde\xd7\x0a\xaa\x5d\x05\x1c\x32\x4b\xc8\xfe\x52\xc8\x39\x2d\xe9\x2d\x13\xfc\x1f\xb5\x7a\x5f\x7a\x73\xfe\x00\x50\xf4\x76\x79\x08\xc4\xe6\xa2\x0b\xe1\x5a\xe5\x25\x71\x65\x95\x03\x84\x42\x3a\x06\x3d\xdd\xbc\x79\xb9\x63\x70\x74\x54\xcb\xd1\xa3\x24\x19\xa5\x3b\x7d\xd3\xbf\xe8\xff\xba\x8b\x71\x75\xfd\x49\xc6\x15\x76\x74\x95\x5c\xf6\x70\xe8\x2d\x06\xa7\x0b\xc3\xd1\x55\xf2\x78\x37\xea\xc3\x8b\xc1\x09\x19\x3c\xe9\x8b\x9d\x7d\x5d\xd1\xe9\x90\x6f\x77\x59\x4d\x9f\x35\xda\xd5\x67\x19\x9c\xd1\xe8\x70\x71\x27\xdf\xd1\x68\xd0\xbc\xf3\x2b\x2d\xc1\xd4\x8b\x3e\xbf\x7b\x4d\x19\xbf\xa4\x29\x59\x52\xd9\xfa\x82\xc7\x0b\x43\x29\xe8\xf0\x72\x05\xd7\xfa\x4d\x67\x19\xa7\xad\x14\x31\xff\x5a\xc9\xb1\x95\x6a\xb6\x9e\xbe\x97\x6a\xbf\x50\xee\x59\xf4\x09\xf9\x4c\x8b\xfb\xc5\xd0\x81\x45\x6e\xf0\xab\x44\x43\xef\xa5\x68\xe8\xbd\x10\x0d\x59\x33\x16\xd1\x58\x32\x95\xee\x38\xe2\x07\xb1\xf2\x28\xb6\x85\xa4\x62\x9a\x85\x0f\x7b\xf5\xe3\xc1\xed\x97\x0a\x98\xfb\xc5\x42\x70\xad\x44\xb0\x28\x9e\x4f\xb7\xe3\x6a\xd8\x19\x96\xad\x20\x18\xc6\xbe\xda\xf6\xc7\x2e\x9f\x40\xc8\x24\x41\xed\x94\xe8\xf4\x0d\x84\x8d\xc4\x8e\xbc\xda\x29\xbe\xae\x39\xb7\x9b\x61\xd7\xa9\x14\x9c\x11\x47\xcd\x51\x0e\xf1\x8a\xff\xc2\x0b\x21\xa0\xba\x21\xa2\xb5\xb8\x68\xbd\xe9\x14\x87\x5e\x80\x81\x5e\x8d\x30\x3e\x90\x4e\xbd\xfb\x45\xe5\x98\xec\x21\xfb\xb3\x7a\x1c\x23\x57\x3b\x7c\xd5\x21\x9e\x15\xba\x12\xb7\xc6\xea\xb9\x14\x64\x0f\x56\x2b\xab\x82\xe5\x2d\xbe\xeb\x56\xb8\xd3\xba\x20\x54\xad\xd8\x9c\xc9\x63\x62\xf3\xad\x3a\x02\x8e\xc2\xf2\xf0\x2c\xb9\xd3\x9a\x1d\x5b\x34\x37\xe1\x0f\x81\xef\xa2\x9b\xf3\x7e\x77\x85\x46\x4f\xdc\xe2\x96\x8a\x3f\xc5\x91\x53\x7f\xa9\xa6\x0b\x96\x25\x1d\x6a\xb2\x32\xe2\x7d\x99\x6c\xb7\x52\x1f\x6e\xaa\xb6\x10\x37\x4f\x3f\xf6\xd8\x01\x9e\x43\xbb\x23\x68\xf2\x28\x44\x4c\xf3\xaf\xc6\x46\x87\xf3\x2a\x27\x90\xc2\x77\xc7\x96\x32\x6d\xd7\x9f\x7b\x5a\xfd\x49\xc7\x8e\x4a\x95\x82\x41\xce\xdb\x07\x6b\xf3\x69\x23\x3e\xc2\x6a\x0c\xd1\xd1\xea\xd5\xdf\x54\x64\x17\x5d\xa8\x5e\xe0\x8c\x40\x2a\x41\x0f\xb0\x65\x7e\x8a\x85\xa3\xc3\x61\xd2\x03\x96\xa6\x88\x77\xae\x7d\xb2\xce\xb1\xa8\x28\x85\xe1\x65\x1d\x09\xf1\x91\x5a\xa3\x8e\x3a\x80\x5e\xd4\xcf\xaa\xf2\x8e\xac\xf7\x65\xd8\x69\x90\x0a\x08\xb3\x3c\x66\xfd\x1e\x69\xb4\x8f\xfe\x35\x8d\x24\xf1\x44\x56\x97\xa9\x1b\x6f\x7b\xa5\xb7\xbc\x4d\xc5\xcb\xfa\x12\x16\x66\x97\x93\xf5\xe0\x9b\x65\x3a\xfe\xf0\xdb\xab\x8d\xde\x26\x67\x36\x61\x62\xf0\x77\x00\x00\x00\xff\xff\x55\xc4\x67\xa8\x60\x1d\x00\x00")

func managedServicesApiYamlBytes() ([]byte, error) {
	return bindataRead(
		_managedServicesApiYaml,
		"managed-services-api.yaml",
	)
}

func managedServicesApiYaml() (*asset, error) {
	bytes, err := managedServicesApiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "managed-services-api.yaml", size: 7520, mode: os.FileMode(436), modTime: time.Unix(1601303070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"managed-services-api.yaml": managedServicesApiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"managed-services-api.yaml": &bintree{managedServicesApiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
