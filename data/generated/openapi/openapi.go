// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../openapi/managed-services-api.yaml (27.517kB)

package openapi

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _managedServicesApiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xff\x57\xdb\xb8\xb2\xff\x9d\xbf\x62\x5e\xee\x7b\xc7\xbb\xef\x34\xc1\x21\xe1\x4b\x73\xce\xfe\x40\x81\xb6\xec\x16\xda\x12\x28\xa5\xef\xbc\xd3\xab\xd8\x4a\x2c\xb0\x25\x23\xc9\x81\xf4\x9e\xfb\xbf\xdf\x23\xd9\x4e\x64\x5b\x49\x1c\xa0\x0b\xec\xc2\xfd\xe1\x36\xb6\x34\x9a\xf9\x68\x34\x33\xd2\x8c\xb5\x2c\xc6\x14\xc5\xa4\x07\x9d\x96\xdb\x72\xd7\x08\x1d\xb2\xde\x1a\x80\x24\x32\xc4\x3d\x38\x42\x14\x8d\xb0\x0f\x7d\xcc\xc7\xc4\xc3\xb0\xfb\xe9\x70\x0d\x60\x8c\xb9\x20\x8c\xf6\xc0\x6d\xb9\xad\xf6\x1a\x80\x8f\x85\xc7\x49\x2c\xf5\x43\x5b\x1f\x81\xb9\xea\xa4\x28\x37\x21\xe1\x61\x0f\x02\x29\x63\xd1\x5b\x5f\x47\x31\x69\x29\x1e\x44\x40\x86\xb2\xe5\xb1\x68\x0d\xa0\x42\x90\x50\xf8\x25\xe6\xcc\x4f\x3c\xf5\xe4\x57\x48\xc9\xd9\x89\x09\x89\x46\x78\x19\xc9\xbe\x44\x23\x42\x47\x56\x42\xbd\xf5\xf5\x90\x79\x28\x0c\x98\x90\xbd\x1d\xd7\x75\xab\xdd\xa7\xef\x67\x3d\xd7\xab\xad\xbc\x84\x73\x4c\x25\xf8\x2c\x42\x84\xae\xc5\x48\x06\x1a\x01\xc5\xe6\x7a\x94\xa2\xd4\x14\x29\x4a\xa2\xa9\x1e\x8e\xdb\xeb\x57\x68\x78\x85\xc4\xfa\xbf\x88\xff\xef\x9e\x26\x39\xc2\x32\xfd\x07\x00\x8b\x31\x47\x8a\xf6\xa1\xdf\x53\xcf\xff\x50\x6d\xdf\x4c\x0e\xfd\xec\x3d\xc7\x22\x66\x54\x60\x91\x77\x00\x68\x6c\xb8\x6e\x63\xf6\x13\xc0\x63\x54\x62\x2a\xcd\x47\x00\x28\x8e\x43\xe2\x69\xd2\xeb\x97\x82\xd1\xe2\x5b\x00\xe1\x05\x38\x42\xe5\xa7\x00\xff\xcd\xf1\xb0\x07\xce\x3f\xd6\x3d\x16\xc5\x8c\x62\x2a\xc5\x7a\xda\x56\xac\x6b\xe6\x4e\xf0\x75\x82\x85\x74\x8c\x9e\x05\x88\x74\x23\xe0\x69\x2b\x18\xb2\x84\xfa\x30\x98\x00\xf1\x67\x02\x74\xdd\xf6\xe3\x08\x70\xc0\x39\xe3\x4e\xa9\x0b\xbe\x45\x51\x1c\x9a\x08\xe7\x7f\x5d\xb7\x7d\x90\xbe\xac\xbe\xb3\x0f\x94\xd3\x5a\x9f\x75\x9d\x0b\xd4\x6e\x22\x03\x90\xec\x0a\x53\x20\x02\x08\x1d\xa3\xb0\x08\x52\xe7\x99\x80\xd4\xb9\x3b\x48\x9d\x65\x20\x9d\x09\xcc\x81\x32\x09\x28\x91\x01\xe3\xe4\x07\xf6\x41\x32\x40\x9e\x87\x85\x00\x19\x60\xc8\x56\x5b\xcb\x44\xae\xfb\x4c\x90\xeb\xde\x1d\xb9\xee\x32\xe4\x8e\x19\x5c\x15\x96\xe2\x0d\x91\x01\x88\x18\x7b\x64\x48\xb0\x0f\xc4\x07\x7c\x4b\x84\x14\x33\xe0\x36\x1f\xcb\xb0\xac\x08\xdc\xa6\xeb\xde\x15\xb8\x59\xd7\xf9\x2a\x47\xf1\x6d\x8c\x3d\x89\x7d\xc0\x8a\x2f\x60\x9e\x36\xfb\xf9\xda\x14\xd8\x4b\x38\x91\x93\xd9\xd8\x4d\x78\x83\x11\xc7\xbc\x07\xff\xf7\xff\x79\xa3\x24\x8a\x10\x9f\xf4\xe0\x1d\x96\x80\x4a\x33\x31\x33\x87\x3e\x0e\xb1\xc4\x56\x67\x90\xbe\xaa\xe7\x0f\x9e\xa0\xbe\x97\x29\xfd\xe3\x98\xc1\x5e\xca\xd8\x3c\xe0\xf7\xb5\xc4\x2f\x7e\xe2\xc5\x4f\xbc\xf8\x89\x22\x72\xdd\x74\x69\xdc\xc3\x5b\x14\x08\xfc\x4d\x7d\xc6\xfd\x40\x2c\x13\xb8\xbb\xff\xc8\x5d\x43\x4a\x6e\x81\x77\xa8\xe5\x6b\x62\xc4\x51\x84\x65\xb6\x15\x4b\x9b\xa4\x82\x34\x0a\x82\xcc\xda\xad\x13\xbf\x51\x6f\xcf\x92\x52\x8c\xd5\xae\xc9\xe6\xa2\x3c\x8e\x51\xe6\xa2\xb2\xd7\x55\x66\x14\x3b\x84\xf6\xe0\x3a\xc1\x7c\x62\x40\x46\x51\x84\x7b\x80\xc4\x84\x7a\xf3\x80\xfc\x84\xf9\x90\xf1\x48\xaf\x5e\xa4\xb7\x89\x40\x28\x20\x9a\xf6\x0a\x38\xa3\x2c\x11\x10\x21\x4a\xf5\x7e\x6f\x91\x32\xc9\x49\x8c\x7b\x30\x60\x2c\xc4\x88\x1a\x6f\x14\xe6\x84\x63\xbf\x07\x92\x27\x78\x6d\xf6\x10\x0b\xf9\x86\xf9\x06\xee\x96\x3d\x8e\x8f\x24\x9a\xbe\xb7\xe8\xfd\x62\xad\xb7\xeb\x7c\xdd\xed\xd7\x27\x34\x09\x19\xf2\x8b\xfa\x3f\x4f\xfb\xcf\xfa\x27\x78\x44\xaa\xcb\x6e\x89\xc6\xe7\xdd\x2c\x0a\xaf\xfe\x0e\xce\xee\x44\x35\xef\x56\xa1\x3a\x67\x2e\x6c\xf1\xce\xc6\xd3\xda\xff\x2e\xc2\x1e\xa0\x30\x6d\x4c\xc8\x93\x4c\xa4\xbb\x1a\x22\x93\xde\xd2\xd8\xc1\xf3\x70\x5c\x8a\xa9\x9e\x87\xbd\xee\xba\xee\x9e\x32\x2f\x33\x4d\xb9\x83\xdb\x2b\x93\x98\x8b\xd3\x17\x15\x53\xe9\x96\xa9\xcd\x16\x65\xa3\xfd\x12\x8d\xbe\x44\xa3\x0b\xa3\xd1\x29\xd9\x23\x74\xbb\x1b\x86\xec\x06\xfb\x87\x54\x48\x44\x3d\x7c\x82\x91\x17\x60\xff\x1e\xe3\x2d\xa3\xb9\x38\x2c\x1e\x32\x3e\x20\xbe\x8f\x29\x60\x22\x03\xcc\x61\x80\x3d\x94\x08\xac\x1d\x6b\xa2\x5a\x10\x51\x2b\x76\x06\x56\xec\x1b\xa1\x5b\x12\x25\x11\xd0\x24\x1a\x60\x0e\x6c\x08\x24\x63\x4f\x75\x43\x12\x3c\x44\x61\x80\xb3\x38\x41\x1f\x03\xca\x80\x88\x74\xcc\x00\x09\x18\x60\x4c\x81\xa7\xa2\x3c\xcf\xc0\xfc\x27\x1e\xe0\x9c\x06\x38\x0f\x45\xb0\xaf\x1c\x21\x4b\xb8\x87\xc1\x67\x58\x50\x47\xa6\x81\xf8\xb3\x8c\xc3\x7f\xe2\xd9\xcd\x2e\x85\x64\x5e\xf8\x9d\xaa\x21\xa1\x23\xad\xbb\x69\x08\x97\xb9\xd1\xfa\xd1\xb6\x11\xbe\x6b\xdf\xa2\xc2\x77\x8a\x6f\xb2\x10\xde\x24\x67\x1c\xf2\x4f\xbb\x9c\x60\x99\x70\x2a\x00\x41\x48\x84\x54\x0b\xa6\x70\x5a\x2e\x6c\x41\xb6\x6a\xa9\x5b\x89\x55\xb8\xac\x93\x37\x28\x22\xb7\x98\xa5\x3f\x55\xa5\xcc\x08\xe7\x03\x31\x63\xad\x8a\x13\x5e\xc1\x37\x3d\xdd\x35\xf1\xc0\x1e\xfb\xef\xeb\x84\xef\x7d\x24\x54\xb6\xa2\x2b\x6d\xec\x9f\x32\xd4\x0f\x6a\x76\xed\xbb\x7c\x1b\x11\xe3\xd0\x21\x46\x23\x63\xae\x96\x36\x17\xe4\x87\x6e\xbe\xf0\x94\xc2\x0b\x59\xe2\x7f\x8f\x39\x1b\x13\x7f\xca\xcd\x1c\xc3\xcb\x09\x1e\xe3\x74\xde\x73\x4b\x27\x92\x38\x66\x5c\xcd\xa7\x26\x04\x53\x42\xad\x79\x86\x78\x4f\xb5\xfb\x94\x37\xbb\xa7\x41\x76\x36\x5c\xd7\x99\xab\x6d\x39\xcb\xfe\x72\x76\x1f\x43\xff\x0a\x48\x14\x8d\xb4\xd3\x75\xdb\xf3\xe5\x7a\x31\xd2\x29\x48\x9b\x8b\x26\xff\xc5\xd4\x3c\x71\x53\xa3\xab\x39\xd6\xb9\x3e\xc9\xba\x87\xdd\xc9\x08\xa8\x87\xda\x21\xcd\x59\xe1\xf5\xec\x51\x7a\xae\xf6\x64\xac\x52\x2e\xdc\xa3\x59\xa7\x14\x8f\x17\xdb\xf4\x62\x9b\xa6\x7f\x7f\x9a\x6d\x5a\x92\x7b\x29\x36\xfe\x53\x0d\x59\xf6\x1b\x79\x1e\x4b\xa8\xac\xda\xae\x3a\x26\xe1\x4f\x9b\xde\xac\xe0\x70\x37\x65\xb6\xb8\x94\x4b\x6a\xf9\x21\xb7\x47\xd9\x59\x55\x2e\xe0\xfc\xa5\xff\x54\x95\xf4\x31\x0f\x70\x9d\xae\xdb\x79\x26\x20\x3d\x89\xbd\xe3\x7c\x9b\xf9\x54\x81\x7b\x06\xc5\x53\x95\x30\xa7\x68\x06\x44\x39\xca\xd2\x4b\xdf\xba\xee\xcd\xd4\xf5\xf2\xb4\x6e\x89\x44\xde\x63\x6d\xc1\x94\x3e\x74\x8e\xb7\x28\xa9\x35\xd7\x38\x6f\x6a\x45\x4d\xbd\x99\x4e\xa7\x75\xac\x3b\xa7\x65\x9f\x8a\x93\xa8\xbf\x12\x8a\x9e\x70\xe5\xd5\x50\x1c\x76\xd9\xc2\x28\xeb\x56\x96\x13\x79\xf1\x4e\x2f\xde\x69\x65\xef\x14\xda\x43\x9d\x17\x5f\xf4\xb3\x7d\x51\xba\x68\x8b\x0b\xbf\xec\x8c\xa6\x69\xa1\xea\xec\x38\xab\x04\xe6\xfa\x84\x21\x9b\xc5\x6a\xc9\x98\x6d\xea\x2d\xc5\xb4\x85\xec\x6d\x6e\x7a\x74\x51\x9f\x7a\x31\x22\x63\xb5\xce\x6c\xa5\xc8\xf7\xdc\xdb\xd8\xfd\x43\xf7\x89\x28\x65\x01\x28\xbf\x54\x75\xfc\x62\x88\x35\x2c\xe8\xaf\x62\x88\xef\x01\xd2\x53\xdf\x26\xc0\xbf\xfe\xfd\x97\x35\xb5\xe9\xb2\x5c\x6c\x6a\x33\x1b\xf7\x10\x86\x76\x9d\x63\x81\x65\xd3\xe3\xd8\xc7\x54\x12\x14\x8a\x6c\x96\xcc\x1d\xc4\x4f\x31\x8a\xcf\x2d\x68\x46\x4d\x0d\xd5\x4f\x0e\x97\xf5\x18\x60\x4c\xc7\x9d\x15\x49\x53\x2a\x0e\xbe\xc7\xb1\x5f\xd9\x44\x56\x46\x84\x21\xe3\x36\xff\xb9\x36\x93\x4e\x71\x91\x01\x9a\x32\xf4\x71\x70\x89\x3d\x79\x82\x87\x98\x63\xea\x4d\x97\x5a\x5a\x7e\xcc\xf4\xcb\x5c\x97\xb8\xe2\x52\x12\x13\x63\xe2\x9b\xa8\xa6\x9d\x84\xe4\x84\x8e\xa6\x8f\xaf\x08\x5d\xde\x28\x50\xf3\xb0\xa8\x91\xda\x30\x9b\xdb\x62\xbd\xbf\x33\x10\x55\xa3\x18\x3f\x63\x34\xc2\xc6\x4f\x41\x7e\x98\x3f\x25\x93\x28\x34\x7e\x13\x89\x23\xb1\x9a\xe0\xb5\xa4\x52\x5c\x54\x1b\x11\x2a\xf1\xc8\xa8\xff\x56\xcc\x2d\x6f\xa5\x79\x5e\xdc\x4c\x3b\x9a\xbc\x09\x0a\xc3\x8f\xc3\x65\x8b\x3e\x5f\x5a\x25\x25\x30\xcf\x7b\x2d\x78\xcc\xc3\x04\xb4\x35\xf0\x2b\xe6\xda\x8a\x0d\xe8\x89\x44\x16\xdb\x30\xb7\xf9\x74\x91\x7c\x2f\xaa\x9d\xb5\x93\x06\xc3\xd4\x9a\x95\x00\x51\x1d\xef\x81\x82\x56\x28\x3b\x8b\x88\x73\x34\x29\xbd\xb1\x36\x87\x85\x0c\x6a\xf1\x52\x0e\xcd\xda\xa3\x47\x9e\x7d\x21\x91\x4c\xe6\x08\x6e\x99\xd0\x62\x86\xb2\x76\xb7\x28\x09\x25\xf9\x8e\x7e\xd8\x3b\x54\x3f\x99\x80\x2c\xaf\x57\x5f\xd1\x6e\xe8\x0a\xec\xe8\xef\x42\xea\x36\x1e\x30\x26\x85\xe4\x28\xee\xeb\x8f\xfe\xdf\x1b\xbe\x7a\x39\x5c\xe9\x01\xcc\x77\x54\xe9\x32\x64\x3c\x42\xb2\x07\x3e\x92\xb8\x29\x49\x84\xeb\x92\x4c\x62\xff\x61\x49\x5a\xbf\xa5\xb4\x29\xdf\xa2\x8f\x03\xaa\x7a\xfd\xb3\x17\xb2\x95\x6d\x6d\xe3\xa1\x51\xe6\xa3\x51\x68\xa4\x6d\x3c\x34\xda\xc5\xa7\xda\xa6\x57\x9e\xa6\x36\xbc\xf2\x58\x2d\xff\x3a\x27\xae\x75\xbf\xa7\xf8\xb9\x56\xa9\x04\xff\xec\x6f\xf1\x44\x98\x3c\x57\xe7\x37\xfb\x38\x28\x27\x5b\xbc\x26\x43\x53\x98\xc6\x36\xd3\x8f\xce\x98\x3f\x01\x81\xa9\x54\xfb\x97\xec\xeb\x2f\xf8\xf4\xb1\x7f\xba\x20\x4a\x50\x4b\x75\x35\x3f\x3f\xdf\x44\x55\x2a\x9f\x8b\xc5\x04\x70\x13\x60\x8e\x8d\xc2\x5d\x2f\x4c\x84\x54\xcf\x49\x18\x9a\x25\xe6\x84\x2e\x0b\x23\x6c\xf6\xae\x88\x10\x96\x69\x99\xba\x64\xfa\xc8\x5b\xfd\xbf\xc7\xe8\x90\x8c\x12\x2b\x0b\x92\x29\x06\x34\xd9\xdd\x6f\x95\xd1\xcb\x06\xb4\x6c\xdf\x0a\x43\x3b\x4a\x72\xd5\x22\x2f\x08\x29\x8c\xd4\x82\x43\x09\x51\x22\xa4\x62\x47\x64\x67\x80\x21\xbb\xc1\xbc\xe9\x21\x81\x01\x85\x71\x80\x68\x12\x61\x4e\x3c\xf0\x02\xc4\x91\xa7\x76\x20\xc0\x38\x38\x4e\xd3\x71\x5e\x29\x8f\xc2\xb3\xf3\x1f\x44\xd3\xf6\x03\x2c\xcd\xd6\xaf\x00\x51\x1f\x30\xf5\x8b\xad\x2a\x54\xd3\x76\x1e\xa2\x7a\xfb\x3b\xc0\x10\x32\x3a\x52\x60\x04\x88\x42\x67\xc3\x18\xbe\xe5\x2c\x9b\x91\xaa\x3f\xb1\xd4\xc1\xab\x26\x0f\xa4\x05\x95\xd2\xb5\xc7\xb2\x85\x15\x46\x1e\xdf\x18\x16\x58\x7a\x2e\xd6\xb0\xc0\x74\x63\x36\xc7\xb3\x02\xa0\x47\x9d\xe1\x19\x1b\x4f\x64\x7e\xe7\x7e\xd6\xf9\x74\x67\x37\x65\xb9\x51\x5d\xbf\x56\x27\xe7\xec\x15\xcb\xe7\x9c\x15\xf6\x9e\x45\x42\x87\xd4\x27\x1e\x92\x59\x01\x9f\x12\x39\x35\xcd\x44\x64\x8a\xd0\x82\xf3\xcc\xf8\x38\x4e\x81\x31\xc7\x81\x90\xd0\xab\xe5\xe6\x8f\x2c\x18\xfe\x8c\x92\xeb\x04\x03\xd1\x67\x12\x43\x92\x7e\x64\xa5\x38\xc9\x06\x5f\x4a\xdc\x27\x22\x0e\xd1\xe4\xfb\x62\xb7\x73\x6c\xb8\x9c\x92\xe3\x55\x81\x42\x46\x04\xe2\x84\xc7\x4c\xe0\x1a\x26\x7d\xf1\x70\xef\x93\x08\x51\x18\x72\x82\xa9\x1f\x4e\x2c\xd2\x15\x79\x78\xa5\x99\xc8\x54\x18\xfe\x89\x6e\xc4\x3f\x97\x73\x80\x29\x1a\x84\x78\x01\xb4\xe7\x01\xd6\x1f\xc3\x59\x64\x26\x22\xef\x9e\x8a\x8f\xe3\x90\x4d\x08\x1d\x29\x77\xf8\xb1\xbf\x3f\xf5\xc7\x55\x26\x8a\xde\xde\x16\x34\x65\x84\xcb\x46\xca\xae\xc6\xfb\xb3\x5f\x0a\x1a\x94\xfb\x41\xfd\x6f\xef\xf1\x74\x3c\xe5\xd9\x71\x9e\x9d\x72\x67\xf8\xd9\x94\xba\xa4\x65\xc7\x2d\xf8\x42\xf8\x88\x50\x82\x1e\x5a\xdb\x32\x26\x1e\x4a\xcb\xd2\xc1\x86\x28\x09\x65\x0f\x86\x28\x14\xb8\xa6\xfa\x15\x0f\x45\xed\x1a\x38\xbd\xf1\xaf\x58\xb6\x00\x84\xc2\xd1\x6e\xbf\xd9\xef\x7f\x9c\x6e\x25\xd2\x90\x6c\x2f\x0b\xc9\xd4\x53\x94\xc8\x40\xcd\x6d\x7a\x74\xed\xdc\xc5\x07\x3f\xdc\x69\x4a\xf5\x94\xab\x28\x69\x7a\x6f\x20\x8c\x30\xc5\x5c\x8b\x98\xe4\xea\x39\xad\xce\x2e\x9e\x03\x97\xcf\xcc\x57\x3a\xd2\x28\x8e\x5d\x9b\x94\xd9\xed\x61\x28\x7a\x21\xc1\x54\x1e\xee\xaf\x70\xcc\xa4\x3a\xf4\xb1\xc7\xab\x49\x80\x07\x3b\xc6\xb0\x26\x0b\x1a\x16\xad\x2d\x9d\xd4\x95\x94\xd7\xbe\xd7\x55\xfb\xb9\x39\x49\x7a\xe7\x41\xb7\xbb\xab\xed\xf5\x16\xa8\x97\xdd\xfa\xd9\x75\xa1\x38\xc8\xae\xf9\x7b\x5e\x46\x63\xc9\x50\x95\xe9\x5b\x61\xea\x6c\x47\x51\xd5\xa2\xde\x43\x23\x8c\xb5\xeb\xf1\xdf\xce\x68\xcc\x5b\x97\x77\x5c\xe6\x8f\x67\x83\xaa\xb3\x3d\x77\x33\x76\x87\x0d\x56\x95\x7a\x75\x83\x54\xd9\x8a\xac\x90\xa7\xcc\xb5\x73\x85\xcd\x52\x39\xd8\x5a\x08\xe6\xa3\xee\xac\xec\xa2\x2a\x00\xcb\x99\xee\xd9\x3a\x48\xef\x6d\x9a\x96\x82\x54\x4e\x6a\x52\xcd\xe7\xd8\x63\x7c\x9a\xfc\x2f\xa5\xa7\x2d\x60\x10\xda\x83\x18\xc9\xa0\x6c\x7e\x67\x35\xa7\x66\xf6\x2f\xe5\xc1\xc8\x4a\x96\x2f\x98\x2a\x5e\x23\x85\x46\x18\x08\xf5\xf1\x6d\x85\xba\x19\x2d\xd5\xe0\xb2\x9a\x15\x2f\xe7\x24\xc7\x28\x4c\x8c\xdd\xbb\x99\x8c\x4c\x99\x36\x72\xa7\x0b\x99\x3e\x9e\x5d\xa9\xa1\xa6\x5c\xc5\x5b\x18\x79\x81\x29\xf4\x03\x8a\x51\x4e\x9a\x4e\xc5\x70\x5d\x25\x48\x9e\x74\xd7\xfe\x34\xef\x97\x65\xdd\xcd\x61\x55\x68\xaa\x9f\x66\x0f\xd3\x1f\x6f\xb3\xdc\xc7\xef\xe7\xa7\x05\xf7\x19\x48\x19\xaf\x95\xb9\x29\xdd\x39\x95\x93\x4f\x19\x9a\x72\x98\x9d\x18\x42\x23\x11\x4d\x8c\x84\x6c\x1a\xc7\x22\xa5\x33\x66\x68\xa0\x1b\xd1\x28\xba\x64\x68\xe4\x25\x20\x31\x91\xd3\x13\xf4\xd2\xc5\x54\xcb\x86\xc6\x49\xf3\x06\x3f\xd0\xd0\x96\x14\xc4\x9c\xe1\x89\x32\x7a\x6d\xd2\xbf\xd8\x3a\xf9\xdc\xf9\xfd\x8f\xc3\x9d\xcf\xee\xc7\xd3\xe8\xf2\xf3\x5b\xbf\xc3\xbc\xb7\x27\xa3\x46\x71\xcf\x07\x0d\x7d\x94\x3f\x7b\x1a\xa4\xe6\xa0\xce\x7d\xd5\xb5\x46\xc9\x72\x94\xd0\x50\xe6\x25\xc4\x12\xd7\x45\x63\x7a\x0c\x6f\x96\x95\x2f\x9e\xd9\x34\x91\x08\xd0\x40\x31\xf9\xae\x99\xfc\x9e\xb1\xbe\x00\xe4\xd9\x2b\x5b\xb2\xd0\x6c\xd9\x6c\x13\x31\xd9\xe2\xd7\x9d\xcb\x2b\xb2\x73\xed\x32\x19\x5d\x5e\x0f\x95\xc0\x43\x3e\x6a\xa1\x38\x16\xad\x48\x34\x07\x52\x8e\xdc\x4b\xda\xde\x76\x83\xb8\x75\xbb\x99\xec\xb4\x44\xbb\xe5\xe3\x71\x7a\x31\x39\xe3\x06\x34\x46\x82\x51\xdf\x59\xe6\x36\xdb\x6e\xd3\xdd\x3c\x6d\x6f\xf4\x36\xdb\xbd\x8d\x6e\xcb\xdd\xec\xb4\xbb\x1b\xdf\x66\x3d\x8c\xfc\x61\xa5\xc7\x56\xaf\xb3\xd5\xea\x6c\x6d\x6c\xb8\x3b\xdf\x2c\xc7\x60\x8b\xb5\xc6\x76\xde\xdc\x28\xea\x94\x4d\x55\x0b\xcf\x0a\x9b\x6d\x68\xec\x46\xe8\x07\xa3\x70\x8e\x07\xb9\x87\x37\xda\xe6\xdb\xe1\xd9\xdc\x56\xcf\x1d\x6b\xb0\x6a\x1e\xfa\x4d\x19\xb5\x28\x46\x89\xb5\xb3\x3e\x1c\x20\x21\x5f\x81\xb1\x87\x5f\xc4\xdb\xa2\x88\x75\x0e\x97\xd9\x48\xd1\xa4\x89\xe2\xb8\x29\x0c\xf2\x05\x2b\xde\x28\x97\xde\xaa\x00\x3c\x9a\x00\x8a\x63\x5b\x28\x5c\x67\xe9\x57\x16\x78\x91\xc4\x6a\x2b\xbd\x5c\x09\xd7\xae\xa8\xc0\xbd\x25\x04\x33\x96\x85\x46\x7f\xb7\xd9\xde\x50\xff\x2b\xbf\xcd\x36\x94\x8a\xa0\xfa\xc7\xa2\x9d\xc2\x03\xc0\x64\xc6\x3a\xcf\x08\xae\xf9\x97\xe2\x59\x41\x70\x3b\x15\x18\x8c\x4a\x97\xba\x52\xa7\x17\xe2\xad\x17\xa8\xe9\xc2\x24\x68\x7c\xdc\x3b\x6a\x1e\x7c\x6d\x16\x5e\x65\x65\x48\xd0\xe8\x1b\x97\x74\x66\xd7\x77\xfe\x32\xbd\x82\xa9\x70\xe5\xa9\xf8\x15\x88\x80\x84\x4e\x3f\x25\x7f\x05\x89\xc0\xe9\x35\x9f\xbf\xe9\x14\xec\x34\x1e\x35\xbc\x81\x59\xbf\xa4\x7c\xe2\xf9\x21\x89\xae\xdf\x79\x7c\x3f\xf9\xb0\xd5\x46\x67\xb7\x87\xdf\xae\xdf\x9c\x5e\x1f\x9f\xa0\x1c\xbb\xf2\x65\x5d\x36\xcc\xba\x6e\x77\x15\xcc\x46\x48\xe2\x1b\x34\x31\x60\x2a\x10\xc8\x60\x7a\xb7\x7b\x7a\x70\xbe\x7b\xd1\x2c\xbc\x9b\xe2\x54\xe7\x9e\xaf\xa9\x08\xd6\x3b\x6c\x2d\x82\x38\xdb\x4e\x49\x0c\x2d\xc5\x5d\x26\x7e\xbb\x2c\x4f\x36\xeb\xdb\x15\x51\xb2\x30\x26\x13\x40\x27\x90\x89\xff\x9b\xd3\x26\x7f\x74\xfc\xe4\xcb\xc5\xe1\x78\xbc\x79\x31\xfe\x10\x4e\x7e\xb4\xa3\x77\x27\x9d\xdf\x27\xd7\xc7\x8e\x4e\x1f\xeb\xff\x48\xc4\x9c\x89\x6d\x93\x8b\x8f\xdb\xa3\x8d\xd1\xd6\xfb\x53\xff\xec\x8f\x33\xb4\x71\x25\xde\xef\x6c\x5c\x7d\xde\xef\x4c\x32\x4c\xca\x05\xde\xd6\xa5\x50\x35\x08\xf7\x58\x09\xed\xb9\x0b\xa1\x6d\x99\xdf\x33\xed\x70\x40\x32\x18\x63\x4e\x86\x13\x15\x08\xa7\x95\xf5\x3d\x7d\x61\x98\x8a\xe1\xa7\x05\xe4\xe9\x1d\x94\x69\xdd\xfd\x14\x9a\x05\x4a\x7f\xd1\x39\x0b\x0e\x82\x9b\xe8\xeb\x9b\xf8\xfc\xd3\xf0\x70\x23\x3c\xc6\x57\xb1\xdf\xfd\xb6\x9f\x6b\x4c\xf9\x3b\x24\x9b\xae\x74\xeb\xe8\x4a\x1d\x64\xba\x25\x5c\x8e\xde\xed\x37\xfb\x07\x27\x5f\x9a\xbb\x9f\x0e\x9b\xdd\x0a\x34\xba\x7c\xde\x19\x32\xd6\x1c\x20\xee\xd4\xbd\x85\xb0\x35\x4f\x53\xc2\x8b\xce\x19\x39\x08\x7e\x50\x03\x8c\xcb\xd8\xef\x5e\xec\xe5\x58\xd4\xbd\x9b\xf1\x09\x83\x14\x20\x91\xdf\x98\x08\xc8\x72\x03\xe3\x16\xa0\x54\xc2\xd9\x5d\x8c\x4b\x00\xbb\xba\x55\x80\x7d\xf9\x84\x0f\x37\xd8\x31\xbe\xf4\x3b\x5f\xdf\xe8\x0e\xd5\x2f\x06\x6c\xb0\xbc\x7e\x30\x3b\xf3\xba\xbc\xaa\x0a\xc0\xbc\xae\x02\x43\x67\x17\x93\xe3\xc2\xa0\x65\x0b\x82\x0f\x3e\x8c\xdf\xbe\xbe\x3c\xfa\x7c\xb1\x75\x31\x0a\x86\x47\xaf\x47\xef\x4e\xc4\xfb\xf1\xc1\x79\x2e\x67\x6d\xab\xfa\x13\xa5\xcd\x4c\x48\x55\x4e\x27\xfd\xa2\x42\x7f\x10\xa1\xff\x03\x47\x13\xea\x09\x15\x2a\xe5\x3d\x7a\x30\x44\x24\x4c\x97\x8b\x9f\x7d\x12\x91\xb7\xc1\xb7\xb2\x59\xd8\xe2\xdc\xba\x9d\x90\xfa\x61\x74\xed\x5e\x0f\xbd\x6d\x41\x24\xda\x14\xe1\xe5\x78\xc7\xac\x48\x54\x41\x49\x5e\x5a\xa3\x11\x1c\x6d\xfa\x3b\x3b\xd7\x6e\xc8\x3d\x7f\xdc\x1d\x6d\xa3\x70\xb0\x2d\xc2\xe1\x88\x5e\x76\xfc\x60\x20\x2e\xff\xe7\xbf\x7e\x39\xf8\x7a\x7a\xb2\x0b\xff\x9b\x0a\xd7\xd2\xa8\xfc\x36\x4b\xec\x19\xb4\x89\x00\xc7\xe9\xba\x5d\xc7\x79\xa5\x05\x4f\x1f\xec\x7d\x38\xeb\x9f\x1e\x9c\xf4\x9b\x47\xef\x8e\x4e\x9b\xfa\xb5\x2e\x30\x9a\xce\xa4\x99\x25\xd4\x3d\xda\xa3\x4d\xc6\x37\xdd\x31\x49\xdc\x6d\x86\xd5\x54\x05\xfc\xca\xdb\xd8\xf2\x47\x43\x79\xd9\x46\x9e\x53\xf8\xac\x22\xcf\x4a\xe9\x7e\x0b\x65\x71\x0c\x97\xf4\xab\x33\xdf\x29\x9d\x8a\x73\x3e\xd9\xa2\xe2\x7a\xb0\x21\x8e\xa3\xb7\x97\x9b\x83\xaf\xf1\xfe\xf6\x1e\xfa\x4f\x00\x00\x00\xff\xff\xf2\x8a\x1e\xe5\x7d\x6b\x00\x00")

func managedServicesApiYamlBytes() ([]byte, error) {
	return bindataRead(
		_managedServicesApiYaml,
		"managed-services-api.yaml",
	)
}

func managedServicesApiYaml() (*asset, error) {
	bytes, err := managedServicesApiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "managed-services-api.yaml", size: 27517, mode: os.FileMode(0644), modTime: time.Unix(1607621647, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd8, 0x45, 0x76, 0xea, 0x58, 0x4a, 0x81, 0x52, 0x6a, 0x80, 0x6, 0x4b, 0x67, 0x27, 0x86, 0x6e, 0x99, 0x2c, 0xeb, 0x4d, 0x28, 0xb3, 0x33, 0xa, 0x20, 0x84, 0x39, 0x6c, 0x37, 0x11, 0x2f, 0x5f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"managed-services-api.yaml": managedServicesApiYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"managed-services-api.yaml": {managedServicesApiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
