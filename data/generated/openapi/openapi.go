// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// openapi/managed-services-api.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _managedServicesApiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3d\x6b\x53\xdc\xb8\x96\xdf\xf9\x15\x67\xfb\xee\x96\xef\x6c\xd1\x4d\xbf\x80\x4c\xd7\x66\xab\x08\x90\x84\x99\x84\x24\x34\x84\x90\xad\x2d\x50\xdb\xea\x6e\x81\x2d\x1b\x49\x6e\xe8\xdc\xbd\xff\x7d\x4b\x92\x1f\xb2\xad\x7e\x01\x09\x70\x07\xe6\xc3\xc4\xb6\x74\x74\xce\xd1\x79\xeb\xd1\x61\x84\x29\x8a\x48\x0f\x3a\x8d\x66\xa3\xb9\x46\xe8\x30\xec\xad\x01\x08\x22\x7c\xdc\x83\x8f\x88\xa2\x11\xf6\xa0\x8f\xd9\x84\xb8\x18\x76\x3e\x1f\xac\x01\x4c\x30\xe3\x24\xa4\x3d\x68\x36\x9a\x8d\xd6\x1a\x80\x87\xb9\xcb\x48\x24\xd4\x4b\x5b\x1f\x8e\x99\xec\x24\x21\xd7\x21\x66\x7e\x0f\xc6\x42\x44\xbc\xb7\xb1\x81\x22\xd2\x90\x38\xf0\x31\x19\x8a\x86\x1b\x06\x6b\x00\x15\x80\x84\xc2\xdf\x23\x16\x7a\xb1\x2b\xdf\xfc\x06\x1a\x9c\x1d\x18\x17\x68\x84\x17\x81\xec\x0b\x34\x22\x74\x64\x05\xd4\xdb\xd8\xf0\x43\x17\xf9\xe3\x90\x8b\xde\xab\x66\xb3\x59\xed\x9e\x7d\xcf\x7b\x6e\x54\x5b\xb9\x31\x63\x98\x0a\xf0\xc2\x00\x11\xba\x16\x21\x31\x56\x1c\x90\x68\x6e\x04\x9a\x4b\x75\xae\xb9\xc4\xeb\xf2\xe5\xa4\xb5\x71\x85\x86\x57\x88\x6f\xfc\x83\x78\xff\xec\x29\x90\x23\x2c\xf4\x3f\x00\xc2\x08\x33\x24\x61\x1f\x78\x3d\xf9\xfe\x4f\xd9\xf6\xcd\xf4\xc0\x4b\xbe\x33\xcc\xa3\x90\x72\xcc\xd3\x0e\x00\xb5\x76\xb3\x59\xcb\x1f\x01\xdc\x90\x0a\x4c\x85\xf9\x0a\x00\x45\x91\x4f\x5c\x05\x7a\xe3\x92\x87\xb4\xf8\x15\x80\xbb\x63\x1c\xa0\xf2\x5b\x80\x7f\x67\x78\xd8\x03\xe7\x6f\x1b\x6e\x18\x44\x21\xc5\x54\xf0\x0d\xdd\x96\x6f\x28\xe4\x8e\xf0\x75\x8c\xb9\x70\x8c\x9e\x05\x16\xa9\x46\xc0\x74\x2b\x18\x86\x31\xf5\x60\x30\x05\xe2\xe5\x04\x74\x9b\xad\xc7\x21\x60\x9f\xb1\x90\x39\xa5\x2e\xf8\x16\x05\x91\x6f\x72\x38\xfd\xeb\x36\x5b\xfb\xfa\x63\xf5\x9b\x7d\xa0\x14\xd6\x46\xde\x75\x26\xa3\x76\x62\x31\x06\x11\x5e\x61\x0a\x84\x03\xa1\x13\xe4\x17\x99\xd4\x79\x26\x4c\xea\xdc\x9d\x49\x9d\x45\x4c\x3a\xe1\x98\x01\x0d\x05\xa0\x58\x8c\x43\x46\x7e\x60\x0f\x44\x08\xc8\x75\x31\xe7\x20\xc6\x18\x12\x6d\x6b\x98\x9c\xeb\x3e\x13\xce\x75\xef\xce\xb9\xee\x22\xce\x1d\x86\x70\x55\x50\xc5\x1b\x22\xc6\xc0\x23\xec\x92\x21\xc1\x1e\x10\x0f\xf0\x2d\xe1\x82\xe7\x8c\xdb\x7c\x2c\xc3\xb2\x22\xe3\x36\x9b\xcd\xbb\x32\x2e\xef\x3a\x5b\xe4\x28\xbe\x8d\xb0\x2b\xb0\x07\x58\xe2\x05\xa1\xab\xcc\x7e\xaa\x9b\x1c\xbb\x31\x23\x62\x9a\x8f\x5d\x87\x37\x18\x31\xcc\x7a\xf0\x3f\xff\x9b\x36\x8a\x83\x00\xb1\x69\x0f\xde\x61\x01\xa8\x34\x13\xb9\x39\xf4\xb0\x8f\x05\xb6\x3a\x03\xfd\x69\x39\x7f\xf0\x04\xe5\xbd\x0c\xe9\x6f\x87\x21\xec\x6a\xc4\x66\x31\x7e\x4f\x51\xfc\xe2\x27\x5e\xfc\xc4\x8b\x9f\x28\x72\xae\xab\x55\xe3\x1e\xde\xa2\x00\xe0\x2f\xea\x33\xee\xc7\xc4\x32\x80\xbb\xfb\x8f\xd4\x35\x68\x70\x73\xbc\xc3\x52\xbe\x26\x42\x0c\x05\x58\x24\xa9\x98\x6e\xa2\x09\xa9\x15\x08\xc9\xdb\x6d\x10\xaf\xb6\x5c\xce\xa2\x21\x46\x32\x6b\xb2\xb9\x28\x97\x61\x94\xb8\xa8\xe4\x73\x15\x19\x89\x0e\xa1\x3d\xb8\x8e\x31\x9b\x1a\x2c\xa3\x28\xc0\x3d\x40\x7c\x4a\xdd\x59\x8c\xfc\x8c\xd9\x30\x64\x81\xd2\x5e\xa4\xd2\x44\x20\x14\x10\xd5\xbd\xc6\x2c\xa4\x61\xcc\x21\x40\x94\xaa\x7c\x6f\x9e\x30\x89\x69\x84\x7b\x30\x08\x43\x1f\x23\x6a\x7c\x91\x3c\x27\x0c\x7b\x3d\x10\x2c\xc6\x6b\xf9\x4b\xcc\xc5\x9b\xd0\x33\xf8\x6e\xc9\x71\x3c\x24\x50\xf6\xdd\x22\xf7\xf3\xa5\xde\x2e\xf3\xcb\xa6\x5f\x9f\xd1\xd4\x0f\x91\x57\x94\xff\x59\xd2\x7f\xd2\x3f\xc2\x23\x52\x55\xbb\x05\x12\x9f\x76\xb3\x08\xbc\xfc\xdb\x3f\xb9\x13\xd4\xb4\x5b\x05\xea\x8c\xb9\xb0\xc5\x3b\xed\xa7\x95\xff\xce\xe3\x3d\x40\x61\xda\x42\x2e\x8e\x12\x92\xee\x6a\x88\x4c\x78\x0b\x63\x07\xd7\xc5\x51\x29\xa6\x7a\x1e\xf6\xba\xdb\x6c\xee\x4a\xf3\x92\x4b\xca\x1d\xdc\x5e\x19\xc4\x4c\x3e\x7d\x95\x31\x95\x6a\xa9\x6d\x36\x2f\x1b\xed\x97\x68\xf4\x25\x1a\x9d\x1b\x8d\x66\x60\x3f\xa2\xdb\x1d\xdf\x0f\x6f\xb0\x77\x40\xb9\x40\xd4\xc5\x47\x18\xb9\x63\xec\xdd\x63\xbc\x45\x30\xe7\x87\xc5\xc3\x90\x0d\x88\xe7\x61\x0a\x98\x88\x31\x66\x30\xc0\x2e\x8a\x39\x56\x8e\x35\x96\x2d\x08\x5f\x2a\x76\x86\xb0\xd8\x37\x40\xb7\x24\x88\x03\xa0\x71\x30\xc0\x0c\xc2\x21\x90\x04\x3d\xd9\x0d\x09\x70\x11\x85\x01\x4e\xe2\x04\x55\x06\x14\x63\xc2\xf5\x98\x63\xc4\x61\x80\x31\x05\xa6\x49\x79\x9e\x81\xf9\x4f\x2c\xe0\x1c\x8f\x71\x1a\x8a\x60\x4f\x3a\xc2\x30\x66\x2e\x06\x2f\xc4\x9c\x3a\x42\x07\xe2\xcf\x32\x0e\xff\x89\xb5\x9b\x1d\x0a\xf1\xac\xf0\x5b\x8b\x21\xa1\x23\x25\xbb\x3a\x84\x4b\xdc\xe8\xf2\xd1\xb6\x11\xbe\x2b\xdf\x22\xc3\x77\x8a\x6f\x92\x10\xde\x04\x67\x14\xf9\xb3\x2e\x47\x58\xc4\x8c\x72\x40\xe0\x13\x2e\xa4\xc2\x14\xaa\xe5\xdc\x16\x64\xcb\x96\xaa\x15\x5f\x05\xcb\x65\xd6\x0d\x8a\x9c\x9b\x8f\xd2\x2f\x15\x29\x33\xc2\xf9\x40\xcc\x58\xab\x12\xbe\x14\x68\x78\x83\xbc\x14\xef\x67\xa0\x09\x07\xda\x77\x7e\x91\x89\xd1\x3d\x42\x1c\x0b\x18\x67\x76\xd0\xb2\x82\x2f\x7f\xba\x9c\x7b\xe0\x08\xe7\xaf\x1b\xb4\xdc\xbb\x84\x56\xf6\x3a\x2b\x15\x42\x9e\x32\xab\x1f\xd4\x4d\xd9\xab\x22\x36\x20\x46\x91\x26\x42\x23\x63\xae\x16\x36\xe7\xe4\xc7\x2a\xcd\x43\xe6\x61\xf6\x66\xba\xca\x00\x18\x31\x77\xec\x2c\x2a\x1c\xb9\x7e\x18\x7b\xe7\x11\x0b\x27\xc4\xcb\x08\x9e\xe1\x0b\x19\xc1\x13\xac\x45\x2b\x75\x3e\x3c\x8e\xa2\x90\x49\x91\x51\x80\x20\x03\xd4\x98\xe5\x1b\x77\x65\xbb\xcf\x69\xb3\x7b\xfa\x48\xa7\xdd\x6c\x3a\x33\x05\x3a\x45\xd9\x5b\x8c\xee\x63\x88\x78\x81\x13\x45\xbf\xe9\x74\x9b\xad\xd9\x74\xbd\xf8\x01\xcd\xa4\xcd\x79\x93\xff\x62\xcd\x1e\xc1\x9a\xad\x62\x6a\xd4\x06\x9b\x0d\xa6\x8a\x8b\xf7\xb0\x3b\x09\x00\xf9\x52\xf9\xbc\x19\x1a\xbe\x9c\x3d\xd2\xa5\xce\x27\x63\x95\x52\xe2\x1e\xcd\x3a\x69\x7e\xbc\xd8\xa6\x17\xdb\x94\xfd\xfd\x32\xdb\xb4\x60\x39\xac\xd8\xf8\x97\x1a\xb2\xe4\x19\xb9\x6e\x18\x53\x51\xb5\x5d\xcb\x98\x84\x5f\x36\xbd\xc9\x1e\xd0\x1d\x8d\x6c\x51\x95\x4b\x62\xf9\x21\xb5\x47\x49\xf9\x30\x25\x70\xb6\xea\x3f\x55\x21\x7d\xcc\x9a\xba\xd3\x6d\x76\x9e\x09\x93\x9e\x44\x7a\x3a\xdb\x66\x3e\x55\xc6\x3d\x83\xfd\x6c\x95\x30\xa7\x68\x06\x78\x39\xca\x52\xaa\x6f\xd5\x7b\x73\x37\xc1\xe2\x95\xf6\x12\x88\x4a\x79\xef\x17\x2c\xbb\x17\x29\xb5\x2e\xff\xce\x9a\x5a\xbe\xa4\xdc\x64\xd3\x69\x1d\xeb\xce\x2b\xe5\x4f\xc5\x49\x2c\xaf\x09\x45\x4f\xb8\xb2\x36\x14\x87\x5d\xa4\x18\x65\xd9\x4a\x96\xa9\x5e\xbc\xd3\x8b\x77\x5a\xd9\x3b\xf9\xf6\x50\xe7\xc5\x17\xfd\x6c\x5f\xa4\x95\xb6\xa8\xf8\x65\x67\x94\xad\xd4\x55\x67\xc7\x59\x25\x30\x57\x15\x86\x64\x16\xab\xbb\xf8\x6c\x53\x6f\xd9\xdf\x5c\x58\x50\x4f\x4d\x8f\xda\x67\x29\x3f\x8c\xc8\x44\xea\x99\x6d\x77\xf8\x3d\x73\x1b\xbb\x7f\xe8\x3e\x11\xa1\x2c\x30\xca\x2b\x6d\x04\x7f\x31\xc4\x8a\x2d\xe8\x5f\xc5\x10\xdf\x83\x49\x4f\x3d\x4d\x80\x7f\xfc\xf3\x5f\xd6\xd4\x6a\xb5\x9c\x6f\x6a\x13\x1b\xf7\x10\x86\x76\x83\x61\x8e\x45\xdd\x65\xd8\xc3\x54\x10\xe4\xf3\x64\x96\xcc\x0c\xe2\xa7\x18\xc5\xe7\x16\x34\xa3\xba\x62\xd5\x4f\x0e\x97\xd5\x18\x60\x4c\xc7\x9d\x05\x49\x41\x2a\x0e\xbe\xcb\xb0\x57\x49\x22\x2b\x23\xc2\x30\x64\x36\xff\xb9\x96\x53\x27\xb1\x48\x18\xaa\x11\xfa\x34\xb8\xc4\xae\x38\xc2\x43\xcc\x30\x75\x33\x55\xd3\x3b\xc2\x43\xf5\x31\x95\x25\x26\xb1\x14\xc4\xe4\x31\xf1\x4c\xae\xea\x4e\x5c\x30\x42\x47\xd9\xeb\x2b\x42\x17\x37\x1a\xcb\x79\x98\xd7\x48\x26\xcc\x66\x5a\xac\xf2\x3b\x83\xa3\x72\x14\xe3\x31\x42\x23\x6c\x3c\x72\xf2\xc3\x7c\x14\xa1\x40\xbe\xf1\x4c\x04\x0e\xf8\x6a\x84\x2f\x45\x95\xc4\xa2\xda\x88\x50\x81\x47\xc6\x96\x7c\x89\xdc\xe2\x56\x0a\xe7\xf9\xcd\x94\xa3\x49\x9b\x20\xdf\xff\x34\x5c\xa4\xf4\xa9\x6a\x95\x84\xc0\xac\xf7\x5a\xf8\x31\x8b\x27\xa0\xac\x81\x57\x31\xd7\x56\xde\x80\x9a\x48\x64\xb1\x0d\x33\x9b\x67\x4a\x72\x5e\x14\x3b\x6b\x27\xc5\x0c\x53\x6a\x56\x62\x88\xec\x78\x0f\x2e\x28\x81\xb2\xa3\x88\x18\x43\xd3\xd2\x17\x6b\x73\x98\x8b\xa0\x22\x4f\x63\x68\x6e\x07\x7b\xe4\xd9\xe7\x02\x89\x78\x06\xe1\x96\x09\x2d\xae\x50\x2e\xdd\x2d\x88\x7d\x41\xce\xd1\x0f\x7b\x87\xea\x29\x16\x48\xd6\xf5\x96\x17\xb4\x1b\xba\x02\x3a\xea\xa8\xce\xb2\x8d\x07\x61\x28\xb8\x60\x28\xea\xab\x7b\x18\xde\x1b\xbe\x7a\x31\xbb\x74\x01\xe6\x1c\x55\xba\x0c\x43\x16\x20\xd1\x03\x0f\x09\x5c\x17\x24\xc0\xcb\x82\x8c\x23\xef\x61\x41\x5a\x8f\xb7\xda\x84\x6f\xde\x79\x8d\xaa\x5c\xff\x6c\x45\xb6\xa2\xad\x6c\x3c\xd4\xca\x78\xd4\x0a\x8d\x94\x8d\x87\x5a\xab\xf8\x56\xd9\xf4\xca\x5b\x6d\xc3\x2b\xaf\xa5\xfa\x2f\x53\x71\x5d\xf6\x88\xcb\xcf\xb5\x4a\x25\xf6\xe7\x7f\xf3\x27\xc2\xc4\xb9\x3a\xbf\xc9\x79\xad\x14\x6c\xf1\xe6\x12\x05\x21\x8b\x6d\xb2\x73\x80\xa1\x37\x05\x8e\xa9\x90\xf9\x4b\x72\x20\x0f\x3e\x7f\xea\x1f\xcf\x89\x12\xa4\xaa\xae\xe6\xe7\x67\x9b\xa8\xca\x66\xf4\xe2\x66\x02\xb8\x19\x63\x86\x8d\xbd\xd4\xae\x1f\x73\x21\xdf\x13\xdf\x37\x77\xfd\x13\xba\x28\x8c\xb0\xd9\xbb\x22\x87\xb0\xd0\x27\x07\x44\xa8\x4a\xde\xf2\xff\x6e\x48\x87\x64\x14\x5b\x51\x10\xa1\x44\x40\x81\xdd\xf9\x5e\x19\xbd\x6c\x40\xcb\xf6\xad\x30\xb4\x23\x29\x97\x2d\xd2\x0d\x21\x85\x91\x1a\x70\x20\x20\x88\xb9\x90\xe8\xf0\xa4\x06\xe8\x87\x37\x98\xd5\x5d\xc4\x31\x20\x3f\x1a\x23\x1a\x07\x98\x11\x17\xdc\x31\x62\xc8\x95\x19\x08\x84\x0c\x1c\xa7\xee\x38\xeb\xd2\xa3\xb0\xa4\xfe\x83\xa8\x6e\x3f\xc0\xc2\x6c\xbd\x0e\x88\x7a\x80\xa9\x57\x6c\x55\x81\xaa\xdb\xb9\x88\xaa\xf4\x77\x80\xc1\x0f\xe9\x48\x32\x63\x8c\x28\x74\xda\xc6\xf0\x0d\x67\xd1\x8c\x54\xfd\x89\xe5\x68\x82\x6c\xf2\x40\x52\x50\xd9\xba\xf6\x58\xb6\xb0\x82\xc8\xe3\x1b\xc3\x02\x4a\xcf\xc5\x1a\x16\x90\xae\xe5\x73\x9c\x6f\x00\x7a\xd4\x19\xce\xd1\x78\x22\xf3\x3b\xf3\xa4\xed\xd3\x9d\x5d\x8d\x72\xad\xaa\xbf\x56\x27\xe7\xec\x16\xb7\xcf\x39\x2b\xe4\x9e\x45\x40\x07\xd4\x23\x2e\x12\xc9\x06\x3e\x49\xb2\x36\xcd\x84\x27\x82\xd0\x80\xd3\xc4\xf8\x38\x4e\x01\x31\xc7\x01\x9f\xd0\xab\xc5\xe6\x8f\xcc\x19\xfe\x84\x92\xeb\x18\x03\x51\x35\x89\x21\xd1\xe7\xde\x24\x26\xc9\xe0\x0b\x81\x7b\x84\x47\x3e\x9a\x9e\xcf\x77\x3b\x87\x86\xcb\x29\x39\x5e\x19\x28\x24\x40\x20\x8a\x59\x14\x72\xbc\x84\x49\x9f\x3f\xdc\xfb\x38\x40\x14\x86\x8c\x60\xea\xf9\x53\x0b\x75\x45\x1c\xd6\x15\x12\x89\x08\xc3\x05\xba\xe1\x17\x8b\x31\xc0\x14\x0d\x7c\x3c\x87\xb5\xa7\x63\xac\xce\x27\x5a\x68\x26\x3c\xed\xae\xc9\xc7\x91\x1f\x4e\x09\x1d\x49\x77\xf8\xa9\xbf\x97\xf9\xe3\x2a\x12\x45\x6f\x6f\x0b\x9a\x12\xc0\x65\x23\x65\x17\xe3\xbd\xfc\x49\xb2\x06\xa5\x7e\x50\xfd\xdb\x7d\x3c\x19\xd7\x38\x3b\xce\xb3\x13\xee\x84\x7f\x36\xa1\x2e\x49\xd9\x61\x03\xbe\x12\x36\x22\x94\xa0\x87\x96\xb6\x04\x89\x87\x92\x32\x3d\xd8\x10\xc5\xbe\xe8\xc1\x10\xf9\x1c\x2f\x29\x7e\xc5\xa2\xa8\x5d\x02\xb3\x4b\x18\x8b\xdb\x16\x80\x50\xf8\xb8\xd3\xaf\xf7\xfb\x9f\xb2\x54\x42\x87\x64\xbb\x49\x48\x26\xdf\xa2\x58\x8c\xe5\xdc\xea\xd2\xb5\x73\x17\x1f\xfc\x70\xd5\x94\x6a\x95\xab\x48\xa9\xbe\xca\x11\x46\x98\x62\xa6\x48\x8c\x53\xf1\xcc\x76\x67\x17\xeb\xc0\xe5\x9a\xf9\x4a\x25\x8d\xe2\xd8\x4b\x83\x32\xbb\x3d\x0c\x44\xd7\x27\x98\x8a\x83\xbd\x15\xca\x4c\xb2\x43\x1f\xbb\xac\xba\x08\xf0\x60\x65\x0c\xeb\x62\x41\xcd\x22\xb5\xa5\x4a\x5d\x49\x78\xed\xb9\xae\xcc\xe7\x66\x2c\xd2\x3b\x0f\x9a\xee\xae\x96\xeb\xcd\x11\x2f\xbb\xf5\xb3\xcb\x42\x71\x90\x1d\xf3\x79\xd6\x8a\xc6\x82\xa1\x2a\xd3\xb7\xc2\xd4\xd9\x4a\x51\xd5\x4d\xbd\x07\x46\x18\x6b\x97\xe3\xbf\x9c\xd1\x98\xa5\x97\x77\x54\xf3\xc7\xb3\x41\xd5\xd9\x9e\x99\x8c\xdd\x21\xc1\xaa\x42\xaf\x26\x48\x95\x54\x64\x85\x75\xca\x54\x3a\x57\x48\x96\xca\xc1\xd6\x5c\x66\x3e\x6a\x66\x65\x27\x55\x32\xb0\xbc\xd2\x9d\xeb\x81\xbe\x4a\x2b\xdb\x0a\x52\xa9\xd4\x68\xc9\x67\xd8\x0d\x59\xb6\xf8\x5f\x5a\x9e\xb6\x30\x83\xd0\x1e\x44\x48\x8c\xcb\xe6\x37\xdf\x73\x6a\xae\xfe\x69\x1c\x8c\x55\xc9\xf2\x9d\x5f\xc5\x9b\xbd\xd0\x08\x03\xa1\x1e\xbe\xad\x40\x37\xa3\xa5\x25\xb0\xac\xae\x8a\x97\xd7\x24\x27\xc8\x8f\x8d\xec\xdd\x5c\x8c\xd4\x48\x1b\x6b\xa7\x73\x91\x3e\xcc\x6f\x39\x91\x53\x2e\xe3\x2d\x8c\xdc\xb1\x49\xf4\x03\x92\x51\x5e\x34\xcd\xc8\x68\x36\x35\x21\xc9\x09\x5e\xab\x8d\xfe\xbf\x7a\xd6\xb3\x9f\x5c\xde\xa7\x33\x09\xd5\x09\x06\x53\x70\x19\x11\x98\x11\xd4\x50\x12\xc2\xa7\x54\xa0\xdb\x2c\xc5\xc8\x44\x0d\x08\x37\x10\x0a\x88\x8f\x54\x6d\x55\x94\xba\x60\x38\x4f\x01\x9f\x83\xeb\xab\xfb\x61\x64\x3e\x44\xa1\xff\xe5\x83\x5a\x33\xc3\x01\xa6\x22\x3f\x37\xbe\x2f\xf9\xa6\x18\x9d\x5e\x11\xa3\xfa\xeb\x2b\x62\x10\x9d\xa6\x60\xaf\x8c\x0a\x3a\x87\x21\xc1\xbe\xc7\x73\x28\x6f\xf3\xe4\x60\x5d\xce\x86\xc6\x41\x84\xc0\x92\x13\x71\x52\x09\x21\x29\x9c\x1b\x03\x88\x31\x26\x2c\x31\xbf\x19\xb0\x8b\x8b\x0b\x7e\xed\x17\xe2\x04\x40\xdc\x35\xbf\xe7\x8d\x3f\xb1\xbb\x8d\x07\xe7\x88\x7a\xe7\x59\xc4\xee\x21\xb1\x04\x0a\xeb\xc6\xba\xd8\x6c\x94\x0e\x34\xc7\xcc\xa9\xa3\x8e\x48\x73\x51\x6f\x1d\x42\x06\x44\xb7\x51\xa2\xa4\x72\x9d\x20\x12\xd3\x75\xf9\x2e\x4f\x5c\x74\x54\xc6\x63\x5f\xf0\xac\x86\x6b\xd0\x22\x91\x6a\x64\x42\x1b\xf9\xa1\x87\x0b\xbb\xd0\xab\x82\x5c\x92\x53\x53\x96\x53\x0a\x6b\x33\xd4\x4f\xeb\x67\x02\xe0\xbe\x2a\xc6\xc5\xd4\xc7\x3d\xb5\xec\xa7\x0d\x81\x3a\xcf\x6e\x57\x9f\x5c\x7b\x54\xa3\x5c\x5b\x72\x7e\x2f\x50\x9b\x05\xea\xa2\xaa\xe6\x45\x5d\xc9\xc7\x2c\xe8\x0c\x24\x17\x3f\x25\xd2\x2f\xe5\x4e\xc7\x30\x0a\x31\xc4\x70\x2f\x49\x5e\xd7\x4b\x4b\x39\xeb\xd9\xb2\xca\xba\x62\xe4\x7a\xb2\x78\x9d\x43\x94\xee\x07\x31\x24\x42\xc6\x25\x20\xb8\xf8\xaf\xff\xbe\x50\x6b\x08\x17\xaf\x2f\xec\x4a\x66\xca\xba\xe5\xa2\x50\x35\x9f\xf8\x3a\x46\x3e\x5c\x04\xd3\xba\x6a\xa1\x21\x26\xf9\x75\xf2\x0d\xdd\xf0\x8b\x75\x43\x14\xf9\x38\x8c\x7d\x0f\x06\x25\x65\x28\x6a\xc2\x6b\x48\x41\xea\x75\x8e\x02\xb1\xf0\x1a\xd0\x0d\xff\x29\x9a\xa1\x94\x3a\x33\x46\xdc\x50\x14\x24\xf2\x1b\xb4\xc6\x88\x43\x84\x59\x40\x38\x97\x84\x8a\x10\x38\xc6\x99\x02\x31\x75\xef\x8f\x79\xc7\xd5\x61\x28\x70\x23\x45\x4d\x5b\xc2\x7c\x4f\xe7\xba\x34\x9d\x7a\xd3\x5e\x19\xc2\x1c\xd5\x4b\xbc\x99\x12\x8c\x19\x0a\x65\x57\x1e\x8b\xf3\x29\xe8\x46\x45\x65\x97\x98\x8a\xda\x5d\x15\x33\xdd\x4d\xa6\x12\xc5\x14\xa7\x64\x3b\x99\x09\x13\xf7\x60\xa0\xde\x26\x2f\xf5\xc3\xdb\x64\x51\xff\x8f\xd3\xe3\x42\x5e\x38\x16\x22\x5a\x2b\x53\x5a\xba\xdf\x32\x05\xaf\x49\xcd\x30\x4e\x96\xc2\xa0\x16\xf3\x3a\x46\x5c\xd4\x8d\x7a\x7f\x69\xf1\x14\x6a\x06\xe5\xe9\x84\xd4\xd2\xbd\x8d\x11\x11\xd9\xd2\x70\xe9\x12\xcc\x45\x43\xe3\xb8\x7e\x83\x1f\x68\x68\xcb\xda\xfa\x8c\xe1\x89\x8c\xe6\x5b\xa4\x7f\xb6\x75\xf4\xa5\xf3\xc7\x9f\x07\xaf\xbe\x34\x3f\x1d\x07\x97\x5f\xde\x7a\x9d\xd0\x7d\x7b\x34\xca\x87\x4b\x22\x7f\x25\x12\xf9\xdb\xb1\x8e\x73\x97\xf9\x6d\x8c\xa5\x46\x49\x36\xdf\x40\x4d\x1a\x2e\x1f\x0b\xbc\x2c\x37\xb2\xf5\x65\x53\x5d\xe6\xcf\xac\xde\x21\x03\x50\x43\x11\x39\x57\x48\x9e\x27\xa8\xcf\x61\x72\xfe\xc9\xb6\x0b\xc6\x6c\x59\x6f\x11\x3e\xdd\x62\xd7\x9d\xcb\x2b\xf2\xea\xba\x19\x8a\xe0\xf2\x7a\x28\x09\x1e\xb2\x51\x03\x45\x11\x6f\x04\xbc\x3e\x10\x62\xd4\xbc\xa4\xad\xed\xe6\x38\x6a\xdc\x6e\xc6\xaf\x1a\xbc\xd5\xf0\xf0\x44\xff\x08\x4a\xc8\x0c\xd6\x18\x3b\x67\xd4\xfd\xa8\xcd\x7a\xab\x59\x6f\x6e\x1e\xb7\xda\xbd\xcd\x56\xaf\xdd\x6d\x34\x37\x3b\xad\x6e\xfb\x7b\xde\xc3\xd8\x18\x53\xe9\xb1\xd5\xeb\x6c\x35\x3a\x5b\xed\x76\xf3\xd5\x77\xcb\xfa\xce\x7c\xa9\xb1\x2d\xa4\xd6\x8a\x32\x65\x13\xd5\xc2\xbb\x42\x15\x19\x6a\x3b\x01\xfa\x11\x52\x38\xc5\x83\x34\x75\x35\xda\xa6\x75\xde\x7c\x6e\xab\x0b\x6a\x4b\xa0\x6a\xae\x66\x65\x88\x5a\x04\xa3\x84\xda\x49\x1f\xf6\x11\x17\xeb\x60\x14\xa7\xe7\xe1\x36\xaf\x14\x33\x03\xcb\x64\xa4\x60\x5a\x47\x51\x54\xe7\x06\xf8\x42\xd0\x52\x2b\x9f\x29\x19\x86\x0c\x82\x29\xa0\x28\xb2\xd5\x78\x96\x51\xfd\x8a\x82\x17\x41\xac\xa6\xe9\xe5\x2d\xde\xad\x8a\x08\xdc\x9b\x42\x30\x8b\x34\x50\xeb\xef\xd4\x5b\x6d\xf9\x5f\xf9\x6b\x52\x29\x95\x00\xe5\x3f\xe6\x95\xc0\x1e\x80\x4d\x66\x12\xff\x8c\xd8\x35\xfb\x02\x5e\x2b\x13\x9a\x9d\x0a\x1b\x8c\x2d\x9c\xcb\x52\xad\x2f\xdf\xdd\x28\x40\x53\x3b\x6e\xa1\xf6\x69\xf7\x63\x7d\xff\x5b\xbd\xf0\x29\xd9\x5f\x0b\xb5\xbe\x71\x21\x78\x72\x55\xf8\xdf\xb3\xeb\x1e\x0b\x91\x2a\xff\x4d\x06\x5a\x31\xcd\xee\x48\x59\x97\x01\x9c\xbe\x52\xfc\xb5\xda\x5b\x94\x05\x8a\x86\x37\x30\x37\xe6\x4a\x9f\x78\x7a\x40\x82\xeb\x77\x2e\xdb\x8b\x3f\x6c\xb5\xd0\xc9\xed\xc1\xf7\xeb\x37\xc7\xd7\x87\x47\x28\xe3\xdd\x9c\xdb\xfd\x6c\xfc\x6b\x3f\x28\xff\xda\x55\xf6\x7d\x7c\xb7\x57\xef\xef\x1f\x7d\xad\xef\x7c\x3e\xa8\xb7\x6d\x3c\x7c\x8b\x88\xaf\x0f\xcb\x44\x88\xf1\x2c\xc5\x50\xf1\x63\x0f\x4e\x94\x29\x93\x5f\xd5\x51\xc7\x22\x4f\xf5\xd2\x52\xd9\x53\xf6\xa0\x34\x68\x0f\x16\x8d\x61\xdc\x5c\x13\xfa\x71\x40\x75\xe8\x2f\xa1\x27\x21\x29\x38\xc4\x73\x1a\xd0\xb7\xb5\xe3\xc5\x74\x48\x27\x3d\xe5\xa4\xa8\x98\x0a\x7d\xd1\x91\xb7\x9e\xab\x1e\x10\x0f\x5e\x43\xcb\xe4\x4e\x79\xe6\xfd\xd3\xbd\x77\xf1\x74\x70\xc0\xf6\xe9\x2d\xdb\xc1\xc1\x76\xbb\x3b\xba\xbe\xba\x22\x7b\x93\x74\xe6\xcb\x57\xc2\xda\x66\xbb\xdb\xec\xae\x32\xdb\x23\x24\xf0\x0d\x9a\x1a\x13\x5c\x00\x90\xcc\xf0\xbb\x9d\xe3\xfd\xd3\x9d\xb3\x7a\xe1\x5b\x36\xbb\xcb\xdc\x26\x9b\x91\x60\xfd\xa5\x04\x0b\x21\xce\xb6\x53\x22\x43\x51\x71\x17\x91\xdd\x2e\xd3\x93\xe8\xfb\x76\x85\x94\x24\x80\x4d\x08\x50\x89\x27\xf1\x5e\x3b\x2d\xf2\x67\xc7\x8b\xbf\x9e\x1d\x4c\x26\x9b\x67\x93\x0f\xfe\xf4\x47\x2b\x78\x77\xd4\xf9\x63\x7a\x7d\xe8\xa8\x1d\x71\xea\xa7\xc8\x66\x4c\x6c\x8b\x9c\x7d\xda\x1e\xb5\x47\x5b\xef\x8f\xbd\x93\x3f\x4f\x50\xfb\x8a\xbf\x7f\xd5\xbe\xfa\xb2\xd7\x99\x26\x3c\x29\x9f\x59\xb3\x1a\xc1\xaa\x2b\xb8\x87\x0d\x6c\xcd\x34\x81\x2d\xcb\xfc\xe6\xfa\x39\xc1\x8c\x0c\xa7\x32\x05\xd2\x87\x05\x7b\xea\x5a\x5a\x99\xf6\x65\x67\xe2\xf4\x4d\xe7\xfa\x28\x61\xc6\x9a\x39\xe6\xee\xac\x73\x32\xde\x1f\xdf\x04\xdf\xde\x44\xa7\x9f\x87\x07\x6d\xff\x10\x5f\x45\x5e\xf7\xfb\x5e\x2a\x31\xe5\xa3\xd5\x36\x59\xe9\x2e\x23\x2b\xcb\x70\xa6\x5b\xe2\x4b\xc1\xca\x74\x2b\xac\x51\x27\x02\x9d\x61\x18\xd6\x07\x88\x39\xcb\xde\x75\xdd\x98\x25\x29\xfe\x59\xe7\x84\xec\x8f\x7f\x50\x83\x19\x97\x91\xd7\x3d\xdb\x4d\x79\xb1\xec\x0d\xe0\x4f\x98\x49\x63\xc4\xd3\x7b\xb9\x01\x59\xee\xf9\xde\x02\x94\x14\x91\xb2\x1b\xbf\x17\x30\xec\xea\x56\x32\xec\xeb\x67\x7c\xd0\x0e\x0f\xf1\xa5\xd7\xf9\xf6\x46\x75\xa8\x1e\x82\xb4\xb1\xe5\xf7\x07\xb3\x33\xbf\x97\xb5\xaa\xc0\x98\xdf\xab\x8c\xa1\xf9\xcf\xdf\xe0\xc2\xa0\x65\x0b\x82\xf7\x3f\x4c\xde\xfe\x7e\xf9\xf1\xcb\xd9\xd6\xd9\x68\x3c\xfc\xf8\xfb\xe8\xdd\x11\x7f\x3f\xd9\x3f\x4d\xe9\x5c\xda\xaa\xfe\x44\x6a\x13\x13\x52\xa5\xd3\xd1\xf5\x26\x75\xc6\x53\xfd\x8c\xe6\x94\xba\x5c\x06\xc9\x69\x8f\x1e\x0c\x33\xe7\xed\x25\xa7\x3c\xd3\x36\xf8\x56\xd4\x0b\xc9\xed\x6d\xb3\xe3\x53\xcf\x0f\xae\x9b\xd7\x43\x77\x9b\x13\x81\x36\xb9\x7f\x39\x79\x65\x1e\xb2\x90\x5e\x3d\xdd\x2d\xac\x38\x38\xda\xf4\x5e\xbd\xba\x6e\xfa\xcc\xf5\x26\xdd\xd1\x36\xf2\x07\xdb\xdc\x1f\x8e\xe8\x65\xc7\x1b\x0f\xf8\xe5\x7f\xfc\xdb\xdf\xf7\xbf\x1d\x1f\xed\xc0\x7f\x6a\xe2\x1a\x8a\x2b\xaf\xf3\xbd\x4a\x06\x6c\xc2\xc1\x71\xba\xcd\xae\xe3\xac\x2b\xc2\xf5\x8b\xdd\x0f\x27\xfd\xe3\xfd\xa3\x7e\xfd\xe3\xbb\x8f\xc7\x75\xf5\x59\x15\xb0\xb2\x99\x34\x37\x3e\xa9\x1e\xad\xd1\x66\xc8\x36\x9b\x13\x12\x37\xb7\x43\x2c\xa7\x6a\xcc\xae\xdc\xf6\x96\x37\x1a\x8a\xcb\x16\x72\x9d\xc2\x49\xd1\x74\xa3\x8d\xea\x37\x97\x16\xc7\x70\x49\xbf\x39\xb3\x9d\xd2\x31\x3f\x65\xd3\x2d\xca\xaf\x07\x6d\x7e\x18\xbc\xbd\xdc\x1c\x7c\x8b\xf6\xb6\x77\xd1\xda\xff\x07\x00\x00\xff\xff\xcc\xfd\x7d\xd8\xe4\x75\x00\x00")

func managedServicesApiYamlBytes() ([]byte, error) {
	return bindataRead(
		_managedServicesApiYaml,
		"managed-services-api.yaml",
	)
}

func managedServicesApiYaml() (*asset, error) {
	bytes, err := managedServicesApiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "managed-services-api.yaml", size: 30180, mode: os.FileMode(420), modTime: time.Unix(1608028385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"managed-services-api.yaml": managedServicesApiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"managed-services-api.yaml": &bintree{managedServicesApiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
