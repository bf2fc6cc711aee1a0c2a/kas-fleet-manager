// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package connector generated by go-bindata.// sources:
// pkg/api/connector/openapi/api/openapi.yaml
package connector

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x59\x73\xdb\x38\xf2\x7f\xf7\xa7\xc0\xdf\xff\xdd\xd2\xcc\xee\xc8\x92\x7c\xc6\xac\x9a\x07\xc7\x71\x32\x4e\x62\xc7\xe3\x63\x92\xcc\xd6\x96\x0b\x26\x5b\x22\x6c\x12\xa0\x01\x50\xb1\xb2\xb5\xdf\x7d\x0b\x00\xef\x4b\x94\xe5\xf8\x98\x62\x9e\x22\x10\x68\x34\x1a\x8d\xfe\x75\x37\x9a\x34\x0b\x80\xe2\x80\x58\x68\x63\x6d\xb8\x36\x5c\x21\x74\xcc\xac\x15\x84\x1c\x10\x36\x27\x81\x24\x8c\x5a\x68\x9f\x51\x0a\xb6\x64\x1c\x9d\x01\x9f\x12\x1b\xd0\x5b\x0f\x40\xa2\x23\x4c\xf1\x04\x38\x22\x02\x61\x74\x0a\x42\xa2\xbd\x93\x43\x24\x19\xf2\xf5\x03\x64\xc7\xe3\xc4\xda\x0a\x42\x92\x48\x0f\xe6\x12\x5b\x41\x68\x0a\x5c\xe8\x79\x87\x6b\xc3\xb5\xd1\x8a\x00\xae\x5a\xac\x95\x7e\x9e\xab\x23\x4c\x28\xfa\x29\xe0\xcc\x09\x6d\xd5\xf2\x33\x32\x3d\x57\x10\x0a\xb9\x67\x21\x57\xca\x40\x58\x83\x01\x0e\xc8\x9a\x5a\xa5\x70\xc9\x58\xae\xd9\xcc\x2f\x12\x3a\x93\x78\x42\xe8\xa4\x61\xb8\x90\x78\x02\xcd\x44\x3c\x66\x63\xcf\x65\x42\x66\xc7\x5b\x83\x41\xd2\x6e\xbd\x1a\x0e\x87\xc5\x51\x76\xc8\x39\x50\x89\x1c\xe6\x63\x42\xe3\xa1\x83\x15\x89\x27\x7a\xc1\x14\xfb\x39\x91\x9d\xcf\x02\x10\xe5\xf6\x8a\x26\xb4\xef\x85\x42\x02\x17\x2b\x01\x96\xae\x50\x7b\xaa\x96\x32\x48\xf6\xe4\xd2\x9f\xf8\x72\x30\x1d\x0d\x6e\xf0\xf8\x06\xf7\x93\xf6\xbe\x54\x73\x0c\xfe\x93\x76\x54\x0d\x97\xc4\xf9\xaf\xa2\x81\xd0\x04\xa4\xf9\x0f\x42\x2c\x00\x8e\xd5\x42\x0e\x1d\x4b\xb5\x27\x93\x2b\x36\x5f\xcf\x0e\xdf\x44\xfd\x02\xcc\xb1\x0f\x52\x6f\xa2\x69\x29\x88\xe1\xdc\x05\x44\x1c\xc4\xc6\x48\xba\x19\xb5\x41\x6a\xe6\x68\x04\x42\x70\x17\x78\xcc\x01\x0b\x8d\xb1\x27\xd2\x66\x42\x2d\xa4\x96\x98\x34\x18\x41\x94\xd8\x4f\x9e\x73\xb8\x0d\x09\x07\xc7\x42\x92\x87\x29\x1d\x61\xbb\xe0\x63\x2b\xf9\x8d\xf4\xec\x16\x12\x92\x13\x3a\x49\xbb\xc9\x99\xd2\x62\x41\xfc\xc0\x8b\x07\x73\x10\x01\xa3\x02\x44\x3a\x7a\x75\x7d\x38\x5c\xcd\x12\xb3\x19\x95\x40\x65\xb6\x09\x21\x1c\x04\x1e\xb1\xb5\x08\x07\xd7\x82\xd1\xfc\xd3\x2a\x9e\xcc\xbf\xbf\x71\x18\x5b\xa8\xf7\xff\x03\x9b\xf9\x01\xa3\x40\xa5\x18\x98\xbe\x62\x90\xdb\x84\x5e\x66\x68\x49\xe2\x79\x39\x23\x1f\x4b\xdb\x55\xe7\x40\xed\x81\x12\x12\x68\x65\x8e\xd6\xb3\x39\x1c\x2d\xbf\x1e\xb8\xc3\x4a\x6c\xa2\xbc\x22\x45\xff\xc0\x3c\x5d\x2d\x3f\xad\x5e\x71\x4c\x6d\x90\x8e\xed\x3d\x80\x00\x0f\x38\x67\xbc\x56\x70\x7b\xa1\x74\x91\x64\x37\x40\x95\xd9\x23\x74\x8a\xbd\x8c\x6e\xad\x6e\x0e\x37\x7f\xb0\x98\x36\x97\x10\xd3\xe6\xa3\x89\xe9\x98\xa5\xfa\x54\xd0\x33\xb8\x23\x42\x8a\x54\x64\x5b\x0f\x71\x52\x1a\x44\xb6\x35\x1c\xde\x5b\x64\xe9\xd8\x1f\x2f\xb2\x0b\x0a\x77\x01\xd8\x12\x1c\x04\xaa\x23\x62\xb6\x86\x87\x58\xbb\x04\xd8\x21\x27\x72\x96\xda\xd0\xd7\x80\x39\x70\x0b\xfd\xeb\xdf\x71\x97\xd0\xf7\x31\x9f\x59\xe8\x1d\x48\x84\x8b\x82\xbf\x9a\xa1\x44\x55\x0d\xc0\xc4\x84\x8a\x00\xb3\x18\x56\x34\xe3\x82\x47\x44\x1e\x18\x44\x5b\x54\x38\x51\x3e\x04\xa1\x0e\xdc\xad\x34\x6d\x73\x80\x27\x90\xdf\x87\x29\xf6\x42\xb0\xd0\xea\x68\x35\x87\x12\xb7\x21\xf0\x59\x01\x26\xd4\xe0\x0a\x64\xc8\x43\x4c\x2b\x68\x28\x30\x7f\x1c\xfa\x57\xc0\x15\xa4\x11\x09\xbe\xb2\x14\x08\xb0\xed\xe6\x27\xac\x5a\x8e\x20\xdf\xeb\x96\x33\x1c\xce\x5f\x90\x1a\xfe\x30\x0b\x7a\xbe\xa8\xf6\x91\x08\x59\x6f\xa0\xb5\xc6\x29\xc1\xe7\xd5\x5f\x74\x58\xb6\x20\x96\x75\x86\xf9\xe1\x0d\xf3\x29\xc8\x90\x53\x15\x2f\x35\x6b\xe9\xc3\xd8\xe7\x45\x4c\x73\x67\x96\x5f\x86\x59\xae\x08\x9d\xf4\xae\x23\xdb\x04\x7c\x28\x73\x84\x93\x90\x29\x17\xe9\xd4\xf1\xa8\xc9\x54\x47\x4a\xf7\xe0\x33\x09\x95\xc6\x8c\xfb\xcf\x1a\x52\x16\x85\x93\x0e\x49\xca\x52\xea\x90\xe4\x85\x21\x89\x79\x1c\x30\x51\x0d\x0d\x36\x07\x2c\x21\xe9\xdd\x1a\x1b\x80\xab\xe3\xae\x53\x08\x58\x67\xe5\x94\x85\xc5\x14\x61\x31\xa3\xb6\xcb\x19\x65\xa1\x40\x3e\xa6\x14\xf8\x3d\xad\x94\xa6\x54\x61\xa2\x5a\x25\x73\xae\x18\xf3\x00\xd3\x46\x13\xa5\x13\x1f\xaf\x99\x33\x4b\x87\x57\xe8\x6b\xb3\xb6\x56\xab\x4e\x2b\x6b\x94\x2a\x4f\x4d\x0e\xd6\xc1\x12\x37\xaf\xbf\xda\xcc\xae\x3f\xb1\x99\xad\x37\x1e\xb6\x0d\x81\x84\x5c\x16\xe5\xc7\xda\x8b\xcd\xe1\x70\x5f\x29\x38\x61\x74\x09\xf3\x5a\xa4\xf1\xe3\xed\xc7\x1f\xca\xac\xea\x29\x8d\xfd\x10\x45\x03\xd2\x41\x52\x97\xa8\x5b\x4c\x4c\xe7\x69\xb2\x17\x1c\x65\x39\x58\xc8\x6d\x40\x0e\x03\x41\x7b\xd2\x24\xeb\x3a\x20\x2f\x29\x17\x45\x61\x1d\x96\x1b\xec\x8c\x13\xe9\x76\x01\x42\x17\x81\x78\x6d\x5f\x00\x61\x44\xe1\x5b\x89\x50\x03\xae\x37\x05\x87\x22\x13\x1d\x66\x2f\x79\x92\xfb\x1d\x07\x3c\x90\x50\xe9\x14\x98\x47\x0b\x3b\x05\x2f\x2a\x44\x69\x77\x33\x55\x66\x7f\xc1\x4b\xa9\x27\xb8\x8f\x7a\x00\x7b\xf7\xf0\x07\xe9\x8d\x56\xa9\x0e\xbe\x4a\x82\x79\x7a\xf8\x32\x5b\xb3\x0c\x88\xe5\x28\x3c\xca\x9d\x93\x31\x33\x11\x9e\xa1\x6f\x44\xba\x48\x04\x60\x93\x31\x01\x47\x9d\xe3\x27\xb8\x7b\x5a\x52\x8c\x45\x0a\x2f\x2b\x48\x35\xac\x67\xaf\xa2\xda\x44\xa5\x6d\x4a\x0c\x3a\xf0\x79\x51\xe0\xf3\xd4\x39\xbe\x96\x85\x10\x5d\x0d\xc4\xcb\xc0\xa6\x17\x11\x5a\x75\x35\x10\xcf\xa9\x06\xa2\x0d\xf0\x04\x6a\xbb\x2a\xa1\x47\x3f\xe9\xc0\xe7\xf9\x83\xcf\xfd\xb2\xb7\x7d\xbd\xbf\xff\x6c\x9b\xc8\x2d\xdc\x10\xbd\x3f\xfb\x74\x8c\x4e\x14\x85\x5f\xd0\xe9\xdb\x7d\xb4\xbd\x3b\x5c\x47\xfd\xa4\x82\x54\x32\xe6\x89\x35\x02\x72\xbc\xc6\xf8\x64\xe0\x4a\xdf\x1b\xf0\xb1\xad\x7a\x15\xe8\x9a\x75\xb2\xab\x6b\xb0\x65\x0d\xb7\x3e\xf0\x09\x3c\x00\xbb\x47\x8a\x4e\x96\xe9\x9d\x8d\x57\xdb\xf3\x99\x56\xbd\xda\x30\x9d\x0f\xf2\xb0\xc4\x48\x32\x73\x88\x0a\x25\x9e\xca\x47\x6f\x56\x88\x17\x96\xcd\xee\x1c\x8a\xce\xa1\xf8\x41\x62\xea\x1c\x8a\x27\x75\x28\x8c\xf9\x5a\xc8\xa5\x68\x59\x46\x19\x79\x07\x8b\x94\xeb\x24\xe5\xfd\xa6\x63\x57\xb5\xf3\xbc\xab\x76\x9e\x67\x54\x1c\x29\xd1\xc2\xf5\x94\x76\x5e\xf9\x3a\x24\xeb\x0a\x61\x9e\x67\x21\x4c\x41\x51\xeb\xaa\x2a\x73\xc6\xb4\x6d\x4d\x4c\x34\xa8\xb5\x01\xee\x4a\x63\x1a\x94\x69\x11\x73\x35\xb7\x42\x26\x0e\xb6\x5f\x6a\xa5\x4c\x69\x9d\x5d\xc1\x4c\x57\x30\xf3\xd4\xd0\xd5\x05\x61\x5d\xc1\xcc\xa3\x16\xcc\xc4\x66\xfc\x1e\x2e\x41\x75\xe1\x4c\x81\x60\x0b\x67\x60\xc1\xf0\x2d\x5b\x4f\x13\xb5\xdd\xa7\xae\x66\x41\xc7\xa2\xee\xe5\xe9\xfc\x6a\xef\x9f\xb0\x4d\x57\x72\x5f\xd7\xa2\x2b\x59\xe9\x00\xa4\x2b\x59\xa9\x12\xd9\x31\x4b\x11\xa4\xab\x56\x79\xea\x48\xb2\x5c\xad\xb2\x38\x64\xb4\xab\x5e\xe9\x4c\xbc\xd1\xb8\x67\x93\x02\x6b\x79\x9d\x13\x47\x96\xdd\xb5\xce\xcb\x00\x84\x17\x11\x51\x54\x5f\xeb\xc4\xaa\xd6\x5d\xef\x3c\xd1\x37\x33\x9e\x28\x5a\x18\x60\xc7\xd1\x05\x09\x79\x4c\x58\x00\x55\xf6\x14\x81\x93\x64\x7c\x07\x32\x4f\x05\x32\xf9\x8d\x68\xbc\x65\x51\xc2\x4f\x77\x08\x49\x17\x4b\x24\x5c\x16\x7a\x0e\xba\x02\x14\x0a\x70\x90\x64\x8a\xf3\x31\x99\x84\x1c\xf4\x16\x99\xaf\xac\x39\x39\x96\xd2\x6d\xd3\x6a\x84\x18\x35\xbb\x69\x64\xbf\xd6\x61\x54\x87\x51\x1d\x46\xfd\xe5\x30\xaa\x27\xa2\xe3\x1e\x14\xad\xfe\x5c\xd8\x4a\x97\xa3\xba\xe5\xc5\x5d\x75\x88\xcd\xfd\x79\x6a\xf5\x1d\x0b\xad\x8e\x32\xb5\x01\x37\x84\x3a\x16\xd2\x12\x49\xda\x5c\x2d\x3b\x0d\x8f\xe6\x1d\xb4\x04\x1b\x4d\x52\x7e\x30\x1a\xad\xa4\x5a\xa2\xa0\xe5\xc3\xde\xdb\x0f\x7b\x67\xfd\xa3\x77\x47\xe7\xfd\xcc\x43\x0e\x58\xe9\x08\xea\x5d\x50\x7c\xe5\x81\x32\x89\x53\xe0\x64\x3c\x43\xef\x3f\x9f\x9b\x53\x6c\xa1\xd3\x08\x54\x10\x0e\xa5\xcb\x38\xf9\x6e\xf2\xff\xe6\x8c\x53\x26\xd1\x98\x85\xd4\x49\xb7\x2b\x81\xd3\x4b\xb5\x98\x11\xf9\xba\x71\xe1\x1e\xb8\xdf\xfc\x2f\xaf\x83\xcf\x27\xe3\xc3\x75\xef\x18\x6e\x02\x67\xf3\xcf\x37\xb1\x4c\x4a\x27\xb6\x4a\x26\xca\x70\x2c\x27\x94\x9d\x06\x99\xec\x94\x44\xd2\x3a\x2d\x5d\x75\x6e\xaa\x16\xb0\xbb\x24\xfb\xbb\x0d\xec\xef\x96\xd8\xbf\xa0\x69\xe6\x03\x72\x13\x15\xb7\x07\x0e\x3e\x4e\xdf\xee\x5e\x1f\xfd\xfe\x75\xfb\xeb\xc4\x1d\x1f\xed\x4e\xde\x9d\x8a\xdf\xa6\x07\x9f\xe3\xed\xa9\xbd\xa9\xaa\x54\xdd\xe1\xc6\xb2\xba\x3b\xdc\x68\x52\xde\xcc\xd3\x78\xad\x67\x99\xfb\xde\xf8\x26\x58\x68\xcd\x14\x61\x10\x30\x2e\xc1\xf9\x45\x41\xbe\xb9\xcf\xfd\x55\xb9\x46\xe9\xc1\xae\x95\xcb\xe7\x43\xe2\xdf\xbe\xb3\xf9\x9b\xf0\xe3\xf6\x08\x5f\xdc\x1d\xfe\x79\xfb\xfa\xfc\xf6\xf8\x14\x27\x6a\x5b\x9d\xdb\xa9\x92\xca\xce\xa3\xaa\xee\x07\x45\xe3\x34\x97\x06\x23\xce\xaf\xbd\x11\xf9\xb0\xe1\x84\x7f\x7c\x3d\x9c\x4e\xb7\xbe\x4e\x3f\x7a\xb3\xef\x23\xff\xdd\xe9\xc6\xfb\xd9\xed\x71\x2f\x3d\xc7\xf5\xc7\xf8\xd3\xce\x64\x7d\xb2\xfd\xdb\xb9\x73\xf1\xe1\x02\xaf\xdf\x88\xdf\x5e\xad\xdf\xfc\xfe\x66\x63\x96\x9c\x82\xf6\xf2\x78\xdc\xb3\xd0\x33\x30\xa1\x6f\x05\xf4\x77\x69\x67\xd4\x16\x20\x2d\xf4\x69\xff\xa8\x7f\xf0\xa5\xbf\xab\x5c\x6f\xe2\x19\x97\xd0\xdc\x1d\xa4\x7d\xe0\x4e\xf6\x85\xf9\xb0\x2e\x0e\x48\x7f\x44\xee\x86\x1b\x1e\x75\x3c\xff\x76\x78\x3b\xb6\x77\x04\x91\x78\x4b\x78\xd7\xd3\x57\x90\xc1\xab\x71\x06\xcb\xb5\xf4\x26\x5b\xce\xab\x57\xb7\x43\x8f\xdb\xce\x74\x73\xb2\x83\xbd\xab\x1d\xe1\x8d\x27\xf4\x7a\xc3\x71\xaf\xc4\xf5\xdf\xff\xef\xa7\x83\x2f\xe7\xa7\x7b\xe8\x1f\x66\x81\x6b\x5a\x1e\xbf\x12\x07\xa8\x54\x67\x98\x67\x68\x13\x81\x7a\xbd\xcd\xe1\x66\xaf\xf7\x8b\x5e\xbd\x69\xd8\xff\x78\x71\x76\x7e\x70\x1a\xc9\x40\x3f\x46\x98\x3a\xe9\x2e\xa2\x94\x98\x19\x31\x9a\x6c\x31\xbe\x35\x9c\x92\x70\xb8\xc3\x40\x6d\x92\xcb\x6f\xec\xf5\x6d\x67\x32\x96\xd7\x23\x6c\xf7\x7a\x59\xd0\x8e\xf0\xcd\x8c\x6b\x5c\x4b\x2f\xa3\x4c\x3f\x37\xa0\xc2\xb9\xf8\xcc\x67\xdb\x54\xdc\x5e\xad\x8b\x63\xff\xed\xf5\xd6\xd5\x97\xe0\xcd\xce\xbe\x3a\x5e\x91\x1f\x60\xe6\xcf\x7d\xa9\x2e\x66\x09\x7b\xde\xa7\x71\x8a\xc3\x4d\xce\xc4\x27\x5d\x48\x7d\x0a\x63\xe0\x40\xed\xc4\x3f\x69\x1e\x94\x9b\xf4\x52\xcf\x16\x0f\xcc\xf9\x22\xa7\x10\x70\x10\x6a\x68\xf9\xf3\x90\x89\xf1\x41\x57\x33\x1d\x34\xec\x9d\x1c\x26\x51\x55\x14\xa7\x25\xcc\x28\x5f\xed\xd2\xcc\x9e\xb4\xa9\x80\x2f\xf9\x11\x7d\xc4\xb9\x2c\x12\x15\x06\xdd\x43\x2c\xd9\xe8\x69\x01\x59\xa8\x61\x59\x79\xe4\x3e\xfa\xf4\x38\x6c\xd4\xb2\xf0\xe8\xca\xd1\xa0\x18\x7b\x19\x6d\x70\x99\xe7\x88\x38\x09\xa0\xe3\xcd\xd8\x83\x8a\x3b\x21\x6c\x8c\x36\x92\x2c\x20\x36\x92\x2c\x39\x36\x98\x32\xe9\x02\x47\x62\x26\x24\xf8\x26\xde\x8c\xce\xe2\x39\xe6\x99\x24\x86\x43\xd4\xec\x3e\xa1\x38\x23\x09\x84\x7c\x1c\x04\x84\x4e\xb2\x47\x59\x7b\xb6\x8d\x21\x76\x6e\x82\xac\x1f\x6e\x7b\x2c\x74\x2e\x03\xce\xa6\xc4\x51\x0e\x75\x8d\x7c\x54\xaf\x93\xa8\x53\x0d\xad\x80\x2b\x83\x20\x67\xc7\xe6\x65\x1c\x92\x00\x0f\xa3\xd0\x76\xf3\xea\x79\x9d\xb3\x7f\x73\xf8\x2b\xd3\xb5\xaa\xb6\xd8\x3c\x12\xe8\x1b\xe3\x37\x1e\xc3\x6a\x8b\x99\xae\x3f\xd3\x91\x43\x3e\xcb\x13\x2d\x97\x64\x03\x2f\x8d\x7c\xf3\x72\x32\x69\x92\x67\x4e\xd7\xb2\x49\xc9\x08\xb5\xf4\x4a\x49\xbd\x08\x16\x58\xaa\x51\x07\x14\xab\xc3\xf2\x4b\xcd\x29\xd7\xbc\xee\x1c\x26\x24\x1f\xdf\x56\x76\xf3\x43\x4f\x92\x4b\xfc\xbd\xdc\x31\x5f\xa0\xb7\x98\xfc\xca\x99\xa8\x4a\xb9\xa5\xb5\xbe\x35\xe1\xa4\x2e\xbf\x4e\x59\xcb\x59\xae\x56\xea\x9f\xf0\xd0\xcb\xb1\x8a\x39\xc7\xb3\x0a\x4e\x6b\xb8\x2c\x70\xd7\xb0\x93\x73\xf5\xb0\xe4\xf0\x55\xf6\x2a\x2b\x64\x21\xe7\xfa\xe8\xb6\x3c\x9a\xb7\xc1\xa4\x9f\xe9\x21\xda\xb7\xcb\xdc\x52\xa9\x93\x10\x06\x8e\x29\x8f\x71\xb0\xc4\x28\xf0\x30\x85\x4c\x26\x41\x48\x2c\x43\x51\xb9\xca\xc7\x03\xcd\xcc\x84\xd9\x25\x6a\x3f\xf3\xb1\x64\xad\x27\xcb\xce\x5e\xa0\x62\x2d\xa7\x77\xad\x8c\x8c\x0e\x2d\x16\xd4\xcd\xec\x2e\xdd\xdb\xba\x15\x5f\x04\x31\x9d\x08\x95\x30\xc9\xb8\xf7\xc5\xf7\x2b\xaa\x7b\x49\x26\xb1\x37\xaf\x5b\xd9\xa0\x69\x63\x53\x65\xde\xfa\xd9\x17\x3f\xfa\xd9\xb7\x34\xfa\x66\xae\xb9\xa7\x36\x75\x93\x9b\x04\xa5\x6f\x30\x32\x6c\xe7\x33\xa2\xd8\x87\xea\xbf\x58\xb1\x36\xd7\xe2\x44\x7f\xe0\xa4\x8e\xf4\x1f\xe6\xf9\x3d\xa9\xdb\x2e\xa6\x14\x3c\xb1\x3c\xf9\x82\xb5\xaf\x9d\xb1\x6c\xc5\x8b\x73\xd6\xb1\xb2\x97\xfd\x59\x62\x68\xee\x52\x89\xcd\xe8\x65\xf1\x88\xe4\x93\xaf\xa7\x1f\x23\x37\x47\xf5\x5d\x7c\x06\x0f\x5f\x35\x89\xd2\x3c\x4e\xef\x67\xb0\x84\x09\xe3\xe4\x3b\xd4\xbc\x34\x5d\x29\x53\xa0\xa1\x9f\x6f\x51\x3a\x4d\x6f\x8a\x4d\x3a\x3f\x72\xdf\xdd\xc8\x04\x6c\x0d\xbb\xa1\x7a\x45\xe1\xac\xb9\x83\xb2\x31\xcd\x5e\x40\x4d\x4d\x3d\x75\xae\x46\x46\x64\xee\xf8\x44\x00\x76\x8e\xc3\x31\x01\xcf\x29\x4b\xb9\xee\x4c\xa6\xf6\xbe\xd1\xb8\x16\x65\x58\x21\xd4\x82\x6b\x82\x16\x0b\x1b\x7b\x0d\xd2\xac\x08\xec\x9e\x8e\xd9\x56\x8c\x1a\x26\x2f\x7d\x90\x58\x21\x7e\x23\x36\x44\x9f\x19\x98\x8b\x0f\xec\x1b\x6d\xe1\xf4\x16\x2d\x68\xb5\xc1\xd2\xd5\xba\xce\x25\xce\xdd\x0d\x8d\x19\xf7\xb1\xb4\x94\x8f\x02\x7d\x49\x7c\x98\x47\xc6\x78\x35\x4b\x93\x89\x53\xe7\x97\x15\x56\x3a\x26\x46\xa8\xdc\xde\x6c\xc4\xb3\x82\xec\x9b\x44\x5e\xdc\x16\xd4\xb6\x74\xa9\xb0\xad\xd9\xd7\x62\x02\x8f\xcd\x7c\xa0\xf2\xd2\x63\xe6\x72\xad\x35\xf1\xea\xf0\xb7\xf4\xd7\x94\xe6\x6f\x6a\xce\x26\x94\xbb\x17\xbe\x17\x10\x81\xd6\x5c\xb2\x0e\x08\xe5\x24\x5c\x2a\x27\x75\xbe\x66\x19\x57\xb6\xb1\x5b\xb5\x43\xdd\xea\xac\xfc\x25\x8f\x40\xb5\x3c\x7e\x88\xfe\x56\x4b\xbc\xb7\xcc\xee\x3d\x07\x93\x5c\x51\x51\x58\xb4\xcc\x99\xc8\xa2\x89\x4f\x7d\x59\x30\xdf\x5e\x61\xd1\x22\xaf\x90\xcb\x67\xd7\x77\x8e\x2f\xa3\x75\xf0\x18\xf3\x12\xdd\x47\x47\xa3\xae\xf4\xaf\xb7\x91\x52\xbd\xff\x7c\x1e\xb5\x6b\x41\x80\x15\x3d\xcf\xb9\xe0\xae\x94\xc1\xca\xff\x02\x00\x00\xff\xff\xc8\x34\x73\xf4\x6a\x70\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 28778, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
