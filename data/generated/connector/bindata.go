// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package connector generated by go-bindata.// sources:
// pkg/api/connector/openapi/api/openapi.yaml
package connector

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x53\xdc\x38\xf2\x7f\xcf\xa7\xd0\x3f\xff\xbb\x9a\xdd\xbb\x85\x31\xcf\x61\xaa\xf6\x05\x01\x92\x25\x09\x84\x1d\x60\x93\xec\xd5\xd5\x94\xc6\xee\x19\x0b\x6c\xc9\x48\xf2\x84\xc9\xd5\x7d\xf7\x2b\x49\x7e\x7e\x1a\x0f\x10\x1e\xb6\x9c\x57\x41\x96\x5a\xad\x56\xab\x7f\xdd\xad\xb6\x87\x05\x40\x71\x40\x06\x68\x73\xcd\x5a\xb3\x56\x08\x9d\xb0\xc1\x0a\x42\x0e\x08\x9b\x93\x40\x12\x46\x07\xe8\x80\x51\x0a\xb6\x64\x1c\x9d\x03\x9f\x11\x1b\xd0\x5b\x0f\x40\xa2\x13\x4c\xf1\x14\x38\x22\x02\x61\x34\x04\x21\xd1\xfe\xd9\x31\x92\x0c\xf9\xfa\x01\xb2\xe3\x71\x62\x6d\x05\x21\x49\xa4\x07\x0b\x89\xad\x20\x34\x03\x2e\xf4\xbc\xd6\x9a\xb5\xb6\xb9\x22\x80\xab\x96\xc1\xca\x6a\x9e\xab\x13\x4c\x28\xfa\x29\xe0\xcc\x09\x6d\xd5\xf2\x33\x32\x3d\x57\x10\x0a\xb9\x37\x40\xae\x94\x81\x18\xf4\xfb\x38\x20\x6b\x6a\x95\xc2\x25\x13\xb9\x66\x33\xbf\x48\xe8\x5c\xe2\x29\xa1\xd3\x86\xe1\x42\xe2\x29\x34\x13\xf1\x98\x8d\x3d\x97\x09\x99\x1d\x3f\xe8\xf7\x93\xf6\xc1\x6b\xcb\xb2\x8a\xa3\xec\x90\x73\xa0\x12\x39\xcc\xc7\x84\xc6\x43\xfb\x2b\x12\x4f\xf5\x82\x29\xf6\x73\x22\xbb\x98\x07\x20\xca\xed\x15\x4d\xe8\xc0\x0b\x85\x04\x2e\x56\x02\x2c\x5d\xa1\xf6\x54\x2d\xa5\x9f\xec\xc9\xc8\x9f\xfa\xb2\x3f\x5b\xef\x5f\xe3\xc9\x35\x1e\xa5\xed\x52\xcd\xd1\xff\x4f\xbe\x61\x44\x9c\xff\x2a\x1a\x08\x4d\x41\x9a\xff\x20\xc4\x02\xe0\x58\x2d\xe4\xd8\x19\xa8\xf6\x64\x72\xc5\xe6\x9b\xf9\xf1\x61\xd4\x2f\xc0\x1c\xfb\x20\xf5\x26\x9a\x96\x82\x18\x2e\x5c\x40\xc4\x41\x6c\x82\xa4\x9b\x51\x1b\xa4\x66\x8e\x46\x20\x04\xb7\x81\xc7\x1c\x18\xa0\x09\xf6\x44\xda\x4c\xe8\x00\xa9\x25\x26\x0d\x46\x10\x25\xf6\x93\xe7\x1c\x6e\x42\xc2\xc1\x19\x20\xc9\xc3\x94\x8e\xb0\x5d\xf0\xf1\x20\xf9\x1b\xe9\xd9\x07\x48\x48\x4e\xe8\x34\xed\x26\xe7\x4a\x8b\x05\xf1\x03\x2f\x1e\xcc\x41\x04\x8c\x0a\x10\xe9\xe8\x57\x1b\x96\xf5\x2a\x4b\xcc\x66\x54\x02\x95\xd9\x26\x84\x70\x10\x78\xc4\xd6\x22\xec\x5f\x09\x46\xf3\x4f\xab\x78\x32\xff\xfe\xc6\x61\x32\x40\xbd\xff\xef\xdb\xcc\x0f\x18\x05\x2a\x45\xdf\xf4\x15\xfd\xdc\x26\xf4\x32\x43\x4b\x12\xcf\xcb\x19\xf9\x58\xda\xae\x3a\x07\x6a\x0f\x94\x90\x40\x2b\x73\xb4\x9e\x2d\x6b\xfd\xfe\xeb\x81\x5b\xac\xc4\x26\xca\x2b\x52\xf4\x8f\xcc\xd3\x57\xe5\xa7\xd5\x2b\x8e\xa9\xf5\xd3\xb1\xbd\x07\x10\xe0\x11\xe7\x8c\xd7\x0a\x6e\x3f\x94\x2e\x92\xec\x1a\xa8\x32\x7b\x84\xce\xb0\x97\xd1\xad\x57\x5b\xd6\xd6\x0f\x16\xd3\xd6\x3d\xc4\xb4\xf5\x68\x62\x3a\x65\xa9\x3e\x15\xf4\x0c\x6e\x89\x90\x22\x15\xd9\xf6\x43\x9c\x94\x06\x91\x6d\x5b\xd6\x9d\x45\x96\x8e\xfd\xf1\x22\xbb\xa4\x70\x1b\x80\x2d\xc1\x41\xa0\x3a\x22\x66\x6b\x78\x88\xb5\x4b\x80\x1d\x72\x22\xe7\xa9\x0d\x7d\x03\x98\x03\x1f\xa0\x7f\xfd\x3b\xee\x12\xfa\x3e\xe6\xf3\x01\x7a\x07\x12\xe1\xa2\xe0\xc7\x73\x94\xa8\xaa\x01\x98\x98\x50\x11\x60\x96\xc3\x8a\x66\x5c\xf0\x88\xc8\x03\x83\x68\x8b\x0a\x67\xca\x87\x20\xd4\x81\xdb\x95\xa6\x6d\x0e\xf0\x14\xf2\xfb\x30\xc3\x5e\x08\x03\xf4\x6a\xfd\x55\x0e\x25\x6e\x42\xe0\xf3\x02\x4c\xa8\xc1\x15\xc8\x90\x87\x98\x56\xd0\x50\x60\xfe\x34\xf4\xc7\xc0\x15\xa4\x11\x09\xbe\xb2\x14\x08\xb0\xed\xe6\x27\xac\x5a\x8e\x20\xdf\xeb\x96\x63\x59\x8b\x17\xa4\x86\x3f\xcc\x82\x9e\x2f\xaa\x7d\x24\x42\xd6\x1b\x68\xad\x71\x4a\xf0\x79\xf5\x17\x1d\x96\x2d\x89\x65\x9d\x61\x7e\x78\xc3\x3c\x04\x19\x72\xaa\xe2\xa5\x66\x2d\x7d\x18\xfb\xbc\x8c\x69\xee\xcc\xf2\xcb\x30\xcb\x15\xa1\x93\xde\x75\x64\x9b\x80\x0f\x65\x8e\x70\x12\x32\xe5\x22\x9d\x3a\x1e\x8d\xf2\x54\x46\x4a\x77\xe0\x33\x09\x95\x26\x8c\xfb\xcf\x1a\x52\x96\x85\x93\x0e\x49\xca\x52\xea\x90\xe4\x85\x21\x89\x79\x1c\x30\x51\x0d\x0d\x36\x07\x2c\x21\xe9\xdd\x1a\x1b\x80\xab\xe3\xae\x53\x08\x58\x67\xe5\x94\x85\xc5\x14\x61\x31\xa7\xb6\xcb\x19\x65\xa1\x40\x3e\xa6\x14\xf8\x1d\xad\x94\xa6\x54\x61\xa2\x5a\x25\x73\xc6\x8c\x79\x80\x69\xa3\x89\xd2\x89\x8f\x37\xcc\x99\xa7\xc3\x2b\xf4\xb5\x59\x5b\xab\x55\xa7\x95\x35\x4a\x95\xa7\x26\x07\xeb\x60\x89\x9b\xd7\x5f\x6d\x66\x37\x9e\xd8\xcc\xd6\x1b\x0f\xdb\x86\x40\x42\x2e\x8b\xf2\x63\xed\xc5\x96\x65\x1d\x28\x05\x27\x8c\xde\xc3\xbc\x16\x69\xfc\x78\xfb\xf1\x87\x32\xab\x7a\x4a\x63\x3f\x44\xd1\x80\x74\x90\xd4\x25\xea\x96\x13\xd3\x45\x9a\xec\x05\x47\x59\x0e\x16\x72\x1b\x90\xc3\x40\xd0\x9e\x34\xc9\xba\x0e\xc8\x4b\xca\x45\x51\x58\x87\xe5\x06\x3b\xe3\x44\xba\x5d\x80\xd0\x65\x20\x5e\xdb\x17\x40\x18\x51\xf8\x56\x22\xd4\x80\xeb\x4d\xc1\xa1\xc8\x44\x87\xd9\x4b\x9e\xe4\x7e\xc7\x01\x0f\x24\x54\x3a\x05\xe6\xd1\xd2\x4e\xc1\x8b\x0a\x51\xda\xdd\x4c\x95\xd9\x5f\xf2\x52\xea\x09\xee\xa3\x1e\xc0\xde\x3d\xfc\x41\x3a\xd4\x2a\xd5\xc1\x57\x49\x30\x4f\x0f\x5f\x66\x6b\xee\x03\x62\x39\x0a\x8f\x72\xe7\x64\xcc\x4c\x84\x67\xe8\x1b\x91\x2e\x12\x01\xd8\x64\x42\xc0\x41\xc7\x87\x4f\x71\xf7\x74\x4f\x31\x16\x29\xbc\xac\x20\xd5\xb0\x9e\xbd\x8a\x6a\x13\x95\xb6\x29\x31\xe8\xc0\xe7\x45\x81\xcf\x53\xe7\xf8\x5a\x16\x42\x74\x35\x10\x2f\x03\x9b\x5e\x44\x68\xd5\xd5\x40\x3c\xa7\x1a\x88\x36\xc0\x13\xa8\xed\xaa\x84\x1e\xfd\xa4\x03\x9f\xe7\x0f\x3e\x77\xcb\xde\xae\xea\xfd\xfd\x67\xdb\x44\x6e\xe1\x86\xe8\xfd\xf9\xa7\x53\x74\xa6\x28\xfc\x82\x86\x6f\x0f\xd0\xce\x9e\xb5\x81\x56\x93\x0a\x52\xc9\x98\x27\xd6\x08\xc8\xc9\x1a\xe3\xd3\xbe\x2b\x7d\xaf\xcf\x27\xb6\xea\x55\xa0\x6b\xd6\xc9\xc6\x57\x60\xcb\x1a\x6e\x7d\xe0\x53\x78\x00\x76\x4f\x14\x9d\x2c\xd3\xbb\x9b\xaf\x77\x16\x33\xad\x7a\xb5\x61\x3a\x1f\xe4\x61\x89\x91\x64\xe6\x10\x15\x4a\x3c\x95\x8f\xde\xac\x10\x2f\x2c\x9b\xdd\x39\x14\x9d\x43\xf1\x83\xc4\xd4\x39\x14\x4f\xea\x50\x18\xf3\xb5\x94\x4b\xd1\xb2\x8c\x32\xf2\x0e\x96\x29\xd7\x49\xca\xfb\x4d\xc7\xae\x6a\xe7\x79\x57\xed\x3c\xcf\xa8\x38\x52\xa2\xa5\xeb\x29\xed\xbc\xf2\x75\x48\xd6\x15\xc2\x3c\xcf\x42\x98\x82\xa2\xd6\x55\x55\xe6\x8c\x69\xdb\x9a\x98\x68\x50\x6b\x03\xdc\x95\xc6\x34\x28\xd3\x32\xe6\x6a\x61\x85\x4c\x1c\x6c\xbf\xd4\x4a\x99\xd2\x3a\xbb\x82\x99\xae\x60\xe6\xa9\xa1\xab\x0b\xc2\xba\x82\x99\x47\x2d\x98\x89\xcd\xf8\x1d\x5c\x82\xea\xc2\x99\x02\xc1\x16\xce\xc0\x92\xe1\x5b\xb6\x9e\x26\x6a\xbb\x4b\x5d\xcd\x92\x8e\x45\xdd\xcb\xd3\xf9\xd5\xde\x3d\x61\x9b\xae\xe4\xae\xae\x45\x57\xb2\xd2\x01\x48\x57\xb2\x52\x25\xb2\x53\x96\x22\x48\x57\xad\xf2\xd4\x91\x64\xb9\x5a\x65\x79\xc8\x68\x57\xbd\xd2\x99\x78\xa3\x71\xcf\x26\x05\xd6\xf2\x3a\x27\x8e\x2c\xbb\x6b\x9d\x97\x01\x08\x2f\x22\xa2\xa8\xbe\xd6\x89\x55\xad\xbb\xde\x79\xa2\x6f\x66\x3c\x51\xb4\xd0\xc7\x8e\xc3\xe8\xa8\x88\x09\x4b\xa0\xca\xbe\x22\x70\x96\x8c\xef\x40\xe6\xa9\x40\x26\xbf\x11\x8d\xb7\x2c\x4a\xf8\xe9\x0e\x21\xe9\x62\x89\x84\xcb\x42\xcf\x41\x63\x40\xa1\x00\x07\x49\xa6\x38\x9f\x90\x69\xc8\x41\x6f\x91\xf9\xca\x9a\x93\x63\x29\xdd\x36\xad\x46\x88\x51\xb3\x9b\x46\xf6\x6b\x1d\x46\x75\x18\xd5\x61\xd4\x5f\x0e\xa3\x7a\x22\x3a\xee\x41\xd1\xea\x2f\x84\xad\x74\x39\xaa\x5b\x5e\xdc\x55\x87\xd8\xdc\x9f\xa7\x56\xdf\x19\xa0\x57\xeb\x99\xda\x80\x6b\x42\x9d\x01\xd2\x12\x49\xda\x5c\x2d\x3b\x0d\x8f\xd1\x3b\x68\x31\x36\x9a\xa4\x7c\x7f\x7d\x7d\x25\xd5\x12\x05\x2d\x1f\xf6\xdf\x7e\xd8\x3f\x5f\x3d\x79\x77\x72\xb1\x9a\x79\xc8\x01\x2b\x1d\x41\xbd\x4b\x8a\xc7\x1e\x28\x93\x38\x03\x4e\x26\x73\xf4\xfe\xf3\x85\x39\xc5\x03\x34\x8c\x40\x05\xe1\x50\xba\x8c\x93\xef\x26\xff\x6f\xce\x38\x65\x12\x4d\x58\x48\x9d\x74\xbb\x12\x38\x1d\xa9\xc5\xac\x93\xaf\x9b\x97\xee\x91\xfb\xcd\xff\xf2\x26\xf8\x7c\x36\x39\xde\xf0\x4e\xe1\x3a\x70\xb6\xfe\x3c\x8c\x65\x52\x3a\xb1\x55\x32\x51\x86\xe3\x7e\x42\xd9\x6d\x90\xc9\x6e\x49\x24\xad\xd3\xd2\x55\xe7\xa6\x6a\x01\x7b\xf7\x64\x7f\xaf\x81\xfd\xbd\x12\xfb\x97\x34\xcd\x7c\x40\x6e\xa2\xe2\xf6\xc0\xd1\xc7\xd9\xdb\xbd\xab\x93\xdf\xbf\xee\x7c\x9d\xba\x93\x93\xbd\xe9\xbb\xa1\xf8\x6d\x76\xf4\x39\xde\x9e\xda\x9b\xaa\x4a\xd5\xb5\x36\xef\xab\xbb\xd6\x66\x93\xf2\x66\x9e\xc6\x6b\x3d\xcf\xdc\xf7\xc6\x37\xc1\x42\x6b\xa6\x08\x83\x80\x71\x09\xce\x2f\x0a\xf2\xcd\x7d\xee\xaf\xca\x35\x4a\x0f\x76\xad\x5c\x3e\x1f\x13\xff\xe6\x9d\xcd\x0f\xc3\x8f\x3b\xeb\xf8\xf2\xf6\xf8\xcf\x9b\x37\x17\x37\xa7\x43\x9c\xa8\x6d\x75\x6e\xa7\x4a\x2a\xbb\x8f\xaa\xba\x1f\x14\x8d\x61\x2e\x0d\x46\x9c\x5f\x7b\xeb\xe4\xc3\xa6\x13\xfe\xf1\xf5\x78\x36\xdb\xfe\x3a\xfb\xe8\xcd\xbf\xaf\xfb\xef\x86\x9b\xef\xe7\x37\xa7\xbd\xf4\x1c\xd7\x1f\xe3\x4f\xbb\xd3\x8d\xe9\xce\x6f\x17\xce\xe5\x87\x4b\xbc\x71\x2d\x7e\x7b\xbd\x71\xfd\xfb\xe1\xe6\x3c\x39\x05\xed\xe5\xf1\xb8\x67\xa1\x67\x60\x42\xdf\x0a\xe8\xef\xd2\xce\xa9\x2d\x40\x0e\xd0\xa7\x83\x93\xd5\xa3\x2f\xab\x7b\xca\xf5\x26\x9e\x71\x09\xcd\xdd\x41\xda\x07\x6e\xe5\xaa\x30\x1f\xd6\xc5\x01\x59\x5d\x27\xb7\xd6\xa6\x47\x1d\xcf\xbf\xb1\x6e\x26\xf6\xae\x20\x12\x6f\x0b\xef\x6a\xf6\x1a\x32\x78\x35\xc9\x60\xb9\x96\xde\x74\xdb\x79\xfd\xfa\xc6\xf2\xb8\xed\xcc\xb6\xa6\xbb\xd8\x1b\xef\x0a\x6f\x32\xa5\x57\x9b\x8e\x3b\x16\x57\x7f\xff\xbf\x9f\x8e\xbe\x5c\x0c\xf7\xd1\x3f\xcc\x02\xd7\xb4\x3c\x7e\x25\x0e\x50\xa9\xce\x30\xcf\xd0\x26\x02\xf5\x7a\x5b\xd6\x56\xaf\xf7\x8b\x5e\xbd\x69\x38\xf8\x78\x79\x7e\x71\x34\x8c\x64\xa0\x1f\x23\x4c\x9d\x74\x17\x51\x4a\xcc\x8c\x58\x9f\x6e\x33\xbe\x6d\xcd\x48\x68\xed\x32\x50\x9b\xe4\xf2\x6b\x7b\x63\xc7\x99\x4e\xe4\xd5\x3a\xb6\x7b\xbd\x2c\x68\x47\xf8\x66\xc6\x35\xae\xa5\x97\x51\xa6\x9f\x1b\x50\xe1\x42\x7c\xe6\xf3\x1d\x2a\x6e\xc6\x1b\xe2\xd4\x7f\x7b\xb5\x3d\xfe\x12\x1c\xee\x1e\xa8\xe3\x15\xf9\x01\x66\xfe\xdc\x97\xea\x62\x96\xb0\xe7\x7d\x9a\xa4\x38\xdc\xe4\x4c\x7c\xd2\x85\xd4\x43\x98\x00\x07\x6a\x27\xfe\x49\xf3\xa0\xdc\xa4\x23\x3d\x5b\x3c\x30\xe7\x8b\x0c\x21\xe0\x20\xd4\xd0\xf2\xe7\x21\x13\xe3\x83\xc6\x73\x1d\x34\xec\x9f\x1d\x27\x51\x55\x14\xa7\x25\xcc\x28\x5f\x6d\x64\x66\x4f\xda\x54\xc0\x97\xfc\x11\x7d\xc4\xb9\x2c\x12\x15\x06\xdd\x41\x2c\xd9\xe8\x69\x09\x59\xa8\x61\x59\x79\xe4\x3e\xfa\xf4\x38\x6c\xd4\xb2\xf0\xe8\xca\xd1\xa0\x18\xfb\x19\x6d\x70\x99\xe7\x88\x38\x09\xa0\xe3\xcd\xd8\x83\x8a\x3b\x21\x6c\x8c\x36\x92\x2c\x20\x36\x92\x2c\x39\x36\x98\x32\xe9\x02\x47\x62\x2e\x24\xf8\x26\xde\x8c\xce\xe2\x05\xe6\x99\x24\x86\x43\xd4\xec\x3e\xa1\x38\x23\x09\x84\x7c\x1c\x04\x84\x4e\xb3\x47\x59\x7b\xb6\x8d\x21\x76\x6e\x82\xac\x1f\x6e\x7b\x2c\x74\x46\x01\x67\x33\xe2\x28\x87\xba\x46\x3e\xaa\xd7\x59\xd4\xa9\x86\x56\xc0\x95\x41\x90\xf3\x53\xf3\x32\x0e\x49\x80\x87\x51\x68\xbb\x79\xf5\xbc\x2e\xd8\xbf\x05\xfc\x95\xe9\x0e\xaa\xb6\xd8\x3c\x12\xe8\x1b\xe3\xd7\x1e\xc3\x6a\x8b\x99\xae\x3f\xd3\x91\x43\x3e\xcb\x13\x2d\x97\x64\x03\x2f\x8d\x7c\x8b\x72\x32\x69\x92\x67\x41\xd7\xb2\x49\xc9\x08\xb5\xf4\x4a\x49\xbd\x08\x96\x58\xaa\x51\x07\x14\xab\xc3\xfd\x97\x9a\x53\xae\x45\xdd\x39\x4c\x49\x3e\xbe\xad\xec\xe6\x87\x9e\x24\x23\xfc\xbd\xdc\x31\x5f\xa0\xb7\x9c\xfc\xca\x99\xa8\x4a\xb9\xa5\xb5\xbe\x35\xe1\xa4\x2e\xbf\x4e\x59\xcb\x59\xae\x56\xea\x9f\xf0\xd0\xcb\xb1\x8a\x39\xc7\xf3\x0a\x4e\x6b\xb8\x2c\x70\xd7\xb0\x93\x0b\xf5\xb0\xe4\xf0\x55\xf6\x2a\x2b\x64\x21\xe7\xfa\xe8\xb6\x3c\x9a\xb7\xc1\xa4\x9f\xeb\x21\xda\xb7\xcb\xdc\x52\xa9\x93\x10\x06\x8e\x29\x8f\x71\xb0\xc4\x28\xf0\x30\x85\x4c\x26\x41\x48\x2c\x43\x51\xb9\xca\xc7\x03\xcd\xcc\x84\xd9\x25\x6a\xd4\x89\x3a\x11\x46\xcf\x41\x2a\x0f\x39\xd9\xef\x2a\x0d\x18\x33\x26\x85\xe4\x38\x18\x99\xdf\x77\x68\x71\xae\x09\x50\xb9\xd8\x82\x25\x3d\x05\xd8\x1c\x64\x63\x6f\xed\x1f\x3f\x96\x8e\xe8\xc9\xb2\x52\x2b\x50\x69\x92\x56\x8b\x55\xb7\x32\x8e\x3a\x24\x5a\xf2\x4c\x65\xb5\xeb\xce\x56\xb9\xf8\x02\x8b\xe9\x44\xa8\x84\x69\x26\x2c\x29\xbe\x17\x52\xdd\x4b\x32\x89\xbd\x45\xdd\xca\x86\x58\x1b\xc9\x2a\xb3\xbc\x9a\x7d\x61\x65\x35\xfb\x76\xc9\xaa\x99\x6b\xa1\xb5\x49\xdd\xfb\x26\x41\xe9\x9b\x97\x0c\xdb\xf9\x4c\x2e\xf6\xa1\xfa\x97\x36\xd6\x16\x5a\xca\xe8\x87\x59\xea\x48\xff\x61\x9e\xdf\x91\xba\xed\x62\x4a\xc1\x13\xf7\x27\x5f\x40\xa9\xda\x19\xcb\xe8\x53\x9c\xb3\x8e\x95\xfd\xec\x9f\x25\x86\x16\x2e\x95\xd8\x8c\x8e\x8a\x47\x24\x9f\x34\x1e\x7e\x8c\xdc\x33\xd5\x77\xf9\x19\x3c\x3c\x6e\x12\xa5\x79\x9c\xde\x2b\x61\x09\x53\xc6\xc9\x77\xa8\x79\xd9\xbb\x52\xa6\x40\x43\x3f\xdf\xa2\x74\x9a\x5e\x17\x9b\x74\x5e\xe7\xae\xbb\x91\x09\x34\x1b\x76\x43\xf5\x8a\xc2\x70\x73\x77\x66\x63\x9a\xbd\x38\x9b\x99\x3a\xf0\x5c\x6d\x8f\xc8\xdc\x4d\x8a\x00\xec\x1c\x87\x13\x02\x9e\x53\x96\x72\xdd\x99\x4c\x71\xaa\xd1\xb8\x16\x65\x58\x21\xd4\x82\x4b\x85\x96\x0b\x77\x7b\x0d\xd2\xac\x08\x48\x9f\x8e\xd9\x56\x8c\x1a\x26\x47\x3e\x48\xac\x3c\x95\x46\x6c\x88\x3e\x8f\xb0\x10\x1f\xd8\x37\xda\xc2\x07\x28\x5a\xd0\x6a\x83\xa5\xab\x8c\x9d\x11\xce\x61\xff\x84\x71\x1f\xcb\x81\xf2\xad\x60\x55\x12\x1f\x16\x91\x31\xde\xd8\xbd\xc9\xc4\x29\xff\x51\x85\x95\x8e\x89\x11\x2a\x77\xb6\x1a\xf1\xac\x20\xfb\x26\x91\x17\xb7\x05\xb5\x2d\xb9\x2a\x6c\x6b\xf6\x75\x9e\xc0\x63\x73\x5f\xf9\x54\x1e\x33\x97\x82\xad\x89\x57\x87\xed\x5a\x2d\xda\xd2\xa8\x71\x2e\x53\x6a\xa5\xdf\x94\x5a\xac\x22\x39\x0b\x53\xee\x5e\xf8\x6a\x42\x04\x81\x0b\xc9\x3a\x20\x94\xcb\x31\x52\xae\xfa\x62\x3d\x35\x0e\x7d\x63\xb7\xea\xb0\xa2\xd5\xc9\xfb\x4b\x1e\xa8\x6a\x79\xfc\x90\xd3\x50\x2d\xf1\xde\x7d\x76\xef\x39\x18\xf8\x8a\xba\xca\xa2\x9d\xcf\xc4\x29\x4d\x7c\xea\x2b\x93\xc5\xd6\x0f\x8b\x16\xd9\x95\x5c\x56\xbf\xbe\x73\x7c\x25\xaf\x43\xe8\x98\x97\xe8\x56\x3e\x1a\x35\xd6\x7f\xbd\x8d\x94\xea\xfd\xe7\x8b\xa8\x5d\x0b\x02\x06\xd1\xf3\x9c\x43\xef\x4a\x19\xac\xfc\x2f\x00\x00\xff\xff\xf9\x98\x30\x34\x70\x71\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 29040, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
