// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package connector generated by go-bindata.// sources:
// pkg/api/connector/openapi/api/openapi.yaml
package connector

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6d\x53\xdc\x38\xf2\x7f\xcf\xa7\xd0\x9f\xff\x5d\xcd\xee\xdd\xc2\x98\xe7\x30\x55\xfb\x82\x10\x92\x25\x09\x84\x1d\x60\x93\xec\xd5\xd5\x94\xc6\xee\x19\x0b\x6c\xc9\x48\xf2\x84\xc9\xd5\x7d\xf7\x2b\x49\x7e\x7e\x1a\x0f\x10\x1e\xb6\x9c\x57\x41\x96\x5a\xad\x56\xab\x7f\xdd\xad\xb6\x87\x05\x40\x71\x40\x06\x68\x6b\xdd\x5a\xb7\x56\x08\x9d\xb0\xc1\x0a\x42\x0e\x08\x9b\x93\x40\x12\x46\x07\xe8\x90\x51\x0a\xb6\x64\x1c\x9d\x03\x9f\x11\x1b\xd0\x5b\x0f\x40\xa2\x13\x4c\xf1\x14\x38\x22\x02\x61\x34\x04\x21\xd1\xc1\xd9\x31\x92\x0c\xf9\xfa\x01\xb2\xe3\x71\x62\x7d\x05\x21\x49\xa4\x07\x0b\x89\xad\x20\x34\x03\x2e\xf4\xbc\xd6\xba\xb5\xbe\xb9\x22\x80\xab\x96\xc1\xca\x5a\x9e\xab\x13\x4c\x28\xfa\x29\xe0\xcc\x09\x6d\xd5\xf2\x33\x32\x3d\x57\x10\x0a\xb9\x37\x40\xae\x94\x81\x18\xf4\xfb\x38\x20\xeb\x6a\x95\xc2\x25\x13\xb9\x6e\x33\xbf\x48\xe8\x5c\xe2\x29\xa1\xd3\x86\xe1\x42\xe2\x29\x34\x13\xf1\x98\x8d\x3d\x97\x09\x99\x1d\x3f\xe8\xf7\x93\xf6\xc1\x2b\xcb\xb2\x8a\xa3\xec\x90\x73\xa0\x12\x39\xcc\xc7\x84\xc6\x43\xfb\x2b\x12\x4f\xf5\x82\x29\xf6\x73\x22\xbb\x98\x07\x20\xca\xed\x15\x4d\xe8\xd0\x0b\x85\x04\x2e\x56\x02\x2c\x5d\xa1\xf6\x54\x2d\xa5\x9f\xec\xc9\xc8\x9f\xfa\xb2\x3f\xdb\xe8\x5f\xe3\xc9\x35\x1e\xa5\xed\x52\xcd\xd1\xff\x4f\xbe\x61\x44\x9c\xff\x2a\x1a\x08\x4d\x41\x9a\xff\x20\xc4\x02\xe0\x58\x2d\xe4\xd8\x19\xa8\xf6\x64\x72\xc5\xe6\xeb\xf9\xf1\x9b\xa8\x5f\x80\x39\xf6\x41\xea\x4d\x34\x2d\x05\x31\x5c\xb8\x80\x88\x83\xd8\x04\x49\x37\xa3\x36\x48\xcd\x1c\x8d\x40\x08\x6e\x03\x8f\x39\x30\x40\x13\xec\x89\xb4\x99\xd0\x01\x52\x4b\x4c\x1a\x8c\x20\x4a\xec\x27\xcf\x39\xdc\x84\x84\x83\x33\x40\x92\x87\x29\x1d\x61\xbb\xe0\xe3\x41\xf2\x37\xd2\xb3\x0f\x90\x90\x9c\xd0\x69\xda\x4d\xce\x95\x16\x0b\xe2\x07\x5e\x3c\x98\x83\x08\x18\x15\x20\xd2\xd1\xab\x9b\x96\xb5\x9a\x25\x66\x33\x2a\x81\xca\x6c\x13\x42\x38\x08\x3c\x62\x6b\x11\xf6\xaf\x04\xa3\xf9\xa7\x55\x3c\x99\x7f\x7f\xe3\x30\x19\xa0\xde\xff\xf7\x6d\xe6\x07\x8c\x02\x95\xa2\x6f\xfa\x8a\x7e\x6e\x13\x7a\x99\xa1\x25\x89\xe7\xe5\x8c\x7c\x2c\x6d\x57\x9d\x03\xb5\x07\x4a\x48\xa0\x95\x39\x5a\xcf\xb6\xb5\x71\xff\xf5\xc0\x2d\x56\x62\x13\xe5\x15\x29\xfa\x47\xe6\xe9\x6a\xf9\x69\xf5\x8a\x63\x6a\xfd\x74\x6c\xef\x01\x04\x78\xc4\x39\xe3\xb5\x82\x3b\x08\xa5\x8b\x24\xbb\x06\xaa\xcc\x1e\xa1\x33\xec\x65\x74\x6b\x75\xdb\xda\xfe\xc1\x62\xda\xbe\x87\x98\xb6\x1f\x4d\x4c\xa7\x2c\xd5\xa7\x82\x9e\xc1\x2d\x11\x52\xa4\x22\xdb\x79\x88\x93\xd2\x20\xb2\x1d\xcb\xba\xb3\xc8\xd2\xb1\x3f\x5e\x64\x97\x14\x6e\x03\xb0\x25\x38\x08\x54\x47\xc4\x6c\x0d\x0f\xb1\x76\x09\xb0\x43\x4e\xe4\x3c\xb5\xa1\xaf\x01\x73\xe0\x03\xf4\xaf\x7f\xc7\x5d\x42\xdf\xc7\x7c\x3e\x40\xef\x40\x22\x5c\x14\xfc\x78\x8e\x12\x55\x35\x00\x13\x13\x2a\x02\xcc\x72\x58\xd1\x8c\x0b\x1e\x11\x79\x60\x10\x6d\x51\xe1\x4c\xf9\x10\x84\x3a\x70\xbb\xd2\xb4\xcd\x01\x9e\x42\x7e\x1f\x66\xd8\x0b\x61\x80\x56\x37\x56\x73\x28\x71\x13\x02\x9f\x17\x60\x42\x0d\xae\x40\x86\x3c\xc4\xb4\x82\x86\x02\xf3\xa7\xa1\x3f\x06\xae\x20\x8d\x48\xf0\x95\xa5\x40\x80\x6d\x37\x3f\x61\xd5\x72\x04\xf9\x5e\xb7\x1c\xcb\x5a\xbc\x20\x35\xfc\x61\x16\xf4\x7c\x51\xed\x23\x11\xb2\xde\x40\x6b\x8d\x53\x82\xcf\xab\xbf\xe8\xb0\x6c\x49\x2c\xeb\x0c\xf3\xc3\x1b\xe6\x21\xc8\x90\x53\x15\x2f\x35\x6b\xe9\xc3\xd8\xe7\x65\x4c\x73\x67\x96\x5f\x86\x59\xae\x08\x9d\xf4\xae\x23\xdb\x04\x7c\x28\x73\x84\x93\x90\x29\x17\xe9\xd4\xf1\x68\x94\xa7\x32\x52\xba\x03\x9f\x49\xa8\x34\x61\xdc\x7f\xd6\x90\xb2\x2c\x9c\x74\x48\x52\x96\x52\x87\x24\x2f\x0c\x49\xcc\xe3\x80\x89\x6a\x68\xb0\x39\x60\x09\x49\xef\xd6\xd8\x00\x5c\x1d\x77\x9d\x42\xc0\x3a\x2b\xa7\x2c\x2c\xa6\x08\x8b\x39\xb5\x5d\xce\x28\x0b\x05\xf2\x31\xa5\xc0\xef\x68\xa5\x34\xa5\x0a\x13\xd5\x2a\x99\x33\x66\xcc\x03\x4c\x1b\x4d\x94\x4e\x7c\xbc\x66\xce\x3c\x1d\x5e\xa1\xaf\xcd\xda\x5a\xad\x3a\xad\xac\x51\xaa\x3c\x35\x39\x58\x07\x4b\xdc\xbc\xfe\x6a\x33\xbb\xf9\xc4\x66\xb6\xde\x78\xd8\x36\x04\x12\x72\x59\x94\x1f\x6b\x2f\xb6\x2d\xeb\x50\x29\x38\x61\xf4\x1e\xe6\xb5\x48\xe3\xc7\xdb\x8f\x3f\x94\x59\xd5\x53\x1a\xfb\x21\x8a\x06\xa4\x83\xa4\x2e\x51\xb7\x9c\x98\x2e\xd2\x64\x2f\x38\xca\x72\xb0\x90\xdb\x80\x1c\x06\x82\xf6\xa4\x49\xd6\x75\x40\x5e\x52\x2e\x8a\xc2\x3a\x2c\x37\xd8\x19\x27\xd2\xed\x02\x84\x2e\x03\xf1\xda\xbe\x00\xc2\x88\xc2\xb7\x12\xa1\x06\x5c\x6f\x0a\x0e\x45\x26\x3a\xcc\x5e\xf2\x24\xf7\x3b\x0e\x78\x20\xa1\xd2\x29\x30\x8f\x96\x76\x0a\x5e\x54\x88\xd2\xee\x66\xaa\xcc\xfe\x92\x97\x52\x4f\x70\x1f\xf5\x00\xf6\xee\xe1\x0f\xd2\x1b\xad\x52\x1d\x7c\x95\x04\xf3\xf4\xf0\x65\xb6\xe6\x3e\x20\x96\xa3\xf0\x28\x77\x4e\xc6\xcc\x44\x78\x86\xbe\x11\xe9\x22\x11\x80\x4d\x26\x04\x1c\x75\x8e\x9f\xe0\xee\xe9\x9e\x62\x2c\x52\x78\x59\x41\xaa\x61\x3d\x7b\x15\xd5\x26\x2a\x6d\x53\x62\xd0\x81\xcf\x8b\x02\x9f\xa7\xce\xf1\xb5\x2c\x84\xe8\x6a\x20\x5e\x06\x36\xbd\x88\xd0\xaa\xab\x81\x78\x4e\x35\x10\x6d\x80\x27\x50\xdb\x55\x09\x3d\xfa\x49\x07\x3e\xcf\x1f\x7c\xee\x96\xbd\x5d\xd3\xfb\xfb\xcf\xb6\x89\xdc\xc2\x0d\xd1\xfb\xf3\x4f\xa7\xe8\x4c\x51\xf8\x05\x0d\xdf\x1e\xa2\xdd\x7d\x6b\x13\xad\x25\x15\xa4\x92\x31\x4f\xac\x13\x90\x93\x75\xc6\xa7\x7d\x57\xfa\x5e\x9f\x4f\x6c\xd5\xab\x40\xd7\xac\x93\x8d\xaf\xc0\x96\x35\xdc\xfa\xc0\xa7\xf0\x00\xec\x9e\x28\x3a\x59\xa6\xf7\xb6\x5e\xed\x2e\x66\x5a\xf5\x6a\xc3\x74\x3e\xc8\xc3\x12\x23\xc9\xcc\x21\x2a\x94\x78\x2a\x1f\xbd\x59\x21\x5e\x58\x36\xbb\x73\x28\x3a\x87\xe2\x07\x89\xa9\x73\x28\x9e\xd4\xa1\x30\xe6\x6b\x29\x97\xa2\x65\x19\x65\xe4\x1d\x2c\x53\xae\x93\x94\xf7\x9b\x8e\x5d\xd5\xce\xf3\xae\xda\x79\x9e\x51\x71\xa4\x44\x4b\xd7\x53\xda\x79\xe5\xeb\x90\xac\x2b\x84\x79\x9e\x85\x30\x05\x45\xad\xab\xaa\xcc\x19\xd3\xb6\x35\x31\xd1\xa0\xd6\x06\xb8\x2b\x8d\x69\x50\xa6\x65\xcc\xd5\xc2\x0a\x99\x38\xd8\x7e\xa9\x95\x32\xa5\x75\x76\x05\x33\x5d\xc1\xcc\x53\x43\x57\x17\x84\x75\x05\x33\x8f\x5a\x30\x13\x9b\xf1\x3b\xb8\x04\xd5\x85\x33\x05\x82\x2d\x9c\x81\x25\xc3\xb7\x6c\x3d\x4d\xd4\x76\x97\xba\x9a\x25\x1d\x8b\xba\x97\xa7\xf3\xab\xbd\x7b\xc2\x36\x5d\xc9\x5d\x5d\x8b\xae\x64\xa5\x03\x90\xae\x64\xa5\x4a\x64\xa7\x2c\x45\x90\xae\x5a\xe5\xa9\x23\xc9\x72\xb5\xca\xf2\x90\xd1\xae\x7a\xa5\x33\xf1\x46\xe3\x9e\x4d\x0a\xac\xe5\x75\x4e\x1c\x59\x76\xd7\x3a\x2f\x03\x10\x5e\x44\x44\x51\x7d\xad\x13\xab\x5a\x77\xbd\xf3\x44\xdf\xcc\x78\xa2\x68\xa1\x8f\x1d\x87\xd1\x51\x11\x13\x96\x40\x95\x03\x45\xe0\x2c\x19\xdf\x81\xcc\x53\x81\x4c\x7e\x23\x1a\x6f\x59\x94\xf0\xd3\x1d\x42\xd2\xc5\x12\x09\x97\x85\x9e\x83\xc6\x80\x42\x01\x0e\x92\x4c\x71\x3e\x21\xd3\x90\x83\xde\x22\xf3\x95\x35\x27\xc7\x52\xba\x6d\x5a\x8d\x10\xa3\x66\x37\x8d\xec\xd7\x3b\x8c\xea\x30\xaa\xc3\xa8\xbf\x1c\x46\xf5\x44\x74\xdc\x83\xa2\xd5\x5f\x08\x5b\xe9\x72\x54\xb7\xbc\xb8\xab\x0e\xb1\xb9\x3f\x4f\xad\xbe\x33\x40\xab\x1b\x99\xda\x80\x6b\x42\x9d\x01\xd2\x12\x49\xda\x5c\x2d\x3b\x0d\x8f\xd1\x3b\x68\x31\x36\x9a\xa4\x7c\x7f\x63\x63\x25\xd5\x12\x05\x2d\x1f\x0e\xde\x7e\x38\x38\x5f\x3b\x79\x77\x72\xb1\x96\x79\xc8\x01\x2b\x1d\x41\xbd\x4b\x8a\xc7\x1e\x28\x93\x38\x03\x4e\x26\x73\xf4\xfe\xf3\x85\x39\xc5\x03\x34\x8c\x40\x05\xe1\x50\xba\x8c\x93\xef\x26\xff\x6f\xce\x38\x65\x12\x4d\x58\x48\x9d\x74\xbb\x12\x38\x1d\xa9\xc5\x6c\x90\xaf\x5b\x97\xee\x91\xfb\xcd\xff\xf2\x3a\xf8\x7c\x36\x39\xde\xf4\x4e\xe1\x3a\x70\xb6\xff\x7c\x13\xcb\xa4\x74\x62\xab\x64\xa2\x0c\xc7\xfd\x84\xb2\xd7\x20\x93\xbd\x92\x48\x5a\xa7\xa5\xab\xce\x4d\xd5\x02\xf6\xef\xc9\xfe\x7e\x03\xfb\xfb\x25\xf6\x2f\x69\x9a\xf9\x80\xdc\x44\xc5\xed\x81\xa3\x8f\xb3\xb7\xfb\x57\x27\xbf\x7f\xdd\xfd\x3a\x75\x27\x27\xfb\xd3\x77\x43\xf1\xdb\xec\xe8\x73\xbc\x3d\xb5\x37\x55\x95\xaa\x6b\x6d\xdd\x57\x77\xad\xad\x26\xe5\xcd\x3c\x8d\xd7\x7a\x9e\xb9\xef\x8d\x6f\x82\x85\xd6\x4c\x11\x06\x01\xe3\x12\x9c\x5f\x14\xe4\x9b\xfb\xdc\x5f\x95\x6b\x94\x1e\xec\x5a\xb9\x7c\x3e\x26\xfe\xcd\x3b\x9b\xbf\x09\x3f\xee\x6e\xe0\xcb\xdb\xe3\x3f\x6f\x5e\x5f\xdc\x9c\x0e\x71\xa2\xb6\xd5\xb9\x9d\x2a\xa9\xec\x3d\xaa\xea\x7e\x50\x34\x86\xb9\x34\x18\x71\x7e\xed\x6d\x90\x0f\x5b\x4e\xf8\xc7\xd7\xe3\xd9\x6c\xe7\xeb\xec\xa3\x37\xff\xbe\xe1\xbf\x1b\x6e\xbd\x9f\xdf\x9c\xf6\xd2\x73\x5c\x7f\x8c\x3f\xed\x4d\x37\xa7\xbb\xbf\x5d\x38\x97\x1f\x2e\xf1\xe6\xb5\xf8\xed\xd5\xe6\xf5\xef\x6f\xb6\xe6\xc9\x29\x68\x2f\x8f\xc7\x3d\x0b\x3d\x03\x13\xfa\x56\x40\x7f\x97\x76\x4e\x6d\x01\x72\x80\x3e\x1d\x9e\xac\x1d\x7d\x59\xdb\x57\xae\x37\xf1\x8c\x4b\x68\xee\x0e\xd2\x3e\x70\x2b\xd7\x84\xf9\xb0\x2e\x0e\xc8\xda\x06\xb9\xb5\xb6\x3c\xea\x78\xfe\x8d\x75\x33\xb1\xf7\x04\x91\x78\x47\x78\x57\xb3\x57\x90\xc1\xab\x49\x06\xcb\xb5\xf4\xa6\x3b\xce\xab\x57\x37\x96\xc7\x6d\x67\xb6\x3d\xdd\xc3\xde\x78\x4f\x78\x93\x29\xbd\xda\x72\xdc\xb1\xb8\xfa\xfb\xff\xfd\x74\xf4\xe5\x62\x78\x80\xfe\x61\x16\xb8\xae\xe5\xf1\x2b\x71\x80\x4a\x75\x86\x79\x86\x36\x11\xa8\xd7\xdb\xb6\xb6\x7b\xbd\x5f\xf4\xea\x4d\xc3\xe1\xc7\xcb\xf3\x8b\xa3\x61\x24\x03\xfd\x18\x61\xea\xa4\xbb\x88\x52\x62\x66\xc4\xc6\x74\x87\xf1\x1d\x6b\x46\x42\x6b\x8f\x81\xda\x24\x97\x5f\xdb\x9b\xbb\xce\x74\x22\xaf\x36\xb0\xdd\xeb\x65\x41\x3b\xc2\x37\x33\xae\x71\x2d\xbd\x8c\x32\xfd\xdc\x80\x0a\x17\xe2\x33\x9f\xef\x52\x71\x33\xde\x14\xa7\xfe\xdb\xab\x9d\xf1\x97\xe0\xcd\xde\xa1\x3a\x5e\x91\x1f\x60\xe6\xcf\x7d\xa9\x2e\x66\x09\x7b\xde\xa7\x49\x8a\xc3\x4d\xce\xc4\x27\x5d\x48\x3d\x84\x09\x70\xa0\x76\xe2\x9f\x34\x0f\xca\x4d\x3a\xd2\xb3\xc5\x03\x73\xbe\xc8\x10\x02\x0e\x42\x0d\x2d\x7f\x1e\x32\x31\x3e\x68\x3c\xd7\x41\xc3\xc1\xd9\x71\x12\x55\x45\x71\x5a\xc2\x8c\xf2\xd5\x46\x66\xf6\xa4\x4d\x05\x7c\xc9\x1f\xd1\x47\x9c\xcb\x22\x51\x61\xd0\x1d\xc4\x92\x8d\x9e\x96\x90\x85\x1a\x96\x95\x47\xee\xa3\x4f\x8f\xc3\x46\x2d\x0b\x8f\xae\x1c\x0d\x8a\x71\x90\xd1\x06\x97\x79\x8e\x88\x93\x00\x3a\xde\x8c\x3d\xa8\xb8\x13\xc2\xc6\x68\x23\xc9\x02\x62\x23\xc9\x92\x63\x83\x29\x93\x2e\x70\x24\xe6\x42\x82\x6f\xe2\xcd\xe8\x2c\x5e\x60\x9e\x49\x62\x38\x44\xcd\xee\x13\x8a\x33\x92\x40\xc8\xc7\x41\x40\xe8\x34\x7b\x94\xb5\x67\xdb\x18\x62\xe7\x26\xc8\xfa\xe1\xb6\xc7\x42\x67\x14\x70\x36\x23\x8e\x72\xa8\x6b\xe4\xa3\x7a\x9d\x45\x9d\x6a\x68\x05\x5c\x19\x04\x39\x3f\x35\x2f\xe3\x90\x04\x78\x18\x85\xb6\x9b\x57\xcf\xeb\x82\xfd\x5b\xc0\x5f\x99\xee\xa0\x6a\x8b\xcd\x23\x81\xbe\x31\x7e\xed\x31\xac\xb6\x98\xe9\xfa\x33\x1d\x39\xe4\xb3\x3c\xd1\x72\x49\x36\xf0\xd2\xc8\xb7\x28\x27\x93\x26\x79\x16\x74\x2d\x9b\x94\x8c\x50\x4b\xaf\x94\xd4\x8b\x60\x89\xa5\x1a\x75\x40\xb1\x3a\xdc\x7f\xa9\x39\xe5\x5a\xd4\x9d\xc3\x94\xe4\xe3\xdb\xca\x6e\x7e\xe8\x49\x32\xc2\xdf\xcb\x1d\xf3\x05\x7a\xcb\xc9\xaf\x9c\x89\xaa\x94\x5b\x5a\xeb\x5b\x13\x4e\xea\xf2\xeb\x94\xb5\x9c\xe5\x6a\xa5\xfe\x09\x0f\xbd\x1c\xab\x98\x73\x3c\xaf\xe0\xb4\x86\xcb\x02\x77\x0d\x3b\xb9\x50\x0f\x4b\x0e\x5f\x65\xaf\xb2\x42\x16\x72\xae\x8f\x6e\xcb\xa3\x79\x1b\x4c\xfa\xb9\x1e\xa2\x7d\xbb\xcc\x2d\x95\x3a\x09\x61\xe0\x98\xf2\x18\x07\x4b\x8c\x02\x0f\x53\xc8\x64\x12\x84\xc4\x32\x14\x95\xab\x7c\x3c\xd0\xcc\x4c\x98\x5d\xa2\x46\x9d\xa8\x13\x61\xf4\x1c\xa4\xf2\x90\x93\xfd\xae\xd2\x80\x31\x63\x52\x48\x8e\x83\x91\xf9\x7d\x87\x16\xe7\x9a\x00\x95\x8b\x2d\x58\xd2\x53\x80\xcd\x41\x36\xf6\xd6\xfe\xf1\x63\xe9\x88\x9e\x2c\x2b\xb5\x02\x95\x26\x69\xb5\x58\x75\x2b\xe3\xa8\x43\xa2\x25\xcf\x54\x56\xbb\xee\x6c\x95\x8b\x2f\xb0\x98\x4e\x84\x4a\x98\x66\xc2\x92\xe2\x7b\x21\xd5\xbd\x24\x93\xd8\x5b\xd4\xad\x6c\x88\xb5\x91\xac\x32\xcb\x6b\xd9\x17\x56\xd6\xb2\x6f\x97\xac\x99\xb9\x16\x5a\x9b\xd4\xbd\x6f\x12\x94\xbe\x79\xc9\xb0\x9d\xcf\xe4\x62\x1f\xaa\x7f\x69\x63\x7d\xa1\xa5\x8c\x7e\x98\xa5\x8e\xf4\x1f\xe6\xf9\x1d\xa9\xdb\x2e\xa6\x14\x3c\x71\x7f\xf2\x05\x94\xaa\x9d\xb1\x8c\x3e\xc5\x39\xeb\x58\x39\xc8\xfe\x59\x62\x68\xe1\x52\x89\xcd\xe8\xa8\x78\x44\xf2\x49\xe3\xe1\xc7\xc8\x3d\x53\x7d\x97\x9f\xc1\xc3\xe3\x26\x51\x9a\xc7\xe9\xbd\x12\x96\x30\x65\x9c\x7c\x87\x9a\x97\xbd\x2b\x65\x0a\x34\xf4\xf3\x2d\x4a\xa7\xe9\x75\xb1\x49\xe7\x75\xee\xba\x1b\x99\x40\xb3\x61\x37\x54\xaf\x28\x0c\x37\x77\x67\x36\xa6\xd9\x8b\xb3\x99\xa9\x03\xcf\xd5\xf6\x88\xcc\xdd\xa4\x08\xc0\xce\x71\x38\x21\xe0\x39\x65\x29\xd7\x9d\xc9\x14\xa7\x1a\x8d\x6b\x51\x86\x15\x42\x2d\xb8\x54\x68\xb9\x70\xb7\xd7\x20\xcd\x8a\x80\xf4\xe9\x98\x6d\xc5\xa8\x61\x72\xe4\x83\xc4\xca\x53\x69\xc4\x86\xe8\xf3\x08\x0b\xf1\x81\x7d\xa3\x2d\x7c\x80\xa2\x05\xad\x36\x58\xba\xca\xd8\x19\xe1\x1c\xf6\x4f\x18\xf7\xb1\x1c\x28\xdf\x0a\xd6\x24\xf1\x61\x11\x19\xe3\x8d\xdd\x9b\x4c\x9c\xf2\x1f\x55\x58\xe9\x98\x18\xa1\x72\x77\xbb\x11\xcf\x0a\xb2\x6f\x12\x79\x71\x5b\x50\xdb\x92\xab\xc2\xb6\x66\x5f\xe7\x09\x3c\x36\xf7\x95\x4f\xe5\x31\x73\x29\xd8\x9a\x78\x75\xd8\xae\xd5\xa2\x2d\x8d\x1a\xe7\x32\xa5\x56\xfa\x4d\xa9\xc5\x2a\x92\xb3\x30\xe5\xee\x85\xaf\x26\x44\x10\xb8\x90\xac\x03\x42\xb9\x1c\x23\xe5\xaa\x2f\xd6\x53\xe3\xd0\x37\x76\xab\x0e\x2b\x5a\x9d\xbc\xbf\xe4\x81\xaa\x96\xc7\x0f\x39\x0d\xd5\x12\xef\xdd\x67\xf7\x9e\x83\x81\xaf\xa8\xab\x2c\xda\xf9\x4c\x9c\xd2\xc4\xa7\xbe\x32\x59\x6c\xfd\xb0\x68\x91\x5d\xc9\x65\xf5\xeb\x3b\xc7\x57\xf2\x3a\x84\x8e\x79\x89\x6e\xe5\xa3\x51\x63\xfd\xd7\xdb\x48\xa9\xde\x7f\xbe\x88\xda\xb5\x20\x60\x10\x3d\xcf\x39\xf4\xae\x94\xc1\xca\xff\x02\x00\x00\xff\xff\xc2\x37\xcf\x26\x70\x71\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 29040, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
