// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package connector generated by go-bindata.// sources:
// pkg/api/connector/openapi/api/openapi.yaml
package connector

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x59\x73\xdb\x38\xf2\x7f\xf7\xa7\xc0\xdf\xff\xdd\xd2\xcc\xee\xc8\xa2\x7c\xc6\xaa\x9a\x07\xc7\x71\x32\x4e\x62\xc7\xe3\x63\x92\xcc\xd6\x96\x0b\x22\x5b\x22\x6c\x12\xa0\x01\x50\xb1\xb2\xb5\xdf\x7d\x0b\x00\xef\x4b\x94\xed\xf8\x98\x62\x9e\x62\x10\x68\x34\x1a\x8d\xfe\x75\x37\x9a\x14\x0b\x80\xe2\x80\x8c\xd0\xc6\x9a\xb5\x66\xad\x10\x3a\x61\xa3\x15\x84\x1c\x10\x36\x27\x81\x24\x8c\x8e\xd0\x3e\xa3\x14\x6c\xc9\x38\x3a\x03\x3e\x23\x36\xa0\xb7\x1e\x80\x44\x47\x98\xe2\x29\x70\x44\x04\xc2\xe8\x14\x84\x44\x7b\x27\x87\x48\x32\xe4\xeb\x07\xc8\x8e\xc7\x89\xb5\x15\x84\x24\x91\x1e\x2c\x24\xb6\x82\xd0\x0c\xb8\xd0\xf3\x5a\x6b\xd6\xda\x70\x45\x00\x57\x2d\xa3\x95\x7e\x9e\xab\x23\x4c\x28\xfa\x29\xe0\xcc\x09\x6d\xd5\xf2\x33\x32\x3d\x57\x10\x0a\xb9\x37\x42\xae\x94\x81\x18\x0d\x06\x38\x20\x6b\x6a\x95\xc2\x25\x13\xb9\x66\x33\xbf\x48\xe8\x4c\xe2\x29\xa1\xd3\x86\xe1\x42\xe2\x29\x34\x13\xf1\x98\x8d\x3d\x97\x09\x99\x1d\x3f\x1a\x0c\x92\xf6\xd1\x2b\xcb\xb2\x8a\xa3\xec\x90\x73\xa0\x12\x39\xcc\xc7\x84\xc6\x43\x07\x2b\x12\x4f\xf5\x82\x29\xf6\x73\x22\x3b\x9f\x07\x20\xca\xed\x15\x4d\x68\xdf\x0b\x85\x04\x2e\x56\x02\x2c\x5d\xa1\xf6\x54\x2d\x65\x90\xec\xc9\xa5\x3f\xf5\xe5\x60\x36\x1c\x5c\xe3\xc9\x35\xee\x27\xed\x7d\xa9\xe6\x18\xfc\x27\xed\xa8\x1a\x2e\x89\xf3\x5f\x45\x03\xa1\x29\x48\xf3\x1f\x84\x58\x00\x1c\xab\x85\x1c\x3a\x23\xd5\x9e\x4c\xae\xd8\x7c\x3d\x3f\x7c\x13\xf5\x0b\x30\xc7\x3e\x48\xbd\x89\xa6\xa5\x20\x86\x73\x17\x10\x71\x10\x9b\x20\xe9\x66\xd4\x06\xa9\x99\xa3\x11\x08\xc1\x6d\xe0\x31\x07\x46\x68\x82\x3d\x91\x36\x13\x3a\x42\x6a\x89\x49\x83\x11\x44\x89\xfd\xe4\x39\x87\x9b\x90\x70\x70\x46\x48\xf2\x30\xa5\x23\x6c\x17\x7c\x3c\x4a\xfe\x46\x7a\xf6\x11\x12\x92\x13\x3a\x4d\xbb\xc9\xb9\xd2\x62\x41\xfc\xc0\x8b\x07\x73\x10\x01\xa3\x02\x44\x3a\x7a\x75\xdd\xb2\x56\xb3\xc4\x6c\x46\x25\x50\x99\x6d\x42\x08\x07\x81\x47\x6c\x2d\xc2\xc1\x95\x60\x34\xff\xb4\x8a\x27\xf3\xef\x6f\x1c\x26\x23\xd4\xfb\xff\x81\xcd\xfc\x80\x51\xa0\x52\x0c\x4c\x5f\x31\xc8\x6d\x42\x2f\x33\xb4\x24\xf1\xbc\x9c\x91\x8f\xa5\xed\xaa\x73\xa0\xf6\x40\x09\x09\xb4\x32\x47\xeb\xd9\xb4\x86\xf7\x5f\x0f\xdc\x62\x25\x36\x51\x5e\x91\xa2\x7f\x60\x9e\xae\x96\x9f\x56\xaf\x38\xa6\x36\x48\xc7\xf6\x1e\x40\x80\x07\x9c\x33\x5e\x2b\xb8\xbd\x50\xba\x48\xb2\x6b\xa0\xca\xec\x11\x3a\xc3\x5e\x46\xb7\x56\x37\xad\xcd\x1f\x2c\xa6\xcd\x7b\x88\x69\xf3\xd1\xc4\x74\xcc\x52\x7d\x2a\xe8\x19\xdc\x12\x21\x45\x2a\xb2\xad\x87\x38\x29\x0d\x22\xdb\xb2\xac\x3b\x8b\x2c\x1d\xfb\xe3\x45\x76\x41\xe1\x36\x00\x5b\x82\x83\x40\x75\x44\xcc\xd6\xf0\x10\x6b\x97\x00\x3b\xe4\x44\xce\x53\x1b\xfa\x1a\x30\x07\x3e\x42\xff\xfa\x77\xdc\x25\xf4\x7d\xcc\xe7\x23\xf4\x0e\x24\xc2\x45\xc1\x8f\xe7\x28\x51\x55\x03\x30\x31\xa1\x22\xc0\x2c\x87\x15\xcd\xb8\xe0\x11\x91\x07\x06\xd1\x16\x15\x4e\x94\x0f\x41\xa8\x03\xb7\x2b\x4d\xdb\x1c\xe0\x29\xe4\xf7\x61\x86\xbd\x10\x46\x68\x75\xb8\x9a\x43\x89\x9b\x10\xf8\xbc\x00\x13\x6a\x70\x05\x32\xe4\x21\xa6\x15\x34\x14\x98\x3f\x0e\xfd\x31\x70\x05\x69\x44\x82\xaf\x2c\x05\x02\x6c\xbb\xf9\x09\xab\x96\x23\xc8\xf7\xba\xe5\x58\xd6\xe2\x05\xa9\xe1\x0f\xb3\xa0\xe7\x8b\x6a\x1f\x89\x90\xf5\x06\x5a\x6b\x9c\x12\x7c\x5e\xfd\x45\x87\x65\x4b\x62\x59\x67\x98\x1f\xde\x30\x9f\x82\x0c\x39\x55\xf1\x52\xb3\x96\x3e\x8c\x7d\x5e\xc6\x34\x77\x66\xf9\x65\x98\xe5\x8a\xd0\x49\xef\x3a\xb2\x4d\xc0\x87\x32\x47\x38\x09\x99\x72\x91\x4e\x1d\x8f\x9a\x4c\x75\xa4\x74\x07\x3e\x93\x50\x69\xc2\xb8\xff\xac\x21\x65\x59\x38\xe9\x90\xa4\x2c\xa5\x0e\x49\x5e\x18\x92\x98\xc7\x01\x13\xd5\xd0\x60\x73\xc0\x12\x92\xde\xad\xb1\x01\xb8\x3a\xee\x3a\x85\x80\x75\x56\x4e\x59\x58\x4c\x11\x16\x73\x6a\xbb\x9c\x51\x16\x0a\xe4\x63\x4a\x81\xdf\xd1\x4a\x69\x4a\x15\x26\xaa\x55\x32\x67\xcc\x98\x07\x98\x36\x9a\x28\x9d\xf8\x78\xcd\x9c\x79\x3a\xbc\x42\x5f\x9b\xb5\xb5\x5a\x75\x5a\x59\xa3\x54\x79\x6a\x72\xb0\x0e\x96\xb8\x79\xfd\xd5\x66\x76\xfd\x89\xcd\x6c\xbd\xf1\xb0\x6d\x08\x24\xe4\xb2\x28\x3f\xd6\x5e\x6c\x5a\xd6\xbe\x52\x70\xc2\xe8\x3d\xcc\x6b\x91\xc6\x8f\xb7\x1f\x7f\x28\xb3\xaa\xa7\x34\xf6\x43\x14\x0d\x48\x07\x49\x5d\xa2\x6e\x39\x31\x9d\xa7\xc9\x5e\x70\x94\xe5\x60\x21\xb7\x01\x39\x0c\x04\xed\x49\x93\xac\xeb\x80\xbc\xa4\x5c\x14\x85\x75\x58\x6e\xb0\x33\x4e\xa4\xdb\x05\x08\x5d\x06\xe2\xb5\x7d\x01\x84\x11\x85\x6f\x25\x42\x0d\xb8\xde\x14\x1c\x8a\x4c\x74\x98\xbd\xe4\x49\xee\x77\x1c\xf0\x40\x42\xa5\x53\x60\x1e\x2d\xed\x14\xbc\xa8\x10\xa5\xdd\xcd\x54\x99\xfd\x25\x2f\xa5\x9e\xe0\x3e\xea\x01\xec\xdd\xc3\x1f\xa4\x37\x5a\xa5\x3a\xf8\x2a\x09\xe6\xe9\xe1\xcb\x6c\xcd\x7d\x40\x2c\x47\xe1\x51\xee\x9c\x8c\x99\x89\xf0\x0c\x7d\x23\xd2\x45\x22\x00\x9b\x4c\x08\x38\xea\x1c\x3f\xc1\xdd\xd3\x3d\xc5\x58\xa4\xf0\xb2\x82\x54\xc3\x7a\xf6\x2a\xaa\x4d\x54\xda\xa6\xc4\xa0\x03\x9f\x17\x05\x3e\x4f\x9d\xe3\x6b\x59\x08\xd1\xd5\x40\xbc\x0c\x6c\x7a\x11\xa1\x55\x57\x03\xf1\x9c\x6a\x20\xda\x00\x4f\xa0\xb6\xab\x12\x7a\xf4\x93\x0e\x7c\x9e\x3f\xf8\xdc\x2d\x7b\xdb\xd7\xfb\xfb\xcf\xb6\x89\xdc\xc2\x0d\xd1\xfb\xb3\x4f\xc7\xe8\x44\x51\xf8\x05\x9d\xbe\xdd\x47\xdb\xbb\xd6\x3a\xea\x27\x15\xa4\x92\x31\x4f\xac\x11\x90\x93\x35\xc6\xa7\x03\x57\xfa\xde\x80\x4f\x6c\xd5\xab\x40\xd7\xac\x93\x8d\xaf\xc0\x96\x35\xdc\xfa\xc0\xa7\xf0\x00\xec\x1e\x29\x3a\x59\xa6\x77\x36\x5e\x6d\x2f\x66\x5a\xf5\x6a\xc3\x74\x3e\xc8\xc3\x12\x23\xc9\xcc\x21\x2a\x94\x78\x2a\x1f\xbd\x59\x21\x5e\x58\x36\xbb\x73\x28\x3a\x87\xe2\x07\x89\xa9\x73\x28\x9e\xd4\xa1\x30\xe6\x6b\x29\x97\xa2\x65\x19\x65\xe4\x1d\x2c\x53\xae\x93\x94\xf7\x9b\x8e\x5d\xd5\xce\xf3\xae\xda\x79\x9e\x51\x71\xa4\x44\x4b\xd7\x53\xda\x79\xe5\xeb\x90\xac\x2b\x84\x79\x9e\x85\x30\x05\x45\xad\xab\xaa\xcc\x19\xd3\xb6\x35\x31\xd1\xa0\xd6\x06\xb8\x2b\x8d\x69\x50\xa6\x65\xcc\xd5\xc2\x0a\x99\x38\xd8\x7e\xa9\x95\x32\xa5\x75\x76\x05\x33\x5d\xc1\xcc\x53\x43\x57\x17\x84\x75\x05\x33\x8f\x5a\x30\x13\x9b\xf1\x3b\xb8\x04\xd5\x85\x33\x05\x82\x2d\x9c\x81\x25\xc3\xb7\x6c\x3d\x4d\xd4\x76\x97\xba\x9a\x25\x1d\x8b\xba\x97\xa7\xf3\xab\xbd\x7b\xc2\x36\x5d\xc9\x5d\x5d\x8b\xae\x64\xa5\x03\x90\xae\x64\xa5\x4a\x64\xc7\x2c\x45\x90\xae\x5a\xe5\xa9\x23\xc9\x72\xb5\xca\xf2\x90\xd1\xae\x7a\xa5\x33\xf1\x46\xe3\x9e\x4d\x0a\xac\xe5\x75\x4e\x1c\x59\x76\xd7\x3a\x2f\x03\x10\x5e\x44\x44\x51\x7d\xad\x13\xab\x5a\x77\xbd\xf3\x44\xdf\xcc\x78\xa2\x68\x61\x80\x1d\x47\x17\x24\xe4\x31\x61\x09\x54\xd9\x53\x04\x4e\x92\xf1\x1d\xc8\x3c\x15\xc8\xe4\x37\xa2\xf1\x96\x45\x09\x3f\xdd\x21\x24\x5d\x2c\x91\x70\x59\xe8\x39\x68\x0c\x28\x14\xe0\x20\xc9\x14\xe7\x13\x32\x0d\x39\xe8\x2d\x32\x5f\x59\x73\x72\x2c\xa5\xdb\xa6\xd5\x08\x31\x6a\x76\xd3\xc8\x7e\xad\xc3\xa8\x0e\xa3\x3a\x8c\xfa\xcb\x61\x54\x4f\x44\xc7\x3d\x28\x5a\xfd\x85\xb0\x95\x2e\x47\x75\xcb\x8b\xbb\xea\x10\x9b\xfb\xf3\xd4\xea\x3b\x23\xb4\x3a\xcc\xd4\x06\x5c\x13\xea\x8c\x90\x96\x48\xd2\xe6\x6a\xd9\x69\x78\x34\xef\xa0\x25\xd8\x68\x92\xf2\x83\xe1\x70\x25\xd5\x12\x05\x2d\x1f\xf6\xde\x7e\xd8\x3b\xeb\x1f\xbd\x3b\x3a\xef\x67\x1e\x72\xc0\x4a\x47\x50\xef\x82\xe2\xb1\x07\xca\x24\xce\x80\x93\xc9\x1c\xbd\xff\x7c\x6e\x4e\xf1\x08\x9d\x46\xa0\x82\x70\x28\x5d\xc6\xc9\x77\x93\xff\x37\x67\x9c\x32\x89\x26\x2c\xa4\x4e\xba\x5d\x09\x9c\x5e\xaa\xc5\x0c\xc9\xd7\x8d\x0b\xf7\xc0\xfd\xe6\x7f\x79\x1d\x7c\x3e\x99\x1c\xae\x7b\xc7\x70\x1d\x38\x9b\x7f\xbe\x89\x65\x52\x3a\xb1\x55\x32\x51\x86\xe3\x7e\x42\xd9\x69\x90\xc9\x4e\x49\x24\xad\xd3\xd2\x55\xe7\xa6\x6a\x01\xbb\xf7\x64\x7f\xb7\x81\xfd\xdd\x12\xfb\x17\x34\xcd\x7c\x40\x6e\xa2\xe2\xf6\xc0\xc1\xc7\xd9\xdb\xdd\xab\xa3\xdf\xbf\x6e\x7f\x9d\xba\x93\xa3\xdd\xe9\xbb\x53\xf1\xdb\xec\xe0\x73\xbc\x3d\xb5\x37\x55\x95\xaa\x6b\x6d\xdc\x57\x77\xad\x8d\x26\xe5\xcd\x3c\x8d\xd7\x7a\x96\xb9\xef\x8d\x6f\x82\x85\xd6\x4c\x11\x06\x01\xe3\x12\x9c\x5f\x14\xe4\x9b\xfb\xdc\x5f\x95\x6b\x94\x1e\xec\x5a\xb9\x7c\x3e\x24\xfe\xcd\x3b\x9b\xbf\x09\x3f\x6e\x0f\xf1\xc5\xed\xe1\x9f\x37\xaf\xcf\x6f\x8e\x4f\x71\xa2\xb6\xd5\xb9\x9d\x2a\xa9\xec\x3c\xaa\xea\x7e\x50\x34\x4e\x73\x69\x30\xe2\xfc\xda\x1b\x92\x0f\x1b\x4e\xf8\xc7\xd7\xc3\xd9\x6c\xeb\xeb\xec\xa3\x37\xff\x3e\xf4\xdf\x9d\x6e\xbc\x9f\xdf\x1c\xf7\xd2\x73\x5c\x7f\x8c\x3f\xed\x4c\xd7\xa7\xdb\xbf\x9d\x3b\x17\x1f\x2e\xf0\xfa\xb5\xf8\xed\xd5\xfa\xf5\xef\x6f\x36\xe6\xc9\x29\x68\x2f\x8f\xc7\x3d\x0b\x3d\x03\x13\xfa\x56\x40\x7f\x97\x76\x4e\x6d\x01\x72\x84\x3e\xed\x1f\xf5\x0f\xbe\xf4\x77\x95\xeb\x4d\x3c\xe3\x12\x9a\xbb\x83\xb4\x0f\xdc\xca\xbe\x30\x1f\xd6\xc5\x01\xe9\x0f\xc9\xad\xb5\xe1\x51\xc7\xf3\x6f\xac\x9b\x89\xbd\x23\x88\xc4\x5b\xc2\xbb\x9a\xbd\x82\x0c\x5e\x4d\x32\x58\xae\xa5\x37\xdd\x72\x5e\xbd\xba\xb1\x3c\x6e\x3b\xb3\xcd\xe9\x0e\xf6\xc6\x3b\xc2\x9b\x4c\xe9\xd5\x86\xe3\x8e\xc5\xd5\xdf\xff\xef\xa7\x83\x2f\xe7\xa7\x7b\xe8\x1f\x66\x81\x6b\x5a\x1e\xbf\x12\x07\xa8\x54\x67\x98\x67\x68\x13\x81\x7a\xbd\x4d\x6b\xb3\xd7\xfb\x45\xaf\xde\x34\xec\x7f\xbc\x38\x3b\x3f\x38\x8d\x64\xa0\x1f\x23\x4c\x9d\x74\x17\x51\x4a\xcc\x8c\x18\x4e\xb7\x18\xdf\xb2\x66\x24\xb4\x76\x18\xa8\x4d\x72\xf9\xb5\xbd\xbe\xed\x4c\x27\xf2\x6a\x88\xed\x5e\x2f\x0b\xda\x11\xbe\x99\x71\x8d\x6b\xe9\x65\x94\xe9\xe7\x06\x54\x38\x17\x9f\xf9\x7c\x9b\x8a\x9b\xf1\xba\x38\xf6\xdf\x5e\x6d\x8d\xbf\x04\x6f\x76\xf6\xd5\xf1\x8a\xfc\x00\x33\x7f\xee\x4b\x75\x31\x4b\xd8\xf3\x3e\x4d\x52\x1c\x6e\x72\x26\x3e\xe9\x42\xea\x53\x98\x00\x07\x6a\x27\xfe\x49\xf3\xa0\xdc\xa4\x97\x7a\xb6\x78\x60\xce\x17\x39\x85\x80\x83\x50\x43\xcb\x9f\x87\x4c\x8c\x0f\x1a\xcf\x75\xd0\xb0\x77\x72\x98\x44\x55\x51\x9c\x96\x30\xa3\x7c\xb5\x4b\x33\x7b\xd2\xa6\x02\xbe\xe4\x8f\xe8\x23\xce\x65\x91\xa8\x30\xe8\x0e\x62\xc9\x46\x4f\x4b\xc8\x42\x0d\xcb\xca\x23\xf7\xd1\xa7\xc7\x61\xa3\x96\x85\x47\x57\x8e\x06\xc5\xd8\xcb\x68\x83\xcb\x3c\x47\xc4\x49\x00\x1d\x6f\xc6\x1e\x54\xdc\x09\x61\x63\xb4\x91\x64\x01\xb1\x91\x64\xc9\xb1\xc1\x94\x49\x17\x38\x12\x73\x21\xc1\x37\xf1\x66\x74\x16\xcf\x31\xcf\x24\x31\x1c\xa2\x66\xf7\x09\xc5\x19\x49\x20\xe4\xe3\x20\x20\x74\x9a\x3d\xca\xda\xb3\x6d\x0c\xb1\x73\x13\x64\xfd\x70\xdb\x63\xa1\x73\x19\x70\x36\x23\x8e\x72\xa8\x6b\xe4\xa3\x7a\x9d\x44\x9d\x6a\x68\x05\x5c\x19\x04\x39\x3f\x36\x2f\xe3\x90\x04\x78\x18\x85\xb6\x9b\x57\xcf\xeb\x82\xfd\x5b\xc0\x5f\x99\xee\xa8\x6a\x8b\xcd\x23\x81\xbe\x31\x7e\xed\x31\xac\xb6\x98\xe9\xfa\x33\x1d\x39\xe4\xb3\x3c\xd1\x72\x49\x36\xf0\xd2\xc8\xb7\x28\x27\x93\x26\x79\x16\x74\x2d\x9b\x94\x8c\x50\x4b\xaf\x94\xd4\x8b\x60\x89\xa5\x1a\x75\x40\xb1\x3a\xdc\x7f\xa9\x39\xe5\x5a\xd4\x9d\xc3\x94\xe4\xe3\xdb\xca\x6e\x7e\xe8\x49\x72\x89\xbf\x97\x3b\xe6\x0b\xf4\x96\x93\x5f\x39\x13\x55\x29\xb7\xb4\xd6\xb7\x26\x9c\xd4\xe5\xd7\x29\x6b\x39\xcb\xd5\x4a\xfd\x13\x1e\x7a\x39\x56\x31\xe7\x78\x5e\xc1\x69\x0d\x97\x05\xee\x1a\x76\x72\xa1\x1e\x96\x1c\xbe\xca\x5e\x65\x85\x2c\xe4\x5c\x1f\xdd\x96\x47\xf3\x36\x98\xf4\x33\x3d\x44\xfb\x76\x99\x5b\x2a\x75\x12\xc2\xc0\x31\xe5\x31\x0e\x96\x18\x05\x1e\xa6\x90\xc9\x24\x08\x89\x65\x28\x2a\x57\xf9\x78\xa0\x99\x99\x30\xbb\x44\x8d\x3a\x51\x27\xc2\xe8\x19\x48\xe5\x21\x27\xfb\x5d\xa5\x01\x63\xc6\xa4\x90\x1c\x07\x97\xe6\xf7\x1d\x5a\x9c\x6b\x02\x54\x2e\xb6\x60\x49\x4f\x01\x36\x07\xd9\xd8\x5b\xfb\xc7\x8f\xa5\x23\x7a\xb2\xac\xd4\x0a\x54\x9a\xa4\xd5\x62\xd5\xad\x8c\xa3\x0e\x89\x96\x3c\x53\x59\xed\xba\xb3\x55\x2e\xbe\xc0\x62\x3a\x11\x2a\x61\x9a\x09\x4b\x8a\xef\x85\x54\xf7\x92\x4c\x62\x6f\x51\xb7\xb2\x21\xd6\x46\xb2\xca\x2c\xf7\xb3\x2f\xac\xf4\xb3\x6f\x97\xf4\xcd\x5c\x0b\xad\x4d\xea\xde\x37\x09\x4a\xdf\xbc\x64\xd8\xce\x67\x72\xb1\x0f\xd5\xbf\xb4\xb1\xb6\xd0\x52\x46\x3f\xcc\x52\x47\xfa\x0f\xf3\xfc\x8e\xd4\x6d\x17\x53\x0a\x9e\xb8\x3f\xf9\x02\x4a\xd5\xce\x58\x46\x9f\xe2\x9c\x75\xac\xec\x65\xff\x2c\x31\xb4\x70\xa9\xc4\x66\xf4\xb2\x78\x44\xf2\x49\xe3\xd3\x8f\x91\x7b\xa6\xfa\x2e\x3f\x83\x87\xc7\x4d\xa2\x34\x8f\xd3\x7b\x25\x2c\x61\xca\x38\xf9\x0e\x35\x2f\x7b\x57\xca\x14\x68\xe8\xe7\x5b\x94\x4e\xd3\xeb\x62\x93\xce\xeb\xdc\x75\x37\x32\x81\x66\xc3\x6e\xa8\x5e\x51\x18\x6e\xee\xce\x6c\x4c\xb3\x17\x67\x33\x53\x07\x9e\xab\xed\x11\x99\xbb\x49\x11\x80\x9d\xe3\x70\x42\xc0\x73\xca\x52\xae\x3b\x93\x29\x4e\x35\x1a\xd7\xa2\x0c\x2b\x84\x5a\x70\xa9\xd0\x72\xe1\x6e\xaf\x41\x9a\x15\x01\xe9\xd3\x31\xdb\x8a\x51\xc3\xe4\xa5\x0f\x12\x2b\x4f\xa5\x11\x1b\xa2\xcf\x23\x2c\xc4\x07\xf6\x8d\xb6\xf0\x01\x8a\x16\xb4\xda\x60\xe9\x2a\x63\xe7\x12\xe7\xb0\x7f\xc2\xb8\x8f\xe5\x48\xf9\x56\xd0\x97\xc4\x87\x45\x64\x8c\x37\x76\x6f\x32\x71\xca\xff\xb2\xc2\x4a\xc7\xc4\x08\x95\xdb\x9b\x8d\x78\x56\x90\x7d\x93\xc8\x8b\xdb\x82\xda\x96\x5c\x15\xb6\x35\xfb\x3a\x4f\xe0\xb1\xb9\xaf\x7c\x2a\x8f\x99\x4b\xc1\xd6\xc4\xab\xc3\x76\xad\x16\x6d\x69\xd4\x38\x97\x29\xb5\xd2\x6f\x4a\x2d\x56\x91\x9c\x85\x29\x77\x2f\x7c\x35\x21\x82\xc0\x85\x64\x1d\x10\xca\xe5\xb8\x54\xae\xfa\x62\x3d\x35\x0e\x7d\x63\xb7\xea\xb0\xa2\xd5\xc9\xfb\x4b\x1e\xa8\x6a\x79\xfc\x90\xd3\x50\x2d\xf1\xde\x7d\x76\xef\x39\x18\xf8\x8a\xba\xca\xa2\x9d\xcf\xc4\x29\x4d\x7c\xea\x2b\x93\xc5\xd6\x0f\x8b\x16\xd9\x95\x5c\x56\xbf\xbe\x73\x7c\x25\xaf\x43\xe8\x98\x97\xe8\x56\x3e\x1a\x35\xd6\x7f\xbd\x8d\x94\xea\xfd\xe7\xf3\xa8\x5d\x0b\x02\x46\xd1\xf3\x9c\x43\xef\x4a\x19\xac\xfc\x2f\x00\x00\xff\xff\xa6\xa3\xef\xa6\x70\x71\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 29040, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
