FROM quay.io/app-sre/postgres

ENV POSTGRES_PASSWORD foobar-bizz-buzz
ENV POSTGRES_USER kas_fleet_manager
ENV POSTGRES_DB serviceapitests

ENV GORM_DIALECT postgres
ENV GORM_HOST 127.0.0.1
ENV GORM_PORT 5432
ENV GORM_NAME serviceapitests
ENV GORM_USERNAME kas_fleet_manager
ENV GORM_PASSWORD foobar-bizz-buzz
ENV GORM_SSLMODE disable
ENV GORM_DEBUG false
ENV OCM_ENV integration
ENV MAS_SSO_CLIENT_ID <mas_sso_client_id>
ENV MAS_SSO_CLIENT_SECRET <mas_sso_client_secret>
ENV OSD_IDP_MAS_SSO_CLIENT_ID <osd_idp_mas_sso_client_id>
ENV OSD_IDP_MAS_SSO_CLIENT_SECRET <osd_idp_mas_sso_client_secret>
ENV ROUTE53_ACCESS_KEY <aws_route53_access_key>
ENV ROUTE53_SECRET_ACCESS_KEY <aws_route53_secret_access_key>
ENV KAFKA_TLS_CERT <kafka_tls_cert>
ENV KAFKA_TLS_KEY <kafka_tls_key>
ENV DOCKER_PR_CHECK true
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update
RUN apt-get install -y make sudo git wget curl ca-certificates

# install jq to parse json within bash scripts
RUN curl -o /usr/local/bin/jq http://stedolan.github.io/jq/download/linux64/jq && \
  chmod +x /usr/local/bin/jq

# install OCM CLI
RUN curl -Lo ocm https://github.com/openshift-online/ocm-cli/releases/download/v0.1.42/ocm-linux-amd64 && \
  chmod +x ocm && sudo mv ocm /usr/local/bin/

COPY test/support/jwt_ca.pem /usr/local/share/ca-certificates/jwt_ca.pem
COPY test/support/gitlab-ca.crt /usr/local/share/ca-certificates/gitlab-ca.crt
RUN update-ca-certificates

# copy the setup scripts and the pr check script
COPY db_setup_docker.sql /docker-entrypoint-initdb.d/
COPY pr_check_docker.sh /docker-entrypoint-initdb.d/

# install go 1.15.8
RUN curl -O -J https://dl.google.com/go/go1.15.8.linux-amd64.tar.gz
RUN tar -C /usr/local -xzf go1.15.8.linux-amd64.tar.gz

ENV PATH="/uhc/bin:/usr/local/go/bin:${PATH}"
ENV GOPATH="/uhc"
ENV CGO_ENABLED=0

# install NPM and java for openapi-generator
RUN wget -qO- https://deb.nodesource.com/setup_14.x | bash -
RUN apt install -y nodejs build-essential default-jre

# copy over the kas-fleet-manager workdir
RUN mkdir -p /uhc/src/github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager
COPY . /uhc/src/github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager

# create credential files
WORKDIR /uhc/src/github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager
RUN make aws/setup
RUN make ocm/setup
RUN make keycloak/setup
RUN make kafkacert/setup

# Docker built / owned  as 'root' but the 'postgres' user runs the image
RUN chown -R postgres:postgres /uhc /usr/local/go
WORKDIR /uhc/src/github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager

ENTRYPOINT ["docker-entrypoint.sh"]

CMD ["postgres"]