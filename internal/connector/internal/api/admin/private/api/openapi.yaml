openapi: 3.0.0
info:
  description: Connector Service Fleet Manager Admin is a Rest API to manage connector
    clusters.
  title: Connector Service Fleet Manager Admin APIs
  version: 0.0.3
servers:
- description: Main (production) server
  url: https://api.openshift.com
- description: Staging server
  url: https://api.stage.openshift.com
- description: localhost
  url: http://localhost:8000
- description: current domain
  url: /
tags:
- name: Connector Clusters Admin
- name: Connector Namespaces Admin
paths:
  /api/connector_mgmt/v1/admin/kafka_connector_clusters:
    get:
      operationId: listConnectorClusters
      parameters:
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the underlying resource fields supported in the search parameter.
          For example, to return all Connector types ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Connector types ordered by their name _and_ version, use the following syntax:

          ```sql
          name asc, version asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |
          Search criteria.

          The syntax of this parameter is similar to the syntax of the `where` clause of a
          SQL statement.

          Allowed fields in the search depend on the resource type:

          * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id
          * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state
          * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank
          * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url

          Allowed operators are `<>`, `=`, `LIKE`, or `ILIKE`.
          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.

          Examples:

          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:

          ```
          name = aws-sqs-source and channel = stable
          ```[p-]

          To return a connector instance with a name that starts with `aws`, use the following syntax:

          ```
          name like aws%25
          ```

          To return a connector type with a name containing `aws` matching any character case combination, use the following syntax:

          ```
          name ilike %25aws%25
          ```

          If the parameter isn't provided, or if the value is empty, then all the resources
          that the user has permission to see are returned.

          Note. If the query is invalid, an error is returned.
        examples:
          search:
            value: name = aws-sqs-source and channel = stable
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorClusterList'
          description: A list of connector clusters
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of connector clusters
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}:
    get:
      operationId: getConnectorCluster
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorCluster'
          description: The connector cluster matching the request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a connector cluster
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}/namespaces:
    get:
      operationId: getClusterNamespaces
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the underlying resource fields supported in the search parameter.
          For example, to return all Connector types ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Connector types ordered by their name _and_ version, use the following syntax:

          ```sql
          name asc, version asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |
          Search criteria.

          The syntax of this parameter is similar to the syntax of the `where` clause of a
          SQL statement.

          Allowed fields in the search depend on the resource type:

          * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id
          * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state
          * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank
          * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url

          Allowed operators are `<>`, `=`, `LIKE`, or `ILIKE`.
          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.

          Examples:

          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:

          ```
          name = aws-sqs-source and channel = stable
          ```[p-]

          To return a connector instance with a name that starts with `aws`, use the following syntax:

          ```
          name like aws%25
          ```

          To return a connector type with a name containing `aws` matching any character case combination, use the following syntax:

          ```
          name ilike %25aws%25
          ```

          If the parameter isn't provided, or if the value is empty, then all the resources
          that the user has permission to see are returned.

          Note. If the query is invalid, an error is returned.
        examples:
          search:
            value: name = aws-sqs-source and channel = stable
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorNamespaceList'
          description: Connector namespaces
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector namespace exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a list of available connector namespaces in cluster
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}/connectors:
    get:
      operationId: getClusterConnectors
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the underlying resource fields supported in the search parameter.
          For example, to return all Connector types ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Connector types ordered by their name _and_ version, use the following syntax:

          ```sql
          name asc, version asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |
          Search criteria.

          The syntax of this parameter is similar to the syntax of the `where` clause of a
          SQL statement.

          Allowed fields in the search depend on the resource type:

          * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id
          * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state
          * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank
          * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url

          Allowed operators are `<>`, `=`, `LIKE`, or `ILIKE`.
          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.

          Examples:

          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:

          ```
          name = aws-sqs-source and channel = stable
          ```[p-]

          To return a connector instance with a name that starts with `aws`, use the following syntax:

          ```
          name like aws%25
          ```

          To return a connector type with a name containing `aws` matching any character case combination, use the following syntax:

          ```
          name ilike %25aws%25
          ```

          If the parameter isn't provided, or if the value is empty, then all the resources
          that the user has permission to see are returned.

          Note. If the query is invalid, an error is returned.
        examples:
          search:
            value: name = aws-sqs-source and channel = stable
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAdminViewList'
          description: Connectors in cluster
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a list of available connectors in a cluster
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}/deployments:
    get:
      operationId: getClusterDeployments
      parameters:
      - description: The id of the cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: include only deployments that have channel updates
        explode: true
        in: query
        name: channel_updates
        required: false
        schema:
          type: boolean
        style: form
      - description: include only not deleted deployments belonging to a deleted connector
        explode: true
        in: query
        name: dangling_deployments
        required: false
        schema:
          type: boolean
        style: form
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the underlying resource fields supported in the search parameter.
          For example, to return all Connector types ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Connector types ordered by their name _and_ version, use the following syntax:

          ```sql
          name asc, version asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorDeploymentAdminViewList'
          description: Connector deployments in cluster
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a list of available deployments in a cluster
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}/deployments/{deployment_id}:
    get:
      description: Get a connector deployment
      operationId: getConnectorDeployment
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the connector deployment
        explode: false
        in: path
        name: deployment_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorDeploymentAdminView'
          description: The connector deployment matching the request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector deployment exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a connector deployment
      tags:
      - Connector Clusters Admin
    patch:
      description: Patch a deployment
      operationId: patchConnectorClusterDeploymentAdmin
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the connector deployment
        explode: false
        in: path
        name: deployment_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
          application/json:
            schema:
              type: object
        description: Data to patch the deployment with
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorDeploymentAdminView'
          description: The deployment matching the request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching resource exists
        "410":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/410Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource doesn't exist anymore
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Patch a deployment
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_namespaces:
    get:
      operationId: getConnectorNamespaces
      parameters:
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the underlying resource fields supported in the search parameter.
          For example, to return all Connector types ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Connector types ordered by their name _and_ version, use the following syntax:

          ```sql
          name asc, version asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |
          Search criteria.

          The syntax of this parameter is similar to the syntax of the `where` clause of a
          SQL statement.

          Allowed fields in the search depend on the resource type:

          * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id
          * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state
          * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank
          * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url

          Allowed operators are `<>`, `=`, `LIKE`, or `ILIKE`.
          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.

          Examples:

          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:

          ```
          name = aws-sqs-source and channel = stable
          ```[p-]

          To return a connector instance with a name that starts with `aws`, use the following syntax:

          ```
          name like aws%25
          ```

          To return a connector type with a name containing `aws` matching any character case combination, use the following syntax:

          ```
          name ilike %25aws%25
          ```

          If the parameter isn't provided, or if the value is empty, then all the resources
          that the user has permission to see are returned.

          Note. If the query is invalid, an error is returned.
        examples:
          search:
            value: name = aws-sqs-source and channel = stable
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorNamespaceList'
          description: Connector namespaces
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector namespace exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a list of available connector namespaces
      tags:
      - Connector Namespaces Admin
    post:
      operationId: createConnectorNamespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorNamespaceWithTenantRequest'
        description: Namespace to create
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorNamespace'
          description: Accepted
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector namespace exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Create a connector namespace
      tags:
      - Connector Namespaces Admin
  /api/connector_mgmt/v1/admin/kafka_connector_namespaces/{namespace_id}:
    delete:
      operationId: deleteConnectorNamespace
      parameters:
      - description: The id of the namespace to delete
        explode: false
        in: path
        name: namespace_id
        required: true
        schema:
          type: string
        style: simple
      - description: Flag to force deletion of namespace in Fleet manager if true
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Delete a connector namespace
      tags:
      - Connector Clusters Admin
    get:
      description: Get a connector namespace
      operationId: getConnectorNamespace
      parameters:
      - description: The id of the namespace
        explode: false
        in: path
        name: namespace_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorNamespace'
          description: The connector namespace matching the request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector deployment exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a connector namespace
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_namespaces/{namespace_id}/connectors:
    get:
      operationId: getNamespaceConnectors
      parameters:
      - description: The id of the namespace
        explode: false
        in: path
        name: namespace_id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the underlying resource fields supported in the search parameter.
          For example, to return all Connector types ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Connector types ordered by their name _and_ version, use the following syntax:

          ```sql
          name asc, version asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |
          Search criteria.

          The syntax of this parameter is similar to the syntax of the `where` clause of a
          SQL statement.

          Allowed fields in the search depend on the resource type:

          * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id
          * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state
          * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank
          * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url

          Allowed operators are `<>`, `=`, `LIKE`, or `ILIKE`.
          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.

          Examples:

          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:

          ```
          name = aws-sqs-source and channel = stable
          ```[p-]

          To return a connector instance with a name that starts with `aws`, use the following syntax:

          ```
          name like aws%25
          ```

          To return a connector type with a name containing `aws` matching any character case combination, use the following syntax:

          ```
          name ilike %25aws%25
          ```

          If the parameter isn't provided, or if the value is empty, then all the resources
          that the user has permission to see are returned.

          Note. If the query is invalid, an error is returned.
        examples:
          search:
            value: name = aws-sqs-source and channel = stable
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAdminViewList'
          description: Connectors in namespace
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector namespace exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a list of available connectors in a namespace
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_namespaces/{namespace_id}/deployments:
    get:
      operationId: getNamespaceDeployments
      parameters:
      - description: The id of the namespace
        explode: false
        in: path
        name: namespace_id
        required: true
        schema:
          type: string
        style: simple
      - description: include only deployments that have channel updates
        explode: true
        in: query
        name: channel_updates
        required: false
        schema:
          type: boolean
        style: form
      - description: include only not deleted deployments belonging to a deleted connector
        explode: true
        in: query
        name: dangling_deployments
        required: false
        schema:
          type: boolean
        style: form
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the underlying resource fields supported in the search parameter.
          For example, to return all Connector types ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Connector types ordered by their name _and_ version, use the following syntax:

          ```sql
          name asc, version asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorDeploymentAdminViewList'
          description: Connector deployments in namespace
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector namespace exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a list of available deployments in a namespace
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connectors/{connector_id}:
    delete:
      operationId: deleteConnector
      parameters:
      - description: The id of the connector to delete
        explode: false
        in: path
        name: connector_id
        required: true
        schema:
          type: string
        style: simple
      - description: Flag to force deletion of connector in Fleet manager if true
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Delete a connector
      tags:
      - Connector Clusters Admin
    get:
      description: Get a connector
      operationId: getConnector
      parameters:
      - description: The id of the connector to delete
        explode: false
        in: path
        name: connector_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAdminView'
          description: The connector matching the request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a connector
      tags:
      - Connector Clusters Admin
    patch:
      description: Patch a connector
      operationId: patchConnector
      parameters:
      - description: The id of the connector to delete
        explode: false
        in: path
        name: connector_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
          application/json-patch+json:
            schema:
              description: A JSON Patch, RFC 6902 - https://tools.ietf.org/html/rfc6902
              type: object
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorRequest'
        description: Data to patch the connector with
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAdminView'
          description: Deleted
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Patch a connector
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}/upgrades/operator:
    get:
      operationId: getConnectorUpgradesByOperator
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAvailableOperatorUpgradeList'
          description: The connectors that have available operator upgrades
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster type exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a list of available connector operator upgrades
      tags:
      - Connector Clusters Admin
    put:
      operationId: upgradeConnectorsByOperator
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ConnectorAvailableOperatorUpgrade'
              type: array
        description: List of connectors to upgrade
        required: true
      responses:
        "204":
          description: Connectors are upgraded
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: upgrade a connector cluster
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_types:
    get:
      description: Returns a list of connector types
      operationId: getConnectorTypes
      parameters:
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the underlying resource fields supported in the search parameter.
          For example, to return all Connector types ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Connector types ordered by their name _and_ version, use the following syntax:

          ```sql
          name asc, version asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |
          Search criteria.

          The syntax of this parameter is similar to the syntax of the `where` clause of a
          SQL statement.

          Allowed fields in the search depend on the resource type:

          * Cluster: id, created_at, updated_at, owner, organisation_id, name, state, client_id
          * Namespace: id, created_at, updated_at, name, cluster_id, owner, expiration, tenant_user_id, tenant_organisation_id, state
          * Connector Types: id, created_at, updated_at, version, name, description, label, channel, featured_rank
          * Connectors: id, created_at, updated_at, name, owner, organisation_id, connector_type_id, desired_state, state, channel, namespace_id, kafka_id, kafka_bootstrap_server, service_account_client_id, schema_registry_id, schema_registry_url

          Allowed operators are `<>`, `=`, `LIKE`, or `ILIKE`.
          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.

          Examples:

          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:

          ```
          name = aws-sqs-source and channel = stable
          ```[p-]

          To return a connector instance with a name that starts with `aws`, use the following syntax:

          ```
          name like aws%25
          ```

          To return a connector type with a name containing `aws` matching any character case combination, use the following syntax:

          ```
          name ilike %25aws%25
          ```

          If the parameter isn't provided, or if the value is empty, then all the resources
          that the user has permission to see are returned.

          Note. If the query is invalid, an error is returned.
        examples:
          search:
            value: name = aws-sqs-source and channel = stable
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorTypeAdminViewList'
          description: A list of connector types
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of connector types
      tags:
      - Connector Types
  /api/connector_mgmt/v1/admin/kafka_connector_types/{connector_type_id}:
    get:
      description: Get a connector type by id
      operationId: getConnectorTypeByID
      parameters:
      - description: The id of the connector type
        explode: false
        in: path
        name: connector_type_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorTypeAdminView'
          description: A list of connector types
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a connector type by id
      tags:
      - Connector Types
components:
  examples:
    "401Example":
      value:
        id: "11"
        kind: Error
        href: /api/connector_mgmt/v1/errors/11
        code: CONNECTOR-MGMT-11
        reason: 'Unable to verify JWT token: Required authorization token not found'
        operation_id: 1iY3UhEhwmXBpWPfI2lNekpd4ZD
    "500Example":
      value:
        id: "9"
        kind: Error
        href: /api/connector_mgmt/v1/errors/9
        code: CONNECTOR-MGMT-9
        reason: Unspecified error
        operation_id: 1ieELvF9jMQY6YghfM9gGRsHvEW
    "404Example":
      value:
        id: "404"
        kind: Error
        href: /api/connector_mgmt/v1/errors/7
        code: CONNECTOR-MGMT-7
        reason: The requested resource doesn't exist
  schemas:
    ConnectorAvailableOperatorUpgradeList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorAvailableOperatorUpgradeList_allOf'
    ConnectorAvailableOperatorUpgrade:
      description: An available operator upgrade for a connector
      example:
        namespace_id: namespace_id
        connector_id: connector_id
        channel: channel
        operator:
          available_id: available_id
          assigned_id: assigned_id
        connector_type_id: connector_type_id
      properties:
        connector_id:
          type: string
        namespace_id:
          type: string
        connector_type_id:
          type: string
        channel:
          type: string
        operator:
          $ref: '#/components/schemas/ConnectorUpgradeStatus'
      type: object
    ConnectorUpgradeStatus:
      description: Assigned and available update ids
      example:
        available_id: available_id
        assigned_id: assigned_id
      properties:
        assigned_id:
          type: string
        available_id:
          type: string
      type: object
    ConnectorNamespaceWithTenantRequest:
      allOf:
      - $ref: '#/components/schemas/ConnectorNamespaceEvalRequest'
      - $ref: '#/components/schemas/ConnectorNamespaceWithTenantRequest_allOf'
      required:
      - cluster_id
      - name
      - tenant
    ConnectorRequest:
      properties:
        desired_state:
          $ref: '#/components/schemas/ConnectorDesiredState'
      required:
      - desired_state
    ConnectorDesiredState:
      enum:
      - unassigned
      - ready
      - stopped
      - deleted
      type: string
    ConnectorAdminView:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConnectorMeta'
      - $ref: '#/components/schemas/ConnectorStatus'
    ConnectorAdminViewList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorAdminViewList_allOf'
    ConnectorDeploymentAdminView:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConnectorDeploymentAdminView_allOf'
      description: Holds the deployment configuration of a connector
    ConnectorDeploymentAdminSpec:
      description: Holds the deployment specification of a connector
      properties:
        connector_id:
          type: string
        connector_resource_version:
          format: int64
          type: integer
        connector_type_id:
          type: string
        cluster_id:
          type: string
        namespace_id:
          type: string
        allow_upgrade:
          deprecated: true
          description: allow the connector to upgrade to a new operator
          type: boolean
        operator_id:
          description: an optional operator id that the connector should be run under.
          type: string
        desired_state:
          $ref: '#/components/schemas/ConnectorDesiredState'
        shard_metadata:
          type: object
      type: object
    ConnectorDeploymentAdminStatus:
      description: The status of connector deployment
      properties:
        phase:
          $ref: '#/components/schemas/ConnectorState'
        resource_version:
          format: int64
          type: integer
        shard_metadata:
          $ref: '#/components/schemas/ConnectorDeploymentAdminStatus_shard_metadata'
        operators:
          $ref: '#/components/schemas/ConnectorDeploymentAdminStatus_operators'
        conditions:
          items:
            $ref: '#/components/schemas/MetaV1Condition'
          type: array
      type: object
    ConnectorShardMetadata:
      description: identifies a shard metadata of a connector type.
      properties:
        channel:
          description: the channel of the shard metadata
          type: string
        connector_type_id:
          description: the connector type id this shard metadata refers to
          type: string
        revision:
          description: the revision of the shard metadate
          format: int64
          type: integer
    ConnectorDeploymentAdminViewList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorDeploymentAdminViewList_allOf'
    ConnectorTypeAdminViewList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorTypeAdminViewList_allOf'
    ConnectorTypeAdminView:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConnectorType'
      - $ref: '#/components/schemas/ConnectorTypeAdminView_allOf'
      description: Holds the connector type
    ConnectorTypeChannel:
      description: Holds the connector type channel
      properties:
        shard_metadata:
          type: object
      type: object
    ConnectorClusterList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorClusterList_allOf'
    List:
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
        items:
          items:
            $ref: '#/components/schemas/ObjectReference'
          type: array
      required:
      - items
      - kind
      - page
      - size
      - total
      type: object
    ObjectReference:
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
      type: object
    ConnectorCluster:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConnectorClusterMeta'
      - $ref: '#/components/schemas/ConnectorClusterStatus'
    ConnectorClusterMeta:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/ConnectorClusterRequestMeta'
    ObjectMeta:
      properties:
        owner:
          type: string
        created_at:
          format: date-time
          type: string
        modified_at:
          format: date-time
          type: string
      type: object
    ConnectorClusterRequestMeta:
      properties:
        name:
          type: string
    ConnectorClusterStatus:
      properties:
        status:
          $ref: '#/components/schemas/ConnectorClusterStatus_status'
    ConnectorClusterState:
      enum:
      - disconnected
      - ready
      - deleting
      type: string
    Error:
      example:
        reason: reason
        code: code
        kind: kind
        operation_id: operation_id
        id: id
        href: href
      nullable: true
      properties:
        reason:
          type: string
        operation_id:
          type: string
        id:
          type: string
        kind:
          type: string
        href:
          type: string
        code:
          type: string
      required:
      - code
      - href
      - id
      - kind
      - reason
      type: object
    ConnectorNamespaceList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorNamespaceList_allOf'
    ConnectorNamespace:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConnectorNamespaceMeta'
      - $ref: '#/components/schemas/ConnectorNamespace_allOf'
      description: A connector namespace
    ConnectorNamespaceMeta:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/ConnectorNamespaceRequestMeta'
      - $ref: '#/components/schemas/ConnectorNamespaceMeta_allOf'
    ConnectorNamespaceRequestMeta:
      properties:
        name:
          description: Namespace name must match pattern `^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$`,
            or it may be empty to be auto-generated.
          pattern: ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
          type: string
        annotations:
          additionalProperties:
            type: string
          type: object
      type: object
    ConnectorNamespaceQuota:
      properties:
        connectors:
          format: int32
          type: integer
        memory_requests:
          description: Memory quota for limits or requests
          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$
          type: string
        memory_limits:
          description: Memory quota for limits or requests
          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$
          type: string
        cpu_requests:
          description: CPU quota for limits or requests
          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$
          type: string
        cpu_limits:
          description: CPU quota for limits or requests
          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$
          type: string
      type: object
    MemoryQuota:
      description: Memory quota for limits or requests
      pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$
      type: string
    CpuQuota:
      description: CPU quota for limits or requests
      pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$
      type: string
    ConnectorNamespaceTenant:
      properties:
        kind:
          $ref: '#/components/schemas/ConnectorNamespaceTenantKind'
        id:
          description: Either user or organisation id depending on the value of kind
          type: string
      required:
      - id
      - kind
      type: object
    ConnectorNamespaceTenantKind:
      enum:
      - user
      - organisation
      type: string
    ConnectorNamespaceStatus:
      properties:
        state:
          $ref: '#/components/schemas/ConnectorNamespaceState'
        version:
          type: string
        connectors_deployed:
          format: int32
          type: integer
        error:
          type: string
      required:
      - connectors_deployed
      - state
      type: object
    ConnectorNamespaceState:
      enum:
      - disconnected
      - ready
      - deleting
      - deleted
      type: string
    ConnectorNamespaceEvalRequest:
      allOf:
      - $ref: '#/components/schemas/ConnectorNamespaceRequestMeta'
      description: An evaluation connector namespace create request
    ConnectorMeta:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/ConnectorRequestMeta'
      - $ref: '#/components/schemas/ConnectorMeta_allOf'
    ConnectorRequestMeta:
      properties:
        name:
          type: string
        connector_type_id:
          type: string
        namespace_id:
          type: string
        channel:
          $ref: '#/components/schemas/Channel'
        desired_state:
          $ref: '#/components/schemas/ConnectorDesiredState'
      required:
      - connector_type_id
      - desired_state
      - name
      - namespace_id
    Channel:
      default: stable
      enum:
      - stable
      type: string
    ConnectorStatus:
      properties:
        status:
          $ref: '#/components/schemas/ConnectorStatus_status'
    ConnectorState:
      enum:
      - assigning
      - assigned
      - updating
      - ready
      - stopped
      - failed
      - deleting
      - deleted
      - provisioning
      - deprovisioning
      type: string
    ConnectorOperator:
      description: identifies an operator that runs on the fleet shards used to manage
        connectors.
      properties:
        id:
          description: the id of the operator
          type: string
        type:
          description: the type of the operator
          type: string
        version:
          description: the version of the operator
          type: string
    MetaV1Condition:
      properties:
        type:
          type: string
        reason:
          type: string
        message:
          type: string
        status:
          type: string
        last_transition_time:
          type: string
      type: object
    ConnectorType:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConnectorType_allOf'
      description: Represents a connector type supported by the API
      required:
      - name
      - schema
      - version
    ConnectorAvailableOperatorUpgradeList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConnectorAvailableOperatorUpgrade'
          type: array
    ConnectorNamespaceWithTenantRequest_allOf:
      properties:
        cluster_id:
          type: string
        tenant:
          $ref: '#/components/schemas/ConnectorNamespaceTenant'
        expiration:
          description: Namespace expiration timestamp in RFC 3339 format
          type: string
    ConnectorAdminViewList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConnectorAdminView'
          type: array
    ConnectorDeploymentAdminView_allOf_metadata:
      properties:
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        resource_version:
          format: int64
          type: integer
        resolved_secrets:
          type: boolean
      required:
      - created_at
      - resolved_secrets
      - resource_version
      - updated_at
    ConnectorDeploymentAdminView_allOf:
      properties:
        metadata:
          $ref: '#/components/schemas/ConnectorDeploymentAdminView_allOf_metadata'
        spec:
          $ref: '#/components/schemas/ConnectorDeploymentAdminSpec'
        status:
          $ref: '#/components/schemas/ConnectorDeploymentAdminStatus'
    ConnectorDeploymentAdminStatus_shard_metadata:
      description: latest available revision of deployment shared metadata
      properties:
        assigned:
          $ref: '#/components/schemas/ConnectorShardMetadata'
        available:
          $ref: '#/components/schemas/ConnectorShardMetadata'
    ConnectorDeploymentAdminStatus_operators:
      properties:
        assigned:
          $ref: '#/components/schemas/ConnectorOperator'
        available:
          $ref: '#/components/schemas/ConnectorOperator'
    ConnectorDeploymentAdminViewList_allOf:
      properties:
        items:
          items:
            allOf:
            - $ref: '#/components/schemas/ConnectorDeploymentAdminView'
          type: array
    ConnectorTypeAdminViewList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConnectorTypeAdminView'
          type: array
    ConnectorTypeAdminView_allOf:
      properties:
        channels:
          additionalProperties:
            $ref: '#/components/schemas/ConnectorTypeChannel'
          type: object
    ConnectorClusterList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConnectorCluster'
          type: array
    ConnectorClusterStatus_status:
      properties:
        state:
          $ref: '#/components/schemas/ConnectorClusterState'
        error:
          type: string
    ConnectorNamespaceList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConnectorNamespace'
          type: array
    ConnectorNamespace_allOf:
      properties:
        name:
          type: string
        cluster_id:
          type: string
        expiration:
          description: Namespace expiration timestamp in RFC 3339 format
          type: string
        tenant:
          $ref: '#/components/schemas/ConnectorNamespaceTenant'
        status:
          $ref: '#/components/schemas/ConnectorNamespaceStatus'
      required:
      - cluster_id
      - id
      - name
      - resource_version
      - status
      - tenant
    ConnectorNamespaceMeta_allOf:
      properties:
        resource_version:
          format: int64
          type: integer
        quota:
          $ref: '#/components/schemas/ConnectorNamespaceQuota'
    ConnectorMeta_allOf:
      properties:
        resource_version:
          format: int64
          type: integer
    ConnectorStatus_status:
      properties:
        state:
          $ref: '#/components/schemas/ConnectorState'
        error:
          type: string
    ConnectorType_allOf:
      properties:
        name:
          description: Name of the connector type.
          type: string
        version:
          description: Version of the connector type.
          type: string
        channels:
          description: Channels of the connector type.
          items:
            $ref: '#/components/schemas/Channel'
          type: array
        description:
          description: A description of the connector.
          type: string
        icon_href:
          description: URL to an icon of the connector.
          type: string
        labels:
          description: Labels used to categorize the connector
          items:
            type: string
          type: array
        featured_rank:
          description: Ranking for featured connectors
          format: int32
          type: integer
        capabilities:
          description: The capabilities supported by the conenctor
          items:
            type: string
          type: array
        schema:
          description: A json schema that can be used to validate a ConnectorRequest
            connector field.
          type: object
  securitySchemes:
    Bearer:
      bearerFormat: JWT
      scheme: bearer
      type: http
