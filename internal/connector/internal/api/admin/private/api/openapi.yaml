openapi: 3.0.0
info:
  description: Connector Service Fleet Manager Admin is a Rest API to manage connector
    clusters.
  title: Connector Service Fleet Manager Admin APIs
  version: 0.0.3
servers:
- description: Main (production) server
  url: https://api.openshift.com
- description: Staging server
  url: https://api.stage.openshift.com
- description: localhost
  url: http://localhost:8000
- description: current domain
  url: /
tags:
- name: Connector Clusters Admin
- name: Connector Namespaces Admin
paths:
  /api/connector_mgmt/v1/admin/kafka_connector_clusters:
    get:
      operationId: listConnectorClusters
      parameters:
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the `ConnectorType` fields.
          For example, to return all Connector types ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Connector types ordered by their name _and_ version, use the following syntax:

          ```sql
          name asc, version asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |
          Search criteria.

          The syntax of this parameter is similar to the syntax of the `where` clause of a
          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.
          Allowed operators are `<>`, `=`, or `LIKE`.
          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.

          Examples:

          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:

          ```
          name = aws-sqs-source and channel = stable
          ```[p-]

          To return a Kafka instance with a name that starts with `aws`, use the following syntax:

          ```
          name like aws%25
          ```

          If the parameter isn't provided, or if the value is empty, then all the Connector Type
          that the user has permission to see are returned.

          Note. If the query is invalid, an error is returned.
        examples:
          search:
            value: name = aws-sqs-source and channel = stable
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorClusterList'
          description: A list of connector clusters
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of connector clusters
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}/namespaces:
    get:
      operationId: getClusterNamespaces
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the `ConnectorType` fields.
          For example, to return all Connector types ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Connector types ordered by their name _and_ version, use the following syntax:

          ```sql
          name asc, version asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |
          Search criteria.

          The syntax of this parameter is similar to the syntax of the `where` clause of a
          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.
          Allowed operators are `<>`, `=`, or `LIKE`.
          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.

          Examples:

          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:

          ```
          name = aws-sqs-source and channel = stable
          ```[p-]

          To return a Kafka instance with a name that starts with `aws`, use the following syntax:

          ```
          name like aws%25
          ```

          If the parameter isn't provided, or if the value is empty, then all the Connector Type
          that the user has permission to see are returned.

          Note. If the query is invalid, an error is returned.
        examples:
          search:
            value: name = aws-sqs-source and channel = stable
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorNamespaceList'
          description: Connector namespaces
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector namespace exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a list of available connector namespaces in cluster
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_namespaces/${namespace_id}/connectors:
    get:
      operationId: getNamespaceConnectors
      parameters:
      - description: The id of the namespace
        explode: false
        in: path
        name: namespace_id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the `ConnectorType` fields.
          For example, to return all Connector types ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Connector types ordered by their name _and_ version, use the following syntax:

          ```sql
          name asc, version asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |
          Search criteria.

          The syntax of this parameter is similar to the syntax of the `where` clause of a
          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.
          Allowed operators are `<>`, `=`, or `LIKE`.
          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.

          Examples:

          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:

          ```
          name = aws-sqs-source and channel = stable
          ```[p-]

          To return a Kafka instance with a name that starts with `aws`, use the following syntax:

          ```
          name like aws%25
          ```

          If the parameter isn't provided, or if the value is empty, then all the Connector Type
          that the user has permission to see are returned.

          Note. If the query is invalid, an error is returned.
        examples:
          search:
            value: name = aws-sqs-source and channel = stable
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAdminViewList'
          description: Connectors in namespace
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector namespace exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a list of available connectors in a namespace in a cluster
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connectors/${connector_id}:
    delete:
      operationId: deleteConnector
      parameters:
      - description: The id of the connector to delete
        explode: false
        in: path
        name: connector_id
        required: true
        schema:
          type: string
        style: simple
      - description: Flag to force deletion of connector in Fleet manager if true
        explode: true
        in: query
        name: force
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Delete a connector
      tags:
      - Connector Clusters Admin
    get:
      description: Get a connector
      operationId: getConnector
      parameters:
      - description: The id of the connector to delete
        explode: false
        in: path
        name: connector_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAdminView'
          description: The connector matching the request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a connector
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}/upgrades/type:
    get:
      operationId: getConnectorUpgradesByType
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAvailableTypeUpgradeList'
          description: The connectors that have available type upgrades
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster type exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a list of available connector type upgrades
      tags:
      - Connector Clusters Admin
    put:
      operationId: upgradeConnectorsByType
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ConnectorAvailableTypeUpgrade'
              type: array
        description: List of connectors to upgrade
        required: true
      responses:
        "204":
          description: Connectors are upgraded
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: upgrade a connector cluster
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_clusters/{connector_cluster_id}/upgrades/operator:
    get:
      operationId: getConnectorUpgradesByOperator
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorAvailableOperatorUpgradeList'
          description: The connectors that have available operator upgrades
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster type exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a list of available connector operator upgrades
      tags:
      - Connector Clusters Admin
    put:
      operationId: upgradeConnectorsByOperator
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ConnectorAvailableOperatorUpgrade'
              type: array
        description: List of connectors to upgrade
        required: true
      responses:
        "204":
          description: Connectors are upgraded
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: upgrade a connector cluster
      tags:
      - Connector Clusters Admin
  /api/connector_mgmt/v1/admin/kafka_connector_namespaces:
    get:
      operationId: getConnectorNamespaces
      parameters:
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the `ConnectorType` fields.
          For example, to return all Connector types ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Connector types ordered by their name _and_ version, use the following syntax:

          ```sql
          name asc, version asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |
          Search criteria.

          The syntax of this parameter is similar to the syntax of the `where` clause of a
          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.
          Allowed operators are `<>`, `=`, or `LIKE`.
          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.

          Examples:

          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:

          ```
          name = aws-sqs-source and channel = stable
          ```[p-]

          To return a Kafka instance with a name that starts with `aws`, use the following syntax:

          ```
          name like aws%25
          ```

          If the parameter isn't provided, or if the value is empty, then all the Connector Type
          that the user has permission to see are returned.

          Note. If the query is invalid, an error is returned.
        examples:
          search:
            value: name = aws-sqs-source and channel = stable
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorNamespaceList'
          description: Connector namespaces
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector namespace exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a list of available connector namespaces
      tags:
      - Connector Namespaces Admin
    post:
      operationId: createConnectorNamespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorNamespaceWithTenantRequest'
        description: Namespace to create
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorNamespace'
          description: Accepted
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector namespace exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Create a connector namespace
      tags:
      - Connector Namespaces Admin
  /api/connector_mgmt/v1/admin/kafka_connector_namespaces/${namespace_id}:
    delete:
      operationId: deleteConnectorNamespace
      parameters:
      - description: The id of the namespace to delete
        explode: false
        in: path
        name: namespace_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Delete a connector namespace
      tags:
      - Connector Clusters Admin
components:
  examples:
    "401Example":
      value:
        id: "11"
        kind: Error
        href: /api/connector_mgmt/v1/errors/11
        code: CONNECTOR-MGMT-11
        reason: 'Unable to verify JWT token: Required authorization token not found'
        operation_id: 1iY3UhEhwmXBpWPfI2lNekpd4ZD
    "500Example":
      value:
        id: "9"
        kind: Error
        href: /api/connector_mgmt/v1/errors/9
        code: CONNECTOR-MGMT-9
        reason: Unspecified error
        operation_id: 1ieELvF9jMQY6YghfM9gGRsHvEW
    "404Example":
      value:
        id: "404"
        kind: Error
        href: /api/connector_mgmt/v1/errors/7
        code: CONNECTOR-MGMT-7
        reason: The requested resource doesn't exist
  schemas:
    ConnectorAvailableTypeUpgradeList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorAvailableTypeUpgradeList_allOf'
    ConnectorAvailableTypeUpgrade:
      description: An available type upgrade for a connector
      example:
        namespace_id: namespace_id
        shard_metadata:
          available_id: 6
          assigned_id: 0
        connector_id: connector_id
        channel: channel
        connector_type_id: connector_type_id
      properties:
        connector_id:
          type: string
        namespace_id:
          type: string
        connector_type_id:
          type: string
        channel:
          type: string
        shard_metadata:
          $ref: '#/components/schemas/ConnectorAvailableTypeUpgrade_shard_metadata'
      type: object
    ConnectorAvailableOperatorUpgradeList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorAvailableOperatorUpgradeList_allOf'
    ConnectorAvailableOperatorUpgrade:
      description: An available operator upgrade for a connector
      example:
        namespace_id: namespace_id
        connector_id: connector_id
        channel: channel
        operator:
          available_id: available_id
          assigned_id: assigned_id
        connector_type_id: connector_type_id
      properties:
        connector_id:
          type: string
        namespace_id:
          type: string
        connector_type_id:
          type: string
        channel:
          type: string
        operator:
          $ref: '#/components/schemas/ConnectorAvailableOperatorUpgrade_operator'
      type: object
    ConnectorNamespaceWithTenantRequest:
      allOf:
      - $ref: '#/components/schemas/ConnectorNamespaceEvalRequest'
      - $ref: '#/components/schemas/ConnectorNamespaceWithTenantRequest_allOf'
      required:
      - cluster_id
      - name
      - tenant
    ConnectorAdminView:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConnectorMeta'
      - $ref: '#/components/schemas/ConnectorStatus'
    ConnectorAdminViewList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorAdminViewList_allOf'
    ConnectorClusterList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorClusterList_allOf'
    List:
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
      required:
      - items
      - kind
      - page
      - size
      - total
      type: object
    ConnectorCluster:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConnectorClusterMeta'
      - $ref: '#/components/schemas/ConnectorClusterStatus'
    ObjectReference:
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
      type: object
    ConnectorClusterMeta:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/ConnectorClusterRequestMeta'
    ObjectMeta:
      properties:
        owner:
          type: string
        created_at:
          format: date-time
          type: string
        modified_at:
          format: date-time
          type: string
      type: object
    ConnectorClusterRequestMeta:
      properties:
        name:
          type: string
    ConnectorClusterStatus:
      properties:
        status:
          $ref: '#/components/schemas/ConnectorClusterStatus_status'
    ConnectorClusterState:
      enum:
      - disconnected
      - ready
      - deleting
      type: string
    Error:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Error_allOf'
    ConnectorNamespaceList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorNamespaceList_allOf'
    ConnectorNamespace:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConnectorNamespaceMeta'
      - $ref: '#/components/schemas/ConnectorNamespace_allOf'
      description: A connector namespace
    ConnectorNamespaceMeta:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/ConnectorNamespaceRequestMeta'
      - $ref: '#/components/schemas/ConnectorNamespaceMeta_allOf'
    ConnectorNamespaceRequestMeta:
      properties:
        name:
          type: string
        annotations:
          items:
            $ref: '#/components/schemas/ConnectorNamespaceRequestMeta_annotations'
          type: array
      type: object
    ConnectorNamespaceQuota:
      properties:
        connectors:
          format: int32
          type: integer
        memory_requests:
          description: Memory quota for limits or requests
          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$
          type: string
        memory_limits:
          description: Memory quota for limits or requests
          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$
          type: string
        cpu_requests:
          description: CPU quota for limits or requests
          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$
          type: string
        cpu_limits:
          description: CPU quota for limits or requests
          pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$
          type: string
      type: object
    MemoryQuota:
      description: Memory quota for limits or requests
      pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$
      type: string
    CpuQuota:
      description: CPU quota for limits or requests
      pattern: ^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$
      type: string
    ConnectorNamespaceTenant:
      properties:
        kind:
          $ref: '#/components/schemas/ConnectorNamespaceTenantKind'
        id:
          description: Either user or organisation id depending on the value of kind
          type: string
      required:
      - id
      - kind
      type: object
    ConnectorNamespaceTenantKind:
      enum:
      - user
      - organisation
      type: string
    ConnectorNamespaceStatus:
      properties:
        state:
          $ref: '#/components/schemas/ConnectorNamespaceState'
        version:
          type: string
        connectors_deployed:
          format: int32
          type: integer
        error:
          type: string
      required:
      - connectors_deployed
      - state
      type: object
    ConnectorNamespaceState:
      enum:
      - disconnected
      - ready
      - deleting
      type: string
    ConnectorNamespaceEvalRequest:
      allOf:
      - $ref: '#/components/schemas/ConnectorNamespaceRequestMeta'
      description: An evaluation connector namespace create request
      required:
      - name
    ConnectorMeta:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/ConnectorRequestMeta'
      - $ref: '#/components/schemas/ConnectorMeta_allOf'
    ConnectorRequestMeta:
      properties:
        name:
          type: string
        connector_type_id:
          type: string
        namespace_id:
          type: string
        channel:
          $ref: '#/components/schemas/Channel'
        desired_state:
          $ref: '#/components/schemas/ConnectorDesiredState'
      required:
      - connector_type_id
      - desired_state
      - name
    Channel:
      default: stable
      enum:
      - stable
      type: string
    ConnectorDesiredState:
      enum:
      - unassigned
      - ready
      - stopped
      - deleted
      type: string
    ConnectorStatus:
      properties:
        status:
          $ref: '#/components/schemas/ConnectorStatus_status'
    ConnectorState:
      enum:
      - assigning
      - assigned
      - updating
      - ready
      - stopped
      - failed
      - deleting
      - deleted
      - provisioning
      - deprovisioning
      type: string
    ConnectorAvailableTypeUpgradeList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConnectorAvailableTypeUpgrade'
          type: array
    ConnectorAvailableTypeUpgrade_shard_metadata:
      example:
        available_id: 6
        assigned_id: 0
      properties:
        assigned_id:
          format: int64
          type: integer
        available_id:
          format: int64
          type: integer
    ConnectorAvailableOperatorUpgradeList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConnectorAvailableOperatorUpgrade'
          type: array
    ConnectorAvailableOperatorUpgrade_operator:
      example:
        available_id: available_id
        assigned_id: assigned_id
      properties:
        assigned_id:
          type: string
        available_id:
          type: string
    ConnectorNamespaceWithTenantRequest_allOf:
      properties:
        cluster_id:
          type: string
        tenant:
          $ref: '#/components/schemas/ConnectorNamespaceTenant'
    ConnectorAdminViewList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConnectorAdminView'
          type: array
    ConnectorClusterList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConnectorCluster'
          type: array
    ConnectorClusterStatus_status:
      properties:
        state:
          $ref: '#/components/schemas/ConnectorClusterState'
        error:
          type: string
    Error_allOf:
      properties:
        code:
          type: string
        reason:
          type: string
        operation_id:
          type: string
    ConnectorNamespaceList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConnectorNamespace'
          type: array
    ConnectorNamespace_allOf:
      properties:
        name:
          type: string
        cluster_id:
          type: string
        expiration:
          description: Namespace expiration timestamp in RFC 3339 format
          type: string
        tenant:
          $ref: '#/components/schemas/ConnectorNamespaceTenant'
        status:
          $ref: '#/components/schemas/ConnectorNamespaceStatus'
      required:
      - cluster_id
      - id
      - name
      - resource_version
      - status
      - tenant
    ConnectorNamespaceMeta_allOf:
      properties:
        resource_version:
          format: int64
          type: integer
        quota:
          $ref: '#/components/schemas/ConnectorNamespaceQuota'
    ConnectorNamespaceRequestMeta_annotations:
      properties:
        key:
          type: string
        value:
          type: string
      required:
      - key
      - value
    ConnectorMeta_allOf:
      properties:
        resource_version:
          format: int64
          type: integer
    ConnectorStatus_status:
      properties:
        state:
          $ref: '#/components/schemas/ConnectorState'
        error:
          type: string
  securitySchemes:
    Bearer:
      bearerFormat: JWT
      scheme: bearer
      type: http
