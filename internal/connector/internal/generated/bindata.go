// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package generated generated by go-bindata.// sources:
// .generate/openapi/connector_mgmt.yaml
package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _connector_mgmtYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xfd\x72\xdb\x38\x92\xff\x5f\x4f\xd1\xa7\xdc\x96\x77\xef\x6c\x49\xfe\x48\x9c\xa8\x2e\x53\xe5\xd8\x4a\xc6\x93\xc4\x49\x6c\x67\x92\xec\xd6\x94\x05\x91\x2d\x09\x16\x09\xd0\x00\x28\x5b\xd9\x9b\x77\xdf\x02\x40\x8a\xdf\x12\xe5\x78\xc6\x9e\x44\xae\x4a\x55\x44\x36\x9a\xdd\x8d\xc6\xaf\x1b\x0d\x10\xe4\x01\x32\x12\xd0\x2e\xec\xb6\x3a\xad\x0e\x3c\x02\x86\xe8\x82\x1a\x53\x09\x44\xc2\x90\x0a\xa9\xc0\xa3\x0c\x41\x71\x20\x9e\xc7\xaf\x41\x72\x1f\xe1\xf8\xa8\x27\xf5\xa5\x09\xe3\xd7\x96\x5a\x37\x60\x10\xb1\x03\x97\x3b\xa1\x8f\x4c\xb5\x1a\x8f\xe0\xc0\xf3\x00\x99\x1b\x70\xca\x94\x04\x17\x87\x94\xa1\x0b\x63\x14\x08\xd7\xd4\xf3\x60\x80\xe0\x52\xe9\xf0\x29\x0a\x32\xf0\x10\x06\x33\xfd\x24\x08\x25\x0a\xd9\x82\xe3\x21\x28\x43\xab\x1f\x10\x49\xc7\x61\x82\x18\x58\x49\x12\xce\xcd\x40\xd0\x29\x51\xd8\xdc\x04\xe2\x6a\x1d\xd0\xd7\xa4\x6a\x8c\xd0\x9c\x10\xb9\x35\xf4\x10\xd5\x96\x4f\x18\x19\xa1\xd8\x8a\x88\x5b\x33\xe2\x7b\x4d\x18\x52\x0f\x1b\x94\x0d\x79\xb7\x01\xa0\xa8\xf2\xb0\x0b\x87\x9c\x31\x74\x14\x17\x70\x86\x62\x4a\x1d\x84\x97\x9a\x03\xbc\xb5\x1c\x1a\x00\x53\x14\x92\x72\xd6\x85\x4e\xab\xd3\xda\x6d\x00\xb8\x28\x1d\x41\x03\x65\x2e\x2e\x69\x6f\x15\x3a\x45\xa9\xe0\xe0\xfd\xb1\x96\xd4\x8a\x06\x4e\xdc\x4e\xb6\x1a\x12\x85\x7e\x88\x96\x6a\x0b\x42\xe1\x75\x61\xac\x54\x20\xbb\xed\x36\x09\x68\x4b\x5b\x5b\x8e\xe9\x50\xb5\x1c\xee\x37\x00\x72\x02\xbc\x25\x94\xc1\xdf\x03\xc1\xdd\xd0\xd1\x57\xfe\x01\x96\x5d\x39\x33\xa9\xc8\x08\x97\xb1\x3c\x53\x64\x44\xd9\xa8\x94\x51\xb7\xdd\xf6\xb8\x43\xbc\x31\x97\xaa\xfb\xb4\xd3\xe9\x14\x9b\xcf\xef\x27\x2d\xdb\x45\x2a\x27\x14\x02\x99\x02\x97\xfb\x84\xb2\x86\x22\xa3\xc8\x00\x8c\xf8\x99\x7e\x39\x9f\x05\x28\x8b\xed\x9b\xcd\x32\xea\xda\x84\x70\xe8\x85\x52\x61\x45\x83\x46\x40\xd4\xd8\xc8\xf3\x48\xff\x83\xf3\x31\x4a\x04\x22\xd0\x38\xda\xbc\xef\x40\xa0\x47\x14\xba\xba\x6f\x65\x44\xdc\xd4\x76\x6e\xcf\x49\x2e\xfc\x91\xaf\xda\xd3\xed\xf6\x84\x0c\x27\xe4\x22\xb9\xae\xb4\x5a\xed\x7f\x67\x2f\x5c\x50\xf7\xf7\x66\xd7\x88\x14\x10\x41\x7c\x54\x91\x5f\xe8\xbf\x58\x87\x42\x93\xe8\x7e\x4e\x8d\xf3\x31\x02\x75\x81\x0f\x73\x32\xeb\x46\xf3\x16\xd2\x19\xa3\x4f\xba\xf3\xdf\x60\x6e\x77\x41\x2a\x41\xd9\x68\x7e\x99\xb2\x2e\x68\x93\xcc\x2f\x08\xbc\x0a\xa9\x40\xb7\x0b\x4a\x84\x96\xdd\x08\x55\xcc\x27\xee\xcc\x58\xee\xb2\xce\xd4\x3c\x64\xc0\x99\xc4\x14\x69\x73\xa7\xd3\x69\xa6\xa5\x71\x38\x53\xc8\x54\xfa\x12\x00\x09\x02\x8f\x3a\x44\xab\xd9\xbe\x94\x9c\x65\xef\x96\x29\x65\xff\xfe\x5b\xe0\xb0\x0b\xcd\x47\x6d\x87\xfb\x01\x67\xc8\x94\x6c\x5b\x5a\xd9\x9e\x8b\xa8\x25\x6c\xa6\x9a\x16\x6c\x9a\xb5\x24\xf8\x44\x39\x63\x3d\x5a\xb4\x95\xb5\x59\xd0\x38\x7e\xa4\xcf\x5e\x67\xfb\x7e\xf4\xe9\x09\xc1\x45\x33\xd7\x04\x6f\x88\x1f\x78\x69\x83\xc7\x7f\x7b\x9d\xed\x9e\xbd\x59\xbc\x57\xfe\xa0\x98\x57\x3b\x69\x5a\x69\xb6\x83\x50\x8d\x41\xf1\x09\x32\x8d\x87\x94\x4d\x89\x97\xf2\xda\xe6\x5e\x67\xef\x2f\x62\xa4\xbd\xdb\x1b\x69\x6f\x99\x91\x4e\x78\xe2\x4b\x39\x1f\xc3\x1b\x2a\x95\x4c\x0c\xf6\xf8\xbe\x46\xc9\x8a\x06\x7b\xdc\xe9\xdc\xd6\x60\x49\xd3\x4a\x83\x7d\x64\x78\x13\xa0\xa3\xf1\x17\xb5\x5c\xc0\x1d\x13\x54\x62\xcf\x92\xe8\x84\x82\xaa\x59\x1a\x89\x5e\x20\x11\x28\xba\xf0\x2f\xf8\x2d\xba\xca\x03\x14\xc6\x48\xc7\x6e\x57\x63\x58\x06\x08\x5e\xcc\x8e\x8f\x62\x6e\xa1\xef\x13\x31\xeb\xc2\x2b\x54\x40\xf2\x3d\x34\x98\x01\x75\x1b\x0d\x80\x55\xd0\xbf\x7b\x3b\xdc\xbc\x85\x5e\x1e\x95\x59\xc5\x64\x5e\xab\x53\x54\xa1\x60\x3a\x59\xd1\xb4\x3a\x6a\x64\x35\x8c\x1b\x14\xc3\x92\x7e\x7c\x59\x57\x26\x94\xed\x80\x8c\x52\xdd\xb8\x94\x5c\xd2\xaf\x73\xf2\x87\x1b\x24\xde\x50\xa9\xaa\x11\x6f\x89\x19\xd7\xa1\xa1\x5e\x68\x58\x23\xdd\x32\xa4\xab\x07\x38\x91\xc8\x81\xce\xda\x97\x81\x8d\x2c\x43\x10\x47\x20\x51\x38\xa7\x59\x88\x06\x3a\x5b\xbc\x0a\x51\xcc\x52\xfa\xd8\xd4\x95\xc8\x19\x73\xaa\xb4\x7c\x8f\x62\xc8\x85\x6f\x12\x29\x62\xe6\x32\x40\x99\x9e\x6f\x9a\x56\x63\xc1\x19\x0f\xa5\x9e\x3f\x31\x14\x8d\xc5\xbd\x6b\x93\xd8\x01\xe7\x1e\x12\x96\xba\x53\x92\xb6\x42\x9c\xb4\xbd\xe0\x6e\x0a\x52\x2b\x26\x79\x2e\x51\x64\x4e\x53\xe2\x8c\x8b\x5d\xb1\xdc\x11\x6b\x21\x4e\x73\x51\xea\x5d\x05\x93\x3b\xf7\x0c\x93\xd5\xa3\xde\x71\x30\x50\x98\xc9\x01\xff\x1a\x03\x7d\xaf\xd3\x39\xd4\x43\x81\x72\x76\x7b\x54\xcc\xb3\xa8\xb4\xd3\xaf\x1a\x0d\x0d\xa5\x1d\xf8\x32\x9f\xe3\xac\xe3\xc8\x7a\x8a\x51\x7f\x8a\x71\x9e\x4c\x51\xd1\xd5\x98\xc1\x43\xe1\x20\xb8\x1c\x25\xdb\x50\x76\x9a\xb1\x8e\xbd\x39\xc7\x62\x10\x56\x85\x5f\x1b\x15\xe3\xc9\xbf\x93\x0b\x8e\xf5\xf2\xf4\x79\x06\x6e\x30\x01\x4d\xf9\xf3\x3a\xc7\xab\xce\x14\xe1\xbe\x12\xf4\xc5\x01\xdf\xa6\x21\xa9\x91\x58\xe2\x91\x86\x06\x1c\x5b\x8f\x83\x0c\x6d\x75\x6c\xcf\x14\xa8\x1e\xe6\x24\x61\xd5\x09\xc2\x7a\x6e\xb0\x9e\x1b\x3c\x88\x2a\x48\xa6\x5a\x70\xab\x4a\x41\xcd\x22\xb8\x6c\xff\x7b\x71\xc1\x7b\x09\x0e\x51\xb7\x39\x27\x2d\x62\x50\x05\x02\xd5\xc7\x9f\x1a\xc5\xf1\x55\x90\xf9\x61\xa2\x54\xcd\x5a\xf7\xba\xcc\xbd\xce\x41\xeb\x18\x69\x5d\xe6\x5e\xc9\x60\xf7\x5f\xe6\xce\xc3\x7b\xae\xbc\xdd\xb0\xf2\x78\xa8\xf0\x1b\x81\xee\xa1\x38\x7f\xc6\xb8\x47\x46\xb3\xf5\x6c\xfa\xbb\x45\x32\xdb\xc1\xdf\x80\x67\x19\x06\x8b\x50\xcd\xa6\x11\x51\x68\x84\x6b\xaa\xc6\x20\x03\x74\xe8\x90\xa2\x0b\xc7\x47\x7f\x65\x74\xfb\x36\x23\xe6\x19\xfc\x99\x48\x67\x91\xab\x12\xec\xac\x5c\x05\xbc\x0b\x74\x80\xfa\x46\xb8\x7b\xb0\xb5\xd7\x75\x5e\xf7\xe3\xa2\xe1\x3a\xaf\xfb\xae\xf3\x3a\x83\x5b\x95\x60\x67\xee\x16\xb0\xae\xce\xfa\xd7\x11\x51\x04\x14\x8f\x38\x64\xb7\x93\xe9\x40\xd7\x58\xd0\x93\x7f\xc2\x8a\x58\xf6\x21\x3e\x8a\x11\x6e\x19\x51\xff\xf7\x4f\x79\xa0\x7e\xc8\x8a\xcf\xcb\x95\x02\x7f\x39\x7b\x77\x02\xef\x35\x87\x4d\x38\x7d\x79\x08\x4f\x9e\x75\x76\x60\x6b\xbe\x71\x53\x71\xee\xc9\x16\x45\x35\x6c\x71\x31\x6a\x8f\x95\xef\xb5\xc5\xd0\xd1\x54\x39\xbe\xb6\x3e\xc1\x07\x97\xe8\x24\x28\x9e\x5b\x30\x34\x1b\x1a\x7b\xf3\x0d\xb5\x43\x13\x04\x98\xdd\xf1\x99\x74\x6b\x54\x0e\x91\x40\x98\x9b\xba\x4c\x46\xc8\x14\x44\xab\xb8\x35\xf7\xba\xc4\xac\xa2\x32\x4f\x9d\x25\xe8\xec\xee\xcc\xc5\x4b\xd1\x11\x69\x44\xf9\xc3\xad\x48\xc7\x75\xab\x7b\x5b\x99\x8e\xec\xff\x97\x5c\xa0\x2e\xc8\xbe\x5e\xa7\x5e\xaf\x53\xaf\x73\xc9\x3a\x46\x5a\xaf\x53\x3f\xac\x74\xf2\x16\xeb\xd4\x71\xec\x58\x29\xe1\x5c\xb2\x5e\x9d\xe1\x59\x6b\x6b\x6b\x2e\xd4\xaf\x37\x98\xa6\x02\xd3\xca\x7b\x4c\x9d\xac\x31\xd7\xb0\xbb\x5e\x4a\x7e\x38\x4b\xc9\xb9\x91\x5e\x6b\x45\x39\xe5\xd0\x2b\x4e\x37\xd2\xef\x56\x45\xd7\x2e\xa8\xfb\x7b\x34\x0b\xa9\xf1\x76\x55\xd2\xa8\x3c\x07\xaf\x7a\xc1\x2a\x8b\xaa\x7f\xfe\x3b\x56\x39\x33\x3f\x68\x80\xab\x59\xa5\x8c\x27\x39\xeb\x6a\xe5\x3a\xc3\xac\x63\xa4\x5b\x56\x2b\x63\x37\x5b\x57\x2d\xef\x6b\x35\x3a\x5b\xcc\xa9\x7c\xe7\x2a\x86\x58\x8b\xe5\xe1\x5d\x81\x62\x76\x64\x64\x0b\x2e\x91\x6b\x48\x45\x54\x68\x5e\x84\x0f\x03\x97\xac\x97\x8e\x0b\x86\x5a\xc3\xcf\x37\xc3\xcf\x1a\x79\xca\x6c\xf6\x07\x20\x8f\x1d\xc2\x79\xf0\x79\x31\x3b\x76\xf3\x00\x14\xba\x01\xc9\x2e\x14\xe7\xd2\xbc\xfa\x8b\x28\x11\x6e\x3c\x84\x25\x94\x65\xa5\xdb\x06\xd4\xdf\xfc\x73\x1b\x84\x5d\x6f\x02\x5a\x23\xf9\xf7\xb5\x09\x68\x5e\xab\x5c\xef\xff\x79\x88\xfb\x7f\x2a\xd2\xcb\xe2\x36\xa0\x14\xba\xdf\x4d\xd9\xa1\x4d\x5c\x97\xb3\x8b\x7c\xdd\x61\x5d\x87\xb8\x9f\x31\x70\xa0\x7b\xe3\x7d\x6c\xfc\x85\x65\x56\x6d\xde\xa4\x9b\x40\x8d\x89\x02\x39\xe6\xa1\xe7\xc2\x00\x21\x94\xf6\xac\x2a\x87\xb3\x21\x1d\x85\xd1\x09\x41\xf6\x90\xa7\xcc\xc2\xb9\x7e\x20\x70\x66\xfb\xc8\x5a\xa6\xb5\x8e\x38\xdf\x6b\xc4\x59\x97\x2e\x7e\x88\x09\x44\x49\xe9\x22\x8b\x2c\x85\x5a\x77\x45\x25\x63\x43\x46\x08\x91\x20\x4d\xa3\x91\xe8\xa9\x45\x8a\x6c\x6a\xa5\xcb\x9c\x44\x12\x0b\x9c\xd1\xf6\xa7\xad\xb9\x1a\xa7\x18\x08\x94\x9a\x4f\xf1\xe0\x1a\x19\x06\x01\x17\xda\x26\x83\x99\xc1\xa6\x83\xf7\xc7\xa9\x29\x8d\xc1\xfd\x94\x3d\x74\x6c\x4a\xfd\x8c\xce\xc6\x4b\x5d\xd1\x9e\x73\x61\x45\x8d\xae\x12\xcf\x7b\x37\x4c\xf3\x58\xe4\x30\xef\xcc\xd6\xa5\x53\x1c\xa2\x40\xe6\x64\xd6\xf4\x4a\xf7\x36\x01\x04\x42\xf7\x88\xa2\x79\x7f\x32\x51\x34\xe7\x45\xd9\x71\x44\x7c\x2c\x3f\x1d\xad\x95\x6b\x56\x1a\x26\xf5\x5f\x7c\x34\xe0\xa2\xc7\xfc\x6a\x69\xbe\xf1\x49\xce\x98\x30\x86\x5e\x61\xcc\x64\x6b\x54\x11\xd1\x2a\xcf\x22\x42\x90\x59\xee\x0e\x55\xe8\x97\x8c\xce\x4a\xe1\xd2\x42\x2c\x92\xef\x20\xfd\xb3\x20\x64\x6d\x5b\x50\x87\xb3\x8b\xb1\x76\xa2\x45\x0f\xfb\x78\xfa\xc6\x1c\x67\xc9\x0c\xfd\xed\x9f\xe6\x91\xc1\x32\xbb\xbf\x31\x24\x49\x2a\x40\x14\x8e\xb8\xa0\x5f\xb1\xf4\xb5\xf0\xbb\xb7\xbf\xfe\x43\x16\xfa\x1a\xa6\x24\x65\x93\x4d\x88\x26\x21\xbf\x65\xc8\x52\x43\x73\xa1\x3a\x29\xe4\x88\xff\x0e\x4c\xe3\x08\x82\x6c\x0a\xe4\x10\x96\xce\x7f\xa6\x76\x07\x50\x26\x89\x96\x05\x3e\x49\x52\xab\xa7\x46\x30\xa4\xe8\xb9\xe5\x3d\x61\xc7\x39\x3c\x02\xc5\x5d\xde\x05\x81\x81\x47\xe2\x69\xd5\x00\x55\x1c\xea\x8a\x60\xa8\x73\xb9\xee\x6d\xa0\x27\x9b\x04\xae\x8c\x37\xa5\x9d\xb6\x72\x1f\xaf\x70\x44\x61\x56\xf5\x1f\x40\xed\xbc\xca\xa5\x61\xef\x20\x85\x7a\x63\xee\xb9\x32\x1e\x83\x26\x3b\xb7\x5b\xd4\x6c\xba\xae\x89\x80\xc0\x6b\xf3\xda\x8e\xe2\x01\x75\x2c\x5e\x70\x35\x46\x01\x72\x26\x15\xfa\xad\xfb\x8d\x61\x3e\x2a\xe2\x12\x55\x18\xae\x15\x6c\x16\xb1\xd2\x7f\xf1\xab\xd0\x65\xc9\xd5\x42\x70\xe1\xd7\x0c\xc5\xca\xad\xca\x22\xf0\xd2\x46\x76\x73\xaf\x7b\x41\x54\x59\xd3\x21\x17\x3e\x51\x5d\xd0\x48\xb3\xa5\x68\x2a\x17\xa9\xc9\x3e\x2a\xbe\xfe\x51\xec\xe3\xf2\xcf\x45\x45\x66\x90\x30\xa0\x4c\xe1\x08\xf3\x31\x21\x2d\x04\x65\xea\xc9\x5e\x2e\xce\x06\x1e\x9f\xf9\xc8\xd4\x85\xc7\x6d\xa6\xbe\x52\xd9\xd7\xa6\x9a\xe7\x44\x8c\x50\x65\x93\x72\xe3\x19\xab\xf0\x32\xa3\x26\x1a\x89\x94\xb3\x33\x54\x8a\xb2\x91\xcc\x72\x2d\x1c\x54\x5b\xee\xc7\x65\xe9\x4e\x26\x4e\xd4\x76\xff\x28\x4b\xaa\xfd\x18\x17\xa5\x4e\x70\x2f\xa4\x22\xaa\xe0\xaa\x95\xad\xec\x12\x60\x0d\xf2\x9b\x2d\x8f\xb2\x49\x8a\x32\x6b\x90\x34\x87\xba\xa7\x50\x42\xc5\x0e\xb9\x72\x73\xc3\x46\xe1\xda\x46\xd5\xec\xe8\xa7\x05\xbc\xb4\x44\xb2\x24\xa5\xd4\x73\x86\x50\x46\xfb\x31\x32\xed\x35\x6d\xbf\xf0\xf0\x7e\x22\x3b\x50\x36\x7f\x57\x52\xf1\x4c\xdb\xfe\xab\xde\xf9\x4a\xe7\x68\x96\x9d\xa2\xdc\x6f\x45\xd1\x22\xed\xf4\xf3\x88\x41\xb5\xe2\x3e\x65\x24\x15\x46\xe6\xd8\x39\x3b\xb1\x07\x47\x50\x96\xd4\x1e\x7c\x12\x04\x94\x8d\x32\xab\x32\x7a\xbe\xb6\xb0\xbe\x54\x39\xe0\x1c\x8f\x87\xee\x45\x20\xf8\x94\xba\x7a\x76\x59\x35\x5e\x79\xe8\xbe\x8f\x88\x4a\x79\x71\x86\xf5\xc3\xd2\x22\x91\x16\xb7\x5c\x24\x88\x61\x51\x64\x5d\x1a\x9b\x9b\xf6\x9e\x84\x6b\x2e\x26\x1e\x27\xae\x8c\x32\x74\x3b\xf5\x75\xb2\xab\x51\x25\xa3\xbc\x6c\x46\x9a\xea\xa6\xb2\xd8\xa7\x6f\x2f\x2d\x79\x26\x15\xd6\x4a\xd2\xc8\x99\xaa\x0c\xb1\x8a\xbe\xb6\xfb\x21\xee\xfe\x7b\xd1\x37\xe3\x7f\xcb\xc8\x05\x8e\x72\xa1\xa6\x94\xcc\x0f\x3d\x45\x2f\xc8\xd7\x22\x61\xfc\xda\x4b\xe2\x2c\x99\xd2\x6b\xb9\xf1\x92\xed\xad\xf9\xca\x48\xd6\x62\xe9\x34\x33\x97\x5e\xd6\xaf\x00\x37\xcb\x64\xab\x92\x2b\x27\xcf\x82\x0e\x2c\xeb\xa1\x05\x4e\x16\x5f\x9c\x12\x2f\xc4\x25\xae\x98\x2b\x3b\x95\xcb\x7a\x66\x27\x6c\x43\x8d\xd7\xc9\x8e\xb9\x64\x15\x1a\x88\x79\x6f\x08\x02\x8f\x30\x4c\xd5\xa2\x6c\x88\x6b\x7e\x57\xd9\xef\x3a\x89\xad\xc1\xbe\x46\x6e\x53\xea\x7e\x3f\xc0\xf4\x73\xbe\x59\xc2\x34\xaf\x48\x80\xbb\x0b\x06\xfe\x80\x73\x25\x95\x20\xc1\x85\xfd\xb0\x46\x0d\x98\xa6\x3a\xd7\xaf\x01\x18\x11\xa5\x44\x47\xa0\x5a\x0c\x1c\xb9\xf1\xd9\xbd\x73\xf0\xaa\x15\x81\xf2\xe5\xbb\xa2\x9c\x69\x8f\x5a\x12\x07\xf5\xcf\x80\x8c\xd2\x85\x69\x49\xbf\xa6\x7f\x2a\xae\x88\x97\xfa\x6d\xfc\x60\x35\xcd\x6b\xa9\xa5\xa5\x28\x12\xe5\xe7\x7a\x5a\xb8\xe5\x54\x46\xe6\x6a\x32\x73\xc3\xac\xaf\xdc\x6a\xdc\xdd\x1d\x4c\x3b\xdc\xad\x3f\x77\x12\x48\x4a\x96\x96\x2a\xc9\xe7\xd3\xa2\x65\x93\xc7\x46\x71\x5a\x94\xb4\xb0\x0b\xea\xf3\x95\xc4\xc2\xea\xee\xf1\x91\xce\x32\x04\x3a\x5c\xcc\xd7\x82\x72\x65\xd2\x12\x09\x73\xeb\xe4\x25\xab\xe4\x69\x6f\xb0\x32\xa4\xbc\x34\xff\x4a\x72\xf6\xc5\x63\x32\x42\xa0\xcc\xc5\x9b\x02\xf7\x21\xf1\x24\xd6\x97\xb2\xb8\xd8\x96\xf7\x51\x9b\x6c\x40\x73\xdb\xfa\x40\xda\x39\xad\xd0\xa9\xb1\xb4\x50\xe8\x93\xd0\x1f\xa0\xd0\xa6\x34\xc3\x4b\xcf\xf0\x90\x38\xe3\xb4\xd2\x77\xa8\x46\x7e\x10\xcd\xd5\xe8\x74\xac\x22\x5c\xb8\x28\x5e\xcc\x4a\x13\xa3\xff\x4f\x4a\xdc\x67\xd1\x1e\x1d\x3b\xbf\x35\x8d\xf4\xb4\xd6\x11\x54\xa1\xa0\xa4\x65\x3c\x44\xce\x98\x22\x37\x76\x11\x81\xca\xf4\x2c\x56\xa6\x04\xf2\xa9\x47\x44\xfc\x35\xaa\x74\x13\x84\x7e\xcc\xb8\x0f\x8e\x47\x42\x69\x56\x9e\x08\x83\xb3\x0f\x6f\x4c\xcc\x45\xfb\x1d\xad\x98\x57\x4f\xdb\xcd\x18\x3a\xae\xb3\x9b\xf6\x76\x95\x8e\xb0\xd9\x9c\x6d\xa6\x4e\xd0\xb7\x05\x75\x99\xf0\x79\xc9\x45\x6c\xba\x4d\x2d\x98\x30\x6f\xda\x98\x2f\x6f\x1d\x66\x0f\x6d\x4c\x3f\x40\x8d\x91\x0a\xd3\xf9\x9b\xa0\x45\xd5\x4f\x1a\x72\xcf\xe3\xd7\xe6\xab\x50\x46\xb1\x6e\x63\xfe\x90\x7e\xbf\x2f\xaf\x12\x74\xd5\xed\x80\x48\x27\x7d\x3f\x21\x3e\x5f\x5d\x08\xb8\x20\xcc\xbd\x88\x17\xdb\xbe\x45\xa4\xcd\x98\x49\xb5\x7c\xf6\x4b\x64\x99\x1e\x66\x1b\x2a\x9e\xac\xb9\x9b\xc0\x05\x50\x4b\x63\x3c\x0e\xa8\x04\xf4\x03\x35\xdb\xd4\xd7\x92\x95\x50\x9b\x6e\xcb\xd0\x53\xd2\x7c\x37\x2a\xa5\x99\x96\xa6\x35\xf7\xeb\xc0\xd3\xf8\x99\x7e\x55\xbe\xe8\xeb\x39\x57\x4e\xbb\x7b\xac\x5a\xb3\x62\x84\xda\x21\x1c\x31\xf8\xd6\x51\x28\xd5\xcc\xc3\xae\xc9\x30\x2d\x56\x20\x11\xc9\x41\x49\xd9\x11\x96\x0c\x30\x43\x94\x0c\xa8\x94\x2f\x2c\x1e\x59\x4b\x46\xd4\xf5\x18\x05\x66\x86\x53\xf2\xc8\xcc\xa8\x82\x03\xed\x27\xe8\x46\xa3\x43\xe3\x92\x61\x67\xe5\xd2\x9d\xd3\xd7\x56\xea\x6f\x42\x3f\xa5\x82\xfe\x19\x79\x8b\xfe\xaf\x59\x06\xec\x6f\x9a\xe3\x30\xfa\x51\x9d\xb1\x9f\xb0\xb6\x81\x8a\x0b\xdb\xd9\xfd\xff\xfb\x49\xb7\x79\xde\x37\xee\xd2\x7f\x73\xfc\xba\xd7\x4f\x06\x65\xdc\xc6\xe1\xec\x32\x64\x8e\xa2\x53\xcc\xb7\x3f\x38\x39\xea\xdb\x47\xbd\x3b\xed\xb7\xe0\x67\x7e\x8d\x53\x14\x9b\x30\xe3\xa1\x01\x04\xad\x31\x01\x9f\xdc\x50\x3f\xf4\xb5\xee\xdb\x9d\x84\x1d\x67\x46\x47\x12\x6b\x68\xdc\x21\x65\xf6\xde\xdc\xbf\xca\x46\x65\xee\xa3\x33\x76\xc5\x4d\xdb\xcb\x78\x5a\x9f\x5c\xcb\x2d\x79\x25\xb7\x6c\x9d\xdb\x0a\x69\x0a\x83\xd6\x24\xd0\x97\x8a\x0c\x3c\x6d\xcc\x7a\xc3\x34\x3b\x46\x9f\x43\x96\xbf\x3d\x7d\x24\x62\xfd\x1c\x2c\xef\x74\xf3\x7f\x05\x5b\xbf\x95\xab\x61\xd7\x75\x28\x93\x8a\xb0\x78\xe1\x90\xd8\xa7\xd8\x2d\x5c\x8a\x08\x25\xed\x75\xad\xd5\x2d\x25\xf6\xe8\x04\xb5\xd0\x7f\xdb\x79\xfc\x87\x00\x8a\x81\x49\x7d\x33\xdb\x2d\x29\x9c\x21\xca\xdc\x0f\x25\x0a\x18\x13\x09\x01\x0a\x9f\x4a\x19\x2d\x74\x49\xb4\xdf\xad\xb3\x76\x41\x37\xe5\x07\x27\x5c\x61\xfc\xe9\xc5\x28\xd8\x24\xbb\xae\xb4\xa7\x47\xdb\x64\xa8\x4c\xb5\xae\x86\xad\x28\x59\x30\x3e\x57\x01\x46\xe5\xc0\x53\x12\xdb\x33\xb8\x02\x79\xb8\xab\xe5\x25\xcd\xdb\xc1\x5a\x23\xd9\x07\x64\x8a\x27\xb1\x58\xd1\x46\xa0\x34\x53\xec\xc2\xc0\x5c\x8d\x2e\xda\x1f\x2f\xa3\xe9\xf7\x2f\x9f\xce\x33\x13\x8c\xb1\x52\x81\xe6\x9e\xd5\xb6\xfa\x98\x8e\x5c\x0d\x88\xba\x26\xb7\xd9\x6d\x66\x27\x24\xd0\xcc\x6d\xb1\x1a\xdb\x9c\xbf\xa2\x7c\x6e\x0f\xe7\x68\x67\xf8\x98\xfc\x1d\x9a\x87\xef\x4e\x4e\x7a\x87\xe7\xef\x4e\xb7\xde\xbe\x7a\x7b\xbe\x95\x21\x89\xb2\x76\x68\x9e\xa5\x8e\xbd\x89\x0f\xc4\x91\xc0\xb8\x4a\xf6\x11\xd9\x61\x64\x0e\xc8\x79\xae\xbd\xa3\x58\x27\xcb\xa5\xf5\xd0\xdc\xa6\x9f\x8e\xa9\x7f\xf5\xca\x11\x47\xe1\x9b\x27\xdb\xe4\xe3\xcd\xf1\x3f\xaf\x5e\x9c\x5f\x9d\x9c\x92\x66\x6c\xa5\x63\xeb\x96\x1f\xb4\x37\xd5\xb0\xd4\xce\x1d\x59\x6a\x67\xa9\xa1\x76\xca\xec\xf4\x92\x50\xcf\xee\x8b\x08\x88\x90\x98\x41\xe2\x2e\x7c\x64\xe6\x13\xa8\x8a\xdb\x0a\xe7\xeb\xf4\xc1\x91\xf6\x40\x26\x12\xd0\x0b\xbb\xd4\x21\xed\x57\x45\xbb\x50\x78\x6c\x17\x96\x3d\x25\xd9\xdb\xe5\x70\x2f\xf4\x99\x45\x2c\xcd\x3f\x1a\x60\xb0\x41\xdd\x8d\x16\x9c\x95\xd1\x99\x48\xd4\x8d\x6a\xbf\x9b\x51\x36\x98\x2d\x1c\xc7\x57\x6d\xd1\xa8\x05\x1f\x2c\x86\xd8\x9e\xd2\x13\x2e\x78\x0e\xdb\x69\xfb\xe4\xfb\xdd\xfb\x74\xf4\x2a\x9c\x0d\x8e\x45\x8f\xdd\x88\x03\xf4\xf7\x77\xf6\x46\x57\x93\x09\x3d\x9a\xc6\xfd\x9e\xdf\x48\x59\xd6\xd7\x7b\x9d\xbd\x3b\xe9\xeb\xfd\x65\x5d\xbd\x5f\xd2\xd3\x75\x8e\x2a\x99\x2b\x53\xba\x8f\xbe\x4c\xa5\xfd\xfb\x53\xc8\x78\xe3\x69\xe6\x35\x06\xea\x3e\xdf\xd8\xa6\xaf\x77\xdd\xf0\xd7\x2f\xc7\xd3\xe9\xe3\x2f\xd3\x37\xde\xec\xeb\xb6\xff\xea\x74\xf7\x97\xd9\xd5\xc9\x86\x01\x80\x21\x0f\x99\xbb\x60\x88\x7f\x79\xb7\x3f\xda\x19\x3d\xf9\xf9\xdc\xfd\xf8\xfa\x23\xd9\x99\xc8\x9f\x9f\xee\x4c\x3e\x1c\xed\xce\x62\xeb\xe4\x37\x16\x97\x02\xe0\xf6\xdd\xe0\xdf\xf6\x52\xf8\xdb\x2e\x31\x4d\x32\x6e\xa7\x28\xe8\x70\xa6\x31\xde\x6e\x57\xee\xc2\x69\x14\xda\x80\x84\x6a\xcc\x05\xfd\x1a\x6f\x35\x99\x20\xab\x67\x9f\xdd\x8f\xe3\xde\xf8\xda\xff\xfc\x22\xf8\xf4\x7e\x78\xbc\xe3\x9d\xe0\x24\x70\xf7\xfe\x79\x14\xdb\xe7\xd9\x09\xf1\xf1\x90\xb3\xa1\x47\x1d\x55\xc3\x56\xbb\x4f\xee\xc4\x56\x69\x36\xe5\xb6\x4a\x53\x64\xdd\x68\xbe\x2b\xd9\x00\x0f\x95\x40\x3c\x81\xc4\x9d\x99\x5d\x63\x95\xb6\x78\x32\xf9\xd2\xf9\x48\x7b\x93\xaf\x93\xcf\x87\x5f\x3f\xbd\xc7\xe3\x1d\xfe\x05\xc7\xee\x6e\x2f\x32\x45\x71\x97\x70\x99\xfa\xcf\xee\x44\xfb\x67\xcb\x94\x7f\x56\xea\x27\xc9\x8b\x3f\x98\x7d\x68\xa1\xdb\xb1\xf7\x66\xfa\xf2\xd9\xe5\xdb\x0f\x5f\x9e\x7c\x19\x8d\x87\x6f\x9f\x8d\x5e\x9d\xca\x9f\xa7\xbd\x4f\x73\x5d\x6b\x83\xc6\xbd\x69\x9c\xca\xd3\x9a\x36\x65\x34\xaf\xdd\x44\x09\xb4\x23\x51\x75\xe1\xdd\xe1\xdb\xad\xde\xe7\xad\x67\x3a\xf5\x8b\xa3\x96\x7d\x39\x27\xa1\xc1\x1b\xb5\x15\xc5\x3b\x12\xd0\xad\x6d\x7a\xd3\xd9\xf5\x98\xeb\xf9\x57\x9d\xab\xa1\xb3\x2f\xa9\x22\x8f\xa5\x77\x39\x7d\x9a\x5e\xd2\x18\xa6\x36\xbf\x6b\x33\x6c\x8f\x1e\xbb\x4f\x9f\x5e\x75\x3c\xe1\xb8\xd3\xbd\xd1\x3e\xf1\x06\xfb\xd2\x1b\x8e\xd8\xe5\xae\x3b\x1e\xc8\xcb\xbf\xfd\xd7\xdf\x7b\x9f\xcf\x4f\x0f\xe0\x7f\xac\xc2\x2d\x63\xa4\xe7\xd4\x45\xa6\x74\x97\xa5\xb7\xe4\x50\x09\x1b\x7b\x9d\xbd\x8d\x4d\x63\x0a\xf3\xf3\xf0\xcd\xc7\xb3\xf3\xde\xe9\x99\xb5\x85\xbe\x69\xb2\xcf\x79\xbf\x42\xc2\xc8\xd0\x6f\x8f\x1e\x73\xf1\xb8\x33\xa5\x61\x67\x9f\xa3\xee\xb5\xb1\x98\x38\x3b\x4f\xdc\xd1\x50\x5d\x6e\x13\x67\x23\x6d\xbd\xf8\x25\xf3\x8d\x65\x4a\xa4\x20\xf7\x1f\x8b\x30\xe5\x5c\x7e\x12\xb3\x27\x4c\x5e\x0d\x76\xe4\x89\xff\xf2\xf2\xf1\xe0\x73\x70\xb4\x7f\x48\x9a\x8d\xff\x04\x00\x00\xff\xff\xa6\x2b\xfe\xb2\x13\x7e\x00\x00")

func connector_mgmtYamlBytes() ([]byte, error) {
	return bindataRead(
		_connector_mgmtYaml,
		"connector_mgmt.yaml",
	)
}

func connector_mgmtYaml() (*asset, error) {
	bytes, err := connector_mgmtYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "connector_mgmt.yaml", size: 32275, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"connector_mgmt.yaml": connector_mgmtYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"connector_mgmt.yaml": &bintree{connector_mgmtYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
