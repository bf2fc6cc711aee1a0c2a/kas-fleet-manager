// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package generated generated by go-bindata.// sources:
// .generate/openapi/connector_mgmt.yaml
package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _connector_mgmtYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7b\x73\xdb\x38\x92\xff\x5f\x9f\xa2\x4f\xb9\x2d\xef\xde\xd9\x92\xfc\x48\x9c\xa8\x2e\x53\xe5\xd8\x4e\xc6\x33\x89\x93\xd8\xce\x24\xd9\xad\x29\x0b\x22\x5b\x12\x6c\x12\xa0\x01\x50\xb6\xb2\x37\xdf\x7d\x0b\x00\xdf\x0f\x89\x72\x3c\xb1\x27\x91\xab\x52\x15\x91\x8d\x46\x77\xa3\xf1\x43\x77\x03\x24\x79\x80\x8c\x04\xb4\x0f\xdb\x9d\x5e\xa7\x07\x8f\x80\x21\xba\xa0\x26\x54\x02\x91\x30\xa2\x42\x2a\xf0\x28\x43\x50\x1c\x88\xe7\xf1\x6b\x90\xdc\x47\x38\x3a\x38\x94\xfa\xd2\x25\xe3\xd7\x96\x5a\x37\x60\x10\xb1\x03\x97\x3b\xa1\x8f\x4c\x75\x5a\x8f\x60\xcf\xf3\x00\x99\x1b\x70\xca\x94\x04\x17\x47\x94\xa1\x0b\x13\x14\x08\xd7\xd4\xf3\x60\x88\xe0\x52\xe9\xf0\x29\x0a\x32\xf4\x10\x86\x33\xdd\x13\x84\x12\x85\xec\xc0\xd1\x08\x94\xa1\xd5\x1d\x44\xd2\x71\xb8\x44\x0c\xac\x24\x29\xe7\x76\x20\xe8\x94\x28\x6c\xaf\x03\x71\xb5\x0e\xe8\x6b\x52\x35\x41\x68\x8f\x3c\x44\xb5\xe1\x13\x46\xc6\x28\x36\x22\xc2\xce\x8c\xf8\x5e\x1b\x46\xd4\xc3\x16\x65\x23\xde\x6f\x01\x28\xaa\x3c\xec\xc3\x3e\x67\x0c\x1d\xc5\x05\x9c\xa2\x98\x52\x07\xe1\xa5\xe6\x00\x6f\x2c\x87\x16\xc0\x14\x85\xa4\x9c\xf5\xa1\xd7\xe9\x75\xb6\x5b\x00\x2e\x4a\x47\xd0\x40\x99\x8b\x0b\xda\x5b\x65\x4e\x50\x2a\xd8\x7b\x77\xa4\xa5\xb4\xa2\x81\x13\xb7\x93\x9d\x96\x44\xa1\x3b\xd1\x52\x6d\x40\x28\xbc\x3e\x4c\x94\x0a\x64\xbf\xdb\x25\x01\xed\x68\x4b\xcb\x09\x1d\xa9\x8e\xc3\xfd\x16\x40\x41\x80\x37\x84\x32\xf8\x7b\x20\xb8\x1b\x3a\xfa\xca\x3f\xc0\xb2\xab\x66\x26\x15\x19\xe3\x22\x96\xa7\x8a\x8c\x29\x1b\x57\x32\xea\x77\xbb\x1e\x77\x88\x37\xe1\x52\xf5\x9f\xf6\x7a\xbd\x72\xf3\xe4\x7e\xda\xb2\x5b\xa6\x72\x42\x21\x90\x29\x70\xb9\x4f\x28\x6b\x29\x32\x8e\x0c\xc0\x88\x9f\x1b\x97\xb3\x59\x80\xb2\xdc\xbe\xdd\xae\xa2\x6e\x4c\x08\xfb\x5e\x28\x15\xd6\x34\x68\x05\x44\x4d\x8c\x3c\x8f\xf4\x3f\x38\x9b\xa0\x44\x20\x02\x8d\x93\x25\x63\x07\x02\x3d\xa2\xd0\xd5\x63\x2b\x23\xe2\xb6\xb6\x73\x37\x21\x39\xf7\xc7\xbe\xea\x4e\x37\xbb\x2e\x65\x5c\x92\x50\x9c\xa7\xb7\x94\xd6\xac\xfb\xef\xfc\x85\x73\xea\xfe\xd1\xee\x1b\xa9\x02\x22\x88\x8f\x2a\x72\x0d\xfd\x17\xab\x51\x6a\x12\xdd\x2f\x68\x72\x36\x41\xa0\x2e\xf0\x51\x41\x6c\xdd\x28\x69\x21\x9d\x09\xfa\xa4\x9f\xfc\x06\x73\xbb\x0f\x52\x09\xca\xc6\xc9\x65\xca\xfa\xa0\xad\x92\x5c\x10\x78\x15\x52\x81\x6e\x1f\x94\x08\x2d\xbb\x31\xaa\x98\x4f\x3c\x9e\xb1\xdc\x55\xe3\xa9\x79\xc8\x80\x33\x89\x19\xd2\xf6\x56\xaf\xd7\xce\x4a\xe3\x70\xa6\x90\xa9\xec\x25\x00\x12\x04\x1e\x75\x88\x56\xb3\x7b\x21\x39\xcb\xdf\xad\x52\xca\xfe\xfd\xb7\xc0\x51\x1f\xda\x8f\xba\x0e\xf7\x03\xce\x90\x29\xd9\xb5\xb4\xb2\x9b\x88\xa8\x25\x6c\x67\x9a\x96\x6c\x9a\xb7\x24\xf8\x44\x39\x13\x3d\x61\xb4\x95\xb5\x59\xd0\xf8\x7e\xa4\xcf\x4e\x6f\xf3\x7e\xf4\x39\x14\x82\x8b\x76\xa1\x09\xde\x10\x3f\xf0\xb2\x06\x8f\xff\x76\x7a\x9b\x87\xf6\x66\xf9\x5e\x75\x47\x31\xaf\x6e\xda\xb4\xd6\x6c\x7b\xa1\x9a\x80\xe2\x97\xc8\x34\x24\x52\x36\x25\x5e\xc6\x6b\xdb\x3b\xbd\x9d\xbf\x88\x91\x76\x6e\x6f\xa4\x9d\x45\x46\x3a\xe6\xa9\x2f\x15\x7c\x0c\x6f\xa8\x54\x32\x35\xd8\xe3\xfb\x9a\x25\x4b\x1a\xec\x71\xaf\x77\x5b\x83\xa5\x4d\x6b\x0d\xf6\x81\xe1\x4d\x80\x8e\x86\x60\xd4\x72\x01\x77\xcc\xba\x12\x7b\x96\x44\x27\x14\x54\xcd\xb2\x48\xf4\x02\x89\x40\xd1\x87\x7f\xc1\xef\xd1\x55\x1e\xa0\x30\x46\x3a\x72\xfb\x1a\xc3\x72\x40\xf0\x62\x76\x74\x10\x73\x0b\x7d\x9f\x88\x59\x1f\x5e\xa1\x02\x52\x1c\xa1\xe1\x0c\xa8\xdb\x6a\x01\x2c\xb9\x00\xf4\x6f\x07\x9d\xb7\x50\xcd\xa3\x32\xaf\x9b\x2c\x2a\x76\x82\x2a\x14\x4c\x87\x2c\x9a\x56\x2f\x1c\x79\x25\xe3\x06\xe5\x95\x49\x77\x5f\x35\x9a\x29\x65\x37\x20\xe3\xcc\x48\x2e\x24\x97\xf4\xcb\x32\xe4\x5c\xb8\x28\x5e\xcc\x96\xe9\x00\x89\x70\x26\xed\x07\xbf\x14\xbd\xa6\x52\xd5\xe3\xea\x82\x91\x5a\x2d\x40\xcd\x16\xa0\x15\x9e\x2e\xc2\xd3\xc6\xb0\x16\x49\x1d\xe8\x0c\x61\x11\xa4\xc9\x2a\x9c\x72\x04\x12\x85\x09\xcd\x5c\xcc\xd1\x61\xe9\x55\x88\x62\x96\x51\xc9\xc6\xc8\x44\xce\x98\x53\xa7\xe8\x3b\x14\x23\x2e\x7c\x13\xb1\x11\x93\x37\x01\x65\x3a\xaf\x35\xad\x26\x82\x33\x1e\x4a\x9d\xab\x31\x14\xad\xf9\x03\x6c\xa3\xe5\x21\xe7\x1e\x12\x96\xb9\x53\x11\x1f\x43\x1c\x1d\xbe\xe0\x6e\x06\xb8\x6b\x12\x4a\x97\x28\x92\xd0\x54\xf8\xe3\x7c\x6f\xac\xf6\xc5\x46\xa0\xd3\x9e\x17\xe3\xd7\x21\xe5\xd6\x3d\x23\x65\xfd\xc4\x77\x1c\x0c\x14\xe6\x82\xcd\xbf\xc6\x5c\xdf\xe9\xf5\xf6\xf5\x54\xa0\x9c\xdd\x1e\x18\x8b\x2c\x6a\xed\xf4\x9b\x06\x44\x43\x69\xe7\xbe\x2c\x06\x53\xab\xa5\x64\x95\xcb\x34\xcf\x65\xce\xd2\x5c\x18\x5d\x8d\x19\x3c\x14\x0e\x82\xcb\x51\xb2\x35\x65\xf3\x99\xd5\xf2\x5b\x70\x2c\x06\x61\xdd\x0a\x6c\x57\xc5\xb8\xca\xe0\x14\x16\xc7\x66\xd9\x40\x12\xe7\x1b\x4c\x40\x53\x66\xbd\xce\xf0\x6a\x9c\x89\xdc\x67\x1e\x50\xbf\xe2\x27\xa1\x48\x66\x36\x56\x78\x65\x4c\x06\x8e\x2d\x01\x42\x8e\xbc\x7e\x89\xcf\x15\xc4\x1e\x66\xba\xb0\x6c\xaa\xb0\xca\x12\x56\x59\xc2\x83\xa8\xba\xe4\x4a\x13\xb7\x2a\x4b\x34\xaf\xbb\xcb\xee\xbf\xe7\xd7\xd8\x17\x00\x12\x75\xdb\x09\x69\x19\x8c\xea\xa1\x68\x29\x20\x6a\x50\x95\x5f\x06\xa8\x1f\x26\x5c\x35\x2c\xb2\xaf\xea\xeb\xab\x98\xb4\x89\x91\x56\xf5\xf5\xa5\x0c\x76\xff\xf5\xf5\x22\xce\x17\xea\xea\x2d\x2b\x8f\x87\x0a\xbf\x12\xe8\x1e\x8a\xf3\xe7\x8c\x7b\x60\x34\x5b\x65\xd7\xdf\x2d\x92\xd9\x01\xfe\x0a\x3c\xcb\x31\x98\x87\x6a\x49\x24\x11\xad\x8e\x70\x4d\xd5\x04\x64\x80\x0e\x1d\x51\x74\xe1\xe8\xe0\xaf\x0c\x70\x5f\x67\xc7\x22\x83\x6f\x09\x76\x16\xbc\x6a\xf1\xce\xca\x55\x82\xbc\x40\xaf\x51\x5f\x89\x78\x0f\xb6\x1c\xbb\x0a\xed\x7e\x5c\x40\x5c\x85\x76\xdf\x75\x68\x67\x70\xab\x16\xec\xcc\xdd\x12\xd6\x35\xd9\x12\x3b\x20\x8a\x80\xe2\x11\x87\xfc\x51\x36\xbd\xd0\xb5\xe6\x8c\xe4\x37\xd8\x24\xcb\x77\xe2\xa3\x18\xe3\x86\x11\xf5\x7f\xbf\x49\x87\xba\x93\x25\xfb\x2b\x94\x05\x7f\x39\x7d\x7b\x0c\xef\x34\x87\x75\x38\x79\xb9\x0f\x4f\x9e\xf5\xb6\x60\x23\x39\x37\xaa\x38\xf7\x64\x87\xa2\x1a\x75\xb8\x18\x77\x27\xca\xf7\xba\x62\xe4\x68\xaa\x02\x5f\x5b\xa2\xe0\xc3\x0b\x74\x52\x14\x2f\xec\x21\x9a\xf3\x94\x87\xc9\x59\xde\x91\x59\x04\x98\x3d\x70\x9a\x0e\x6b\x54\x11\x91\x40\x98\x9b\xb9\x4c\xc6\xc8\x14\x44\x1b\xbb\xcd\xcf\xd9\xc4\xdc\xa2\x92\x4f\x93\x8d\xe9\xfc\xf9\xd0\xf9\x1b\xd4\x11\x69\x44\xf9\xc3\xed\x53\xc7\xd5\xab\x7b\xdb\xaf\x8e\xec\xff\x97\xdc\xb6\x2e\xc9\xbe\xda\xbd\x5e\xed\x5e\xaf\xc2\xc9\x26\x46\x5a\xed\x5e\x3f\xac\x88\xf2\x16\xbb\xd7\xf1\xda\xb1\x54\xcc\xb9\x60\x17\x3b\xc7\xb3\xd1\xb1\xda\xc2\x52\xff\xad\x37\xb5\x1f\xe6\xde\x4c\x64\x94\xa5\x0f\x9f\x3a\x79\x63\xae\x60\x77\xb5\xb3\xfc\x70\x76\x96\x0b\x33\xbd\xd1\x06\x73\xc6\xa1\x97\xcf\x38\xb2\x4f\x77\x45\xd7\xce\xa9\xfb\x47\x94\x88\x34\x78\xbe\x2b\x6d\x54\x1d\x86\xd7\x3d\xe2\x95\x07\xd6\x6f\xff\x94\x57\xc1\xd2\x0f\x1a\xe3\x1a\xd6\x2a\xe3\x3c\x67\x55\xb3\x5c\x05\x99\x4d\x8c\x74\xcb\x9a\x65\xec\x66\xab\xda\xe5\x7d\x6d\x4b\xe7\xeb\x39\xb5\x4f\x7d\xc5\x10\x6b\xb1\x3c\xbc\x2b\x50\xcc\xcf\x8c\x7c\xcd\x25\x72\x0d\xa9\x88\x0a\xcd\x93\xf8\x61\xe0\x92\xd5\x1e\x72\xc9\x50\x2b\xf8\xf9\x6a\xf8\x59\x21\x4f\x95\xcd\xfe\x04\xe4\xb1\x53\xb8\x08\x3e\x2f\x66\x47\x6e\x11\x80\x42\x37\x20\xf9\xed\xe2\x42\x98\xd7\x7c\x2b\x25\xc2\x8d\x87\xb0\x91\xb2\xa8\x7a\xdb\x82\xe6\xa7\x80\x6e\x83\xb0\xab\xd3\x40\x2b\x24\xff\xbe\x4e\x03\x25\xe5\xca\xd5\x29\xa0\x87\x78\x0a\xa8\x26\xbc\x2c\x1f\x06\xca\x46\x98\x77\x56\x7a\xe8\x12\xd7\xe5\xec\xbc\x58\x7b\x58\xd5\x22\xee\x67\x1e\xec\xe9\xd1\x78\x17\x1b\x7f\x6e\xb5\x55\x9b\x37\x1d\x26\x50\x13\xa2\x40\x4e\x78\xe8\xb9\x30\x44\x08\xa5\x7d\x61\x96\xc3\xd9\x88\x8e\xc3\xe8\x55\x45\xf6\x6d\x53\xb9\x2d\x74\xdd\x21\x70\x66\xc7\xc8\x5a\xa6\xb3\x5a\x75\xbe\xd7\x55\x67\x55\xbe\xf8\x21\x92\x88\x8a\xf2\x45\x1e\x59\x4a\x25\xef\x9a\x6a\xc6\x9a\x8c\x10\x22\x45\x9a\x56\x2b\xd5\x53\x8b\x14\xd9\xd4\x4a\x97\x7b\x53\x49\x2c\x70\x4e\xdb\x9f\x36\x12\x35\x4e\x30\x10\x28\x35\x9f\xf2\xeb\x73\x64\x18\x04\x5c\x68\x9b\x0c\x67\x06\x9b\xf6\xde\x1d\xc5\x9a\x32\x7c\x3b\xca\x1a\x23\x59\x08\x32\x16\xb6\xcb\x55\xee\x42\xf4\xe6\xbe\xdc\x35\x2b\xfc\x02\x5e\x15\xdc\xaa\xf9\xe9\xab\xda\x45\xcf\x73\x6c\x89\xe7\xe5\xe5\x9d\xe7\x99\x6f\xcd\x69\xa9\x13\x1c\xa1\x40\xe6\xe4\xf6\x10\x2b\x8f\x53\x01\x04\x42\x0f\xbd\xa2\x45\xc7\x35\xcb\x75\xc1\x5d\xf3\x13\x96\xf8\x58\xfd\x32\xb8\x4e\xa1\x59\xe5\x7a\xac\xff\xe2\x97\x21\xce\xeb\xe6\x37\x4b\xf3\x95\x3d\x39\x13\xc2\x18\x7a\xa5\xc9\x99\x2f\x88\x45\x44\xcb\xf4\x45\x84\x20\xb3\xc2\x1d\xaa\xd0\xaf\x80\x81\x5a\xe1\xb2\x42\xcc\x93\x6f\x2f\xfb\xb3\x24\x64\x63\x5b\x50\x87\xb3\xf3\x89\x76\xa2\x79\x9d\x7d\x38\x79\x6d\x5e\xde\xc9\x0c\xfd\xed\x7b\xf3\xc8\x70\x91\xdd\x5f\x1b\x92\x34\xe6\x20\x0a\xc7\x5c\xd0\x2f\x58\xf9\x70\xfa\xdd\xdb\x5f\xff\x21\x0b\x7d\x8d\x87\x92\xb2\xcb\x75\x88\x32\x9e\xdf\x73\x64\x0d\x4e\x3f\x66\xd0\x29\xfe\xdb\x33\x53\x3a\x6a\x6c\xc3\x2c\x87\xb0\x6c\x8c\x35\xb5\x87\x8d\x72\xc1\xba\x2c\xf1\x49\x03\x67\x9d\x82\xc1\x88\xa2\xe7\x56\x0f\x82\x9d\xe2\xf0\x08\x14\x77\x79\x1f\x04\x06\x1e\x89\xd3\xb7\x21\xaa\x78\x39\xcd\xb5\xcd\xc0\xce\xf7\xa5\x60\xe9\xdd\x57\xfd\xdb\xc0\x6a\x3e\x92\x5e\x1a\x4b\x2b\x1d\x72\x69\xff\x5d\xe2\x6d\x93\x79\xd5\x7f\x00\xb5\x8b\x2a\x57\xc6\x0e\x7b\x19\x44\x9f\x70\xcf\x95\x31\xbe\x98\x14\xc7\x1e\xf7\xb3\x39\x8f\x26\x02\x02\x07\xf1\x83\x50\x8a\x07\xd4\xb1\x70\xc8\xd5\x04\x05\xc8\x99\x54\xe8\x77\xee\x77\x89\xf6\x51\x11\x97\xa8\xd2\x8c\xad\x61\x33\x8f\x95\xb1\x55\xfa\x94\x79\x55\x9c\x3a\x17\x3e\xf9\x35\x43\xb1\x74\xab\xaa\x18\x63\x61\x23\x7b\x5c\xda\x3d\x27\xaa\xaa\xe9\x88\x0b\x9f\xa8\x3e\x68\xbc\xd9\x50\xb4\x10\x75\x35\x60\x1f\xd5\xb2\xff\x2c\xf6\x71\x35\xed\xbc\x26\xf6\x49\x19\x50\xa6\x70\x8c\xc5\x55\x2f\x2b\x04\x65\xea\xc9\x4e\x21\x92\x08\x3c\x3e\xf3\x91\xa9\x73\x8f\xdb\xa4\x67\xa9\x2a\xba\x8d\xda\xcf\x88\x18\xa3\xca\xe7\x37\xb1\x73\x2c\xc3\x2e\x9e\x3e\xd1\xac\xa4\x9c\x9d\xa2\x52\x94\x8d\x65\x9e\x77\xe9\xfd\xc3\xd5\x0e\x5d\x15\xd6\xe5\xd6\x8c\xc6\xf3\x20\x8a\x06\x1b\x77\xe3\xa2\xd4\x41\xfd\xb9\x54\x44\x95\x1c\xb6\xb6\x95\xdd\x57\x6d\x40\x7e\xb3\xe1\x51\x76\x99\xa1\xcc\x1b\x24\xcb\xa1\xe9\xcb\x45\xa1\xe6\xe4\x61\xb5\xb9\x61\xad\x74\x6d\xad\x2e\xdd\xfc\x69\x0e\x2f\x2d\x91\xac\x08\x9d\x75\x12\x16\xca\xe8\x90\x4b\xae\xbd\xa6\x1d\x94\x3a\x1f\xa4\xb2\x03\x65\xc9\x63\xa8\x8a\xe7\xda\x0e\x5e\x1d\x9e\x2d\xfb\x7a\xd4\xaa\xf7\x63\x0f\x3a\xd1\xe2\x91\xf5\xfe\x64\x01\xa1\x5a\x77\x9f\x32\x92\x59\x55\x12\x1c\x9d\x1d\x9b\xa2\xe6\x25\x65\x69\x3d\xc7\x27\x41\x40\xd9\x38\xb7\xdb\xa5\x73\xe0\xb9\x35\xbb\xda\x99\xe7\x78\x3c\x74\xcf\x03\xc1\xa7\xd4\xd5\x19\x7b\xdd\xc4\xe5\xa1\xfb\x2e\x22\xaa\xe4\x55\xca\x7a\x17\x96\x11\x6b\x44\x9a\xdf\x72\x9e\x20\x86\x45\x99\x75\xe5\x52\xdd\xb6\xf7\x24\x5c\x73\x71\xe9\x71\xe2\xca\x28\x19\xb1\xe5\x04\x27\xbf\xcb\x57\x31\xd1\xcb\x89\xf8\x46\x76\x98\xaa\xd6\x41\x7d\x7b\x61\x19\x39\xad\x5a\xd7\x92\x46\xce\x54\x67\x88\x65\xf4\xb5\xc3\x0f\xf1\xf0\xdf\x8b\xbe\x39\xff\x5b\x44\x2e\x70\x5c\x58\x73\x2a\xc9\xfc\xd0\x53\xf4\x9c\x7c\x29\x13\xc6\x4f\x14\xa5\xce\x92\x2b\x67\x57\x1b\x2f\x3d\x39\x5c\xac\x36\xe5\x2d\x96\x8d\x3a\x0b\xd1\x66\xf3\xaa\x7a\xbb\x4a\xb6\x3a\xb9\x0a\xf2\xcc\x19\xc0\xaa\x11\x9a\xe3\x64\xf1\xc5\x29\xf1\x42\x5c\xe0\x8a\x85\x52\x5e\xb5\xac\xa7\x36\x7f\x1b\x69\xc8\x4e\x4f\x22\xa6\xbb\xfb\x40\xcc\x23\x59\x10\x78\x84\x61\xa6\xbe\x67\x57\xb9\xf6\x77\x15\x09\xaf\xa2\xd9\x06\xec\x1b\x84\x37\x95\xee\xf7\x03\x64\xa3\xc9\x21\x14\xd3\xbc\x3e\x0c\xee\xcf\x99\xfb\x43\xce\x95\x54\x82\x04\xe7\xf6\xc3\x29\x0d\x90\x9a\xea\xb8\xbf\x01\x66\x44\x94\x12\x1d\x81\x6a\x3e\x76\x14\xa6\x68\xff\xce\xf1\xab\xd1\x22\x54\x2c\x56\x96\xe5\xcc\x3a\xd5\x82\xa5\x50\xff\x0c\xc8\x18\x33\x3f\x25\xfd\x92\xfd\xa9\xb8\x22\x5e\xe6\xb7\x71\x85\xe5\x34\x6f\xa4\x96\x96\xa2\x4c\x54\xcc\xfb\xb4\x70\x8b\xa9\x8c\xcc\xf5\x64\xe6\x86\xd9\xb6\xba\xd5\xd4\xbb\x3b\xa4\x76\xb8\xdb\x3c\x83\x12\x48\x2a\x76\xec\x6a\xc9\x93\xe4\x68\x51\x0a\xd9\x2a\x27\x47\x69\x0b\x7b\x4e\x21\xd9\xa0\x2d\x6d\x9a\x1f\x1d\xe8\x40\x43\xa0\xc3\x45\xb2\xc5\x56\x28\x9c\x56\x48\x58\x38\x7e\x50\x71\xf8\x20\xeb\x0d\x56\x86\x8c\x97\x16\x1f\xf8\xce\x3f\xd6\x4d\xc6\x08\x94\xb9\x78\x53\xe2\x3e\x22\x9e\xc4\xe6\x52\x96\xf7\x30\x8b\x3e\x6a\xe3\x0d\x68\x6f\x5a\x1f\xc8\x3a\xa7\x15\x3a\x33\x97\xe6\x0a\x7d\x1c\xfa\x43\x14\xda\x94\x66\x7a\xe9\x3c\x0f\x89\x33\xc9\x2a\x7d\x87\x6a\x14\x27\x51\xa2\x46\xaf\x67\x15\x89\x3e\xf8\x50\x19\x1b\xfd\x7f\x5a\xf4\x3e\x8d\x8e\x3f\xd9\x2c\xd7\x34\xd2\xc9\xad\x23\xa8\x42\x41\x49\xc7\x78\x88\x9c\x31\x45\x6e\xec\x96\x09\x95\xd9\x5c\x56\x66\x04\xf2\xa9\x47\x44\xfc\xa5\xb1\x6c\x13\x84\x41\xcc\x78\x00\x8e\x47\x42\x69\xf6\xd9\x08\x83\xd3\xf7\xaf\xcd\xb2\x8b\xf6\x1b\x69\x31\xaf\x43\x6d\x37\x63\xe8\xb8\xf2\x6e\xda\xdb\xcd\x4f\xc2\x66\x09\xdb\x5c\xb5\x60\x60\x4b\xec\x32\xe5\xf3\x92\x8b\xd8\x74\xeb\x5a\x30\x61\x9e\x63\x32\x5f\x55\xdb\xcf\xbf\x21\x33\xdb\x81\x9a\x20\x15\x66\xf0\xd7\x41\x8b\xaa\x7b\x1a\x71\xcf\xe3\xd7\xe6\xab\x5f\x46\xb1\x7e\x2b\xe9\x64\x30\x18\xc8\xab\x14\x5d\x75\x3b\x20\xd2\xc9\xde\x4f\x89\xcf\x96\x17\x02\xce\x09\x73\xcf\xe3\xad\xc5\xaf\x11\x69\x3d\x66\x52\x2f\x9f\xfd\xca\x5c\x6e\x84\xd9\x9a\x8a\xf3\x35\x77\x1d\xb8\x00\x6a\x69\x8c\xc7\x01\x95\x80\x7e\xa0\x66\xeb\xfa\x5a\xba\xf7\x6b\x23\x6e\x19\x7a\x4a\x9a\xef\x82\x65\x34\xd3\xd2\x74\x12\xbf\x0e\x3c\x8d\x9f\xd9\x17\x11\x94\x7d\xbd\xe0\xca\x59\x77\x8f\x55\x6b\xd7\xcc\x50\x3b\x85\x23\x06\x5f\x3b\x0b\xa5\x9a\x79\xd8\x37\x41\xa6\xc5\x0a\xf3\x85\x94\xea\x19\x96\x4e\x30\x43\x94\x4e\xa8\x8c\x2f\xcc\x9f\x59\x0b\x66\xd4\xf5\x04\x05\xe6\xa6\x53\xda\x65\x6e\x56\xc1\x9e\xf6\x13\x74\xa3\xd9\xa1\x71\xc9\xb0\xb3\x72\xe9\xc1\x19\x68\x2b\x0d\xd6\x61\x90\x51\x41\xff\x8c\xbc\x45\xff\xd7\x6c\x7a\x0e\xd6\xcd\xfb\x46\x06\x51\xb5\x71\x90\xb2\xb6\x0b\x15\x17\x76\xb0\x07\xff\xf7\x93\x6e\xf3\x7c\x60\xdc\x65\xf0\xfa\xe8\xd7\xc3\x41\x3a\x29\xe3\x36\x0e\x67\x17\x21\x73\x14\x9d\x62\xb1\xfd\xde\xf1\xc1\xc0\x76\xf5\xf6\x64\xd0\x81\x9f\xf9\x35\x4e\x51\xac\xc3\x8c\x87\x06\x10\xb4\xc6\x04\x7c\x72\x43\xfd\xd0\xd7\xba\x6f\xf6\x52\x76\x9c\x19\x1d\x49\xac\xa1\x71\x87\x8c\xd9\x0f\x13\xff\xaa\x9a\x95\x85\xcf\x09\xd9\x3d\x38\x6d\x2f\xe3\x69\x03\x72\x2d\x37\xe4\x95\xdc\xb0\x35\x6f\x2b\xa4\x29\x0f\x5a\x93\xc0\x40\x2a\x32\xf4\xb4\x31\x9b\x4d\xd3\xfc\x1c\x7d\x0e\x79\xfe\xf6\xf5\x2e\x11\xeb\xe7\x60\x79\x67\x9b\xff\x2b\xd8\xf8\xbd\x5a\x8d\x64\xa7\x87\x32\xa9\x08\x8b\x77\x13\x89\xed\xc8\x1e\x8e\x53\x44\x28\x69\xaf\x6b\xc5\x6e\x29\xb4\x47\x2f\x51\xcb\xfd\xb7\xad\xc7\x7f\x0a\xa6\x18\xa4\xd4\x37\xf3\x23\x93\x81\x1a\xa2\xcc\xfd\x50\xa2\x80\x09\x91\x10\xa0\xf0\xa9\x94\xd1\xee\x97\x44\xfb\x69\x42\x6b\x1a\x74\x33\xae\x70\xcc\x15\xc6\x5f\xd6\x8c\xd6\x9b\xf4\x3c\x9b\x76\xf6\xe8\x00\x12\x95\x99\xd6\xf5\xc8\x15\xc5\x0b\xc6\xed\x6a\xf0\xa8\x1a\x7b\x2a\x96\xf7\x1c\xb4\x40\x11\xf1\x1a\x39\x4a\xfb\x76\xc8\xd6\x4a\x4f\x58\x99\x12\x4a\x2c\x56\x74\xc4\x2a\xcb\x14\xfb\x30\x34\x57\xa3\x8b\xf6\xc7\xcb\x28\x09\xff\xe5\xe3\x59\x2e\xc7\x98\x28\x15\x68\xee\x79\x6d\xeb\xdf\x83\x52\xa8\x04\x51\xd7\x84\x37\xdb\xed\x7c\x4e\x02\xed\xc2\xe1\xb5\x89\x0d\xfb\x6b\xea\xe8\xf6\xed\x27\xdd\x1c\x1f\x13\xc2\x43\x7b\xff\xed\xf1\xf1\xe1\xfe\xd9\xdb\x93\x8d\x37\xaf\xde\x9c\x6d\xe4\x48\xa2\xc0\x1d\xda\xa7\x99\xf7\x0a\xc5\x6f\x1c\x92\xc0\xb8\x4a\x4f\x68\xd9\x69\x64\xde\x40\xf4\x5c\x7b\x47\xb9\x5a\x56\x88\xec\xa1\xbd\x49\x3f\x1e\x51\xff\xea\x95\x23\x0e\xc2\xd7\x4f\x36\xc9\x87\x9b\xa3\x7f\x5e\xbd\x38\xbb\x3a\x3e\x21\xed\xd8\x4a\x47\xd6\x2d\xdf\x6b\x6f\x6a\x60\xa9\xad\x3b\xb2\xd4\xd6\x42\x43\x6d\x55\xd9\xe9\x25\xa1\x9e\x3d\x2c\x11\x10\x21\x31\x07\xc6\x7d\xf8\xc0\xcc\x17\x6e\x15\xb7\x75\xce\x83\xc2\xfb\x39\xed\x7b\xaf\x48\x40\xcf\x93\x6d\x0f\x69\x3f\x1f\xdb\x87\x52\xe7\x7d\x58\xd4\x57\x7a\x76\xce\xe1\x5e\xe8\x33\x8b\x5b\xba\x8b\x68\x9a\xc1\x1a\x75\xd7\x3a\x70\x5a\x45\x67\x96\xa4\x7e\x54\x07\x5e\x8f\xc2\xc2\x7c\x11\x39\xbe\x6a\x0b\x48\x1d\x78\x6f\x91\xc4\x8e\x97\xce\xbc\xe0\x39\x6c\x66\xad\x54\x1c\x7d\xef\xe3\xc1\xab\x70\x36\x3c\x12\x87\xec\x46\xec\xa1\xbf\xbb\xb5\x33\xbe\xba\xbc\xa4\x07\xd3\x78\xf4\x8b\x07\x55\xab\x46\x7c\xa7\xb7\x73\x27\x23\xbe\xbb\x68\xc0\x77\x2b\xc6\xbb\xc9\x1b\x61\x12\x65\x2a\x9f\x55\xa8\x52\x69\xf7\xfe\x14\x8a\x7d\xf2\x24\xf7\xb4\x08\x75\x9f\xaf\x6d\xd2\x5f\xb7\xdd\xf0\xb7\xcf\x47\xd3\xe9\xe3\xcf\xd3\xd7\xde\xec\xcb\xa6\xff\xea\x64\xfb\x97\xd9\xd5\xf1\x9a\x41\x82\x11\x0f\x99\x3b\x67\xae\x7f\x7e\xbb\x3b\xde\x1a\x3f\xf9\xf9\xcc\xfd\xf0\xeb\x07\xb2\x75\x29\x7f\x7e\xba\x75\xf9\xfe\x60\x7b\x16\x1b\xa8\x78\x76\xbb\x12\x09\x37\xef\x06\x08\x37\x17\xe2\xe0\x66\x85\x75\xd2\x09\x3c\x45\x41\x47\x33\x0d\xf6\xf6\x44\x78\x1f\x4e\xa2\x35\x0e\x48\xa8\x26\x5c\xd0\x2f\xf1\x41\x94\x4b\x64\xcd\xec\xb3\xfd\x61\x72\x38\xb9\xf6\x3f\xbd\x08\x3e\xbe\x1b\x1d\x6d\x79\xc7\x78\x19\xb8\x3b\xff\x3c\x88\xed\xf3\xec\x98\xf8\xb8\xcf\xd9\xc8\xa3\x8e\x6a\x60\xab\xed\x27\x77\x62\xab\x2c\x9b\x6a\x5b\x65\x29\x4a\x9e\x94\x9c\xfd\x36\xf0\x43\x25\x10\x4f\x20\x71\x67\xe6\x58\x59\xad\x39\x9e\x5c\x7e\xee\x7d\xa0\x87\x97\x5f\x2e\x3f\xed\x7f\xf9\xf8\x0e\x8f\xb6\xf8\x67\x9c\xb8\xdb\x87\x91\x35\xca\x67\xb1\xab\x2c\xf0\xec\x4e\x0c\xf0\x6c\x91\xfe\xcf\x2a\x5d\x25\x7d\xc4\x0a\xf3\x9d\x96\x46\x1e\x0f\x5f\x4f\x5f\x3e\xbb\x78\xf3\xfe\xf3\x93\xcf\xe3\xc9\xe8\xcd\xb3\xf1\xab\x13\xf9\xf3\xf4\xf0\x63\xa2\x6b\x63\xe8\xb8\x37\x8d\x33\x31\x5b\xdb\x86\x8f\xe6\x01\xa7\x28\x98\x76\x24\xaa\x3e\xbc\xdd\x7f\xb3\x71\xf8\x69\xe3\x99\x0e\x03\xe3\xb5\xcb\x3e\x06\x95\xd2\xe0\x8d\xda\x88\x56\x3d\x12\xd0\x8d\x4d\x7a\xd3\xdb\xf6\x98\xeb\xf9\x57\xbd\xab\x91\xb3\x2b\xa9\x22\x8f\xa5\x77\x31\x7d\x9a\xdd\xe4\x18\xf1\xec\xe7\x32\xfa\xb0\x39\x7e\xec\x3e\x7d\x7a\xd5\xf3\x84\xe3\x4e\x77\xc6\xbb\xc4\x1b\xee\x4a\x6f\x34\x66\x17\xdb\xee\x64\x28\x2f\xfe\xf6\x5f\x7f\x3f\xfc\x74\x76\xb2\x07\xff\x63\x15\xee\x18\x23\x3d\xa7\x2e\x32\xa5\x87\x2c\x7b\x5a\x87\x4a\x58\xdb\xe9\xed\xac\xad\x1b\x53\x98\x9f\xfb\xaf\x3f\x9c\x9e\x1d\x9e\x9c\x5a\x5b\xe8\x9b\x26\x12\x4d\xc6\x15\x52\x46\x86\x7e\x73\xfc\x98\x8b\xc7\xbd\x29\x0d\x7b\xbb\x1c\xf5\xa8\x4d\xc4\xa5\xb3\xf5\xc4\x1d\x8f\xd4\xc5\x26\x71\xd6\xb2\xd6\x8b\x1f\xe7\x5f\x5b\xa4\x44\x06\x75\xff\x31\x0f\x56\xce\xe4\x47\x31\x7b\xc2\xe4\xd5\x70\x4b\x1e\xfb\x2f\x2f\x1e\x0f\x3f\x05\x07\xbb\xfb\xa4\xdd\xfa\x4f\x00\x00\x00\xff\xff\x5e\xb2\xd4\xbb\xfe\x7f\x00\x00")

func connector_mgmtYamlBytes() ([]byte, error) {
	return bindataRead(
		_connector_mgmtYaml,
		"connector_mgmt.yaml",
	)
}

func connector_mgmtYaml() (*asset, error) {
	bytes, err := connector_mgmtYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "connector_mgmt.yaml", size: 32766, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"connector_mgmt.yaml": connector_mgmtYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"connector_mgmt.yaml": &bintree{connector_mgmtYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
