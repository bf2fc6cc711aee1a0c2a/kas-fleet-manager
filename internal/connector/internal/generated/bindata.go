// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package generated generated by go-bindata.// sources:
// .generate/openapi/connector_mgmt.yaml
package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _connector_mgmtYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7d\x7d\x73\xdb\x38\x92\xf7\xff\xfa\x14\xfd\x28\xcf\x96\x77\xef\x6c\x49\x7e\x49\x9c\xa8\x2e\x53\xe5\xd8\x4a\xc6\x93\xc4\x49\x6c\x67\x92\xec\xd6\x94\x05\x91\x2d\x09\x16\x09\xd0\x00\x28\x5b\xd9\xdb\xef\x7e\x05\x80\x14\xdf\x25\xca\xf1\xc4\x9e\x44\xae\x4a\x55\x44\x36\x1a\xdd\x8d\xc6\x0f\x8d\x6e\x90\xe4\x01\x32\x12\xd0\x2e\xec\xb6\x3a\xad\x0e\x3c\x02\x86\xe8\x82\x1a\x53\x09\x44\xc2\x90\x0a\xa9\xc0\xa3\x0c\x41\x71\x20\x9e\xc7\xaf\x41\x72\x1f\xe1\xf8\xa8\x27\xf5\xa5\x09\xe3\xd7\x96\x5a\x37\x60\x10\xb1\x03\x97\x3b\xa1\x8f\x4c\xb5\x1a\x8f\xe0\xc0\xf3\x00\x99\x1b\x70\xca\x94\x04\x17\x87\x94\xa1\x0b\x63\x14\x08\xd7\xd4\xf3\x60\x80\xe0\x52\xe9\xf0\x29\x0a\x32\xf0\x10\x06\x33\xdd\x13\x84\x12\x85\x6c\xc1\xf1\x10\x94\xa1\xd5\x1d\x44\xd2\x71\x98\x20\x06\x56\x92\x84\x73\x33\x10\x74\x4a\x14\x36\x37\x81\xb8\x5a\x07\xf4\x35\xa9\x1a\x23\x34\x27\x44\x6e\x0d\x3d\x44\xb5\xe5\x13\x46\x46\x28\xb6\x22\xe2\xd6\x8c\xf8\x5e\x13\x86\xd4\xc3\x06\x65\x43\xde\x6d\x00\x28\xaa\x3c\xec\xc2\x21\x67\x0c\x1d\xc5\x05\x9c\xa1\x98\x52\x07\xe1\xa5\xe6\x00\x6f\x2d\x87\x06\xc0\x14\x85\xa4\x9c\x75\xa1\xd3\xea\xb4\x76\x1b\x00\x2e\x4a\x47\xd0\x40\x99\x8b\x4b\xda\x5b\x85\x4e\x51\x2a\x38\x78\x7f\xac\x25\xb5\xa2\x81\x13\xb7\x93\xad\x86\x44\xa1\x3b\xd1\x52\x6d\x41\x28\xbc\x2e\x8c\x95\x0a\x64\xb7\xdd\x26\x01\x6d\x69\x6b\xcb\x31\x1d\xaa\x96\xc3\xfd\x06\x40\x4e\x80\xb7\x84\x32\xf8\x7b\x20\xb8\x1b\x3a\xfa\xca\x3f\xc0\xb2\x2b\x67\x26\x15\x19\xe1\x32\x96\x67\x8a\x8c\x28\x1b\x95\x32\xea\xb6\xdb\x1e\x77\x88\x37\xe6\x52\x75\x9f\x76\x3a\x9d\x62\xf3\xf9\xfd\xa4\x65\xbb\x48\xe5\x84\x42\x20\x53\xe0\x72\x9f\x50\xd6\x50\x64\x14\x19\x80\x11\x3f\x33\x2e\xe7\xb3\x00\x65\xb1\x7d\xb3\x59\x46\x5d\x9b\x10\x0e\xbd\x50\x2a\xac\x68\xd0\x08\x88\x1a\x1b\x79\x1e\xe9\x7f\x70\x3e\x46\x89\x40\x04\x1a\x47\x9b\x8f\x1d\x08\xf4\x88\x42\x57\x8f\xad\x8c\x88\x9b\xda\xce\xed\x39\xc9\x85\x3f\xf2\x55\x7b\xba\xdd\x9e\x90\xe1\x84\x5c\x24\xd7\x95\x56\xab\xfd\xef\xec\x85\x0b\xea\xfe\xa7\xd9\x35\x22\x05\x44\x10\x1f\x55\xe4\x17\xfa\x2f\xd6\xa1\xd0\x24\xba\x9f\x53\xe3\x7c\x8c\x40\x5d\xe0\xc3\x9c\xcc\xba\xd1\xbc\x85\x74\xc6\xe8\x93\xee\xfc\x37\x98\xdb\x5d\x90\x4a\x50\x36\x9a\x5f\xa6\xac\x0b\xda\x24\xf3\x0b\x02\xaf\x42\x2a\xd0\xed\x82\x12\xa1\x65\x37\x42\x15\xf3\x89\x07\x33\x96\xbb\x6c\x30\x35\x0f\x19\x70\x26\x31\x45\xda\xdc\xe9\x74\x9a\x69\x69\x1c\xce\x14\x32\x95\xbe\x04\x40\x82\xc0\xa3\x0e\xd1\x6a\xb6\x2f\x25\x67\xd9\xbb\x65\x4a\xd9\xbf\xff\x2f\x70\xd8\x85\xe6\xa3\xb6\xc3\xfd\x80\x33\x64\x4a\xb6\x2d\xad\x6c\xcf\x45\xd4\x12\x36\x53\x4d\x0b\x36\xcd\x5a\x12\x7c\xa2\x9c\xb1\x9e\x2d\xda\xca\xda\x2c\x68\x1c\x3f\xd2\x67\xaf\xb3\x7d\x3f\xfa\xf4\x84\xe0\xa2\x99\x6b\x82\x37\xc4\x0f\xbc\xb4\xc1\xe3\xbf\xbd\xce\x76\xcf\xde\x2c\xde\x2b\xef\x28\xe6\xd5\x4e\x9a\x56\x9a\xed\x20\x54\x63\x50\x7c\x82\x4c\xe3\x21\x65\x53\xe2\xa5\xbc\xb6\xb9\xd7\xd9\xfb\x8b\x18\x69\xef\xf6\x46\xda\x5b\x66\xa4\x13\x9e\xf8\x52\xce\xc7\xf0\x86\x4a\x25\x13\x83\x3d\xbe\xaf\x59\xb2\xa2\xc1\x1e\x77\x3a\xb7\x35\x58\xd2\xb4\xd2\x60\x1f\x19\xde\x04\xe8\x68\xfc\x45\x2d\x17\x70\xc7\x2c\x2a\xb1\x67\x49\x74\x42\x41\xd5\x2c\x8d\x44\x2f\x90\x08\x14\x5d\xf8\x17\xfc\x11\x5d\xe5\x01\x0a\x63\xa4\x63\xb7\xab\x31\x2c\x03\x04\x2f\x66\xc7\x47\x31\xb7\xd0\xf7\x89\x98\x75\xe1\x15\x2a\x20\xf9\x11\x1a\xcc\x80\xba\x8d\x06\xc0\x2a\xe8\xdf\xbd\x1d\x6e\xde\x42\x2f\x8f\xca\xac\x62\x32\xaf\xd5\x29\xaa\x50\x30\x1d\xac\x68\x5a\xbd\x6a\x64\x35\x8c\x1b\x14\x97\x25\xdd\x7d\xd9\x50\x26\x94\xed\x80\x8c\x52\xc3\xb8\x94\x5c\xd2\xaf\xab\x90\x73\xe1\xa2\x78\x31\x5b\xa5\x03\x24\xc2\x19\x37\x1f\xfc\x3a\xf4\x86\x4a\x55\x0d\xaa\x4b\x46\x6a\xbd\xfa\xd4\x5b\x7d\xd6\x60\xba\x0c\x4c\xeb\x61\x5a\x24\x72\xa0\x37\x06\xcb\xf0\x4c\x96\x81\x94\x23\x90\x28\x9c\xd3\x2c\x04\x1c\x1d\x90\x5e\x85\x28\x66\x29\x7d\x6c\x74\x4c\xe4\x8c\x39\x55\x5a\xbe\x47\x31\xe4\xc2\x37\xb1\x1a\x31\xdb\x25\xa0\x4c\x6f\x69\x4d\xab\xb1\xe0\x8c\x87\x52\x6f\xd1\x18\x8a\xc6\xe2\xd1\xb5\x71\xf2\x80\x73\x0f\x09\x4b\xdd\x29\x89\x8c\x21\x8e\x0b\x5f\x70\x37\x85\xda\x15\xfb\x48\x97\x28\x32\xa7\x29\x71\xc6\xc5\xae\x58\xee\x88\xb5\x10\xa7\xb9\x28\xba\xaf\x82\xc9\x9d\x7b\x86\xc9\xea\x59\xef\x38\x18\x28\xcc\x84\x99\x7f\x8d\x89\xbe\xd7\xe9\x1c\xea\xa9\x40\x39\xbb\x3d\x2a\xe6\x59\x54\xda\xe9\x77\x8d\x86\x86\xd2\x4e\x7c\x99\x0f\xa3\xd6\xeb\xc8\x7a\x17\x53\x7f\x17\x73\x9e\xec\x82\xd1\xd5\x98\xc1\x43\xe1\x20\xb8\x1c\x25\xdb\x50\x76\x27\xb3\x5e\x7b\x73\x8e\xc5\x20\xac\x5a\x7e\xed\xaa\x18\xe7\x17\x9c\xdc\xe2\x58\x6f\x2b\x30\x0f\xf2\x0d\x26\xa0\xc9\xb0\x5e\xa7\x78\xd5\xde\x86\xdc\xe7\x26\xa0\x7a\xc5\xb7\x71\x48\x6a\x2a\x96\xb8\xa4\xa1\x01\xc7\xe6\xfc\x20\x43\x5b\xbd\xb8\x67\x92\x60\x0f\x73\x97\xb0\xea\x0e\x61\xbd\x39\x58\x6f\x0e\x1e\x44\xa6\x25\x93\x91\xb8\x55\x36\xa2\x66\xa2\x5d\xb6\xff\xbd\x38\xa9\xbe\x04\x87\xa8\xdb\x9c\x93\x16\x31\xa8\x02\x81\xea\xe3\x4f\x8d\x04\xfc\x2a\xc8\xfc\x30\x51\xaa\x66\x3e\x7d\x9d\x4a\x5f\x07\xa1\x75\x8c\xb4\x4e\xa5\xaf\x64\xb0\xfb\x4f\xa5\xe7\xe1\x3d\x97\x42\x6f\x58\x79\x3c\x54\xf8\x8d\x40\xf7\x50\x9c\x3f\x63\xdc\x23\xa3\xd9\x7a\x3b\xfd\xc3\x22\x99\x1d\xe0\x6f\xc0\xb3\x0c\x83\x45\xa8\x66\xc3\x88\x68\x69\x84\x6b\xaa\xc6\x20\x03\x74\xe8\x90\xa2\x0b\xc7\x47\x7f\x65\x74\xfb\x36\x23\xe6\x19\x7c\x4f\xa4\xb3\xc8\x55\x09\x76\x56\xae\x02\xde\x05\x7a\x81\xfa\x46\xb8\x7b\xb0\xc9\xd7\x75\x5c\xf7\xf3\xa2\xe1\x3a\xae\xfb\xa1\xe3\x3a\x83\x5b\x95\x60\x67\xee\x16\xb0\xae\x4e\x01\xec\x88\x28\x02\x8a\x47\x1c\xb2\x47\xd6\xf4\x42\xd7\x58\x30\x92\xdf\xa1\x24\x96\xed\xc4\x47\x31\xc2\x2d\x23\xea\x7f\x7f\x97\x0e\x75\x27\x2b\xf6\x97\x4b\x05\xfe\x76\xf6\xee\x04\xde\x6b\x0e\x9b\x70\xfa\xf2\x10\x9e\x3c\xeb\xec\xc0\xd6\xfc\x70\xa8\xe2\xdc\x93\x2d\x8a\x6a\xd8\xe2\x62\xd4\x1e\x2b\xdf\x6b\x8b\xa1\xa3\xa9\x72\x7c\x6d\x7e\x82\x0f\x2e\xd1\x49\x50\x3c\x57\x31\x34\x87\x26\x7b\xf3\x43\xbb\x43\xb3\x08\x30\x7b\xaa\x34\x19\xd6\x28\x1d\x22\x81\x30\x37\x75\x99\x8c\x90\x29\x88\xca\xb8\x35\xcf\xd3\xc4\xac\xa2\x34\x4f\x9d\x1a\x74\xf6\x04\xe8\xe2\x5a\x74\x44\x1a\x51\xfe\x74\x25\xe9\x38\x6f\x75\x6f\xa5\xe9\xc8\xfe\x7f\xc9\x0a\x75\x41\xf6\x75\xa1\x7a\x5d\xa8\x5e\xc7\x92\x75\x8c\xb4\x2e\x54\x3f\xac\x70\xf2\x16\x85\xea\x78\xed\x58\x29\xe0\x5c\x52\xb0\xce\xf0\xac\x75\x7c\x36\xb7\xd4\x7f\xef\xfa\xf5\xc3\xac\xca\x44\x46\x59\xf9\x90\xa9\x93\x35\xe6\x1a\x76\xd7\xa5\xe4\x87\x53\x4a\xce\xcd\xf4\x5a\x15\xe5\x94\x43\xaf\xb8\xdd\x48\x3f\xbf\x15\x5d\xbb\xa0\xee\x7f\xa2\x5d\x48\x8d\x27\xb8\x92\x46\xe5\x31\x78\xd5\x43\x5c\x59\x54\xfd\xfe\xcf\x71\xe5\xcc\xfc\xa0\x01\xae\x66\x96\x32\xde\xe4\xac\xb3\x95\xeb\x08\xb3\x8e\x91\x6e\x99\xad\x8c\xdd\x6c\x9d\xb5\xbc\xaf\x6a\x74\x36\x99\x53\xf9\x5c\x57\x0c\xb1\x16\xcb\xc3\xbb\x02\xc5\xec\xcc\xc8\x26\x5c\x22\xd7\x90\x8a\xa8\xd0\x3c\x6c\x1f\x06\x2e\x59\x97\x8e\x0b\x86\x5a\xc3\xcf\x37\xc3\xcf\x1a\x79\xca\x6c\xf6\x27\x20\x8f\x9d\xc2\x79\xf0\x79\x31\x3b\x76\xf3\x00\x14\xba\x01\xc9\x16\x8a\x73\x61\x5e\xfd\x22\x4a\x84\x1b\x0f\xa1\x84\xb2\x2c\x75\xdb\x80\xfa\x87\x7f\x6e\x83\xb0\xeb\x43\x40\x6b\x24\xff\xb1\x0e\x01\xcd\x73\x95\xeb\xf3\x3f\x0f\xf1\xfc\x4f\x45\x78\x59\x3c\x06\x94\x8e\x30\xef\x26\xef\xd0\x26\xae\xcb\xd9\x45\x3e\xf1\xb0\x4e\x44\xdc\xcf\x24\x38\xd0\xa3\xf1\x3e\x36\xfe\xc2\x3c\xab\x36\x6f\x32\x4c\xa0\xc6\x44\x81\x1c\xf3\xd0\x73\x61\x80\x10\x4a\xfb\x42\x2c\x87\xb3\x21\x1d\x85\xd1\x6b\x88\xec\x9b\xa4\x32\x95\x73\xdd\x21\x70\x66\xc7\xc8\x5a\xa6\xb5\x5e\x72\x7e\xd4\x25\x67\x9d\xbb\xf8\x29\x76\x10\x25\xb9\x8b\x2c\xb2\x14\x92\xdd\x15\xa9\x8c\x0d\x19\x21\x44\x82\x34\x8d\x46\xa2\xa7\x16\x29\xb2\xa9\x95\x2e\xf3\x2e\x92\x58\xe0\x8c\xb6\xbf\x6c\xcd\xd5\x38\xc5\x40\xa0\xd4\x7c\x8a\x6f\xc7\x91\x61\x10\x70\xa1\x6d\x32\x98\x19\x6c\x3a\x78\x7f\x9c\xda\xd3\x18\xdc\x4f\xd9\x43\xaf\x4d\xa9\x9f\xd1\x0b\xf8\x52\x57\xb4\xe7\x5c\x58\x51\xa3\xab\xc4\xf3\xde\x0d\xd3\x3c\x16\x39\xcc\x3b\x73\x76\xe9\x14\x87\x28\x90\x39\x99\xa2\x5e\xe9\xe1\x26\x80\x40\xe8\x11\x51\x34\xef\x4f\x66\x15\xcd\x79\x51\x76\x1e\x11\x1f\xcb\x5f\xc1\xd6\xca\x35\x2b\x5d\x26\xf5\x5f\xfc\xfe\xc1\x45\xdd\xfc\x6e\x69\xbe\xb1\x27\x67\x4c\x18\x43\xaf\x30\x67\xb2\x49\xaa\x88\x68\x95\xbe\x88\x10\x64\x96\xbb\x43\x15\xfa\x25\xb3\xb3\x52\xb8\xb4\x10\x8b\xe4\x3b\x48\xff\x2c\x08\x59\xdb\x16\xd4\xe1\xec\x62\xac\x9d\x68\x51\x67\x1f\x4f\xdf\x98\x77\x66\x32\x43\x7f\xfb\xde\x3c\x32\x58\x66\xf7\x37\x86\x24\x09\x05\x88\xc2\x11\x17\xf4\x2b\x96\x3e\x18\x7e\xf7\xf6\xd7\x7f\xc8\x42\x5f\xc3\x94\xa4\x6c\xb2\x09\xd1\x2e\xe4\x8f\x0c\x59\x6a\x6a\x2e\x54\x27\x85\x1c\xf1\xdf\x81\x69\x1c\x41\x90\x0d\x81\x1c\xc2\xd2\xf1\xcf\xd4\x1e\x01\xca\x44\xd1\xb2\xc0\x27\x09\x6a\xf5\xde\x08\x86\x14\x3d\xb7\x7c\x24\xec\x3c\x87\x47\xa0\xb8\xcb\xbb\x20\x30\xf0\x48\xbc\xaf\x1a\xa0\x8a\x97\xba\x22\x18\xea\x58\xae\x7b\x1b\xe8\xc9\x06\x81\x2b\xe3\x4d\xe9\xa0\xad\x3c\xc6\x2b\xbc\x07\x31\xab\xfa\x4f\xa0\x76\x5e\xe5\xd2\x65\xef\x20\x85\x7a\x63\xee\xb9\x32\x9e\x83\x26\x3a\xb7\x67\xd4\x6c\xb8\xae\x89\x80\xc0\x6b\xf3\xdc\x8e\xe2\x01\x75\x2c\x5e\x70\x35\x46\x01\x72\x26\x15\xfa\xad\xfb\x5d\xc3\x7c\x54\xc4\x25\xaa\x30\x5d\x2b\xd8\x2c\x62\xa5\xff\xe2\x67\xa1\xcb\x82\xab\x85\xe0\xc2\xaf\x19\x8a\x95\x5b\x95\xad\xc0\x4b\x1b\xd9\xd3\xbd\xee\x05\x51\x65\x4d\x87\x5c\xf8\x44\x75\x41\x23\xcd\x96\xa2\xa9\x58\xa4\x26\xfb\x28\xfb\xfa\x67\xb1\x8f\xf3\x3f\x17\x15\x91\x41\xc2\x80\x32\x85\x23\xcc\xaf\x09\x69\x21\x28\x53\x4f\xf6\x72\xeb\x6c\xe0\xf1\x99\x8f\x4c\x5d\x78\xdc\x46\xea\x2b\xe5\x7d\x6d\xa8\x79\x4e\xc4\x08\x55\x36\x28\x37\x9e\xb1\x0a\x2f\x33\x6b\xa2\x99\x48\x39\x3b\x43\xa5\x28\x1b\xc9\x2c\xd7\xc2\xdb\x70\xcb\xfd\xb8\x2c\xdc\xc9\xac\x13\xb5\xdd\x3f\x8a\x92\x6a\x77\xe3\xa2\xd4\x01\xee\x85\x54\x44\x15\x5c\xb5\xb2\x95\xad\x01\xd6\x20\xbf\xd9\xf2\x28\x9b\xa4\x28\xb3\x06\x49\x73\xa8\xfb\xaa\x4b\xa8\x38\x22\x57\x6e\x6e\xd8\x28\x5c\xdb\xa8\xda\x1d\xfd\xb2\x80\x97\x96\x48\x96\x84\x94\x7a\xcf\x10\xca\xe8\x40\x46\xa6\xbd\xa6\xed\x17\x3a\xef\x27\xb2\x03\x65\xf3\x87\x25\x15\xcf\xb4\xed\xbf\xea\x9d\xaf\xf4\xb2\xce\xb2\x57\x35\xf7\x5b\xd1\x6a\x91\x76\xfa\xf9\x8a\x41\xb5\xe2\x3e\x65\x24\xb5\x8c\xcc\xb1\x73\x76\x62\xdf\x1c\x41\x59\x92\x7b\xf0\x49\x10\x50\x36\xca\x94\x65\xf4\x7e\x6d\x61\x7e\xa9\x72\xc2\x39\x1e\x0f\xdd\x8b\x40\xf0\x29\x75\xf5\xee\xb2\x6a\xbe\xf2\xd0\x7d\x1f\x11\x95\xf2\xe2\x0c\xeb\x2f\x4b\x8b\x44\x5a\xdc\x72\x91\x20\x86\x45\x91\x75\xe9\xda\xdc\xb4\xf7\x24\x5c\x73\x31\xf1\x38\x71\x65\x14\xa1\xdb\xad\xaf\x93\x2d\x47\x95\xcc\xf2\xb2\x1d\x69\x6a\x98\xca\xd6\x3e\x7d\x7b\x69\xca\x33\xc9\xb0\x56\x92\x46\xce\x54\x65\x88\x55\xf4\xb5\xc3\x0f\xf1\xf0\xdf\x8b\xbe\x19\xff\x5b\x46\x2e\x70\x94\x5b\x6a\x4a\xc9\xfc\xd0\x53\xf4\x82\x7c\x2d\x12\xc6\xcf\xbd\x24\xce\x92\x49\xbd\x96\x1b\x2f\x39\xdf\x9a\xcf\x8c\x64\x2d\x96\x0e\x33\x73\xe1\x65\xfd\x0c\x70\xb3\x4c\xb6\x2a\xb9\x72\xf2\x2c\x18\xc0\xb2\x11\x5a\xe0\x64\xf1\xc5\x29\xf1\x42\x5c\xe2\x8a\xb9\xb4\x53\xb9\xac\x67\x76\xc3\x36\xd4\x78\x9d\x1c\x99\x4b\xca\xd0\x40\xcc\x83\x43\x10\x78\x84\x61\x2a\x17\x65\x97\xb8\xe6\x0f\x15\xfd\xae\x83\xd8\x1a\xec\x6b\xc4\x36\xa5\xee\xf7\x13\x6c\x3f\xe7\xa7\x25\x4c\xf3\x8a\x00\xb8\xbb\x60\xe2\x0f\x38\x57\x52\x09\x12\x5c\xd8\xaf\x77\xd4\x80\x69\xaa\x63\xfd\x1a\x80\x11\x51\x4a\x74\x04\xaa\xc5\xc0\x91\x9b\x9f\xdd\x3b\x07\xaf\x5a\x2b\x50\x3e\x7d\x57\x94\x33\xed\x51\x4b\xd6\x41\xfd\x33\x20\xa3\x74\x62\x5a\xd2\xaf\xe9\x9f\x8a\x2b\xe2\xa5\x7e\x1b\x3f\x58\x4d\xf3\x5a\x6a\x69\x29\x8a\x44\xf9\xbd\x9e\x16\x6e\x39\x95\x91\xb9\x9a\xcc\xdc\x30\xf5\x95\x5b\xcd\xbb\xbb\x83\x69\x87\xbb\xf5\xf7\x4e\x02\x49\x49\x69\xa9\x92\x7c\xbe\x2d\x5a\xb6\x79\x6c\x14\xb7\x45\x49\x0b\x5b\x50\x9f\x57\x12\x0b\xd5\xdd\xe3\x23\x1d\x65\x08\x74\xb8\x98\xd7\x82\x72\x69\xd2\x12\x09\x73\x75\xf2\x92\x2a\x79\xda\x1b\xac\x0c\x29\x2f\xcd\x3f\x93\x9c\x7d\xf2\x98\x8c\x10\x28\x73\xf1\xa6\xc0\x7d\x48\x3c\x89\xf5\xa5\x2c\x16\xdb\xf2\x3e\x6a\x83\x0d\x68\x6e\x5b\x1f\x48\x3b\xa7\x15\x3a\x35\x97\x16\x0a\x7d\x12\xfa\x03\x14\xda\x94\x66\x7a\xe9\x1d\x1e\x12\x67\x9c\x56\xfa\x0e\xd5\xc8\x4f\xa2\xb9\x1a\x9d\x8e\x55\x24\xfa\xf6\x40\x69\x60\xf4\xbf\x49\x8a\xfb\x2c\x3a\xa4\x63\xf7\xb7\xa6\x91\xde\xd6\x3a\x82\x2a\x14\x94\xb4\x8c\x87\xc8\x19\x53\xe4\xc6\x16\x11\xa8\x4c\xef\x62\x65\x4a\x20\x9f\x7a\x44\xc4\x9f\xbc\x4a\x37\x41\xe8\xc7\x8c\xfb\xe0\x78\x24\x94\xa6\xf2\x44\x18\x9c\x7d\x78\x63\xd6\x5c\xb4\x1f\xeb\x8a\x79\xf5\xb4\xdd\x8c\xa1\xe3\x3c\xbb\x69\x6f\xab\x74\x84\xcd\xe6\x6c\x33\x79\x82\xbe\x4d\xa8\xcb\x84\xcf\x4b\x2e\x62\xd3\x6d\x6a\xc1\x84\x79\xd4\xc6\x7c\xde\xeb\x30\xfb\xd6\xc6\x74\x07\x6a\x8c\x54\x98\xc1\xdf\x04\x2d\xaa\xee\x69\xc8\x3d\x8f\x5f\x9b\x4f\x4f\x19\xc5\xba\x8d\x79\x27\xfd\x7e\x5f\x5e\x25\xe8\xaa\xdb\x01\x91\x4e\xfa\x7e\x42\x7c\xbe\xba\x10\x70\x41\x98\x7b\x11\x17\xdb\xbe\x45\xa4\xcd\x98\x49\xb5\x7c\xf6\x73\x67\x99\x11\x66\x1b\x2a\xde\xac\xb9\x9b\xc0\x05\x50\x4b\x63\x3c\x0e\xa8\x04\xf4\x03\x35\xdb\xd4\xd7\x92\x4a\xa8\x0d\xb7\x65\xe8\x29\x69\x3e\x4e\x95\xd2\x4c\x4b\xd3\x9a\xfb\x75\xe0\x69\xfc\x4c\x3f\x2b\x5f\xf4\xf5\x9c\x2b\xa7\xdd\x3d\x56\xad\x59\x31\x43\xed\x14\x8e\x18\x7c\xeb\x2c\x94\x6a\xe6\x61\xd7\x44\x98\x16\x2b\xcc\xc7\x3a\xca\x67\x58\x32\xc1\x0c\x51\x32\xa1\x52\xbe\xb0\x78\x66\x2d\x99\x51\xd7\x63\x14\x98\x99\x4e\x49\x97\x99\x59\x05\x07\xda\x4f\xd0\x8d\x66\x87\xc6\x25\xc3\xce\xca\xa5\x07\xa7\xaf\xad\xd4\xdf\x84\x7e\x4a\x05\xfd\x33\xf2\x16\xfd\x5f\x53\x06\xec\x6f\x9a\xf7\x61\xf4\xa3\x3c\x63\x3f\x61\x6d\x17\x2a\x2e\xec\x60\xf7\xff\xe7\x17\xdd\xe6\x79\xdf\xb8\x4b\xff\xcd\xf1\xeb\x5e\x3f\x99\x94\x71\x1b\x87\xb3\xcb\x90\x39\x8a\x4e\x31\xdf\xfe\xe0\xe4\xa8\x6f\xbb\x7a\x77\xda\x6f\xc1\xaf\xfc\x1a\xa7\x28\x36\x61\xc6\x43\x03\x08\x5a\x63\x02\x3e\xb9\xa1\x7e\xe8\x6b\xdd\xb7\x3b\x09\x3b\xce\x8c\x8e\x24\xd6\xd0\xb8\x43\xca\xec\xbd\xb9\x7f\x95\xcd\xca\xdc\x97\x6d\x6c\xc5\x4d\xdb\xcb\x78\x5a\x9f\x5c\xcb\x2d\x79\x25\xb7\x6c\x9e\xdb\x0a\x69\x12\x83\xd6\x24\xd0\x97\x8a\x0c\x3c\x6d\xcc\x7a\xd3\x34\x3b\x47\x9f\x43\x96\xbf\x7d\xfd\x48\xc4\xfa\x39\x58\xde\xe9\xe6\xff\x0a\xb6\xfe\x28\x57\xc3\xd6\x75\x28\x93\x8a\xb0\xb8\x70\x48\x6c\x2f\xf6\x08\x97\x22\x42\x49\x7b\x5d\x6b\x75\x4b\x89\x3d\x3a\x41\x2d\xf4\xdf\x76\x1e\xff\x29\x80\x62\x60\x52\xdf\xcc\x0e\x4b\x0a\x67\x88\x32\xf7\x43\x89\x02\xc6\x44\x42\x80\xc2\xa7\x52\x46\x85\x2e\x89\xf6\xe3\x78\xd6\x2e\xe8\xa6\xfc\xe0\x84\x2b\x8c\xbf\xef\x18\x2d\x36\xc9\xa9\x2b\xed\xe9\xd1\x31\x19\x2a\x53\xad\xab\x61\x2b\x0a\x16\x8c\xcf\x55\x80\x51\x39\xf0\x94\xac\xed\x19\x5c\x81\x3c\xdc\xd5\xf2\x92\xe6\xed\x60\xad\x91\x9c\x03\x32\xc9\x93\x58\xac\xe8\x20\x50\x9a\x29\x76\x61\x60\xae\x46\x17\xed\x8f\x97\xd1\xf6\xfb\xb7\x4f\xe7\x99\x0d\xc6\x58\xa9\x40\x73\xcf\x6a\x5b\xfd\x9e\x8e\x5c\x0e\x88\xba\x26\xb6\xd9\x6d\x66\x37\x24\xd0\xcc\x1d\xb1\x1a\xdb\x98\xbf\x22\x7d\x6e\xdf\xce\xd1\xce\xf0\x31\xf1\x3b\x34\x0f\xdf\x9d\x9c\xf4\x0e\xcf\xdf\x9d\x6e\xbd\x7d\xf5\xf6\x7c\x2b\x43\x12\x45\xed\xd0\x3c\x4b\xbd\xf7\x26\x7e\x23\x8e\x04\xc6\x55\x72\x8e\xc8\x4e\x23\xf3\x86\x9c\xe7\xda\x3b\x8a\x79\xb2\x5c\x58\x0f\xcd\x6d\xfa\xe9\x98\xfa\x57\xaf\x1c\x71\x14\xbe\x79\xb2\x4d\x3e\xde\x1c\xff\xf3\xea\xc5\xf9\xd5\xc9\x29\x69\xc6\x56\x3a\xb6\x6e\xf9\x41\x7b\x53\x0d\x4b\xed\xdc\x91\xa5\x76\x96\x1a\x6a\xa7\xcc\x4e\x2f\x09\xf5\xec\xb9\x88\x80\x08\x89\x19\x24\xee\xc2\x47\x66\xbe\xb3\xaa\xb8\xcd\x70\xbe\x4e\xbf\x39\xd2\xbe\x91\x89\x04\xf4\xc2\x96\x3a\xa4\xfd\x74\x69\x17\x0a\xdd\x76\x61\x59\x2f\xc9\xd9\x2e\x87\x7b\xa1\xcf\x2c\x62\x69\xfe\xd1\x04\x83\x0d\xea\x6e\xb4\xe0\xac\x8c\xce\xac\x44\xdd\x28\xf7\xbb\x19\x45\x83\xd9\xc4\x71\x7c\xd5\x26\x8d\x5a\xf0\xc1\x62\x88\x1d\x29\xbd\xe1\x82\xe7\xb0\x9d\xb6\x4f\x7e\xdc\xbd\x4f\x47\xaf\xc2\xd9\xe0\x58\xf4\xd8\x8d\x38\x40\x7f\x7f\x67\x6f\x74\x35\x99\xd0\xa3\x69\x3c\xee\xf9\x83\x94\x65\x63\xbd\xd7\xd9\xbb\x93\xb1\xde\x5f\x36\xd4\xfb\x25\x23\x5d\xe7\x5d\x25\x73\x65\x4a\x0f\xd2\x97\xa9\xb4\x7f\x7f\x0a\x19\x6f\x3c\xcd\x3c\xc7\x40\xdd\xe7\x1b\xdb\xf4\xf5\xae\x1b\xfe\xfe\xe5\x78\x3a\x7d\xfc\x65\xfa\xc6\x9b\x7d\xdd\xf6\x5f\x9d\xee\xfe\x36\xbb\x3a\xd9\x30\x00\x30\xe4\x21\x73\x17\x4c\xf1\x2f\xef\xf6\x47\x3b\xa3\x27\xbf\x9e\xbb\x1f\x5f\x7f\x24\x3b\x13\xf9\xeb\xd3\x9d\xc9\x87\xa3\xdd\x59\x6c\x9d\xfc\xc1\xe2\x52\x00\xdc\xbe\x1b\xfc\xdb\x5e\x0a\x7f\xdb\x25\xa6\x49\xe6\xed\x14\x05\x1d\xce\x34\xc6\xdb\xe3\xca\x5d\x38\x8d\x96\x36\x20\xa1\x1a\x73\x41\xbf\xc6\x47\x4d\x26\xc8\xea\xd9\x67\xf7\xe3\xb8\x37\xbe\xf6\x3f\xbf\x08\x3e\xbd\x1f\x1e\xef\x78\x27\x38\x09\xdc\xbd\x7f\x1e\xc5\xf6\x79\x76\x42\x7c\x3c\xe4\x6c\xe8\x51\x47\xd5\xb0\xd5\xee\x93\x3b\xb1\x55\x9a\x4d\xb9\xad\xd2\x14\x59\x37\x9a\x9f\x4a\x36\xc0\x43\x25\x10\x4f\x20\x71\x67\xe6\xd4\x58\xa5\x2d\x9e\x4c\xbe\x74\x3e\xd2\xde\xe4\xeb\xe4\xf3\xe1\xd7\x4f\xef\xf1\x78\x87\x7f\xc1\xb1\xbb\xdb\x8b\x4c\x51\x3c\x25\x5c\xa6\xfe\xb3\x3b\xd1\xfe\xd9\x32\xe5\x9f\x95\xfa\x49\xf2\xe4\x0f\x66\x3b\x2d\x0c\x3b\xf6\xde\x4c\x5f\x3e\xbb\x7c\xfb\xe1\xcb\x93\x2f\xa3\xf1\xf0\xed\xb3\xd1\xab\x53\xf9\xeb\xb4\xf7\x69\xae\x6b\x6d\xd0\xb8\x37\x8d\x53\x71\x5a\xd3\x86\x8c\xe6\xb9\x9b\x28\x80\x76\x24\xaa\x2e\xbc\x3b\x7c\xbb\xd5\xfb\xbc\xf5\x4c\x87\x7e\xf1\xaa\x65\x9f\xce\x49\x68\xf0\x46\x6d\x45\xeb\x1d\x09\xe8\xd6\x36\xbd\xe9\xec\x7a\xcc\xf5\xfc\xab\xce\xd5\xd0\xd9\x97\x54\x91\xc7\xd2\xbb\x9c\x3e\x4d\x97\x34\x86\xa9\xc3\xef\xda\x0c\xdb\xa3\xc7\xee\xd3\xa7\x57\x1d\x4f\x38\xee\x74\x6f\xb4\x4f\xbc\xc1\xbe\xf4\x86\x23\x76\xb9\xeb\x8e\x07\xf2\xf2\x6f\xff\xef\xef\xbd\xcf\xe7\xa7\x07\xf0\x5f\x56\xe1\x96\x31\xd2\x73\xea\x22\x53\x7a\xc8\xd2\x47\x72\xa8\x84\x8d\xbd\xce\xde\xc6\xa6\x31\x85\xf9\x79\xf8\xe6\xe3\xd9\x79\xef\xf4\xcc\xda\x42\xdf\x34\xd1\xe7\x7c\x5c\x21\x61\x64\xe8\xb7\x47\x8f\xb9\x78\xdc\x99\xd2\xb0\xb3\xcf\x51\x8f\xda\x58\x4c\x9c\x9d\x27\xee\x68\xa8\x2e\xb7\x89\xb3\x91\xb6\x5e\xfc\x94\xf9\xc6\x32\x25\x52\x90\xfb\x8f\x45\x98\x72\x2e\x3f\x89\xd9\x13\x26\xaf\x06\x3b\xf2\xc4\x7f\x79\xf9\x78\xf0\x39\x38\xda\x3f\x24\xcd\xc6\xff\x05\x00\x00\xff\xff\xc0\x10\xfc\x2d\x78\x7e\x00\x00")

func connector_mgmtYamlBytes() ([]byte, error) {
	return bindataRead(
		_connector_mgmtYaml,
		"connector_mgmt.yaml",
	)
}

func connector_mgmtYaml() (*asset, error) {
	bytes, err := connector_mgmtYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "connector_mgmt.yaml", size: 32376, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"connector_mgmt.yaml": connector_mgmtYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"connector_mgmt.yaml": &bintree{connector_mgmtYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
