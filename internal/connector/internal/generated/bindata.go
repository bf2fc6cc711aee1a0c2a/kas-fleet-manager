// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package generated generated by go-bindata.// sources:
// internal/connector/internal/api/public/api/openapi.yaml
package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x59\x73\xdb\x38\x12\x7e\xf7\xaf\xc0\x66\x77\x4b\x33\xbb\xb1\x75\xf9\x88\x55\x95\x07\xc7\x76\x32\xce\xc4\x8e\xc7\xc7\x38\x9e\xad\x2d\x15\x44\xb6\x24\x58\x24\x40\x03\xa0\x62\x79\x6a\xff\xfb\x16\x00\x8a\x37\x29\xca\xb7\x33\xcc\x53\x0c\x02\x0d\x74\xa3\xd1\x5f\x77\xa3\x49\x31\x0f\x28\xf6\x48\x0f\x75\xd7\x5a\x6b\xad\x15\x42\x87\xac\xb7\x82\x90\x0d\xc2\xe2\xc4\x93\x84\xd1\x1e\xda\x65\x94\x82\x25\x19\x47\xa7\xc0\xa7\xc4\x02\xf4\xd1\x01\x90\xe8\x10\x53\x3c\x02\x8e\x88\x40\x18\x9d\x80\x90\x68\xe7\xf8\x00\x49\x86\x5c\xfd\x00\x59\xf3\x71\x62\x6d\x05\x21\x49\xa4\x03\x0b\x89\xad\x20\x34\x05\x2e\xf4\xbc\xad\xb5\xd6\x5a\x77\x45\x00\x57\x2d\xbd\x95\xd5\xe4\xaa\x0e\x31\xa1\xe8\x27\x8f\x33\xdb\xb7\x54\xcb\xcf\xc8\xf4\x5c\x41\xc8\xe7\x4e\x0f\x8d\xa5\xf4\x44\xaf\xd9\xc4\x1e\x59\x53\x5c\x8a\x31\x19\xca\x35\x8b\xb9\x69\x42\xa7\x12\x8f\x08\x1d\x95\x0c\x17\x12\x8f\xa0\x9c\x88\xc3\x2c\xec\x8c\x99\x90\xf1\xf1\xbd\x66\x33\x6c\xef\xbd\x6b\xb5\x5a\xe9\x51\x96\xcf\x39\x50\x89\x6c\xe6\x62\x42\xe7\x43\x9b\x2b\x12\x8f\x34\xc3\x14\xbb\x09\x91\x9d\xcd\x3c\x10\xd9\xf6\x9c\x26\xb4\xeb\xf8\x42\x02\x17\x2b\x1e\x96\x63\xa1\xf6\x54\xb1\xd2\x0c\xf7\xa4\xef\x8e\x5c\xd9\x9c\xb6\x9b\x13\x3c\x9c\xe0\x7e\xd4\x2e\xd5\x1c\xcd\x3f\x93\x0d\x7d\x62\xff\x4f\xd1\x40\x68\x04\xd2\xfc\x07\x21\xe6\x01\xc7\x8a\x91\x03\xbb\xa7\xda\xc3\xc9\xd5\x32\x3f\xcc\x0e\xf6\x82\x7e\x1e\xe6\xd8\x05\xa9\x37\xd1\xb4\xa4\xc4\x70\x36\x06\x44\x6c\xc4\x86\x48\x8e\x63\x6a\x83\xd4\xcc\xc1\x08\x84\xe0\xc6\x73\x98\x0d\x3d\x34\xc4\x8e\x88\x9a\x09\xed\x21\xc5\x62\xd8\x60\x04\x91\x59\x7e\xf8\x9c\xc3\xb5\x4f\x38\xd8\x3d\x24\xb9\x1f\xd1\x11\xd6\x18\x5c\xdc\x0b\xff\x46\x7a\xf6\x1e\x12\x92\x13\x3a\x8a\xba\xc9\x99\xd2\x62\x41\x5c\xcf\x99\x0f\xe6\x20\x3c\x46\x05\x88\x68\xf4\x9b\x4e\xab\xf5\x26\x4e\xcc\x62\x54\x02\x95\xf1\x26\x84\xb0\xe7\x39\xc4\xd2\x22\x6c\x5e\x09\x46\x93\x4f\xf3\xd6\x64\xfe\xfd\x83\xc3\xb0\x87\x1a\x7f\x6f\x5a\xcc\xf5\x18\x05\x2a\x45\xd3\xf4\x15\xcd\xc4\x26\x34\x62\x43\x33\x12\x4f\xca\x19\xb9\x58\x5a\x63\x75\x0e\xd4\x1e\x28\x21\x81\x56\xe6\x80\x9f\xf5\x56\xfb\xfe\xfc\xc0\x0d\x56\x62\x13\x59\x8e\x14\xfd\x7d\xf3\xf4\x4d\xf6\x69\x3e\xc7\x73\x6a\xcd\x68\x6c\xe3\x01\x04\xb8\xcf\x39\xe3\x85\x82\xdb\xf1\xe5\x18\x49\x36\x01\xaa\xcc\x1e\xa1\x53\xec\xc4\x74\xeb\xcd\x7a\x6b\xfd\x91\xc5\xb4\x7e\x0f\x31\xad\x3f\x99\x98\x8e\x58\xa4\x4f\x29\x3d\x83\x1b\x22\xa4\x88\x44\xb6\xf1\x10\x27\xa5\x44\x64\x1b\xad\xd6\x9d\x45\x16\x8d\x7d\x7c\x91\x9d\x53\xb8\xf1\xc0\x92\x60\x23\x50\x1d\x11\xb3\x34\x3c\xcc\xb5\x4b\x80\xe5\x73\x22\x67\x91\x0d\xfd\x00\x98\x03\xef\xa1\xff\xfc\x77\xde\xc5\x77\x5d\xcc\x67\x3d\xf4\x09\x24\xc2\x69\xc1\x0f\x66\x28\x54\x55\x03\x30\x73\x42\x69\x80\x59\x0e\x2b\xca\x71\xc1\x21\x22\x09\x0c\xa2\x2a\x2a\x1c\x2b\x1f\x82\x50\x1b\x6e\x56\xca\xb6\xd9\xc3\x23\x48\xee\xc3\x14\x3b\x3e\xf4\xd0\x9b\xf6\x9b\x2c\x78\x24\x6c\xbe\xc2\x8e\x6b\x1f\xf8\x2c\x05\x1e\x8a\x64\x0e\x5e\x24\x81\x67\x39\xc0\x18\x32\xee\xe6\xb3\x79\xe4\xbb\x03\xe0\x0a\xfc\x88\x04\x57\xd9\x14\x04\xd8\x1a\x27\x17\x91\xc7\xb8\x20\xb7\x45\x8c\xb7\x5a\x77\x65\x5d\x11\x7d\x3c\xd6\x5f\x2e\x52\x7e\x21\x42\x16\x1b\x7d\xad\xc5\x6a\x8b\x92\x47\x4a\xd4\xf8\xb8\x24\x3e\xd6\xc6\xfe\xe1\x8d\xfd\x09\x48\x9f\x53\x15\x83\x95\x6b\xe9\xc3\xd8\xfc\x65\xcc\x7d\x6d\xea\xff\xba\xa6\x3e\x27\xc4\xd3\x9a\x84\x2c\x13\x98\xa2\x98\x59\x58\x6e\xdd\x46\x21\x73\x23\xba\x1f\x1a\xa6\x96\x85\xa8\x1a\x9d\xb2\x52\xaa\xd1\xe9\x95\xa1\x93\x79\xec\x31\x91\x0f\x37\x16\x07\x2c\x21\xec\x5d\x19\x6f\x80\xab\xe3\xae\x53\x1d\x58\x67\x0f\x95\x2d\xc6\x14\x61\x31\xa3\xd6\x98\x33\xca\x7c\x81\x5c\x4c\x29\xf0\x3b\x5a\x29\x4d\x29\xc7\x44\x55\x4a\x3a\x0d\x18\x73\x00\xd3\x52\x13\xa5\x13\x34\x1f\x98\x3d\x8b\x86\xe7\xe8\x6b\xb9\xb6\xe6\xab\x4e\x25\x6b\x14\x29\x4f\x41\xae\xd8\xc6\x12\x97\xf3\x9f\x6f\x66\x3b\xcf\x6c\x66\x8b\x8d\x87\x65\x81\x27\x21\x91\xed\x79\x5c\x7b\xb1\xde\x6a\xed\x2a\x05\x27\x8c\xde\xc3\xbc\xa6\x69\x3c\xbe\xfd\xf8\x5d\x99\x55\x3d\xa5\xb1\x1f\x22\x6d\x40\x6a\x48\xaa\x13\x8a\xcb\x89\xe9\x2c\x4a\x4a\x83\xad\x2c\x07\xf3\xb9\x05\xc8\x66\x20\x68\x43\x9a\xa4\x62\x0d\xe4\x19\xe5\xa2\xc8\x2f\xc2\x72\x83\x9d\xf3\x84\xbf\x95\x82\xd0\x65\x20\x5e\xdb\x17\x40\x18\x51\xf8\x9e\x21\x54\x82\xeb\x65\x01\xa7\x88\x45\x9c\xcd\x3f\xc3\xdb\x27\x1b\x1c\x90\x90\xeb\x0a\x98\x47\x4b\xbb\x02\x4a\xb1\x0e\xf6\x94\x5f\xc2\xc1\x62\x3c\x27\x28\xa9\x74\xdf\xf4\xa8\x17\x4c\x3f\x5e\x2c\xf5\x00\x46\xed\xe1\x4f\xcb\x9e\xd6\xa0\x1a\xa3\x32\x82\x79\x7e\x8c\x32\x5b\x73\x1f\xa4\x4a\x50\x78\x92\x0b\x30\x73\x44\x03\xd0\x42\xdf\x89\x1c\x23\xe1\x81\x45\x86\x04\x6c\x65\x72\x9e\xe1\x22\xec\x9e\x62\x4c\x53\x78\x5d\x91\xa8\x59\x7a\xfc\x5e\xac\x4a\xe8\x59\xa5\xde\xa1\xc6\x9a\x97\x8c\x35\xcf\x9d\xb7\xab\x58\x84\x51\xd7\x5f\xbc\x0e\x28\x7a\x15\xe1\x52\x5d\x7f\xf1\x92\xea\x2f\xaa\xe0\x8c\xa7\xb6\x2b\x17\x69\xf4\x93\x1a\x6b\x5e\x1c\xd6\xdc\x2d\x01\xbb\xaa\xb7\xf3\xdf\x55\x73\xb1\xa9\x4b\x9e\xcf\xa7\x5f\x8f\xd0\xb1\xa2\xf0\x16\x9d\x7c\xdc\x45\x9b\xdb\xad\x0e\x5a\x0d\x8b\x55\x25\x63\x8e\x58\x23\x20\x87\x6b\x8c\x8f\x9a\x63\xe9\x3a\x4d\x3e\xb4\x54\xaf\x14\x5d\xc3\x25\x1b\x5c\x81\x25\x0b\x56\xeb\x02\x1f\xc1\x03\x2c\xf7\x50\xd1\x89\x2f\x7a\xab\xfb\x6e\x73\xf1\xa2\x55\xaf\x2a\x8b\x4e\x86\x70\x58\x62\x24\x99\x39\x33\xa9\x6a\x52\xe5\x81\x97\x2b\xf3\x2b\x4b\x48\xd7\xfe\x43\xed\x3f\x3c\x92\x98\x6a\xff\xe1\x59\xfd\x07\x63\xbe\x96\xf2\x20\x2a\x56\x6c\x06\xc8\xba\x4c\x15\x4f\xf8\x26\x81\xe9\x58\x17\xf3\xfc\xf5\x8a\x79\x5e\x66\x60\x1d\x28\xe6\xd2\xa5\x9b\x56\x52\xa1\x6b\x74\xac\xeb\x63\x5e\x66\x7d\x4c\x4a\x51\x8b\x0a\x38\x13\x06\xba\x6a\xa9\x4c\x30\xa8\xb2\x51\xaf\x2b\x66\x4a\x94\x69\x19\x73\xb5\xb0\x70\x66\x1e\xfc\xbe\xd6\x02\x9a\x0c\x9f\x75\x1d\x4d\x5d\x47\xf3\xdc\xd0\x55\x07\x76\x75\x1d\xcd\x93\xd6\xd1\xcc\xcd\xf8\x1d\x5c\x82\xfc\x7a\x9a\x14\xc1\x0a\xce\xc0\x92\x21\x61\xfc\x9d\xef\xa0\xad\x7f\x87\xc2\x9b\x25\x1d\x8b\xa2\x77\xbf\x93\xdc\xde\xfd\xf5\xef\x88\x93\xbb\xba\x16\x77\x7e\x03\xbc\x2e\x72\xa9\x01\x64\x09\x31\xbd\xca\x22\x97\x10\x41\xea\xfa\x96\xe7\x8e\x24\xb3\xf5\x2d\xcb\x43\x46\xb5\x7a\x97\xda\xc4\x1b\x8d\x7b\x31\x29\xb0\x8a\x57\x44\xf3\xc8\xb2\xbe\x2a\x7a\x1d\x80\xf0\x2a\x22\x8a\xfc\xab\xa2\xb9\xaa\xd5\x57\x46\xcf\xf4\xc9\x8f\x67\x8a\x16\x9a\xd8\xb6\x19\xed\xa7\x31\x61\x09\x54\xd9\x51\x04\x8e\xc3\xf1\x35\xc8\x3c\x17\xc8\x24\x37\xa2\xf4\x96\x45\x09\x3f\xda\x21\x24\xc7\x58\x22\x31\x66\xbe\x63\xa3\x01\x20\x5f\x80\x8d\x24\x53\x2b\x1f\x92\x91\xcf\x41\x6f\x91\xf9\x48\x9c\x9d\x58\x52\xb4\x6d\x5a\x8d\x10\xa3\x66\x37\x8d\xec\xd7\x6a\x8c\xaa\x31\xaa\xc6\xa8\x1f\x0e\xa3\x1a\x22\x38\xee\x5e\xda\xea\x2f\x84\xad\x88\x1d\xd5\x2d\x29\xee\xb2\xb4\xbf\xb9\x71\x8f\xac\xbf\xad\x6f\xdf\xbb\xd1\xed\xfb\x84\x50\xbb\x87\xb4\x68\xc2\xb6\xb1\x16\x62\x01\x4e\x9a\x04\x7d\xb3\xdd\xea\xae\x44\x2a\xa3\x70\x66\xf7\xeb\xd1\xd1\xfe\xee\xd9\xd7\x93\xd5\xc3\x4f\x87\x67\xab\xf1\x0e\x1c\xb0\xd0\x5f\xa0\x8c\x5d\xa1\xcd\x2f\xd7\x04\xa2\x4c\x22\xe1\x7b\x1e\xe3\x12\xec\xb7\xca\x8a\x9a\x2b\xb2\xf7\x0a\x6d\x22\x59\x85\xd4\x42\x60\xed\x2b\x76\xda\xe4\xe2\x80\xb8\xd7\x9f\x2c\xbe\xe7\x7f\xd9\x6c\xe3\xf3\x9b\x83\x3f\xae\x3f\x9c\x5d\x1f\x9d\xe0\x50\x3a\x07\xc6\x5e\xfc\xe6\x03\x9f\x55\x91\x50\xe7\x21\x24\xd4\x59\x20\xa0\x4e\x56\x3e\x8d\x8f\x98\x38\x06\x43\x3c\xcc\x05\x20\x01\x98\x5b\x63\x73\x8b\xa8\x54\x14\x0f\x1c\x50\x4f\xf5\x15\xea\xaf\xf1\xf7\x6e\x04\x1a\x2a\x34\xf1\x48\xdf\x38\x32\xc2\x7c\x74\x34\x7e\x42\x32\xf3\xf7\xd0\xa2\xf9\xc2\x6d\x41\x16\x73\x7c\x97\x6a\x6f\x21\x46\x52\xcd\x69\xc6\xf4\x50\xa3\x41\xec\x46\x63\x0d\x9d\xe6\x8d\x11\x08\x73\xe8\x21\x0e\x23\xc2\xe8\x5b\xdd\xf4\x16\x59\x0e\xf3\xed\xbe\xc7\xd9\x94\xd8\xc0\xdf\xc6\xe8\x9a\xe7\x42\x62\xe9\x8b\x35\xa4\xf7\x6d\x6e\xf4\x7b\xca\xfb\x79\x8f\xda\x9d\x6e\xa3\x48\x23\x9c\x8b\xbd\x4f\xfe\x6c\x70\xc0\xf7\xe9\x0d\xdf\x01\x77\xab\xb3\x3e\xba\x9e\x4c\xc8\xde\x74\xae\x11\x19\x6b\x9e\xa7\x05\x0a\x54\xee\xad\x05\x5b\xe5\x4a\xb0\x95\xd1\x81\xca\x17\x17\xc5\x99\xb4\x3c\x66\xb6\x9e\x81\x15\xad\xa0\x27\x89\xc4\x19\xb1\xdf\x37\xda\xe4\xd7\xae\xed\xff\x7e\x79\x30\x9d\x6e\x5c\x4e\xbf\x38\xb3\xdb\xb6\xfb\xe9\xa4\xfb\x79\x76\x7d\xd4\xd0\xc6\x60\xc8\x7c\x6a\x17\x1e\xf7\xcb\xaf\x5b\xa3\xce\x68\xf3\x97\x33\xfb\xfc\xd7\x73\xdc\x99\x88\x5f\xde\x75\x26\xbf\xed\x75\x67\x73\xa9\x64\x3c\x9a\x5c\x23\xd8\x7e\x00\x1b\xd8\x5e\x60\x02\xdb\xd9\x13\x1e\x9d\xe1\x29\x70\x32\x9c\xa1\xcf\x17\x67\xc6\xb1\xe9\xa1\x93\xc0\xcf\x46\xd8\x97\x63\xc6\xc9\xad\xb9\x12\x35\x6e\x4f\x28\x98\x42\xb5\x27\x97\xdd\xf3\xf1\xfe\xf8\xbb\xfb\xed\x83\x77\x71\x3c\x3c\xe8\x38\x47\x30\xf1\xec\xf5\x3f\xf6\xe6\x92\xd9\x3e\xc2\x2e\xec\x32\x3a\x74\x88\x25\xab\x48\xa9\xbb\x79\x7f\x29\x75\x37\xcb\xa5\x14\x7b\x9e\x50\x9c\xd0\x6d\x51\xc6\x40\x7f\x7b\xd9\xe1\x80\xed\x99\x76\xb3\x0b\x64\xb0\x39\xb9\x6c\x9d\x93\xfd\xc9\xed\xe4\xdb\xee\xed\xc5\x31\x1c\x74\xd8\x25\x8c\xed\xee\x7e\x20\x82\x1c\x67\x24\x8f\xed\xed\xfb\x73\xbd\x5d\xce\xf4\x76\x86\xe7\x73\x1a\x25\x95\x21\x31\x5d\x7a\x9b\x61\xff\xcb\xf4\xe3\xf6\xd5\xe1\x6f\x97\x9b\x97\xa3\xf1\xf0\x70\x7b\xf4\xe9\x44\xfc\x32\xdd\xbf\x08\x79\xac\x6e\x16\x9e\x83\xd3\x86\xf1\xaf\xf4\x75\x9a\xfe\x1e\xf5\x8c\x5a\x02\x64\x0f\x7d\xdd\x3d\x5c\xdd\xff\xb6\xba\xad\x62\xd6\x39\x2e\x99\x4b\xb7\xa8\x0f\xdc\xc8\xd5\x00\xdb\xb0\x47\x56\xdb\xe4\xa6\xd5\x75\xa8\xed\xb8\xd7\xad\xeb\xa1\xb5\x25\x88\xc4\x1b\xc2\xb9\x9a\xbe\x4b\xc3\x54\xf4\xaa\x45\x0f\xb5\x47\x1b\xf6\xbb\x77\xd7\x2d\x87\x5b\xf6\x74\x7d\xb4\x85\x9d\xc1\x96\x70\x86\x23\x7a\xd5\xb5\xc7\x03\x71\xf5\xcf\xbf\xfd\xb4\xff\xed\xec\x64\x07\xfd\xcb\xf0\xb8\xa6\xa5\xf2\x9e\xd8\x40\xa5\xda\x21\x1e\xa3\x4d\x04\x6a\x34\xd6\x5b\xeb\x8d\xc6\x5b\x2d\x00\xd3\xb0\xfb\xe5\xfc\xf4\x6c\xff\xe4\xd4\xc8\x40\x3f\x46\x98\xda\xd1\x5e\xa2\x88\x98\x19\xd1\x1e\x6d\x30\xbe\xd1\x9a\x12\xbf\xb5\xc5\x40\x6d\xd5\x98\x4f\xac\xce\xa6\x3d\x1a\xca\xab\x36\xb6\x1a\x8d\x04\x96\x07\xdc\xe8\x71\xa5\xbc\x34\x62\x36\xf5\xe7\x12\xdb\x71\x26\x2e\xf8\x6c\x93\x8a\xeb\x41\x47\x1c\xb9\x1f\xaf\x36\x06\xdf\xbc\xbd\xad\x5d\xe5\x44\xa5\x73\x12\xc4\x9e\x2f\xa5\xca\x9b\x38\xb9\x89\x88\x54\x1a\x22\xf5\x0e\x4e\x6e\xc2\x21\xed\xf2\xe7\x24\x1b\xb2\xa9\x86\x78\xf1\x6d\x79\xf1\x6e\x36\x84\x49\x17\xee\x66\xca\x76\xf3\xca\xbe\xd2\x45\x5f\x99\x82\xdd\xfc\x9a\xd5\xea\xcc\x85\x95\x5e\xf1\xf2\xda\x65\x0b\x76\xb3\xcc\xa6\x8b\x75\x73\x4a\x75\xab\xb3\x1b\x2b\xd2\x7d\x20\x76\x83\x18\xce\x8c\x48\x7c\xd0\x74\x4e\x04\x3b\xce\xd7\x61\x14\x43\x95\x05\x82\x5f\xf5\x8b\x35\x27\x30\x04\x0e\xd4\x0a\x63\xcb\xf2\x41\x89\x49\xfb\x7a\xb6\x46\x9e\xf4\x4f\xc0\xe3\x20\xd4\xd0\xec\x97\x89\x23\x77\x7a\x30\xd3\x09\x9f\x9d\xe3\x83\xb4\x9c\xc2\xc5\xa8\x38\xbb\x6f\x66\x0f\xdb\x62\xee\xf7\xea\xfc\xf7\x03\xb2\x22\xf9\x42\xa2\xd2\xc8\x25\xc4\x12\xcf\x7c\x2d\x21\x0b\x35\x2c\x2e\x8f\xc4\x77\xfc\x9e\x66\x19\x85\x4b\x78\x72\xe5\x28\x51\x8c\x9d\x98\x36\x8c\x99\x63\x8b\x79\x02\x57\xe7\x0a\xe7\xae\xde\xbc\x13\xc2\x81\x17\x24\x99\x47\x2c\x24\x59\x78\x56\x30\x65\x72\x0c\x1c\x89\x99\x90\xe0\x9a\x5c\x61\x00\x07\x67\x98\xc7\x12\xd0\x36\x51\xb3\xbb\x84\xe2\x98\x24\x10\x72\xb1\xe7\x11\x3a\x8a\x1f\x76\x9d\x95\x28\x4d\x8f\x26\x26\x88\xe7\x50\x92\x31\x5c\xa1\x7c\x54\xaf\xe3\xa0\x53\x01\x2d\x8f\x2b\x4c\x92\xb3\x23\xf3\x62\x23\x09\x43\x00\x46\xa1\xea\xe6\x15\xaf\x75\xc1\xfe\x2d\x58\x5f\x96\x6e\x3e\x02\xea\x47\x02\x7d\x67\x7c\xe2\x30\xac\xb6\x98\xe9\xda\x61\x9d\xf5\x49\x66\xe8\x03\x76\x49\xdc\x08\x6b\x17\x2c\x26\xdc\xdc\x7c\x7a\x94\xa0\x5f\xd0\x35\x6b\x52\x62\x42\xcd\xbc\x62\x58\x2c\x82\x25\x58\x35\xea\x80\xe6\xea\x70\x7f\x56\x13\xca\xb5\xa8\xbb\xc9\x2e\x2c\xec\xe6\xfa\x8e\x24\x7d\x7c\x9b\xed\x98\x2c\xae\x5e\x4e\x7e\xd9\x5b\x84\x5c\xb9\x45\xef\x69\x14\xa4\x02\x35\x66\x47\x4b\x4b\x58\xae\x4a\xea\x1f\xae\xa1\x91\x58\x2a\xe6\x1c\xcf\x72\x56\x5a\xb0\xca\xd4\xea\x4a\x76\x72\xa1\x1e\x66\x22\x8f\xdc\x5e\x59\x85\x4c\xdd\x97\x3d\xb9\x2d\x0f\xe6\x2d\x31\xe9\xa7\x7a\x88\x0e\x2f\x62\x15\x06\xea\x24\xf8\x9e\x6d\x4a\x1b\x6d\x2c\x31\xf2\x1c\x4c\x21\x96\x05\x36\x89\xad\x5c\x2e\x9f\x0e\x34\x63\x13\xc6\x59\xd4\xa8\x13\x74\x22\x8c\x9e\x82\x54\x41\x5a\xb8\xdf\x79\x1a\x30\x60\x4c\x0a\xc9\xb1\xd7\x37\x3f\x2d\x54\xe1\x5c\x13\xa0\x72\xb1\x05\x0b\x7b\x0a\xb0\x38\xc8\xd2\xde\xa9\xbd\x2e\x5b\x6f\x85\x79\x2b\x99\x27\x1d\x1d\x2f\xa9\xd5\xf1\xfd\xbd\xb3\x5d\x4c\x47\x26\xa6\x13\xa1\x12\x46\xb1\xd8\x34\xed\xd2\xe7\xf7\x92\x4c\x62\x67\x51\xb7\xac\x29\xd4\x66\x2a\xcf\x30\xae\xc6\xe3\x8c\xd5\x78\x28\xb0\x6a\xe6\x2a\x92\x8c\x8e\xb1\x9f\xea\x90\xeb\xc9\x72\x5d\xc6\xc8\xbd\x2f\xdb\x26\x1d\xe7\xc4\x84\x96\x0c\xc0\xb0\x0b\xf9\x3f\xf2\xb4\xb6\xd0\x52\x06\xbf\x09\x56\x44\xfa\x77\xf3\xfc\x8e\xd4\xad\x31\xa6\x14\x1c\x71\x7f\xf2\x29\x94\x2a\x9c\x31\x8b\x3e\xe9\x39\x8b\x96\xb2\x13\xff\x33\xb3\xa0\x85\xac\x12\x8b\xd1\x7e\xfa\x80\x26\x2f\xfc\x4e\xbe\x04\xee\x99\xea\xbb\xfc\x0c\x0e\x1e\x94\x89\xd2\x3c\x8e\x6a\x02\xb0\x84\x11\xe3\xe4\x16\x72\x3f\x43\x59\x20\x53\xa0\xbe\x9b\x6c\x51\x27\x8a\x4e\xd2\x4d\x3a\xc3\x7e\xd7\xdd\x88\x05\x9a\x25\xbb\xa1\x7a\x05\x61\xb8\xa9\x7b\xb0\x30\x8d\x17\x3d\x4c\xcd\x3b\x3c\x89\xba\x4c\x11\xab\x2b\x11\x1e\x58\x89\x15\x0e\x09\x38\x76\x56\xca\x79\x1e\x40\x32\xcc\x2c\x35\xed\x69\x19\xe6\x08\x35\xe5\x52\xa1\xe5\xc2\xdd\x46\x89\x34\x73\x02\xd2\xe7\x5b\x6c\xa5\x85\x9a\x45\xf6\x5d\x90\x58\x79\x2a\xa5\xc8\x14\x7c\x6a\x66\x21\x3a\xb1\xef\xb4\x82\x0f\x90\xb6\xa0\xf9\x06\x4b\xbf\x21\x62\xf7\x71\x02\xfb\x87\x8c\xbb\x58\xf6\x94\x6f\x05\xab\x92\x24\x6e\x24\x73\xc9\x18\x6f\xec\xde\x64\xe6\x97\x71\xfd\x1c\x2b\x3d\x27\x46\xa8\xdc\x5c\x2f\x45\xd3\x94\xec\xcb\x44\x9e\xde\x16\x54\xb5\x5c\x36\xb5\xad\xf1\x57\x31\x3d\x87\xcd\x5c\xe5\x53\x39\xcc\x14\x74\x54\x26\x9e\x1f\xb6\x6b\xb5\xa8\x4a\xa3\xc0\xb9\x8c\xa8\x65\x7e\xce\x70\xb1\x8a\x24\x2c\x4c\xb6\x7b\xea\x2b\x3a\x01\x04\x2e\x24\x6b\x83\x50\x0e\x4f\x5f\xb9\xea\x8b\xf5\xd4\x38\xf4\xa5\xdd\xf2\xc3\x8a\x4a\x27\xef\x87\x3c\x50\xf9\xf2\x78\x94\xd3\x90\x2f\xf1\xc6\x7d\x76\xef\x25\x18\xf8\x9c\x9a\xf8\xb4\x9d\x8f\xb9\xb9\x65\xeb\xd4\x17\x77\x8b\xad\x1f\x16\x15\xb2\x2b\x89\x8b\xa5\xe2\xce\xf3\x72\x2a\x1d\x42\xcf\xd7\x12\x54\x54\x05\xa3\x06\xfa\xaf\x8f\x81\x52\x7d\xbe\x38\x0b\xda\xb5\x20\xa0\x17\x3c\x4f\x84\x13\x63\x29\xbd\x95\xff\x07\x00\x00\xff\xff\xeb\x4a\x9b\x58\xeb\x77\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 30699, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
