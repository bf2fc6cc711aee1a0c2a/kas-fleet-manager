// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package generated generated by go-bindata.// sources:
// .generate/openapi/connector_mgmt.yaml
package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _connector_mgmtYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7b\x6f\xdb\xba\x92\xff\xdf\x9f\x62\xd6\xdd\x45\xee\xdd\x6d\xfc\xc8\xb3\x31\xd0\x05\xd2\x24\xed\xc9\x69\x9b\xe6\xe4\x71\xda\xde\xc5\x45\x40\x4b\x63\x8b\xb1\x44\x2a\x24\xe5\xc4\xb9\x38\xdf\x7d\x41\x52\xb2\xf5\xb4\xe5\x34\xb7\x49\x5b\x1b\xc8\x1f\x92\x86\xc3\xe1\x70\xf8\x9b\xe1\x0c\xa5\xf0\x10\x19\x09\x69\x0f\x36\x5b\x9d\x56\x07\x5e\x00\x43\x74\x41\x79\x54\x02\x91\x30\xa0\x42\x2a\xf0\x29\x43\x50\x1c\x88\xef\xf3\x5b\x90\x3c\x40\x38\x3e\x3c\x92\xfa\xd6\x88\xf1\x5b\x4b\xad\x1b\x30\x88\xd9\x81\xcb\x9d\x28\x40\xa6\x5a\x8d\x17\xb0\xef\xfb\x80\xcc\x0d\x39\x65\x4a\x82\x8b\x03\xca\xd0\x05\x0f\x05\xc2\x2d\xf5\x7d\xe8\x23\xb8\x54\x3a\x7c\x8c\x82\xf4\x7d\x84\xfe\x44\xf7\x04\x91\x44\x21\x5b\x70\x3c\x00\x65\x68\x75\x07\xb1\x74\x1c\x46\x88\xa1\x95\x64\xc6\xb9\x19\x0a\x3a\x26\x0a\x9b\x2f\x81\xb8\x7a\x0c\x18\x68\x52\xe5\x21\x34\x47\x44\xae\x0f\x7c\x44\xb5\x1e\x10\x46\x86\x28\xd6\x63\xe2\xd6\x84\x04\x7e\x13\x06\xd4\xc7\x06\x65\x03\xde\x6b\x00\x28\xaa\x7c\xec\xc1\x01\x67\x0c\x1d\xc5\x05\x9c\xa3\x18\x53\x07\xe1\xad\xe6\x00\x1f\x2d\x87\x06\xc0\x18\x85\xa4\x9c\xf5\xa0\xd3\xea\xb4\x36\x1b\x00\x2e\x4a\x47\xd0\x50\x99\x9b\x0b\xda\xdb\x01\x9d\xa1\x54\xb0\x7f\x7a\xac\x25\xb5\xa2\x81\x93\xb4\x93\xad\x86\x44\xa1\x3b\xd1\x52\xad\x43\x24\xfc\x1e\x78\x4a\x85\xb2\xd7\x6e\x93\x90\xb6\xb4\xb6\xa5\x47\x07\xaa\xe5\xf0\xa0\x01\x90\x13\xe0\x23\xa1\x0c\xfe\x16\x0a\xee\x46\x8e\xbe\xf3\x77\xb0\xec\xca\x99\x49\x45\x86\xb8\x88\xe5\xb9\x22\x43\xca\x86\xa5\x8c\x7a\xed\xb6\xcf\x1d\xe2\x7b\x5c\xaa\xde\xab\x4e\xa7\x53\x6c\x3e\x7d\x3e\x6b\xd9\x2e\x52\x39\x91\x10\xc8\x14\xb8\x3c\x20\x94\x35\x14\x19\xc6\x0a\x60\x24\xc8\xcc\xcb\xc5\x24\x44\x59\x6c\xdf\x6c\x96\x51\xd7\x26\x84\x03\x3f\x92\x0a\x2b\x1a\x34\x42\xa2\x3c\x23\xcf\x0b\xfd\x07\x17\x1e\x4a\x04\x22\xd0\x18\xda\x74\xee\x40\xa0\x4f\x14\xba\x7a\x6e\x65\x4c\xdc\xd4\x7a\x6e\x4f\x49\xae\x82\x61\xa0\xda\xe3\x6e\x7b\x44\x06\x23\x72\x35\xbb\xaf\xf4\xb0\xda\xff\xca\xde\xb8\xa2\xee\x5f\xcd\x9e\x11\x29\x24\x82\x04\xa8\x62\xbb\xd0\xbf\x64\x0c\x85\x26\xf1\xf3\xdc\x30\x2e\x3c\x04\xea\x02\x1f\xe4\x64\xd6\x8d\xa6\x2d\xa4\xe3\x61\x40\x7a\xd3\x6b\x30\x8f\x7b\x20\x95\xa0\x6c\x38\xbd\x4d\x59\x0f\xb4\x4a\xa6\x37\x04\xde\x44\x54\xa0\xdb\x03\x25\x22\xcb\x6e\x88\x2a\xe1\x93\x4c\x66\x22\x77\xd9\x64\x6a\x1e\x32\xe4\x4c\x62\x8a\xb4\xb9\xd1\xe9\x34\xd3\xd2\x38\x9c\x29\x64\x2a\x7d\x0b\x80\x84\xa1\x4f\x1d\xa2\x87\xd9\xbe\x96\x9c\x65\x9f\x96\x0d\xca\xfe\xfe\x53\xe0\xa0\x07\xcd\x17\x6d\x87\x07\x21\x67\xc8\x94\x6c\x5b\x5a\xd9\x9e\x8a\xa8\x25\x6c\xa6\x9a\x16\x74\x9a\xd5\x24\x04\x44\x39\x9e\x5e\x2d\x5a\xcb\x5a\x2d\x68\x0c\x3f\x1e\xcf\x56\xa7\xfb\x34\xe3\x39\x12\x82\x8b\x66\xae\x09\xde\x91\x20\xf4\xd3\x0a\x4f\x7e\x5b\x9d\xee\x91\x7d\x58\x7c\x56\xde\x51\xc2\xab\x3d\x6b\x5a\xa9\xb6\xfd\x48\x79\xa0\xf8\x08\x99\xc6\x43\xca\xc6\xc4\x4f\x59\x6d\x73\xab\xb3\xf5\x83\x28\x69\xeb\xe1\x4a\xda\x5a\xa4\xa4\x13\x3e\xb3\xa5\x9c\x8d\xe1\x1d\x95\x4a\xce\x14\xb6\xfd\x54\xab\x64\x49\x85\x6d\x77\x3a\x0f\x55\xd8\xac\x69\xa5\xc2\x2e\x19\xde\x85\xe8\x68\xfc\x45\x2d\x17\x70\xc7\x38\x95\xc4\xb2\x24\x3a\x91\xa0\x6a\x92\x46\xa2\x37\x48\x04\x8a\x1e\xfc\x1f\xfc\x33\xbe\xcb\x43\x14\x46\x49\xc7\x6e\x4f\x63\x58\x06\x08\xde\x4c\x8e\x0f\x13\x6e\x51\x10\x10\x31\xe9\xc1\x3b\x54\x40\xf2\x33\xd4\x9f\x00\x75\x1b\x0d\x80\x65\xd0\xbf\xf7\x30\xdc\x7c\xc0\xb8\x7c\x2a\xb3\x03\x93\xf9\x51\x9d\xa1\x8a\x04\xd3\xc1\x8a\xa6\xd5\x5e\x23\x3b\xc2\xa4\x41\xd1\x2d\xe9\xee\xcb\xa6\x72\x46\xd9\x0e\xc9\x30\x35\x8d\x0b\xc9\x25\xbd\x9f\x92\x3f\x5f\x27\xf1\x81\x4a\x55\x8d\x78\x0b\xd4\xb8\x72\x0d\xf5\x5c\xc3\x0a\xe9\x16\x21\x5d\x3d\xc0\x89\x45\x0e\x75\xd4\xbe\x08\x6c\x64\x19\x82\x38\x02\x89\xc2\x29\xcd\x5c\x34\xd0\xd1\xe2\x4d\x84\x62\x92\x1a\x8f\x0d\x5d\x89\x9c\x30\xa7\x6a\x94\xa7\x28\x06\x5c\x04\x26\x90\x22\x66\x2f\x03\x94\xe9\xfd\xa6\x69\xe5\x09\xce\x78\x24\xf5\xfe\x89\xa1\x68\xcc\x9f\x5d\x1b\xc4\xf6\x39\xf7\x91\xb0\xd4\x93\x92\xb0\x15\x92\xa0\xed\x0d\x77\x53\x90\x5a\xb1\xc9\x73\x89\x22\x53\x9a\x12\x63\x9c\x6f\x8a\xe5\x86\x58\x0b\x71\x9a\xf3\x42\xef\x2a\x98\xdc\x78\x62\x98\xac\x5e\xf5\x8e\x83\xa1\xc2\x4c\x0c\xf8\x63\x2c\xf4\xad\x4e\xe7\x40\x2f\x05\xca\xd9\xc3\x51\x31\xcf\xa2\x52\x4f\x7f\x6a\x34\x34\x94\x76\xe1\xcb\x7c\x8c\xb3\xf2\x23\xab\x2d\x46\xfd\x2d\xc6\xc5\x6c\x8b\x8a\xae\xc6\x0c\x1e\x09\x07\xc1\xe5\x28\xd9\x9a\xb2\xdb\x8c\x95\xef\xcd\x19\x16\x83\xa8\xca\xfd\x5a\xaf\x98\x6c\xfe\x9d\x9c\x73\xac\x17\xa7\x4f\x23\x70\x83\x09\x68\xd2\x9f\xb7\x39\x5e\x75\xb6\x08\x4f\x15\xa0\xcf\x77\xf8\x36\x0c\x49\xad\xc4\x12\x8b\x34\x34\xe0\xd8\x7c\x1c\x64\x68\xab\x7d\x7b\x26\x41\xf5\x3c\x37\x09\xcb\x6e\x10\x56\x7b\x83\xd5\xde\xe0\x59\x64\x41\x32\xd9\x82\x07\x65\x0a\x6a\x26\xc1\x65\xfb\x5f\xf3\x13\xde\x0b\x70\x88\xba\xcd\x29\x69\x11\x83\x2a\x10\xa8\x3e\xfe\xd4\x48\x8e\x2f\x83\xcc\xcf\x13\xa5\x6a\xe6\xba\x57\x69\xee\x55\x0c\x5a\x47\x49\xab\x34\xf7\x52\x0a\x7b\xfa\x34\x77\x1e\xde\x73\xe9\xed\x86\x95\xc7\x47\x85\xdf\x08\x74\xcf\xc5\xf8\x33\xca\x3d\x34\x23\x5b\xed\xa6\x7f\x5a\x24\xb3\x13\xfc\x0d\x78\x96\x61\x30\x0f\xd5\x6c\x18\x11\xbb\x46\xb8\xa5\xca\x03\x19\xa2\x43\x07\x14\x5d\x38\x3e\xfc\x91\xd1\xed\xdb\x94\x98\x67\xf0\x3d\x91\xce\x22\x57\x25\xd8\x59\xb9\x0a\x78\x17\x6a\x07\xf5\x8d\x70\xf7\x6c\x73\xaf\xab\xb8\xee\xd7\x45\xc3\x55\x5c\xf7\x53\xc7\x75\x06\xb7\x2a\xc1\xce\x3c\x2d\x60\x5d\x9d\xfa\xd7\x21\x51\x04\x14\x8f\x39\x64\x8f\x93\x69\x47\xd7\x98\x33\x93\xdf\xa1\x22\x96\xed\x24\x40\x31\xc4\x75\x23\xea\xff\x7c\x97\x0e\x75\x27\x4b\xf6\x97\x4b\x05\xfe\x7e\xfe\xe9\x04\x4e\x35\x87\x97\x70\xf6\xf6\x00\x76\xf6\x3a\x1b\xb0\x3e\x3d\xb8\xa9\x38\xf7\x65\x8b\xa2\x1a\xb4\xb8\x18\xb6\x3d\x15\xf8\x6d\x31\x70\x34\x55\x8e\xaf\xcd\x4f\xf0\xfe\x35\x3a\x33\x14\xcf\x15\x0c\xcd\x81\xc6\xa3\xe9\x81\xda\x81\x71\x02\xcc\x9e\xf8\x9c\x4d\x6b\x9c\x0e\x91\x40\x98\x9b\xba\x4d\x86\xc8\x14\xc4\x55\xdc\x9a\x67\x5d\x12\x56\x71\x9a\xa7\x4e\x09\x3a\x7b\x3a\x73\x7e\x29\x3a\x26\x8d\x29\x7f\xb9\x8a\x74\x92\xb7\x7a\xb2\xca\x74\xac\xff\x1f\xb2\x40\x5d\x90\x7d\x55\xa7\x5e\xd5\xa9\x57\xb1\x64\x1d\x25\xad\xea\xd4\xcf\x2b\x9c\x7c\x40\x9d\x3a\xf1\x1d\x4b\x05\x9c\x0b\xea\xd5\x19\x9e\xb5\x8e\xb6\xe6\x5c\xfd\xea\x80\x69\xca\x31\x2d\x7d\xc6\xd4\xc9\x2a\x73\x05\xbb\xab\x52\xf2\xf3\x29\x25\xe7\x56\x7a\xad\x8a\x72\xca\xa0\x97\xdc\x6e\xa4\xdf\xad\x8a\xef\x5d\x51\xf7\xaf\x78\x17\x52\xe3\xed\xaa\x59\xa3\xf2\x18\xbc\xea\x05\xab\x2c\xaa\x7e\xff\x77\xac\x72\x6a\x7e\xd6\x00\x57\x33\x4b\x99\x6c\x72\x56\xd9\xca\x55\x84\x59\x47\x49\x0f\xcc\x56\x26\x66\xb6\xca\x5a\x3e\x55\x35\x3a\x9b\xcc\xa9\x7c\xe7\x2a\x0d\xb1\x35\x8b\xd3\xf5\x60\xf1\xb9\xac\x8d\x55\x91\xfa\x57\x02\xba\xef\x57\xa4\x9e\xee\xa5\x57\xf5\xe9\xe7\x58\x9f\xae\x80\xbf\x62\x99\x3a\x85\x80\x8f\x13\x16\xb7\x89\xeb\x72\x76\x95\x8f\x8b\x57\x71\xf2\xd3\xac\x81\x7d\x3d\x1b\xa7\x89\xf2\xe7\xa6\x01\xb4\x7a\x67\xd3\x04\xca\x23\x0a\xa4\xc7\x23\xdf\x85\x3e\x42\x24\xed\xb7\x54\x1c\xce\x06\x74\x18\xc5\x5f\xb0\xb0\x1f\x21\xc9\x14\x76\x74\x87\xc0\x99\x9d\x23\xab\x99\xd6\xca\xe3\xfc\xac\x1e\x67\x15\x5a\xff\xaa\xa1\x75\x16\x59\x0a\xb9\x98\x8a\x48\x7b\x4d\xc6\x08\x31\x43\x9a\x46\x63\x36\x4e\x2d\x52\xac\x53\x2b\x5d\xe6\x4d\xf9\x44\xe0\xcc\x68\xff\x77\x7d\x3a\x8c\x33\x0c\x05\x4a\xcd\xa7\xf8\x61\x05\x19\x85\x21\x17\x5a\x27\xfd\x89\xc1\xa6\xfd\xd3\xe3\x29\x60\xc7\xb8\x9f\xd2\x87\xf6\x4d\xa9\xcb\xf8\xdb\x4d\xa9\x3b\xda\x72\xae\xac\xa8\xf1\x5d\xe2\xfb\x9f\x06\x8b\x72\xcd\x89\xc1\x7c\x32\xa5\xf5\x33\x1c\xa0\x40\xe6\x64\x72\xce\xa5\xb5\x77\x80\x50\xe8\x19\x51\x34\x6f\x4f\xc6\x8b\xe6\xac\x28\xbb\x8e\x48\x80\xe5\x5f\xef\x69\xe5\x9a\x95\xba\x49\xfd\x4b\x3e\x5d\x35\xaf\x9b\x3f\x2d\xcd\x37\xf6\xe4\x78\x84\x31\xf4\x0b\x6b\xe6\x5b\xbb\x22\x42\x90\x49\xee\x09\x55\x18\x94\x2c\xce\x4a\xd9\xd2\x32\xcc\x13\x6f\x3f\x7d\x59\x10\xb2\xb6\x2a\xa8\xc3\xd9\x95\xa7\x6d\x68\x5e\x67\x97\x67\x1f\xcc\xd7\xd6\x98\xa1\x7f\x78\x6f\x3e\xe9\x2f\x52\xbb\x25\x99\x45\x02\x44\xe1\x90\x0b\x7a\x8f\xa5\x6f\x2d\x3e\xbe\xfe\xf5\x0f\x59\x14\x68\x94\x92\x94\x8d\x5e\x42\xbc\x07\xf9\x67\x86\x2c\xb5\x32\xe7\x0e\x27\x05\x1c\xc9\x6f\xdf\x34\x8e\x11\xc8\x46\x40\x0e\x61\xe9\xf0\x67\x6c\x0b\xd4\x99\x18\x5a\x16\xf8\xcc\x62\x5a\xbd\x33\x82\x01\x45\xdf\x2d\x9f\x09\xbb\xcc\xe1\x05\x28\xee\xf2\x1e\x08\x0c\x7d\x92\xec\xaa\xfa\xa8\x12\x4f\x57\xc4\x42\x1d\xca\xf5\x1e\x82\x3c\xd9\x18\x70\x69\xb8\x29\x9d\xb4\xa5\xe7\x78\x89\x2f\x68\x65\x87\xfe\x0b\x0c\x3b\x3f\xe4\x52\xaf\xb7\x9f\x42\x3d\x8f\xfb\xae\x4c\xd6\xa0\x09\xce\xed\x09\x0a\x1b\xad\x6b\x22\x20\xf0\xde\x9c\x2a\x57\x3c\xa4\x8e\xc5\x0b\xae\x3c\x14\x20\x27\x52\x61\xd0\x7a\x5a\x17\x16\xa0\x22\x2e\x51\x85\xe5\x5a\xc1\x66\x1e\x2b\xfd\x4b\xde\xd4\x2b\x8b\xad\xe6\x82\x0b\xbf\x65\x28\x96\x6e\x55\xe6\x80\x17\x36\xb2\x67\xcf\xdc\x2b\xa2\xca\x9a\x0e\xb8\x08\x88\xea\x81\x46\x9a\x75\x45\x53\xa1\x48\x4d\xf6\x51\xe8\xfe\x3b\xd9\x27\xd9\x9f\xab\x8a\xc0\x60\xc6\x80\x32\x85\x43\xcc\xfb\x84\xb4\x10\x94\xa9\x9d\xad\x9c\x9f\x0d\x7d\x3e\x09\x90\xa9\x2b\x9f\xdb\x40\x3d\xdf\xc1\xdc\x85\x64\x23\xcd\x0b\x22\x86\xa8\xb2\x31\xb9\xb1\x8c\x65\x78\x99\x55\x13\xaf\x44\xca\xd9\x39\x2a\x45\xd9\x50\x66\xb9\x16\xbe\xa3\x58\x6e\xc7\x65\xd1\x4e\xc6\x4f\xd4\x36\xff\x38\x48\xaa\xdd\x8d\x8b\x52\xc7\xb7\x57\x52\x11\x55\x30\xd5\xca\x56\x9a\x3a\xaa\xc0\xbc\x98\xdc\x02\x55\x5a\xdf\x53\xb0\xa2\x1a\xac\x02\xca\x48\x0a\xc1\xa6\xcb\x76\x72\x62\x5f\xa9\xa5\x6c\xb6\xeb\x0d\x48\x18\x52\x36\x4c\xf7\x67\x76\x0a\x73\x33\x1b\x95\x73\xed\xf8\x3c\x72\xaf\x42\xc1\xc7\xd4\xd5\xfb\x9a\x2a\x53\xe1\x91\x7b\x1a\x13\x95\xf2\xe2\x0c\xeb\x23\xe2\x3c\x91\xe6\xb7\x9c\x27\x88\x61\x51\x64\x5d\xea\x16\x9a\xf6\x99\x84\x5b\x2e\x46\x3e\x27\xae\x8c\x83\x43\xbb\xe9\x72\xb2\xc5\xd2\x12\x03\x2b\xdb\x0b\xa5\xa6\xa9\x0c\x76\xf5\xe3\x85\xc9\xb6\x59\x6e\xaf\x92\x34\x36\xa6\x2a\x45\x2c\x33\x5e\x3b\xfd\x90\x4c\xff\x93\x8c\x37\x63\x7f\x8b\xc8\x05\x0e\x73\x28\x57\x4a\x16\x44\xbe\xa2\x57\xe4\xbe\x48\x98\x1c\x08\x9e\x19\x4b\x26\xe9\x57\xae\xbc\xd9\xc1\x9f\xfc\x9e\x3c\xab\xb1\x74\x84\x93\x8b\x6c\xea\xe7\x1e\x9b\x65\xb2\x55\xc9\x95\x93\x67\xce\x04\x96\xcd\xd0\x1c\x23\x4b\x6e\x8e\x89\x1f\xe1\x02\x53\xcc\x25\x3c\xca\x65\x3d\xb7\x7b\x85\x81\xde\x7d\xce\xce\x12\x68\x2b\xb4\x3e\x18\x88\x39\x51\x0d\xa1\x4f\x18\xa6\xb2\x20\x16\x5d\x9b\x3f\x55\xe0\xb5\x8a\x9f\x6a\xb0\xaf\xed\x56\x4b\x8e\xf0\xfd\xe4\x3b\x9f\xe9\x59\x1e\xd3\xbc\x22\xf6\xea\xcd\x59\xf8\x7d\xce\x95\x54\x82\x84\x57\xf6\x93\xe3\x35\x60\x9a\xea\x30\xb3\x06\x60\xc4\x94\x12\x1d\x81\x6a\x3e\x70\xe4\xd6\x67\xef\xd1\xc1\xab\x96\x07\xca\x67\x8e\x8a\x72\xa6\x2d\x6a\x81\x1f\xd4\x97\x21\x19\xa6\x53\xa2\x92\xde\xa7\x2f\x15\x57\xc4\x4f\x5d\x1b\x3b\x58\x6e\xe4\xb5\x86\xa5\xa5\x28\x12\xe5\xb7\x19\x5a\xb8\xc5\x54\x46\xe6\x6a\x32\xf3\xc0\x64\xf6\x1f\xb4\xee\x1e\x0f\xa6\x1d\xee\xd6\x0f\xdb\x05\x92\x92\xa2\x46\x25\xf9\x34\xcd\xbf\x68\xdf\xd2\x28\x16\x71\x67\x2d\x6c\x29\x77\x5a\xc3\x2a\xd4\x15\x8f\x0f\x75\x94\x21\xd0\xe1\x62\x5a\x85\xc8\x65\xe8\x4a\x24\xcc\x55\x68\x4b\xea\xb3\x69\x6b\xb0\x32\xa4\xac\x34\xff\xb2\x56\xf6\x95\x2c\x32\x44\xa0\xcc\xc5\xbb\x02\xf7\x01\xf1\x25\xd6\x97\xb2\x58\xe6\xc9\xdb\xa8\x0d\x36\xa0\xd9\xb5\x36\x90\x36\x4e\x2b\x74\x6a\x2d\xcd\x15\xfa\x24\x0a\xfa\x28\xb4\x2a\xcd\xf2\x02\xca\x00\x89\xe3\xa5\x07\xfd\x88\xc3\xc8\x2f\xa2\xe9\x30\x3a\x1d\x03\xd1\x49\x1d\xc9\x84\x40\x49\xc3\xb8\x90\x94\xee\x57\x87\xa7\xe6\x6e\x7c\xd3\x5e\xbc\x8d\x9d\xe8\xef\x9f\x2f\x32\x30\xe1\x29\x15\x6a\xee\x59\x79\xaa\x5f\x43\xca\x45\x72\xd4\x35\x12\x6e\x36\xb3\xb0\x02\xcd\x5c\x89\xce\xb3\x2b\xb7\xe2\xd0\x83\x7d\xf9\xa8\x9d\xe1\x63\x56\x21\x34\x0f\x3e\x9d\x9c\x1c\x1d\x5c\x7c\x3a\x5b\xff\xf8\xee\xe3\xc5\x7a\x86\x24\x5e\x7b\xd0\x3c\x4f\xbd\xd6\x97\xbc\xf0\x27\x81\x71\x35\xab\x43\xbd\x84\x48\xa2\x7d\x01\xf0\xb5\xb6\xe7\x62\xb4\x9b\x5b\x9c\xd0\xec\xd2\xcf\xc7\x34\xb8\x79\xe7\x88\xc3\xe8\xc3\x4e\x97\x5c\xde\x1d\xff\xe3\xe6\xcd\xc5\xcd\xc9\x19\x69\x26\x5a\x3a\xb6\xc5\xe4\x3f\xb4\x09\xd5\xd0\xd4\xc6\x23\x69\x6a\x63\xa1\xa2\x36\xca\xf4\xf4\x96\x50\xdf\x26\xd6\x43\x22\x24\x82\x44\x22\x1c\xcf\x2e\x80\x1e\x5c\x32\xf3\x2f\x5e\x14\xb7\xfb\x94\xf7\xe9\x0f\x63\xd8\x17\x4e\x49\x48\xaf\x6c\xba\x4f\xda\xff\x9a\xd2\x83\x42\xb7\x3d\x58\xd4\xcb\xac\x36\xe8\x70\x3f\x0a\x98\x59\x95\x86\xbf\xa5\xec\xc1\x1a\x75\xd7\x5a\x70\x5e\x46\x27\x81\x08\xec\xc5\x3b\xb8\x97\xe6\xd6\xcb\xdc\xf6\x2f\xb9\x6b\x43\xbf\x16\x98\xc9\x49\xca\xfe\x1a\x36\xe1\x35\x74\xd3\xfa\xc9\xcf\xbb\xff\xf9\xf0\x5d\x34\xe9\x1f\x8b\x23\x76\x27\xf6\x31\xd8\xdd\xd8\x1a\xde\x8c\x46\xf4\x70\x9c\xcc\x7b\xbe\x10\x5f\x36\xd7\x5b\x9d\xad\x47\x99\xeb\xdd\x45\x53\xbd\x5b\x32\xd3\x75\x5e\xc5\x9a\x0e\xa6\xf4\x1c\x56\xd9\x90\x76\x9f\x6e\x40\xc6\x1a\xcf\x32\xc7\xe0\xa8\xfb\x7a\xad\x4b\xdf\x6f\xba\xd1\x9f\x5f\x8f\xc7\xe3\xed\xaf\xe3\x0f\xfe\xe4\xbe\x1b\xbc\x3b\xdb\xfc\x7d\x72\x73\xb2\x66\x00\x60\xc0\x23\xe6\xce\x59\xe2\x5f\x3f\xed\x0e\x37\x86\x3b\xbf\x5d\xb8\x97\xef\x2f\xc9\xc6\x48\xfe\xf6\x6a\x63\xf4\xc7\xe1\xe6\x24\xd1\x4e\xfe\x60\x4a\x29\x00\x76\x1f\x07\xff\xba\x0b\xe1\xaf\x5b\xa2\x9a\xd9\xba\x1d\xa3\xa0\x83\x89\xc6\x78\x7b\xdc\xa5\x07\x67\xb1\x7f\x02\x12\x29\x8f\x0b\x7a\x9f\xd4\x2a\x46\xc8\xea\xe9\x67\xf3\xd2\x3b\xf2\x6e\x83\x2f\x6f\xc2\xcf\xa7\x83\xe3\x0d\xff\x04\x47\xa1\xbb\xf5\x8f\xc3\x44\x3f\x7b\x27\x24\xc0\x03\xce\x06\x3e\x75\x54\x0d\x5d\x6d\xee\x3c\x8a\xae\xd2\x6c\xca\x75\x95\xa6\xc8\x9a\xd1\xf4\x54\x8b\x01\x1e\x2a\x81\xf8\x02\x89\x3b\x31\x65\xc7\x4a\x5d\xec\x8c\xbe\x76\x2e\xe9\xd1\xe8\x7e\xf4\xe5\xe0\xfe\xf3\x29\x1e\x6f\xf0\xaf\xe8\xb9\x9b\x47\xb1\x2a\x8a\xa7\x4c\xca\x86\xbf\xf7\x28\xa3\xdf\x5b\x34\xf8\xbd\x52\x3b\x99\x1d\x1c\xc5\x6c\xa7\x85\x69\xc7\xa3\x0f\xe3\xb7\x7b\xd7\x1f\xff\xf8\xba\xf3\x75\xe8\x0d\x3e\xee\x0d\xdf\x9d\xc9\xdf\xc6\x47\x9f\xa7\x63\xad\x0d\x1a\x4f\x36\xe2\x54\x2c\xd5\xb4\x27\x73\xcc\xb1\x4d\xf3\x2f\xb2\x26\xcc\x91\xa8\x7a\xf0\xe9\xe0\xe3\xfa\xd1\x97\xf5\x3d\x1d\xbf\x25\x5e\xcb\x1e\xee\x9c\xd1\xe0\x9d\x5a\x8f\xfd\x1d\x09\xe9\x7a\x97\xde\x75\x36\x7d\xe6\xfa\xc1\x4d\xe7\x66\xe0\xec\x4a\xaa\xc8\xb6\xf4\xaf\xc7\xaf\xd2\x89\x89\x41\xea\xf0\x94\x56\x43\x77\xb8\xed\xbe\x7a\x75\xd3\xf1\x85\xe3\x8e\xb7\x86\xbb\xc4\xef\xef\x4a\x7f\x30\x64\xd7\x9b\xae\xd7\x97\xd7\xff\xf5\x1f\x7f\x3b\xfa\x72\x71\xb6\x0f\xff\x6d\x07\xdc\x32\x4a\x7a\x4d\x5d\x64\x4a\x4f\x59\xba\xa6\x43\x25\xac\x6d\x75\xb6\xd6\x5e\x1a\x55\x98\xcb\x83\x0f\x97\xe7\x17\x47\x67\xe7\x56\x17\xfa\xa1\xf9\x02\xc4\x74\x5e\x61\xc6\xc8\xd0\x77\x87\xdb\x5c\x6c\x77\xc6\x34\xea\xec\x72\xd4\xb3\xe6\x89\x91\xb3\xb1\xe3\x0e\x07\xea\xba\x4b\x9c\xb5\xb4\xf6\xe2\x44\x81\x69\x35\x77\x10\x29\xc8\xfd\xfb\x3c\x4c\xb9\x90\x9f\xc5\x64\x87\xc9\x9b\xfe\x86\x3c\x09\xde\x5e\x6f\xf7\xbf\x84\x87\xbb\x07\xa4\xd9\xf8\xff\x00\x00\x00\xff\xff\x1c\xf7\xe0\xfb\xf3\x6e\x00\x00")

func connector_mgmtYamlBytes() ([]byte, error) {
	return bindataRead(
		_connector_mgmtYaml,
		"connector_mgmt.yaml",
	)
}

func connector_mgmtYaml() (*asset, error) {
	bytes, err := connector_mgmtYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "connector_mgmt.yaml", size: 28403, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"connector_mgmt.yaml": connector_mgmtYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"connector_mgmt.yaml": &bintree{connector_mgmtYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
