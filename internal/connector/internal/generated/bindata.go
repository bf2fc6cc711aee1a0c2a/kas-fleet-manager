// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package generated generated by go-bindata.// sources:
// .generate/openapi/connector_mgmt.yaml
package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _connector_mgmtYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7b\x73\xdb\x38\x92\xff\x5f\x9f\xa2\x4f\xb9\x2b\xef\xde\xc5\x7a\xf8\x19\xab\x6a\xb6\xca\xb1\x9d\x8c\x67\x12\xc7\xe3\xc7\x24\xd9\xab\x2d\x07\x22\x5b\x22\x2c\x12\xa0\x01\x50\xb6\xbc\xb5\xdf\x7d\x0b\x04\x29\xbe\x25\xca\xf1\xc6\x4e\x42\x57\xe5\x0f\x91\x8d\x66\xa3\xd1\xf8\xf5\x0b\x64\xb8\x8f\x8c\xf8\x74\x00\x9b\x9d\x5e\xa7\x07\x2f\x80\x21\xda\xa0\x1c\x2a\x81\x48\x18\x51\x21\x15\xb8\x94\x21\x28\x0e\xc4\x75\xf9\x2d\x48\xee\x21\x1c\x1f\x1e\x49\x7d\x69\xc2\xf8\xad\xa1\xd6\x03\x18\x44\xec\xc0\xe6\x56\xe0\x21\x53\x9d\xd6\x0b\xd8\x77\x5d\x40\x66\xfb\x9c\x32\x25\xc1\xc6\x11\x65\x68\x83\x83\x02\xe1\x96\xba\x2e\x0c\x11\x6c\x2a\x2d\x3e\x45\x41\x86\x2e\xc2\x70\xa6\x9f\x04\x81\x44\x21\x3b\x70\x3c\x02\x15\xd2\xea\x07\x44\xd2\x71\x98\x20\xfa\x46\x92\x84\x73\xdb\x17\x74\x4a\x14\xb6\x5f\x02\xb1\xf5\x1c\xd0\xd3\xa4\xca\x41\x68\x4f\x88\x5c\x1f\xb9\x88\x6a\xdd\x23\x8c\x8c\x51\xac\x47\xc4\x9d\x19\xf1\xdc\x36\x8c\xa8\x8b\x2d\xca\x46\x7c\xd0\x02\x50\x54\xb9\x38\x80\x03\xce\x18\x5a\x8a\x0b\x38\x47\x31\xa5\x16\xc2\x1b\xcd\x01\xde\x1b\x0e\x2d\x80\x29\x0a\x49\x39\x1b\x40\xaf\xd3\xeb\x6c\xb6\x00\x6c\x94\x96\xa0\xbe\x0a\x2f\x2e\x19\x6f\x26\x74\x86\x52\xc1\xfe\xe9\xb1\x96\xd4\x88\x06\x56\x3c\x4e\x76\x5a\x12\x85\x7e\x88\x96\x6a\x1d\x02\xe1\x0e\xc0\x51\xca\x97\x83\x6e\x97\xf8\xb4\xa3\xb5\x2d\x1d\x3a\x52\x1d\x8b\x7b\x2d\x80\x9c\x00\xef\x09\x65\xf0\x17\x5f\x70\x3b\xb0\xf4\x95\xbf\x82\x61\x57\xce\x4c\x2a\x32\xc6\x65\x2c\xcf\x15\x19\x53\x36\x2e\x65\x34\xe8\x76\x5d\x6e\x11\xd7\xe1\x52\x0d\x5e\xf5\x7a\xbd\xe2\xf0\xf9\xfd\x64\x64\xb7\x48\x65\x05\x42\x20\x53\x60\x73\x8f\x50\xd6\x52\x64\x1c\x29\x80\x11\x2f\xb3\x2e\x17\x33\x1f\x65\x71\x7c\xbb\x5d\x46\x5d\x9b\x10\x0e\xdc\x40\x2a\xac\x18\xd0\xf2\x89\x72\x42\x79\x5e\xe8\x7f\x70\xe1\xa0\x44\x20\x02\x43\x43\x9b\xaf\x1d\x08\x74\x89\x42\x5b\xaf\xad\x8c\x88\xdb\x5a\xcf\xdd\x39\xc9\x95\x37\xf6\x54\x77\xda\xef\x4e\xc8\x68\x42\xae\x92\xeb\x4a\x4f\xab\xfb\xcf\xec\x85\x2b\x6a\xff\xab\x3d\x08\x45\xf2\x89\x20\x1e\xaa\xc8\x2e\xf4\x5f\x3c\x87\xc2\x90\xe8\x7e\x6e\x1a\x17\x0e\x02\xb5\x81\x8f\x72\x32\xeb\x41\xf3\x11\xd2\x72\xd0\x23\x83\xf9\x6f\x08\x6f\x0f\x40\x2a\x41\xd9\x78\x7e\x99\xb2\x01\x68\x95\xcc\x2f\x08\xbc\x09\xa8\x40\x7b\x00\x4a\x04\x86\xdd\x18\x55\xcc\x27\x5e\xcc\x58\xee\xb2\xc5\xd4\x3c\xa4\xcf\x99\xc4\x14\x69\x7b\xa3\xd7\x6b\xa7\xa5\xb1\x38\x53\xc8\x54\xfa\x12\x00\xf1\x7d\x97\x5a\x44\x4f\xb3\x7b\x2d\x39\xcb\xde\x2d\x9b\x94\xf9\xfb\x6f\x81\xa3\x01\xb4\x5f\x74\x2d\xee\xf9\x9c\x21\x53\xb2\x6b\x68\x65\x77\x2e\xa2\x96\xb0\x9d\x1a\x5a\xd0\x69\x56\x93\xe0\x11\x65\x39\x7a\xb7\x68\x2d\x6b\xb5\x60\x68\xf8\xd1\x7c\xb6\x7a\xfd\xa7\x99\xcf\x91\x10\x5c\xb4\x73\x43\xf0\x8e\x78\xbe\x9b\x56\x78\xfc\xb7\xd5\xeb\x1f\x99\x9b\xc5\x7b\xe5\x0f\x8a\x79\x75\x93\xa1\x95\x6a\xdb\x0f\x94\x03\x8a\x4f\x90\x69\x3c\xa4\x6c\x4a\xdc\x94\xd5\xb6\xb7\x7a\x5b\xdf\x89\x92\xb6\x1e\xae\xa4\xad\x65\x4a\x3a\xe1\x89\x2d\xe5\x6c\x0c\xef\xa8\x54\x32\x51\xd8\xf6\x53\xed\x92\x15\x15\xb6\xdd\xeb\x3d\x54\x61\xc9\xd0\x4a\x85\x5d\x32\xbc\xf3\xd1\xd2\xf8\x8b\x5a\x2e\xe0\x56\xe8\x54\x62\xcb\x92\x68\x05\x82\xaa\x59\x1a\x89\x5e\x23\x11\x28\x06\xf0\xff\xf0\x8f\xe8\x2a\xf7\x51\x84\x4a\x3a\xb6\x07\x1a\xc3\x32\x40\xf0\x7a\x76\x7c\x18\x73\x0b\x3c\x8f\x88\xd9\x00\xde\xa2\x02\x92\x5f\xa1\xe1\x0c\xa8\xdd\x6a\x01\xac\x82\xfe\x83\x87\xe1\xe6\x03\xe6\xe5\x52\x99\x9d\x98\xcc\xcf\xea\x0c\x55\x20\x98\x0e\x56\x34\xad\xf6\x1a\xd9\x19\xc6\x03\x8a\x6e\x49\x3f\xbe\x6c\x29\x13\xca\xae\x4f\xc6\xa9\x65\x5c\x4a\x2e\xe9\xfd\x9c\xfc\xf9\x3a\x89\x77\x54\xaa\x6a\xc4\x5b\xa2\xc6\xc6\x35\xd4\x73\x0d\x0d\xd2\x2d\x43\xba\x7a\x80\x13\x89\xec\xeb\xa8\x7d\x19\xd8\xc8\x32\x04\xb1\x04\x12\x85\x73\x9a\x85\x68\xa0\xa3\xc5\x9b\x00\xc5\x2c\x35\x1f\x13\xba\x12\x39\x63\x56\xd5\x2c\x4f\x51\x8c\xb8\xf0\xc2\x40\x8a\x84\xb9\x0c\x50\xa6\xf3\xcd\x70\x94\x23\x38\xe3\x81\xd4\xf9\x13\x43\xd1\x5a\xbc\xba\x26\x88\x1d\x72\xee\x22\x61\xa9\x3b\x25\x61\x2b\xc4\x41\xdb\x6b\x6e\xa7\x20\xb5\x22\xc9\xb3\x89\x22\x73\x9a\x12\x63\x5c\x6c\x8a\xe5\x86\x58\x0b\x71\xda\x8b\x42\xef\x2a\x98\xdc\x78\x62\x98\xac\xde\xf5\x96\x85\xbe\xc2\x4c\x0c\xf8\x7d\x6c\xf4\xad\x5e\xef\x40\x6f\x05\xca\xd9\xc3\x51\x31\xcf\xa2\x52\x4f\x7f\x6a\x34\x0c\x29\xcd\xc6\x97\xf9\x18\xa7\xf1\x23\x4d\x8a\x51\x3f\xc5\xb8\x48\x52\x54\xb4\x35\x66\xf0\x40\x58\x08\x36\x47\xc9\xd6\x94\x49\x33\x1a\xdf\x9b\x33\x2c\x06\x41\x95\xfb\x35\x5e\x31\x4e\xfe\xad\x9c\x73\xac\x17\xa7\xcf\x23\xf0\x10\x13\x30\x2c\x7f\xde\xe6\x78\xd5\x49\x11\x9e\x2a\x40\x5f\xec\xf0\x4d\x18\x92\xda\x89\x25\x16\x19\xd2\x80\x65\xea\x71\x90\xa1\xad\xf6\xed\x99\x02\xd5\xf3\x4c\x12\x56\x4d\x10\x9a\xdc\xa0\xc9\x0d\x9e\x45\x15\x24\x53\x2d\x78\x50\xa5\xa0\x66\x11\x5c\x76\xff\xb9\xb8\xe0\xbd\x04\x87\xa8\xdd\x9e\x93\x16\x31\xa8\x02\x81\xea\xe3\x4f\x8d\xe2\xf8\x2a\xc8\xfc\x3c\x51\xaa\x66\xad\xbb\x29\x73\x37\x31\x68\x1d\x25\x35\x65\xee\x95\x14\xf6\xf4\x65\xee\x3c\xbc\xe7\xca\xdb\x2d\x23\x8f\x8b\x0a\xbf\x12\xe8\x9e\x8b\xf1\x67\x94\x7b\x18\xce\xac\xc9\xa6\x7f\x58\x24\x33\x0b\xfc\x15\x78\x96\x61\xb0\x08\xd5\x4c\x18\x11\xb9\x46\xb8\xa5\xca\x01\xe9\xa3\x45\x47\x14\x6d\x38\x3e\xfc\x9e\xd1\xed\xeb\x94\x98\x67\xf0\x2d\x91\xce\x20\x57\x25\xd8\x19\xb9\x0a\x78\xe7\x6b\x07\xf5\x95\x70\xf7\x6c\x6b\xaf\x4d\x5c\xf7\xf3\xa2\x61\x13\xd7\xfd\xd0\x71\x5d\x88\x5b\x95\x60\x17\xde\x2d\x60\x5d\x9d\xfe\xd7\x21\x51\x04\x14\x8f\x38\x64\x8f\x93\x69\x47\xd7\x5a\xb0\x92\xdf\xa0\x23\x96\x7d\x88\x87\x62\x8c\xeb\xa1\xa8\xff\xf7\x4d\x1e\xa8\x1f\xb2\xe2\xf3\x72\xa5\xc0\xdf\xce\x3f\x9c\xc0\xa9\xe6\xf0\x12\xce\xde\x1c\xc0\xce\x5e\x6f\x03\xd6\xe7\x07\x37\x15\xe7\xae\xec\x50\x54\xa3\x0e\x17\xe3\xae\xa3\x3c\xb7\x2b\x46\x96\xa6\xca\xf1\x35\xf5\x09\x3e\xbc\x46\x2b\x41\xf1\x5c\xc3\x30\x3c\xd0\x78\x34\x3f\x50\x3b\x0a\x9d\x00\x33\x27\x3e\x93\x65\x8d\xca\x21\x12\x08\xb3\x53\x97\xc9\x18\x99\x82\xa8\x8b\x5b\xf3\xac\x4b\xcc\x2a\x2a\xf3\xd4\x69\x41\x67\x4f\x67\x2e\x6e\x45\x47\xa4\x11\xe5\x4f\xd7\x91\x8e\xeb\x56\x4f\xd6\x99\x8e\xf4\xff\x5d\x36\xa8\x0b\xb2\x37\x7d\xea\xa6\x4f\xdd\xc4\x92\x75\x94\xd4\xf4\xa9\x9f\x57\x38\xf9\x80\x3e\x75\xec\x3b\x56\x0a\x38\x97\xf4\xab\x33\x3c\x6b\x1d\x6d\xcd\xb9\xfa\xe6\x80\x69\xca\x31\xad\x7c\xc6\xd4\xca\x2a\xb3\x81\xdd\xa6\x95\xfc\x7c\x5a\xc9\xb9\x9d\x5e\xab\xa3\x9c\x32\xe8\x15\xd3\x8d\xf4\xbb\x55\xd1\xb5\x2b\x6a\xff\x2b\xca\x42\x6a\xbc\x5d\x95\x0c\x2a\x8f\xc1\xab\x5e\xb0\xca\xa2\xea\xb7\x7f\xc7\x2a\xa7\xe6\x67\x0d\x70\x35\xab\x94\x71\x92\xd3\x54\x2b\x9b\x08\xb3\x8e\x92\x1e\x58\xad\x8c\xcd\xac\xa9\x5a\x3e\x55\x37\x3a\x5b\xcc\xa9\x7c\xe7\x2a\x86\x58\x83\xe5\xc1\x63\x81\x62\x76\x67\x64\x0b\x2e\x91\x69\x48\x45\x54\x10\xbe\x08\x1f\xf8\x36\x69\x5a\xc7\x05\x45\x35\xf0\xf3\xd5\xf0\xd3\x20\x4f\x99\xce\xfe\x03\xc8\x63\xb6\xf0\x32\xf0\x09\x6c\x9f\x64\x9b\xc4\xb9\x10\xaf\x7e\x03\x25\xc2\x8c\xe7\xd0\x3e\x59\x56\xb6\x6d\x41\xfd\x83\x3f\x0f\x41\xd7\xe6\x00\x50\x83\xe2\x3f\xd6\x01\xa0\x79\x9d\xb2\x39\xfb\xf3\x1c\xcf\xfe\x54\xa0\x7b\xf1\x08\x50\x0a\xdd\x1f\xa7\xe4\xd0\x25\xb6\xcd\xd9\x55\xbe\xe6\xd0\xd4\x20\x9e\x66\x0f\xec\xeb\xd5\x38\x8d\x95\xbf\xb0\xc4\xaa\xd5\x9b\x2c\x13\x28\x87\x28\x90\x0e\x0f\x5c\x1b\x86\x08\x81\x34\xdf\xa9\xb2\x38\x1b\xd1\x71\x10\x7d\x1d\xc8\x7c\xe0\x29\xd3\x34\xd7\x0f\x04\xce\xcc\x1a\x19\xcd\x74\x1a\x8f\xf3\xa3\x7a\x9c\xa6\x6c\xf1\x53\x24\x0f\x25\x65\x8b\x2c\xb2\x14\xea\xdc\x15\x55\x8c\x35\x19\x21\x44\x82\x34\xad\x56\x32\x4f\x2d\x52\xa4\x53\x23\x5d\xe6\x2b\x24\xb1\xc0\x99\xd9\xfe\x6d\x7d\x3e\x8d\x33\xf4\x05\x4a\xcd\xa7\xf8\xd1\x1a\x19\xf8\x3e\x17\x5a\x27\xc3\x59\x88\x4d\xfb\xa7\xc7\xa9\x94\x26\xc4\xfd\x94\x3e\xb4\x6f\x4a\xfd\x8c\xbe\x8b\x97\xba\xa2\x2d\xe7\xca\x88\x1a\x5d\x25\xae\xfb\x61\x94\xe6\xb1\xc8\x60\x3e\x84\xc7\x96\xce\x70\x84\x02\x99\x95\xe9\xe7\x95\x9e\x6b\x02\xf0\x85\x5e\x11\x45\xf3\xf6\x14\x7a\xd1\x9c\x15\x65\xf7\x11\xf1\xb0\xfc\xcb\x68\x9d\xdc\xb0\x52\x37\xa9\xff\xe2\xcf\x02\x2e\x7a\xcc\x9f\x86\xe6\x2b\x9f\x64\x39\x84\x31\x74\x0b\x7b\xe6\x6b\x1f\x45\x84\x20\xb3\xdc\x1d\xaa\xd0\x2b\xd9\x9c\x95\xb2\xa5\x65\x58\x24\xde\x7e\xfa\x67\x41\xc8\xda\xaa\xa0\x16\x67\x57\x8e\xb6\xa1\x45\x0f\xbb\x3c\x7b\x17\x7e\xc9\x92\x85\xf4\x0f\x7f\x9a\x4b\x86\xcb\xd4\x6e\x48\x92\x48\x80\x28\x1c\x73\x41\xef\xb1\xf4\x8d\xf0\xc7\xd7\xbf\xfe\x43\x16\x78\x1a\xa5\x24\x65\x93\x97\x10\xe5\x20\xff\xc8\x90\xa5\x76\xe6\xc2\xe9\xa4\x80\x23\xfe\xdb\x0f\x07\x47\x08\x64\x22\x20\x8b\xb0\x74\xf8\x33\x35\x87\x7f\x32\x31\xb4\x2c\xf0\x49\x62\x5a\x9d\x19\xc1\x88\xa2\x6b\x97\xaf\x84\xd9\xe6\xf0\x02\x14\xb7\xf9\x00\x04\xfa\x2e\x89\xb3\xaa\x21\xaa\xd8\xd3\x15\xb1\x50\x87\x72\x83\x87\x20\x4f\x36\x06\x5c\x19\x6e\x4a\x17\x6d\xe5\x35\x5e\xe1\xeb\x84\xd9\xa9\xff\x04\xd3\xce\x4f\xb9\xd4\xeb\xed\xa7\x50\xcf\xe1\xae\x2d\xe3\x3d\x18\x06\xe7\xe6\x74\x9a\x89\xd6\x35\x11\x10\xf8\x3d\x7c\x63\x47\x71\x9f\x5a\x06\x2f\xb8\x72\x50\x80\x9c\x49\x85\x5e\xe7\x69\x5d\x98\x87\x8a\xd8\x44\x15\xb6\x6b\x05\x9b\x45\xac\xf4\x5f\xfc\x16\x74\x59\x6c\xb5\x10\x5c\xf8\x2d\x43\xb1\xf2\xa8\x32\x07\xbc\x74\x90\x39\xd7\x6b\x5f\x11\x55\x36\x74\xc4\x85\x47\xd4\x00\x34\xd2\xac\x2b\x9a\x0a\x45\x6a\xb2\x8f\x6a\xaf\xff\x29\xf6\x71\xf5\xe7\xaa\x22\x30\x48\x18\x50\xa6\x70\x8c\x79\x9f\x90\x16\x82\x32\xb5\xb3\x95\xf3\xb3\xbe\xcb\x67\x1e\x32\x75\xe5\x72\x13\xa8\xaf\x54\xf5\x35\x91\xe6\x05\x11\x63\x54\xd9\x98\x3c\xb4\x8c\x55\x78\x85\xbb\x26\xda\x89\x94\xb3\x73\x54\x8a\xb2\xb1\xcc\x72\x2d\x7c\xa3\xb6\xdc\x8e\xcb\xa2\x9d\x8c\x9f\xa8\x6d\xfe\x51\x90\x54\xfb\x31\x36\x4a\x1d\xdf\x5e\x49\x45\x54\xc1\x54\x2b\x47\x99\xee\x5f\x0d\xf2\xbb\x75\x97\xb2\x49\x8a\x32\xab\x90\x34\x87\xba\x1f\xa0\x84\x8a\xc3\x71\xe5\xea\x86\xb5\xc2\xb5\xb5\xaa\xe4\xe8\x6f\x0b\x78\x69\x89\x64\x49\x48\xa9\x53\x86\x40\x46\x47\x31\x32\xe3\x35\xed\x97\xc2\xc3\xbf\x24\xb2\x03\x65\xf3\xd7\x24\x15\xcf\x8c\xfd\xf2\xf6\xe8\x62\xa5\x4f\x68\x96\x7d\x40\xf9\x4b\x27\xf2\x16\x69\xa3\x9f\x7b\x0c\xaa\x27\xee\x51\x46\x52\x6e\x64\x8e\x9d\xb3\x13\xf3\xcd\x08\xca\x92\xd2\x83\x47\x7c\x9f\xb2\x71\xa6\x29\xa3\xd3\xb5\x85\xe5\xa5\xca\x0d\x67\xb9\x3c\xb0\xaf\x7c\xc1\xa7\xd4\xd6\xc9\x65\xd5\x7e\xe5\x81\x7d\x1a\x11\x95\xf2\xe2\x0c\xeb\xbb\xa5\x45\x22\x2d\x1e\xb9\x48\x90\x90\x45\x91\x75\xa9\x6f\x6e\x9b\x7b\x12\x6e\xb9\x98\xb8\x9c\xd8\x32\x8a\xd0\x4d\xe6\x6b\x65\x9b\x51\x25\xbb\xbc\x2c\x21\x4d\x2d\x53\x99\xef\xd3\xb7\x97\x56\x3c\x93\x02\x6b\x25\x69\x64\x4c\x55\x8a\x58\x65\xbe\x66\xf9\x21\x5e\xfe\x27\x99\x6f\xc6\xfe\x96\x91\x0b\x1c\xe7\x5c\x4d\x29\x99\x17\xb8\x8a\x5e\x91\xfb\x22\x61\xfc\xc6\x4b\x62\x2c\x99\xca\x6b\xb9\xf2\x92\x93\xad\xf9\xc2\x48\x56\x63\xe9\x30\x33\x17\x5e\xd6\x2f\x00\xb7\xcb\x64\xab\x92\x2b\x27\xcf\x82\x05\x2c\x5b\xa1\x05\x46\x16\x5f\x9c\x12\x37\xc0\x25\xa6\x98\xab\x3a\x95\xcb\x7a\x6e\x12\xb6\x91\xc6\xeb\xe4\xb0\x5c\xd2\x84\x06\x12\xbe\x32\x04\xbe\x4b\x18\xa6\x4a\x51\xc6\xc5\xb5\x7f\xa8\xe8\xb7\x09\x62\x6b\xb0\xaf\x11\xdb\x94\x9a\xdf\x4f\x90\x7e\xce\xcf\x4a\x84\xc3\x2b\x02\xe0\xc1\x82\x8d\x3f\xe4\x5c\x49\x25\x88\x7f\x65\xfe\x4f\x8d\x1a\x30\x4d\x75\xac\x5f\x03\x30\x22\x4a\x89\x96\x40\xb5\x18\x38\x72\xfb\x73\xf0\xe8\xe0\x55\xcb\x03\xe5\xcb\x77\x45\x39\xd3\x16\xb5\xc4\x0f\xea\x9f\x3e\x19\xa7\xeb\xd2\x92\xde\xa7\x7f\x2a\xae\x88\x9b\xfa\x1d\xda\xc1\x6a\x33\xaf\x35\x2d\x2d\x45\x91\x28\x9f\xeb\x69\xe1\x96\x53\x85\x32\x57\x93\x85\x37\xc2\xf6\xca\x83\xf6\xdd\xe3\xc1\xb4\xc5\xed\xfa\xb9\x93\x40\x52\xd2\x59\xaa\x24\x9f\xa7\x45\xcb\x92\xc7\x56\x31\x2d\x4a\x46\x98\x7e\xfa\xbc\x91\x58\x68\xee\x1e\x1f\xea\x28\x43\xa0\xc5\xc5\xbc\x15\x94\x2b\x93\x96\x48\x98\x6b\x93\x97\x34\xc9\xd3\xd6\x60\x64\x48\x59\x69\xfe\x6d\xe4\xec\x3b\xc7\x64\x8c\x40\x99\x8d\x77\x05\xee\x23\xe2\x4a\xac\x2f\x65\xb1\xd7\x96\xb7\x51\x13\x6c\x40\xbb\x6f\x6c\x20\x6d\x9c\x46\xe8\xd4\x5e\x5a\x28\xf4\x49\xe0\x0d\x51\x68\x55\x86\xdb\x4b\x67\x78\x48\x2c\x27\x3d\xe9\x47\x9c\x46\x7e\x13\xcd\xa7\xd1\xeb\x85\x10\x1d\x37\xf3\xc2\x10\x28\x1e\x18\x75\xf3\xd2\xcf\xd5\xe1\x69\x78\x35\xba\x68\x7e\xbc\x89\x9c\xe8\x6f\x1f\x2f\x32\x30\xe1\x28\xe5\x6b\xee\x59\x79\xaa\xdf\xb3\xcd\x45\x72\x3a\x27\x6f\xf7\x7b\x9b\xed\x2c\xac\x40\x3b\xd7\x27\x75\xcc\xce\xad\x48\x82\xcd\xdb\xb5\xdd\x0c\x9f\x70\x17\x42\xfb\xe0\xc3\xc9\xc9\xd1\xc1\xc5\x87\xb3\xf5\xf7\x6f\xdf\x5f\xac\x67\x48\xa2\xbd\x07\xed\xf3\xd4\x7b\xeb\xf1\x1b\xed\x12\x18\x57\x49\x33\xf0\x25\x04\x12\xcd\x1b\xee\xbf\x68\x7b\x2e\x46\xbb\xb9\xcd\x09\xed\x3e\xfd\x78\x4c\xbd\x9b\xb7\x96\x38\x0c\xde\xed\xf4\xc9\xe5\xdd\xf1\xdf\x6f\x5e\x5f\xdc\x9c\x9c\x91\x76\xac\xa5\x63\xd3\xd1\xff\x43\x9b\x50\x0d\x4d\x6d\x3c\x92\xa6\x36\x96\x2a\x6a\xa3\x4c\x4f\x6f\x08\x75\x4d\x77\xc3\x27\x42\x22\x48\x24\xc2\x72\xcc\x06\x18\xc0\x25\x0b\xff\x0f\x33\xc5\x4d\x9e\xf2\x7b\xfa\xcb\x4f\xe6\x8b\x0a\xc4\xa7\x57\xa6\x60\x21\xcd\x7f\x0b\x36\x80\xc2\x63\x07\xb0\xec\x29\x49\x83\xd6\xe2\x6e\xe0\xb1\x70\x57\x86\xfc\x0d\xe5\x00\xd6\xa8\xbd\xd6\x81\xf3\x32\x3a\x09\x44\xe0\x20\xca\xe0\x5e\x86\x97\x5e\xe6\xd2\xbf\xf8\xaa\x09\xfd\x3a\x10\x2e\x4e\x7c\xf6\x42\xc3\x26\xfc\x02\xfd\xb4\x7e\xf2\xeb\xee\x7e\x3c\x7c\x1b\xcc\x86\xc7\xe2\x88\xdd\x89\x7d\xf4\x76\x37\xb6\xc6\x37\x93\x09\x3d\x9c\xc6\xeb\x9e\x3f\x0d\x51\xb6\xd6\x5b\xbd\xad\x47\x59\xeb\xdd\x65\x4b\xbd\x5b\xb2\xd2\x75\xde\x35\x9e\x4f\xa6\xf4\x30\x5c\xd9\x94\x76\x9f\x6e\x42\xa1\x35\x9e\x65\xce\x22\x52\xfb\x97\xb5\x3e\xfd\x7d\xd3\x0e\xfe\xfc\x7c\x3c\x9d\x6e\x7f\x9e\xbe\x73\x67\xf7\x7d\xef\xed\xd9\xe6\x6f\xb3\x9b\x93\xb5\x10\x00\x46\x3c\x60\xf6\x82\x2d\xfe\xf9\xc3\xee\x78\x63\xbc\xf3\xeb\x85\x7d\xf9\xfb\x25\xd9\x98\xc8\x5f\x5f\x6d\x4c\xfe\x38\xdc\x9c\xc5\xda\xc9\x9f\x0e\x2a\x05\xc0\xfe\xe3\xe0\x5f\x7f\x29\xfc\xf5\x4b\x54\x93\xec\xdb\x29\x0a\x3a\x9a\x69\x8c\x37\x67\x8e\x06\x70\x16\xf9\x27\x20\x81\x72\xb8\xa0\xf7\x71\xc3\x68\x82\xac\x9e\x7e\x36\x2f\x9d\x23\xe7\xd6\xfb\xf4\xda\xff\x78\x3a\x3a\xde\x70\x4f\x70\xe2\xdb\x5b\x7f\x3f\x8c\xf5\xb3\x77\x42\x3c\x3c\xe0\x6c\xe4\x52\x4b\xd5\xd0\xd5\xe6\xce\xa3\xe8\x2a\xcd\xa6\x5c\x57\x69\x8a\xac\x19\xcd\x8f\x16\x85\xc0\x43\x25\x10\x57\x20\xb1\x67\x61\xef\xb7\x52\x17\x3b\x93\xcf\xbd\x4b\x7a\x34\xb9\x9f\x7c\x3a\xb8\xff\x78\x8a\xc7\x1b\xfc\x33\x3a\xf6\xe6\x51\xa4\x8a\xe2\x51\x9f\xb2\xe9\xef\x3d\xca\xec\xf7\x96\x4d\x7e\xaf\xd4\x4e\x92\xd3\xbb\x98\x7d\x68\x61\xd9\xf1\xe8\xdd\xf4\xcd\xde\xf5\xfb\x3f\x3e\xef\x7c\x1e\x3b\xa3\xf7\x7b\xe3\xb7\x67\xf2\xd7\xe9\xd1\xc7\xf9\x5c\x6b\x83\xc6\x93\xcd\x38\x15\x4b\xb5\xcd\xf1\xa8\xf0\xec\x6c\xf8\x7f\x40\xce\x98\x25\x51\x0d\xe0\xc3\xc1\xfb\xf5\xa3\x4f\xeb\x7b\x3a\x7e\x8b\xbd\x96\x39\x61\x9b\xd0\xe0\x9d\x5a\x8f\xfc\x1d\xf1\xe9\x7a\x9f\xde\xf5\x36\x5d\x66\xbb\xde\x4d\xef\x66\x64\xed\x4a\xaa\xc8\xb6\x74\xaf\xa7\xaf\xd2\x85\x89\x51\xea\x04\x9b\x56\x43\x7f\xbc\x6d\xbf\x7a\x75\xd3\x73\x85\x65\x4f\xb7\xc6\xbb\xc4\x1d\xee\x4a\x77\x34\x66\xd7\x9b\xb6\x33\x94\xd7\xff\xf3\x5f\x7f\x39\xfa\x74\x71\xb6\x0f\xff\x6b\x26\xdc\x09\x95\xf4\x0b\xb5\x91\x29\xbd\x64\xe9\xc6\x1a\x95\xb0\xb6\xd5\xdb\x5a\x7b\x19\xaa\x22\xfc\x79\xf0\xee\xf2\xfc\xe2\xe8\xec\xdc\xe8\x42\xdf\x0c\x3f\x71\x34\x5f\x57\x48\x18\x85\xf4\xfd\xf1\x36\x17\xdb\xbd\x29\x0d\x7a\xbb\x1c\xf5\xaa\x39\x62\x62\x6d\xec\xd8\xe3\x91\xba\xee\x13\x6b\x2d\xad\xbd\xf8\x2d\xb1\xb5\x65\x93\x48\x41\xee\x5f\x17\x61\xca\x85\xfc\x28\x66\x3b\x4c\xde\x0c\x37\xe4\x89\xf7\xe6\x7a\x7b\xf8\xc9\x3f\xdc\x3d\x20\xed\xd6\xbf\x03\x00\x00\xff\xff\x25\xf2\x31\xdc\xd4\x75\x00\x00")

func connector_mgmtYamlBytes() ([]byte, error) {
	return bindataRead(
		_connector_mgmtYaml,
		"connector_mgmt.yaml",
	)
}

func connector_mgmtYaml() (*asset, error) {
	bytes, err := connector_mgmtYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "connector_mgmt.yaml", size: 30164, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"connector_mgmt.yaml": connector_mgmtYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"connector_mgmt.yaml": &bintree{connector_mgmtYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
