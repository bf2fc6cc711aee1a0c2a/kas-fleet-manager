// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package generated generated by go-bindata.// sources:
// .generate/openapi/connector_mgmt.yaml
package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _connector_mgmtYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7d\x7d\x73\x13\xb9\xb2\xf7\xff\xfe\x14\xfd\x98\xe7\x54\xce\xb9\x37\xb1\x9d\x17\x08\xb8\x2e\x5b\x15\x92\xc0\x66\x17\x02\x24\x61\x81\x73\x6a\x2b\x96\x67\xda\xb6\xf0\x8c\x34\x91\x34\x4e\xcc\xb9\xe7\xbb\xdf\x92\x34\xef\x2f\xf6\x38\x64\x37\x59\x70\xaa\xa8\xc2\x33\xad\x56\x77\xab\xf5\xeb\x56\x4b\x33\xc3\x03\x64\x24\xa0\x7d\xd8\xed\xf4\x3a\x3d\x78\x04\x0c\xd1\x05\x35\xa1\x12\x88\x84\x11\x15\x52\x81\x47\x19\x82\xe2\x40\x3c\x8f\x5f\x83\xe4\x3e\xc2\xc9\xd1\xb1\xd4\x97\xa6\x8c\x5f\x5b\x6a\xdd\x80\x41\xc4\x0e\x5c\xee\x84\x3e\x32\xd5\x69\x3d\x82\x03\xcf\x03\x64\x6e\xc0\x29\x53\x12\x5c\x1c\x51\x86\x2e\x4c\x50\x20\x5c\x53\xcf\x83\x21\x82\x4b\xa5\xc3\x67\x28\xc8\xd0\x43\x18\xce\x75\x4f\x10\x4a\x14\xb2\x03\x27\x23\x50\x86\x56\x77\x10\x49\xc7\x61\x8a\x18\x58\x49\x52\xce\xed\x40\xd0\x19\x51\xd8\xde\x04\xe2\x6a\x1d\xd0\xd7\xa4\x6a\x82\xd0\x1e\x79\x88\x6a\xcb\x27\x8c\x8c\x51\x6c\x45\x84\x9d\x39\xf1\xbd\x36\x8c\xa8\x87\x2d\xca\x46\xbc\xdf\x02\x50\x54\x79\xd8\x87\x43\xce\x18\x3a\x8a\x0b\x38\x47\x31\xa3\x0e\xc2\x4b\xcd\x01\xde\x58\x0e\x2d\x80\x19\x0a\x49\x39\xeb\x43\xaf\xd3\xeb\xec\xb6\x00\x5c\x94\x8e\xa0\x81\x32\x17\x97\xb4\xb7\xca\x9c\xa1\x54\x70\xf0\xee\x44\x4b\x69\x45\x03\x27\x6e\x27\x3b\x2d\x89\x42\x77\xa2\xa5\xda\x82\x50\x78\x7d\x98\x28\x15\xc8\x7e\xb7\x4b\x02\xda\xd1\x96\x96\x13\x3a\x52\x1d\x87\xfb\x2d\x80\x82\x00\x6f\x08\x65\xf0\xf7\x40\x70\x37\x74\xf4\x95\x7f\x80\x65\x57\xcd\x4c\x2a\x32\xc6\x65\x2c\xcf\x15\x19\x53\x36\xae\x64\xd4\xef\x76\x3d\xee\x10\x6f\xc2\xa5\xea\x3f\xed\xf5\x7a\xe5\xe6\xc9\xfd\xb4\x65\xb7\x4c\xe5\x84\x42\x20\x53\xe0\x72\x9f\x50\xd6\x52\x64\x1c\x19\x80\x11\x3f\x37\x2e\x17\xf3\x00\x65\xb9\x7d\xbb\x5d\x45\xdd\x98\x10\x0e\xbd\x50\x2a\xac\x69\xd0\x0a\x88\x9a\x18\x79\x1e\xe9\x7f\x70\x31\x41\x89\x40\x04\x1a\x27\x4b\xc6\x0e\x04\x7a\x44\xa1\xab\xc7\x56\x46\xc4\x6d\x6d\xe7\x6e\x42\x72\xe9\x8f\x7d\xd5\x9d\x6d\x77\x5d\xca\xb8\x24\xa1\xb8\x4c\x6f\x29\xad\x59\xf7\xdf\xf9\x0b\x97\xd4\xfd\x4f\xbb\x6f\xa4\x0a\x88\x20\x3e\xaa\xc8\x35\xf4\x5f\xac\x46\xa9\x49\x74\xbf\xa0\xc9\xc5\x04\x81\xba\xc0\x47\x05\xb1\x75\xa3\xa4\x85\x74\x26\xe8\x93\x7e\xf2\x1b\xcc\xed\x3e\x48\x25\x28\x1b\x27\x97\x29\xeb\x83\xb6\x4a\x72\x41\xe0\x55\x48\x05\xba\x7d\x50\x22\xb4\xec\xc6\xa8\x62\x3e\xf1\x78\xc6\x72\x57\x8d\xa7\xe6\x21\x03\xce\x24\x66\x48\xdb\x3b\xbd\x5e\x3b\x2b\x8d\xc3\x99\x42\xa6\xb2\x97\x00\x48\x10\x78\xd4\x21\x5a\xcd\xee\x17\xc9\x59\xfe\x6e\x95\x52\xf6\xef\xff\x0b\x1c\xf5\xa1\xfd\xa8\xeb\x70\x3f\xe0\x0c\x99\x92\x5d\x4b\x2b\xbb\x89\x88\x5a\xc2\x76\xa6\x69\xc9\xa6\x79\x4b\x82\x4f\x94\x33\xd1\x13\x46\x5b\x59\x9b\x05\x8d\xef\x47\xfa\xec\xf5\xb6\xef\x47\x9f\x63\x21\xb8\x68\x17\x9a\xe0\x0d\xf1\x03\x2f\x6b\xf0\xf8\x6f\xaf\xb7\x7d\x6c\x6f\x96\xef\x55\x77\x14\xf3\xea\xa6\x4d\x6b\xcd\x76\x10\xaa\x09\x28\x3e\x45\xa6\x21\x91\xb2\x19\xf1\x32\x5e\xdb\xde\xeb\xed\xfd\x45\x8c\xb4\x77\x7b\x23\xed\x2d\x33\xd2\x29\x4f\x7d\xa9\xe0\x63\x78\x43\xa5\x92\xa9\xc1\x1e\xdf\xd7\x2c\x59\xd1\x60\x8f\x7b\xbd\xdb\x1a\x2c\x6d\x5a\x6b\xb0\x0f\x0c\x6f\x02\x74\x34\x04\xa3\x96\x0b\xb8\x63\xe2\x4a\xec\x59\x12\x9d\x50\x50\x35\xcf\x22\xd1\x0b\x24\x02\x45\x1f\xfe\x05\xbf\x47\x57\x79\x80\xc2\x18\xe9\xc4\xed\x6b\x0c\xcb\x01\xc1\x8b\xf9\xc9\x51\xcc\x2d\xf4\x7d\x22\xe6\x7d\x78\x85\x0a\x48\x71\x84\x86\x73\xa0\x6e\xab\x05\xb0\x62\x00\xe8\xdf\x0e\x3a\x6f\xa1\x9a\x47\x65\x5e\x37\x59\x54\xec\x0c\x55\x28\x98\x4e\x59\x34\xad\x0e\x1c\x79\x25\xe3\x06\xe5\xc8\xa4\xbb\xaf\x1a\xcd\x94\xb2\x1b\x90\x71\x66\x24\x97\x92\x4b\xfa\x35\x21\x7f\xb8\x71\xe2\x35\x95\xaa\x1e\xf4\x96\x98\x71\x1d\x1d\x9a\x45\x87\x35\xd8\x2d\x03\xbb\xc6\x98\x13\x49\x1d\xe8\xf4\x7d\x19\xde\xc8\x2a\x10\x71\x04\x12\x85\x09\xcd\x42\x40\xd0\x39\xe3\x55\x88\x62\x9e\x51\xc9\x26\xb0\x44\xce\x99\x53\xa7\xe8\x3b\x14\x23\x2e\x7c\x93\x4e\x11\xb3\xa8\x01\xca\xf4\xa2\xd3\xb4\x9a\x08\xce\x78\x28\xf5\x42\x8a\xa1\x68\x2d\x1e\x60\x9b\xca\x0e\x39\xf7\x90\xb0\xcc\x9d\x8a\xe4\x15\xe2\xd4\xed\x05\x77\x33\xa8\x5a\xb3\xda\x73\x89\x22\x09\x4d\x85\x3f\x2e\xf6\xc6\x6a\x5f\x6c\x04\x3a\xed\x45\x09\x78\x1d\x52\xee\xdc\x33\x52\xd6\x4f\x7c\xc7\xc1\x40\x61\x2e\x13\xfc\x6b\xcc\xf5\xbd\x5e\xef\x50\x4f\x05\xca\xd9\xed\x81\xb1\xc8\xa2\xd6\x4e\xbf\x69\x40\x34\x94\x76\xee\xcb\x62\xa6\xb3\x0e\x25\xeb\x85\x46\xf3\x85\xc6\x45\xba\x50\x45\x57\x63\x06\x0f\x85\x83\xe0\x72\x94\x6c\x43\xd9\xc5\xc6\x3a\xfc\x16\x1c\x8b\x41\x58\x17\x81\x6d\x54\x8c\x4b\x00\x4e\x21\x38\x36\x4b\xd5\x93\x24\xdc\x60\x02\x9a\x1a\xe8\x75\x81\x57\x93\x55\xc2\x7d\xe5\xe8\x8b\x03\x7e\x92\x89\x64\x26\x63\x85\x53\xc6\x64\xe0\xd8\xf2\x1c\xe4\xc8\xeb\x23\x7c\xae\x58\xf5\x30\x57\x0b\xab\xae\x14\xd6\x8b\x84\xf5\x22\xe1\x41\x54\x44\x72\x65\x83\x5b\x95\x0c\x9a\xd7\xc4\x65\xf7\xdf\x8b\xeb\xdf\x4b\x00\x89\xba\xed\x84\xb4\x0c\x46\xf5\x50\xb4\x12\x10\x35\xa8\x98\xaf\x02\xd4\x0f\x13\xae\x1a\x16\xc0\xd7\xb5\xef\x75\x4a\xda\xc4\x48\xeb\xda\xf7\x4a\x06\xbb\xff\xda\x77\x11\xe7\x0b\x35\xef\x96\x95\xc7\x43\x85\xdf\x08\x74\x0f\xc5\xf9\x73\xc6\x3d\x32\x9a\xad\x17\xd7\xdf\x2d\x92\xd9\x01\xfe\x06\x3c\xcb\x31\x58\x84\x6a\x49\x26\x11\x45\x47\xb8\xa6\x6a\x02\x32\x40\x87\x8e\x28\xba\x70\x72\xf4\x57\x06\xb8\x6f\xb3\x63\x91\xc1\x9f\x09\x76\x16\xbc\x6a\xf1\xce\xca\x55\x82\xbc\x40\xc7\xa8\x6f\x44\xbc\x07\x5b\x8d\x5d\xa7\x76\x3f\x2e\x20\xae\x53\xbb\xef\x3a\xb5\x33\xb8\x55\x0b\x76\xe6\x6e\x09\xeb\x9a\xec\x88\x1d\x11\x45\x40\xf1\x88\x43\xfe\x98\x99\x0e\x74\xad\x05\x23\xf9\x27\xec\x91\xe5\x3b\xf1\x51\x8c\x71\xcb\x88\xfa\xdf\x7f\x4a\x87\xba\x93\x15\xfb\x2b\x94\x05\x7f\x39\x7f\x7b\x0a\xef\x34\x87\x4d\x38\x7b\x79\x08\x4f\x9e\xf5\x76\x60\x2b\x39\xd3\xa9\x38\xf7\x64\x87\xa2\x1a\x75\xb8\x18\x77\x27\xca\xf7\xba\x62\xe4\x68\xaa\x02\x5f\x5b\xa2\xe0\xc3\x2f\xe8\xa4\x28\x5e\xd8\x42\x34\x67\x1d\x8f\x93\x73\xb6\x23\x13\x04\x98\x3d\x0c\x9a\x0e\x6b\x54\x11\x91\x40\x98\x9b\xb9\x4c\xc6\xc8\x14\x44\xfb\xba\xcd\xcf\xc0\xc4\xdc\xa2\x92\x4f\x93\x7d\xe9\xfc\xd9\xcd\xc5\xfb\xd3\x11\x69\x44\xf9\xc3\x6d\x53\xc7\xd5\xab\x7b\xdb\xae\x8e\xec\xff\x97\xdc\xb5\x2e\xc9\xbe\xde\xbc\x5e\x6f\x5e\xaf\xd3\xc9\x26\x46\x5a\x6f\x5e\x3f\xac\x8c\xf2\x16\x9b\xd7\x71\xec\x58\x29\xe7\x5c\xb2\x89\x9d\xe3\xd9\xe8\xc8\x6b\x21\xd4\xaf\x0f\x9e\x66\x02\xd3\xca\x67\x4f\x9d\xbc\x31\xd7\xb0\xbb\xde\x59\x7e\x38\x3b\xcb\x85\x99\xde\x68\x83\x39\xe3\xd0\xab\xaf\x38\xb2\x4f\x5e\x45\xd7\x2e\xa9\xfb\x9f\x68\x21\xd2\xe0\xd9\xab\xb4\x51\x75\x1a\x5e\xf7\xf8\x55\x1e\x58\xff\xfc\x27\xb0\x0a\x96\x7e\xd0\x18\xd7\xb0\x56\x19\xaf\x73\xd6\x35\xcb\x75\x92\xd9\xc4\x48\xb7\xac\x59\xc6\x6e\xb6\xae\x5d\xde\xd7\xb6\x74\xbe\x9e\x53\xfb\x44\x56\x0c\xb1\x16\xcb\xc3\xbb\x02\xc5\xfc\xcc\xc8\xd7\x5c\x22\xd7\x90\x8a\xa8\xd0\x3c\x25\x1f\x06\x2e\x59\xef\x21\x97\x0c\xb5\x86\x9f\x6f\x86\x9f\x35\xf2\x54\xd9\xec\x0f\x40\x1e\x3b\x85\x8b\xe0\xf3\x62\x7e\xe2\x16\x01\x28\x74\x03\x92\xdf\x2e\x2e\xa4\x79\xcd\xb7\x52\x22\xdc\x78\x08\x1b\x29\xcb\xaa\xb7\x2d\x68\x7e\x0a\xe8\x36\x08\xbb\x3e\x0d\xb4\x46\xf2\xef\xeb\x34\x50\x52\xae\x5c\x9f\x02\x7a\x88\xa7\x80\x6a\xd2\xcb\xf2\x61\xa0\x0c\xba\xdf\x59\xe5\xa1\x4b\x5c\x97\xb3\xcb\x62\xe9\x61\x5d\x8a\xb8\x9f\x69\x70\xa0\x47\xe3\x5d\x6c\xfc\x85\xc5\x56\x6d\xde\x74\x98\x40\x4d\x88\x02\x39\xe1\xa1\xe7\xc2\x10\x21\x94\xf6\x5d\x56\x0e\x67\x23\x3a\x0e\xa3\xb7\x08\xd9\x17\x41\xe5\x76\xd0\x75\x87\xc0\x99\x1d\x23\x6b\x99\xce\x3a\xe8\x7c\xaf\x41\x67\x5d\xbd\xf8\x21\xd6\x10\x15\xd5\x8b\x3c\xb2\x94\x2a\xde\x35\xc5\x8c\x0d\x19\x21\x44\x8a\x34\xad\x56\xaa\xa7\x16\x29\xb2\xa9\x95\x2e\xf7\x9e\x92\x58\xe0\x9c\xb6\x3f\x6d\x25\x6a\x9c\x61\x20\x50\x6a\x3e\xe5\x37\xdb\xc8\x30\x08\xb8\xd0\x36\x19\xce\x0d\x36\x1d\xbc\x3b\xc9\xac\x6a\x0c\xee\x67\xec\xa1\x63\x53\xe6\x67\xf4\xfe\xbc\xcc\x15\xed\x39\x97\x56\xd4\xe8\x2a\xf1\xbc\xb7\xa3\x2c\x8f\x45\x0e\xf3\xd6\x9c\x61\x3a\xc3\x11\x0a\x64\x4e\x6e\x67\xaf\xf2\x90\x13\x40\x20\xf4\x88\x28\x5a\xf4\x27\x13\x45\x0b\x5e\x94\x9f\x47\xc4\xc7\xea\xd7\xa7\x75\x0a\xcd\x2a\xc3\xa4\xfe\x8b\x5f\x1f\xb8\xa8\x9b\xdf\x2c\xcd\x37\xf6\xe4\x4c\x08\x63\xe8\x95\xe6\x4c\xbe\x4c\x15\x11\xad\xd2\x17\x11\x82\xcc\x0b\x77\xa8\x42\xbf\x62\x76\xd6\x0a\x97\x15\x62\x91\x7c\x07\xd9\x9f\x25\x21\x1b\xdb\x82\x3a\x9c\x5d\x4e\xb4\x13\x2d\xea\xec\xc3\xd9\x6b\xf3\xba\x4b\x66\xe8\x6f\xdf\x9b\x47\x86\xcb\xec\xfe\xda\x90\xa4\xa9\x00\x51\x38\xe6\x82\x7e\xc5\xca\x27\xc6\xef\xde\xfe\xfa\x0f\x59\xe8\x6b\x98\x92\x94\x4d\x37\x21\x5a\x87\xfc\x9e\x23\xcb\x4c\xcd\x85\xea\x64\x90\x23\xfe\x3b\x30\x8d\x23\x08\xb2\x29\x90\x43\x58\x36\xff\x99\xd9\x73\x40\xb9\x3c\x5a\x96\xf8\xa4\x49\xad\x5e\x1d\xc1\x88\xa2\xe7\x56\x8f\x84\x9d\xe7\xf0\x08\x14\x77\x79\x1f\x04\x06\x1e\x89\x57\x56\x43\x54\x71\xa8\x2b\x83\xa1\xce\xe5\xfa\xb7\x81\x9e\x7c\x12\xb8\x32\xde\x54\x0e\xda\xca\x63\xbc\xc2\x3b\x0c\xf3\xaa\xff\x00\x6a\x17\x55\xae\x0c\x7b\x07\x19\xd4\x9b\x70\xcf\x95\xf1\x1c\x34\xd9\xb9\x3d\xa8\x66\xd3\x75\x4d\x04\x04\x8e\xe2\x47\x78\x14\x0f\xa8\x63\x21\x83\xab\x09\x0a\x90\x73\xa9\xd0\xef\xdc\x6f\x18\xf3\x51\x11\x97\xa8\xd2\x8c\xad\x61\xb3\x88\x95\xb1\x55\xfa\x7c\x74\x55\x8a\xb5\x10\x62\xf8\x35\x43\xb1\x72\xab\xaa\x38\xbc\xb4\x91\x3d\xe8\xeb\x5e\x12\x55\xd5\x74\xc4\x85\x4f\x54\x1f\x34\xde\x6c\x29\x9a\xc9\x48\x1a\xb2\x8f\xaa\xb0\x7f\x14\xfb\xb8\x0e\x74\x59\x93\x1f\xa4\x0c\x28\x53\x38\xc6\x62\x64\xc8\x0a\x41\x99\x7a\xb2\x57\x88\xb6\x81\xc7\xe7\x3e\x32\x75\xe9\x71\x9b\xaf\xaf\x54\xff\xb5\x09\xe7\x05\x11\x63\x54\xf9\xd4\x3c\x76\x8e\x55\xd8\xc5\xd3\x27\x9a\x95\x94\xb3\x73\x54\x8a\xb2\xb1\xcc\xf3\x2e\xbd\xd5\xb6\xda\xa1\xab\x52\x9f\x5c\xcc\x68\x3c\x0f\xa2\x8c\xa9\x71\x37\x2e\x4a\x9d\xec\x5e\x4a\x45\x54\xc9\x61\x6b\x5b\xd9\x1d\xc1\x06\xe4\x37\x5b\x1e\x65\xd3\x0c\x65\xde\x20\x59\x0e\x4d\x5f\x59\x09\x35\x67\xe6\xaa\xcd\x0d\x1b\xa5\x6b\x1b\x75\x2b\xa5\x9f\x16\xf0\xd2\x12\xc9\x8a\xf4\x52\xaf\x1f\x42\x19\x1d\xcf\xc8\xb5\xd7\xb4\x83\x52\xe7\x83\x54\x76\xa0\x2c\x79\x80\x52\xf1\x5c\xdb\xc1\xab\xe3\x8b\x55\x5f\xba\x59\xf5\xd6\xe5\x41\x27\x0a\x1e\x59\xef\x4f\x02\x08\xd5\xba\xfb\x94\x91\x4c\x54\x49\x70\x74\x7e\x6a\xea\x71\x53\xca\xd2\x52\x84\x4f\x82\x80\xb2\x71\x6e\x9f\x46\x2f\xdf\x16\x96\x9b\x6a\x67\x9e\xe3\xf1\xd0\xbd\x0c\x04\x9f\x51\x57\x2f\x36\xeb\x26\x2e\x0f\xdd\x77\x11\x51\x25\x2f\xce\xb0\x79\x88\x5a\x24\xd2\xe2\x96\x8b\x04\x31\x2c\xca\xac\x2b\x43\x75\xdb\xde\x93\x70\xcd\xc5\xd4\xe3\xc4\x95\x51\xc2\x6e\x57\xc2\x4e\x7e\x7f\xaa\x62\xa2\x57\x2d\x50\x33\xc3\x54\x15\x07\xf5\xed\xa5\x15\xd0\xb4\xe0\x5a\x4b\x1a\x39\x53\x9d\x21\x56\xd1\xd7\x0e\x3f\xc4\xc3\x7f\x2f\xfa\xe6\xfc\x6f\x19\xb9\xc0\x71\x21\xe6\x54\x92\xf9\xa1\xa7\xe8\x25\xf9\x5a\x26\x8c\x9f\x85\x49\x9d\x25\x57\x89\xad\x36\x5e\x7a\xe6\xb5\x58\x28\xc9\x5b\x2c\x9b\x75\x16\xb2\xcd\xe6\x05\xe1\x76\x95\x6c\x75\x72\x15\xe4\x59\x30\x80\x55\x23\xb4\xc0\xc9\xe2\x8b\x33\xe2\x85\xb8\xc4\x15\x0b\x55\xa8\x6a\x59\xcf\xed\xfa\x6d\xa4\x21\x3b\x3d\x43\x97\xee\x4b\x03\x31\x0f\x13\x41\xe0\x11\x86\x99\xd2\x94\x8d\x72\xed\xef\x2a\x13\x5e\x67\xb3\x0d\xd8\x37\x48\x6f\x2a\xdd\xef\x07\x58\x8d\x26\xc7\x27\x4c\xf3\xfa\x34\xb8\xbf\x60\xee\x0f\x39\x57\x52\x09\x12\x5c\xda\xcf\x71\x34\x40\x6a\xaa\xf3\xfe\x06\x98\x11\x51\x4a\x74\x04\xaa\xc5\xd8\x51\x98\xa2\xfd\x3b\xc7\xaf\x46\x41\xa8\x58\xd0\x2b\xcb\x99\x75\xaa\x25\xa1\x50\xff\x0c\xc8\x38\x5b\xaa\x96\xf4\x6b\xf6\xa7\xe2\x8a\x78\x99\xdf\xc6\x15\x56\xd3\xbc\x91\x5a\x5a\x8a\x32\x51\x71\xdd\xa7\x85\x5b\x4e\x65\x64\xae\x27\x33\x37\xcc\x8e\xcb\xad\xa6\xde\xdd\x21\xb5\xc3\xdd\xe6\x2b\x28\x81\xa4\x62\xb3\xa9\x96\x3c\x59\x1c\x2d\x5b\x42\xb6\xca\x8b\xa3\xb4\x85\xdd\x62\x4f\xf6\x16\x4b\xfb\xbd\x27\x47\x3a\xd1\x10\xe8\x70\x91\xec\x0e\x15\x0a\xa7\x15\x12\x16\x76\xce\x2b\xf6\xcd\xb3\xde\x60\x65\xc8\x78\x69\xf1\x51\xe5\xfc\x03\xc9\x64\x8c\x40\x99\x8b\x37\x25\xee\x23\xe2\x49\x6c\x2e\x65\x79\xfb\xad\xe8\xa3\x36\xdf\x80\xf6\xb6\xf5\x81\xac\x73\x5a\xa1\x33\x73\x69\xa1\xd0\xa7\xa1\x3f\x44\xa1\x4d\x69\xa6\x97\x5e\xe7\x21\x71\x26\x59\xa5\xef\x50\x8d\xe2\x24\x4a\xd4\xe8\xf5\xac\x22\x5c\xb8\x28\x5e\xcc\x2b\x73\xa3\xff\x4d\x8b\xde\xe7\xd1\xc1\x1d\xbb\xca\x35\x8d\xf4\xe2\xd6\x11\x54\xa1\xa0\xa4\x63\x3c\x44\xce\x99\x22\x37\x76\x5b\x81\xca\xec\x5a\x56\x66\x04\xf2\xa9\x47\x44\xfc\xfd\xaa\x6c\x13\x84\x41\xcc\x78\x00\x8e\x47\x42\x69\xf6\xa2\x08\x83\xf3\xf7\xaf\x4d\xd8\x45\xfb\xe5\xad\x98\xd7\xb1\xb6\x9b\x31\x74\x5c\x79\x37\xed\xed\xbe\x1d\x61\xf3\x84\x6d\xae\x5a\x30\xb0\x25\x76\x99\xf2\x79\xc9\x45\x6c\xba\x4d\x2d\x98\x30\x4f\xe0\x98\x6f\x75\x1d\xe6\xdf\xed\x98\xed\x40\x4d\x90\x0a\x33\xf8\x9b\xa0\x45\xd5\x3d\x8d\xb8\xe7\xf1\x6b\xf3\x2d\x29\xa3\x58\xbf\x95\x74\x32\x18\x0c\xe4\x55\x8a\xae\xba\x1d\x10\xe9\x64\xef\xa7\xc4\x17\xab\x0b\x01\x97\x84\xb9\x97\xf1\xf6\xdb\xb7\x88\xb4\x19\x33\xa9\x97\xcf\x7e\xbb\x2c\x37\xc2\x6c\x43\xc5\xeb\x35\x77\x13\xb8\x00\x6a\x69\x8c\xc7\x01\x95\x80\x7e\xa0\xe6\x9b\xfa\x5a\xba\x37\x6a\x33\x6e\x19\x7a\x4a\x9a\xaf\x4d\x65\x34\xd3\xd2\x74\x12\xbf\x0e\x3c\x8d\x9f\xd9\x47\xe8\xcb\xbe\x5e\x70\xe5\xac\xbb\xc7\xaa\xb5\x6b\x66\xa8\x9d\xc2\x11\x83\x6f\x9d\x85\x52\xcd\x3d\xec\x9b\x24\xd3\x62\x05\x12\x91\xbe\x43\x29\x3f\xc3\xd2\x09\x66\x88\xd2\x09\x95\xf1\x85\xc5\x33\x6b\xc9\x8c\xba\x9e\xa0\xc0\xdc\x74\x4a\xbb\xcc\xcd\x2a\x38\xd0\x7e\x82\x6e\x34\x3b\x34\x2e\x19\x76\x56\x2e\x3d\x38\x03\x6d\xa5\xc1\x26\x0c\x32\x2a\xe8\x9f\x91\xb7\xe8\xff\x9a\x8d\xc1\xc1\xa6\x79\x53\xc6\x20\xaa\x36\x0e\x52\xd6\x36\x50\x71\x61\x07\x7b\xf0\x3f\x3f\xe9\x36\xcf\x07\xc6\x5d\x06\xaf\x4f\x7e\x3d\x1e\xa4\x93\x32\x6e\xe3\x70\xf6\x25\x64\x8e\xa2\x33\x2c\xb6\x3f\x38\x3d\x1a\xd8\xae\xde\x9e\x0d\x3a\xf0\x33\xbf\xc6\x19\x8a\x4d\x98\xf3\xd0\x00\x82\xd6\x98\x80\x4f\x6e\xa8\x1f\xfa\x5a\xf7\xed\x5e\xca\x8e\x33\xa3\x23\x89\x35\x34\xee\x90\x31\xfb\x71\xe2\x5f\x55\xb3\xb2\xf0\x91\x1a\xbb\x07\xa7\xed\x65\x3c\x6d\x40\xae\xe5\x96\xbc\x92\x5b\xb6\xe6\x6d\x85\x34\xe5\x41\x6b\x12\x18\x48\x45\x86\x9e\x36\x66\xb3\x69\x9a\x9f\xa3\xcf\x21\xcf\xdf\xbe\x98\x24\x62\xfd\x1c\x2c\xef\x6c\xf3\x7f\x05\x5b\xbf\x57\xab\x91\xec\xf4\x50\x26\x15\x61\xf1\x6e\x22\xb1\x1d\xd9\x73\x5d\x8a\x08\x25\xed\x75\xad\xd8\x2d\x85\xf6\xe8\x14\xb5\xdc\x7f\xdb\x79\xfc\x87\x60\x8a\x41\x4a\x7d\x33\x3f\x32\x19\xa8\x21\xca\xdc\x0f\x25\x0a\x98\x10\x09\x01\x0a\x9f\x4a\x19\xed\x7e\x49\xb4\x1f\xbc\xb3\xa6\x41\x37\xe3\x0a\xa7\x5c\x61\xfc\xbd\xc6\x28\xde\xa4\x47\xb1\xb4\xb3\x47\x67\x67\xa8\xcc\xb4\xae\x47\xae\x28\x5f\x30\x6e\x57\x83\x47\xd5\xd8\x53\x11\xde\x73\xd0\x02\x45\xc4\x6b\xe4\x28\xed\xdb\x21\x5b\x2b\x3d\x1c\x64\x4a\x28\xb1\x58\xd1\xe9\xa0\x2c\x53\xec\xc3\xd0\x5c\x8d\x2e\xda\x1f\x2f\xa3\x45\xf8\x2f\x1f\x2f\x72\x6b\x8c\x89\x52\x81\xe6\x9e\xd7\xb6\xfe\x0d\x1e\x85\x4a\x10\x75\x4d\x7a\xb3\xdb\xce\xaf\x49\xa0\x5d\x38\x77\x35\xb1\x69\x7f\x4d\x1d\xdd\xbe\xb7\xa3\x9b\xe3\x63\x52\x78\x68\x1f\xbe\x3d\x3d\x3d\x3e\xbc\x78\x7b\xb6\xf5\xe6\xd5\x9b\x8b\xad\x1c\x49\x94\xb8\x43\xfb\x3c\xf3\x46\x9c\xf8\x5d\x39\x12\x18\x57\xe9\xe1\x22\x3b\x8d\xcc\xbb\x73\x9e\x6b\xef\x28\x57\xcb\x0a\x99\x3d\xb4\xb7\xe9\xc7\x13\xea\x5f\xbd\x72\xc4\x51\xf8\xfa\xc9\x36\xf9\x70\x73\xf2\xcf\xab\x17\x17\x57\xa7\x67\xa4\x1d\x5b\xe9\xc4\xba\xe5\x7b\xed\x4d\x0d\x2c\xb5\x73\x47\x96\xda\x59\x6a\xa8\x9d\x2a\x3b\xbd\x24\xd4\xb3\x87\x25\x02\x22\x24\xe6\xc0\xb8\x0f\x1f\x98\xf9\x6e\xaa\xe2\xb6\xce\x79\x54\x78\xb3\xa4\x7d\x63\x13\x09\xe8\x65\xb2\xed\x21\xed\x47\x49\xfb\x50\xea\xbc\x0f\xcb\xfa\x4a\x8f\x7d\x39\xdc\x0b\x7d\x66\x71\x4b\x77\x11\x4d\x33\xd8\xa0\xee\x46\x07\xce\xab\xe8\x4c\x48\xea\x47\x75\xe0\xcd\x28\x2d\xcc\x17\x91\xe3\xab\xb6\x80\xd4\x81\xf7\x16\x49\xec\x78\xe9\x95\x17\x3c\x87\xed\xac\x95\x8a\xa3\xef\x7d\x3c\x7a\x15\xce\x87\x27\xe2\x98\xdd\x88\x03\xf4\xf7\x77\xf6\xc6\x57\xd3\x29\x3d\x9a\xc5\xa3\x5f\x3c\x63\x59\x35\xe2\x7b\xbd\xbd\x3b\x19\xf1\xfd\x65\x03\xbe\x5f\x31\xde\x4d\xde\x65\x92\x28\x53\x79\xca\xbe\x4a\xa5\xfd\xfb\x53\x28\xf6\xc9\xb3\xdc\x73\x0e\xd4\x7d\xbe\xb1\x4d\x7f\xdd\x75\xc3\xdf\x3e\x9f\xcc\x66\x8f\x3f\xcf\x5e\x7b\xf3\xaf\xdb\xfe\xab\xb3\xdd\x5f\xe6\x57\xa7\x1b\x06\x09\x46\x3c\x64\xee\x82\xb9\xfe\xf9\xed\xfe\x78\x67\xfc\xe4\xe7\x0b\xf7\xc3\xaf\x1f\xc8\xce\x54\xfe\xfc\x74\x67\xfa\xfe\x68\x77\x1e\x1b\xa8\x78\xec\xb8\x12\x09\xb7\xef\x06\x08\xb7\x97\xe2\xe0\x76\x85\x75\xd2\x09\x3c\x43\x41\x47\x73\x0d\xf6\xf6\x30\x73\x1f\xce\xa2\x18\x07\x24\x54\x13\x2e\xe8\xd7\xf8\x20\xca\x14\x59\x33\xfb\xec\x7e\x98\x1c\x4f\xae\xfd\x4f\x2f\x82\x8f\xef\x46\x27\x3b\xde\x29\x4e\x03\x77\xef\x9f\x47\xb1\x7d\x9e\x9d\x12\x1f\x0f\x39\x1b\x79\xd4\x51\x0d\x6c\xb5\xfb\xe4\x4e\x6c\x95\x65\x53\x6d\xab\x2c\x45\xc9\x93\x92\x63\xcb\x06\x7e\xa8\x04\xe2\x09\x24\xee\xdc\x1c\x2b\xab\x35\xc7\x93\xe9\xe7\xde\x07\x7a\x3c\xfd\x3a\xfd\x74\xf8\xf5\xe3\x3b\x3c\xd9\xe1\x9f\x71\xe2\xee\x1e\x47\xd6\x28\x1f\x23\xae\xb2\xc0\xb3\x3b\x31\xc0\xb3\x65\xfa\x3f\xab\x74\x95\xf4\xe1\x20\xcc\x77\x5a\x1a\x79\x3c\x7e\x3d\x7b\xf9\xec\xcb\x9b\xf7\x9f\x9f\x7c\x1e\x4f\x46\x6f\x9e\x8d\x5f\x9d\xc9\x9f\x67\xc7\x1f\x13\x5d\x1b\x43\xc7\xbd\x69\x9c\xc9\xd9\xda\x36\x7d\x34\x8f\xe6\x44\xc9\xb4\x23\x51\xf5\xe1\xed\xe1\x9b\xad\xe3\x4f\x5b\xcf\x74\x1a\x18\xc7\x2e\xfb\x00\x4f\x4a\x83\x37\x6a\x2b\x8a\x7a\x24\xa0\x5b\xdb\xf4\xa6\xb7\xeb\x31\xd7\xf3\xaf\x7a\x57\x23\x67\x5f\x52\x45\x1e\x4b\xef\xcb\xec\x69\x76\x93\x63\xc4\xb3\x1f\x7a\xe8\xc3\xf6\xf8\xb1\xfb\xf4\xe9\x55\xcf\x13\x8e\x3b\xdb\x1b\xef\x13\x6f\xb8\x2f\xbd\xd1\x98\x7d\xd9\x75\x27\x43\xf9\xe5\x6f\xff\xef\xef\xc7\x9f\x2e\xce\x0e\xe0\xbf\xac\xc2\x1d\x63\xa4\xe7\xd4\x45\xa6\xf4\x90\x65\x4f\xeb\x50\x09\x1b\x7b\xbd\xbd\x8d\x4d\x63\x0a\xf3\xf3\xf0\xf5\x87\xf3\x8b\xe3\xb3\x73\x6b\x0b\x7d\xd3\x64\xa2\xc9\xb8\x42\xca\xc8\xd0\x6f\x8f\x1f\x73\xf1\xb8\x37\xa3\x61\x6f\x9f\xa3\x1e\xb5\x89\x98\x3a\x3b\x4f\xdc\xf1\x48\x7d\xd9\x26\xce\x46\xd6\x7a\xf1\x83\xe8\x1b\xcb\x94\xc8\xa0\xee\x3f\x16\xc1\xca\x85\xfc\x28\xe6\x4f\x98\xbc\x1a\xee\xc8\x53\xff\xe5\x97\xc7\xc3\x4f\xc1\xd1\xfe\x21\x69\xb7\xfe\x2f\x00\x00\xff\xff\xa0\x71\x8b\x60\x54\x7e\x00\x00")

func connector_mgmtYamlBytes() ([]byte, error) {
	return bindataRead(
		_connector_mgmtYaml,
		"connector_mgmt.yaml",
	)
}

func connector_mgmtYaml() (*asset, error) {
	bytes, err := connector_mgmtYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "connector_mgmt.yaml", size: 32340, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"connector_mgmt.yaml": connector_mgmtYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"connector_mgmt.yaml": &bintree{connector_mgmtYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
