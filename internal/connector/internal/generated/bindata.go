// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package generated generated by go-bindata.// sources:
// .generate/openapi/connector_mgmt.yaml
package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _connector_mgmtYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7b\x73\xdb\x38\x92\xff\x5f\x9f\xa2\x4f\xb9\x2b\xef\xde\xc5\x7a\xd8\x8e\x1d\xab\x6a\xb6\xca\xb1\x9d\x8c\x66\x12\xc7\xe3\xc7\x24\xd9\xab\x2d\x0f\x44\xb6\x44\x58\x24\x40\x03\xa0\x6c\x79\x6b\xbf\xfb\x16\x08\x52\x7c\x4b\x94\xe3\x1d\x3b\x09\x5d\x95\x3f\x44\x36\x9a\x8d\x46\xe3\xd7\x2f\x90\xe1\x3e\x32\xe2\xd3\x01\x6c\x77\x7a\x9d\x1e\xbc\x00\x86\x68\x83\x72\xa8\x04\x22\x61\x4c\x85\x54\xe0\x52\x86\xa0\x38\x10\xd7\xe5\xb7\x20\xb9\x87\x30\x3c\x3a\x96\xfa\xd2\x94\xf1\x5b\x43\xad\x07\x30\x88\xd8\x81\xcd\xad\xc0\x43\xa6\x3a\xad\x17\x70\xe0\xba\x80\xcc\xf6\x39\x65\x4a\x82\x8d\x63\xca\xd0\x06\x07\x05\xc2\x2d\x75\x5d\x18\x21\xd8\x54\x5a\x7c\x86\x82\x8c\x5c\x84\xd1\x5c\x3f\x09\x02\x89\x42\x76\x60\x38\x06\x15\xd2\xea\x07\x44\xd2\x71\x98\x22\xfa\x46\x92\x84\x73\xdb\x17\x74\x46\x14\xb6\x5f\x02\xb1\xf5\x1c\xd0\xd3\xa4\xca\x41\x68\x4f\x89\xdc\x1c\xbb\x88\x6a\xd3\x23\x8c\x4c\x50\x6c\x46\xc4\x9d\x39\xf1\xdc\x36\x8c\xa9\x8b\x2d\xca\xc6\x7c\xd0\x02\x50\x54\xb9\x38\x80\x43\xce\x18\x5a\x8a\x0b\x38\x47\x31\xa3\x16\xc2\x5b\xcd\x01\x3e\x18\x0e\x2d\x80\x19\x0a\x49\x39\x1b\x40\xaf\xd3\xeb\x6c\xb7\x00\x6c\x94\x96\xa0\xbe\x0a\x2f\xae\x18\x6f\x26\x74\x86\x52\xc1\xc1\xe9\x50\x4b\x6a\x44\x03\x2b\x1e\x27\x3b\x2d\x89\x42\x3f\x44\x4b\xb5\x09\x81\x70\x07\xe0\x28\xe5\xcb\x41\xb7\x4b\x7c\xda\xd1\xda\x96\x0e\x1d\xab\x8e\xc5\xbd\x16\x40\x4e\x80\x0f\x84\x32\xf8\x8b\x2f\xb8\x1d\x58\xfa\xca\x5f\xc1\xb0\x2b\x67\x26\x15\x99\xe0\x2a\x96\xe7\x8a\x4c\x28\x9b\x94\x32\x1a\x74\xbb\x2e\xb7\x88\xeb\x70\xa9\x06\xaf\x7b\xbd\x5e\x71\xf8\xe2\x7e\x32\xb2\x5b\xa4\xb2\x02\x21\x90\x29\xb0\xb9\x47\x28\x6b\x29\x32\x89\x14\xc0\x88\x97\x59\x97\x8b\xb9\x8f\xb2\x38\xbe\xdd\x2e\xa3\xae\x4d\x08\x87\x6e\x20\x15\x56\x0c\x68\xf9\x44\x39\xa1\x3c\x2f\xf4\x3f\xb8\x70\x50\x22\x10\x81\xa1\xa1\x2d\xd6\x0e\x04\xba\x44\xa1\xad\xd7\x56\x46\xc4\x6d\xad\xe7\xee\x82\xe4\xca\x9b\x78\xaa\x3b\xeb\x77\xa7\x64\x3c\x25\x57\xc9\x75\xa5\xa7\xd5\xfd\x67\xf6\xc2\x15\xb5\xff\xd5\x1e\x84\x22\xf9\x44\x10\x0f\x55\x64\x17\xfa\x2f\x9e\x43\x61\x48\x74\x3f\x37\x8d\x0b\x07\x81\xda\xc0\xc7\x39\x99\xf5\xa0\xc5\x08\x69\x39\xe8\x91\xc1\xe2\x37\x84\xb7\x07\x20\x95\xa0\x6c\xb2\xb8\x4c\xd9\x00\xb4\x4a\x16\x17\x04\xde\x04\x54\xa0\x3d\x00\x25\x02\xc3\x6e\x82\x2a\xe6\x13\x2f\x66\x2c\x77\xd9\x62\x6a\x1e\xd2\xe7\x4c\x62\x8a\xb4\xbd\xd5\xeb\xb5\xd3\xd2\x58\x9c\x29\x64\x2a\x7d\x09\x80\xf8\xbe\x4b\x2d\xa2\xa7\xd9\xbd\x96\x9c\x65\xef\x96\x4d\xca\xfc\xfd\xb7\xc0\xf1\x00\xda\x2f\xba\x16\xf7\x7c\xce\x90\x29\xd9\x35\xb4\xb2\xbb\x10\x51\x4b\xd8\x4e\x0d\x2d\xe8\x34\xab\x49\xf0\x88\xb2\x1c\xbd\x5b\xb4\x96\xb5\x5a\x30\x34\xfc\x68\x3e\x3b\xbd\xfe\xd3\xcc\xe7\x58\x08\x2e\xda\xb9\x21\x78\x47\x3c\xdf\x4d\x2b\x3c\xfe\xdb\xe9\xf5\x8f\xcd\xcd\xe2\xbd\xf2\x07\xc5\xbc\xba\xc9\xd0\x4a\xb5\x1d\x04\xca\x01\xc5\xa7\xc8\x34\x1e\x52\x36\x23\x6e\xca\x6a\xdb\x3b\xbd\x9d\x6f\x44\x49\x3b\x0f\x57\xd2\xce\x2a\x25\x9d\xf0\xc4\x96\x72\x36\x86\x77\x54\x2a\x99\x28\xec\xd5\x53\xed\x92\x35\x15\xf6\xaa\xd7\x7b\xa8\xc2\x92\xa1\x95\x0a\xbb\x64\x78\xe7\xa3\xa5\xf1\x17\xb5\x5c\xc0\xad\xd0\xa9\xc4\x96\x25\xd1\x0a\x04\x55\xf3\x34\x12\xbd\x41\x22\x50\x0c\xe0\xff\xe1\x1f\xd1\x55\xee\xa3\x08\x95\x34\xb4\x07\x1a\xc3\x32\x40\xf0\x66\x3e\x3c\x8a\xb9\x05\x9e\x47\xc4\x7c\x00\xef\x50\x01\xc9\xaf\xd0\x68\x0e\xd4\x6e\xb5\x00\xd6\x41\xff\xc1\xc3\x70\xf3\x01\xf3\x72\xa9\xcc\x4e\x4c\xe6\x67\x75\x86\x2a\x10\x4c\x07\x2b\x9a\x56\x7b\x8d\xec\x0c\xe3\x01\x45\xb7\xa4\x1f\x5f\xb6\x94\x09\x65\xd7\x27\x93\xd4\x32\xae\x24\x97\xf4\x7e\x41\xfe\x7c\x9d\xc4\x7b\x2a\x55\x35\xe2\xad\x50\x63\xe3\x1a\xea\xb9\x86\x06\xe9\x56\x21\x5d\x3d\xc0\x89\x44\xf6\x75\xd4\xbe\x0a\x6c\x64\x19\x82\x58\x02\x89\xc2\x05\xcd\x52\x34\xd0\xd1\xe2\x4d\x80\x62\x9e\x9a\x8f\x09\x5d\x89\x9c\x33\xab\x6a\x96\xa7\x28\xc6\x5c\x78\x61\x20\x45\xc2\x5c\x06\x28\xd3\xf9\x66\x38\xca\x11\x9c\xf1\x40\xea\xfc\x89\xa1\x68\x2d\x5f\x5d\x13\xc4\x8e\x38\x77\x91\xb0\xd4\x9d\x92\xb0\x15\xe2\xa0\xed\x0d\xb7\x53\x90\x5a\x91\xe4\xd9\x44\x91\x05\x4d\x89\x31\x2e\x37\xc5\x72\x43\xac\x85\x38\xed\x65\xa1\x77\x15\x4c\x6e\x3d\x31\x4c\x56\xef\x7a\xcb\x42\x5f\x61\x26\x06\xfc\x36\x36\xfa\x4e\xaf\x77\xa8\xb7\x02\xe5\xec\xe1\xa8\x98\x67\x51\xa9\xa7\xdf\x35\x1a\x86\x94\x66\xe3\xcb\x7c\x8c\xd3\xf8\x91\x26\xc5\xa8\x9f\x62\x5c\x24\x29\x2a\xda\x1a\x33\x78\x20\x2c\x04\x9b\xa3\x64\x1b\xca\xa4\x19\x8d\xef\xcd\x19\x16\x83\xa0\xca\xfd\x1a\xaf\x18\x27\xff\x56\xce\x39\xd6\x8b\xd3\x17\x11\x78\x88\x09\x18\x96\x3f\x6f\x73\xbc\xea\xa4\x08\x4f\x15\xa0\x2f\x77\xf8\x26\x0c\x49\xed\xc4\x12\x8b\x0c\x69\xc0\x32\xf5\x38\xc8\xd0\x56\xfb\xf6\x4c\x81\xea\x79\x26\x09\xeb\x26\x08\x4d\x6e\xd0\xe4\x06\xcf\xa2\x0a\x92\xa9\x16\x3c\xa8\x52\x50\xb3\x08\x2e\xbb\xff\x5c\x5e\xf0\x5e\x81\x43\xd4\x6e\x2f\x48\x8b\x18\x54\x81\x40\xf5\xf1\xa7\x46\x71\x7c\x1d\x64\x7e\x9e\x28\x55\xb3\xd6\xdd\x94\xb9\x9b\x18\xb4\x8e\x92\x9a\x32\xf7\x5a\x0a\x7b\xfa\x32\x77\x1e\xde\x73\xe5\xed\x96\x91\xc7\x45\x85\x5f\x09\x74\xcf\xc5\xf8\x33\xca\x3d\x0a\x67\xd6\x64\xd3\xdf\x2d\x92\x99\x05\xfe\x0a\x3c\xcb\x30\x58\x86\x6a\x26\x8c\x88\x5c\x23\xdc\x52\xe5\x80\xf4\xd1\xa2\x63\x8a\x36\x0c\x8f\xbe\x65\x74\xfb\x3a\x25\xe6\x19\xfc\x99\x48\x67\x90\xab\x12\xec\x8c\x5c\x05\xbc\xf3\xb5\x83\xfa\x4a\xb8\x7b\xb6\xb5\xd7\x26\xae\xfb\x71\xd1\xb0\x89\xeb\xbe\xeb\xb8\x2e\xc4\xad\x4a\xb0\x0b\xef\x16\xb0\xae\x4e\xff\xeb\x88\x28\x02\x8a\x47\x1c\xb2\xc7\xc9\xb4\xa3\x6b\x2d\x59\xc9\x3f\xa1\x23\x96\x7d\x88\x87\x62\x82\x9b\xa1\xa8\xff\xf7\xa7\x3c\x50\x3f\x64\xcd\xe7\xe5\x4a\x81\xbf\x9c\x7f\x3c\x81\x53\xcd\xe1\x25\x9c\xbd\x3d\x84\xdd\xfd\xde\x16\x6c\x2e\x0e\x6e\x2a\xce\x5d\xd9\xa1\xa8\xc6\x1d\x2e\x26\x5d\x47\x79\x6e\x57\x8c\x2d\x4d\x95\xe3\x6b\xea\x13\x7c\x74\x8d\x56\x82\xe2\xb9\x86\x61\x78\xa0\xf1\x78\x71\xa0\x76\x1c\x3a\x01\x66\x4e\x7c\x26\xcb\x1a\x95\x43\x24\x10\x66\xa7\x2e\x93\x09\x32\x05\x51\x17\xb7\xe6\x59\x97\x98\x55\x54\xe6\xa9\xd3\x82\xce\x9e\xce\x5c\xde\x8a\x8e\x48\x23\xca\x1f\xae\x23\x1d\xd7\xad\x9e\xac\x33\x1d\xe9\xff\x9b\x6c\x50\x17\x64\x6f\xfa\xd4\x4d\x9f\xba\x89\x25\xeb\x28\xa9\xe9\x53\x3f\xaf\x70\xf2\x01\x7d\xea\xd8\x77\xac\x15\x70\xae\xe8\x57\x67\x78\xd6\x3a\xda\x9a\x73\xf5\xcd\x01\xd3\x94\x63\x5a\xfb\x8c\xa9\x95\x55\x66\x03\xbb\x4d\x2b\xf9\xf9\xb4\x92\x73\x3b\xbd\x56\x47\x39\x65\xd0\x6b\xa6\x1b\xe9\x77\xab\xa2\x6b\x57\xd4\xfe\x57\x94\x85\xd4\x78\xbb\x2a\x19\x54\x1e\x83\x57\xbd\x60\x95\x45\xd5\x3f\xff\x1d\xab\x9c\x9a\x9f\x35\xc0\xd5\xac\x52\xc6\x49\x4e\x53\xad\x6c\x22\xcc\x3a\x4a\x7a\x60\xb5\x32\x36\xb3\xa6\x6a\xf9\x54\xdd\xe8\x6c\x31\xa7\xf2\x9d\xab\x18\x62\x0d\x96\x07\x8f\x05\x8a\xd9\x9d\x91\x2d\xb8\x44\xa6\x21\x15\x51\x41\xf8\x22\x7c\xe0\xdb\xa4\x69\x1d\x17\x14\xd5\xc0\xcf\x57\xc3\x4f\x83\x3c\x65\x3a\xfb\x0f\x20\x8f\xd9\xc2\x79\xf0\x79\x33\x1f\xda\x79\x00\x0a\x6c\x9f\x64\x1b\xc5\xb9\x30\xaf\x7e\x13\x25\xc2\x8d\xe7\xd0\x42\x59\x55\xba\x6d\x41\xfd\xc3\x3f\x0f\x41\xd8\xe6\x10\x50\x83\xe4\xdf\xd7\x21\xa0\x45\xad\xb2\x39\xff\xf3\x1c\xcf\xff\x54\x84\x97\xc5\x63\x40\x29\x74\x7f\x9c\xb2\x43\x97\xd8\x36\x67\x57\xf9\xba\x43\x53\x87\x78\x9a\x3d\x70\xa0\x57\xe3\x34\x56\xfe\xd2\x32\xab\x56\x6f\xb2\x4c\xa0\x1c\xa2\x40\x3a\x3c\x70\x6d\x18\x21\x04\xd2\x7c\xab\xca\xe2\x6c\x4c\x27\x41\xf4\x85\x20\xf3\x91\xa7\x4c\xe3\x5c\x3f\x10\x38\x33\x6b\x64\x34\xd3\x69\x3c\xce\xf7\xea\x71\x9a\xd2\xc5\x0f\x91\x40\x94\x94\x2e\xb2\xc8\x52\xa8\x75\x57\x54\x32\x36\x64\x84\x10\x09\xd2\xb4\x5a\xc9\x3c\xb5\x48\x91\x4e\x8d\x74\x99\x2f\x91\xc4\x02\x67\x66\xfb\xb7\xcd\xc5\x34\xce\xd0\x17\x28\x35\x9f\xe2\x87\x6b\x64\xe0\xfb\x5c\x68\x9d\x8c\xe6\x21\x36\x1d\x9c\x0e\x53\x29\x4d\x88\xfb\x29\x7d\x68\xdf\x94\xfa\x19\x7d\x1b\x2f\x75\x45\x5b\xce\x95\x11\x35\xba\x4a\x5c\xf7\xe3\x38\xcd\x63\x99\xc1\x7c\x0c\x8f\x2e\x9d\xe1\x18\x05\x32\x2b\xd3\xd3\x2b\x3d\xdb\x04\xe0\x0b\xbd\x22\x8a\xe6\xed\x29\xf4\xa2\x39\x2b\xca\xee\x23\xe2\x61\xf9\xd7\xd1\x3a\xb9\x61\xa5\x6e\x52\xff\xc5\x9f\x06\x5c\xf6\x98\xdf\x0d\xcd\x57\x3e\xc9\x72\x08\x63\xe8\x16\xf6\xcc\xd7\x3e\x8a\x08\x41\xe6\xb9\x3b\x54\xa1\x57\xb2\x39\x2b\x65\x4b\xcb\xb0\x4c\xbc\x83\xf4\xcf\x82\x90\xb5\x55\x41\x2d\xce\xae\x1c\x6d\x43\xcb\x1e\x76\x79\xf6\x3e\xfc\x9a\x25\x0b\xe9\x1f\xfe\x34\x97\x8c\x56\xa9\xdd\x90\x24\x91\x00\x51\x38\xe1\x82\xde\x63\xe9\x5b\xe1\x8f\xaf\x7f\xfd\x87\x2c\xf0\x34\x4a\x49\xca\xa6\x2f\x21\xca\x41\xfe\x91\x21\x4b\xed\xcc\xa5\xd3\x49\x01\x47\xfc\x77\x10\x0e\x8e\x10\xc8\x44\x40\x16\x61\xe9\xf0\x67\x66\x0e\x00\x65\x62\x68\x59\xe0\x93\xc4\xb4\x3a\x33\x82\x31\x45\xd7\x2e\x5f\x09\xb3\xcd\xe1\x05\x28\x6e\xf3\x01\x08\xf4\x5d\x12\x67\x55\x23\x54\xb1\xa7\x2b\x62\xa1\x0e\xe5\x06\x0f\x41\x9e\x6c\x0c\xb8\x36\xdc\x94\x2e\xda\xda\x6b\xbc\xc6\x17\x0a\xb3\x53\xff\x01\xa6\x9d\x9f\x72\xa9\xd7\x3b\x48\xa1\x9e\xc3\x5d\x5b\xc6\x7b\x30\x0c\xce\xcd\x09\x35\x13\xad\x6b\x22\x20\xf0\x6b\xf8\xd6\x8e\xe2\x3e\xb5\x0c\x5e\x70\xe5\xa0\x00\x39\x97\x0a\xbd\xce\xd3\xba\x30\x0f\x15\xb1\x89\x2a\x6c\xd7\x0a\x36\xcb\x58\xe9\xbf\xf8\x4d\xe8\xb2\xd8\x6a\x29\xb8\xf0\x5b\x86\x62\xed\x51\x65\x0e\x78\xe5\x20\x73\xb6\xd7\xbe\x22\xaa\x6c\xe8\x98\x0b\x8f\xa8\x01\x68\xa4\xd9\x54\x34\x15\x8a\xd4\x64\x1f\xd5\x5e\xff\x53\xec\xe3\xea\xcf\x55\x45\x60\x90\x30\xa0\x4c\xe1\x04\xf3\x3e\x21\x2d\x04\x65\x6a\x77\x27\xe7\x67\x7d\x97\xcf\x3d\x64\xea\xca\xe5\x26\x50\x5f\xab\xea\x6b\x22\xcd\x0b\x22\x26\xa8\xb2\x31\x79\x68\x19\xeb\xf0\x0a\x77\x4d\xb4\x13\x29\x67\xe7\xa8\x14\x65\x13\x99\xe5\x5a\xf8\x4e\x6d\xb9\x1d\x97\x45\x3b\x19\x3f\x51\xdb\xfc\xa3\x20\xa9\xf6\x63\x6c\x94\x3a\xbe\xbd\x92\x8a\xa8\x82\xa9\x56\x8e\x32\x1d\xc0\x1a\xe4\x77\x9b\x2e\x65\xd3\x14\x65\x56\x21\x69\x0e\x75\x3f\x42\x09\x15\x07\xe4\xca\xd5\x0d\x1b\x85\x6b\x1b\x55\xc9\xd1\xdf\x96\xf0\xd2\x12\xc9\x92\x90\x52\xa7\x0c\x81\x8c\x8e\x63\x64\xc6\x6b\xda\x3f\x0a\x0f\xff\x23\x91\x1d\x28\x5b\xbc\x2a\xa9\x78\x66\xec\x1f\xef\x8e\x2f\xd6\xfa\x8c\x66\xd9\x47\x94\xff\xe8\x44\xde\x22\x6d\xf4\x0b\x8f\x41\xf5\xc4\x3d\xca\x48\xca\x8d\x2c\xb0\x73\x7e\x62\xbe\x1b\x41\x59\x52\x7a\xf0\x88\xef\x53\x36\xc9\x34\x65\x74\xba\xb6\xb4\xbc\x54\xb9\xe1\x2c\x97\x07\xf6\x95\x2f\xf8\x8c\xda\x3a\xb9\xac\xda\xaf\x3c\xb0\x4f\x23\xa2\x52\x5e\x9c\x61\x7d\xb7\xb4\x4c\xa4\xe5\x23\x97\x09\x12\xb2\x28\xb2\x2e\xf5\xcd\x6d\x73\x4f\xc2\x2d\x17\x53\x97\x13\x5b\x46\x11\xba\xc9\x7c\xad\x6c\x33\xaa\x64\x97\x97\x25\xa4\xa9\x65\x2a\xf3\x7d\xfa\xf6\xca\x8a\x67\x52\x60\xad\x24\x8d\x8c\xa9\x4a\x11\xeb\xcc\xd7\x2c\x3f\xc4\xcb\xff\x24\xf3\xcd\xd8\xdf\x2a\x72\x81\x93\x9c\xab\x29\x25\xf3\x02\x57\xd1\x2b\x72\x5f\x24\x8c\xdf\x7a\x49\x8c\x25\x53\x79\x2d\x57\x5e\x72\xba\x35\x5f\x18\xc9\x6a\x2c\x1d\x66\xe6\xc2\xcb\xfa\x05\xe0\x76\x99\x6c\x55\x72\xe5\xe4\x59\xb2\x80\x65\x2b\xb4\xc4\xc8\xe2\x8b\x33\xe2\x06\xb8\xc2\x14\x73\x55\xa7\x72\x59\xcf\x4d\xc2\x36\xd6\x78\x9d\x1c\x98\x4b\x9a\xd0\x40\xc2\xd7\x86\xc0\x77\x09\xc3\x54\x29\xca\xb8\xb8\xf6\x77\x15\xfd\x36\x41\x6c\x0d\xf6\x35\x62\x9b\x52\xf3\xfb\x01\xd2\xcf\xc5\x59\x89\x70\x78\x45\x00\x3c\x58\xb2\xf1\x47\x9c\x2b\xa9\x04\xf1\xaf\xcc\xff\xab\x51\x03\xa6\xa9\x8e\xf5\x6b\x00\x46\x44\x29\xd1\x12\xa8\x96\x03\x47\x6e\x7f\x0e\x1e\x1d\xbc\x6a\x79\xa0\x7c\xf9\xae\x28\x67\xda\xa2\x56\xf8\x41\xfd\xd3\x27\x93\x74\x5d\x5a\xd2\xfb\xf4\x4f\xc5\x15\x71\x53\xbf\x43\x3b\x58\x6f\xe6\xb5\xa6\xa5\xa5\x28\x12\xe5\x73\x3d\x2d\xdc\x6a\xaa\x50\xe6\x6a\xb2\xf0\x46\xd8\x5e\x79\xd0\xbe\x7b\x3c\x98\xb6\xb8\x5d\x3f\x77\x12\x48\x4a\x3a\x4b\x95\xe4\x8b\xb4\x68\x55\xf2\xd8\x2a\xa6\x45\xc9\x08\xd3\x4f\x5f\x34\x12\x0b\xcd\xdd\xe1\x91\x8e\x32\x04\x5a\x5c\x2c\x5a\x41\xb9\x32\x69\x89\x84\xb9\x36\x79\x49\x93\x3c\x6d\x0d\x46\x86\x94\x95\xe6\xdf\x48\xce\xbe\x77\x4c\x26\x08\x94\xd9\x78\x57\xe0\x3e\x26\xae\xc4\xfa\x52\x16\x7b\x6d\x79\x1b\x35\xc1\x06\xb4\xfb\xc6\x06\xd2\xc6\x69\x84\x4e\xed\xa5\xa5\x42\x9f\x04\xde\x08\x85\x56\x65\xb8\xbd\x74\x86\x87\xc4\x72\xd2\x93\x7e\xc4\x69\xe4\x37\xd1\x62\x1a\xbd\x5e\x08\xd1\x71\x33\x2f\x0c\x81\xe2\x81\x51\x37\x2f\xfd\x5c\x1d\x9e\x86\x57\xa3\x8b\xe6\xc7\xdb\xc8\x89\xfe\xf2\xe9\x22\x03\x13\x8e\x52\xbe\xe6\x9e\x95\xa7\xfa\x5d\xdb\x5c\x24\xa7\x73\xf2\x76\xbf\xb7\xdd\xce\xc2\x0a\xb4\x73\x7d\x52\xc7\xec\xdc\x8a\x24\xd8\xbc\x61\xdb\xcd\xf0\x09\x77\x21\xb4\x0f\x3f\x9e\x9c\x1c\x1f\x5e\x7c\x3c\xdb\xfc\xf0\xee\xc3\xc5\x66\x86\x24\xda\x7b\xd0\x3e\x4f\xbd\xbb\x1e\xbf\xd5\x2e\x81\x71\x95\x34\x03\x5f\x42\x20\xd1\xbc\xe5\xfe\x93\xb6\xe7\x62\xb4\x9b\xdb\x9c\xd0\xee\xd3\x4f\x43\xea\xdd\xbc\xb3\xc4\x51\xf0\x7e\xb7\x4f\x2e\xef\x86\x7f\xbf\x79\x73\x71\x73\x72\x46\xda\xb1\x96\x86\xa6\xa3\xff\x9b\x36\xa1\x1a\x9a\xda\x7a\x24\x4d\x6d\xad\x54\xd4\x56\x99\x9e\xde\x12\xea\x9a\xee\x86\x4f\x84\x44\x90\x48\x84\xe5\x98\x0d\x30\x80\x4b\x16\xfe\x3f\x66\x8a\x9b\x3c\xe5\xd7\xf4\xd7\x9f\xcc\x57\x15\x88\x4f\xaf\x4c\xc1\x42\x9a\xff\x1a\x6c\x00\x85\xc7\x0e\x60\xd5\x53\x92\x06\xad\xc5\xdd\xc0\x63\xe1\xae\x0c\xf9\x1b\xca\x01\x6c\x50\x7b\xa3\x03\xe7\x65\x74\x12\x88\xc0\x41\x94\xc1\xbd\x0c\x2f\xbd\xcc\xa5\x7f\xf1\x55\x13\xfa\x75\x20\x5c\x9c\xf8\xec\x85\x86\x4d\xf8\x09\xfa\x69\xfd\xe4\xd7\xdd\xfd\x74\xf4\x2e\x98\x8f\x86\xe2\x98\xdd\x89\x03\xf4\xf6\xb6\x76\x26\x37\xd3\x29\x3d\x9a\xc5\xeb\x9e\x3f\x0d\x51\xb6\xd6\x3b\xbd\x9d\x47\x59\xeb\xbd\x55\x4b\xbd\x57\xb2\xd2\x75\xde\x37\x5e\x4c\xa6\xf4\x30\x5c\xd9\x94\xf6\x9e\x6e\x42\xa1\x35\x9e\x65\xce\x22\x52\xfb\xa7\x8d\x3e\xfd\x75\xdb\x0e\x7e\xff\x32\x9c\xcd\x5e\x7d\x99\xbd\x77\xe7\xf7\x7d\xef\xdd\xd9\xf6\x2f\xf3\x9b\x93\x8d\x10\x00\xc6\x3c\x60\xf6\x92\x2d\xfe\xe5\xe3\xde\x64\x6b\xb2\xfb\xf3\x85\x7d\xf9\xeb\x25\xd9\x9a\xca\x9f\x5f\x6f\x4d\x7f\x3b\xda\x9e\xc7\xda\xc9\x9f\x0e\x2a\x05\xc0\xfe\xe3\xe0\x5f\x7f\x25\xfc\xf5\x4b\x54\x93\xec\xdb\x19\x0a\x3a\x9e\x6b\x8c\x37\x67\x8e\x06\x70\x16\xf9\x27\x20\x81\x72\xb8\xa0\xf7\x71\xc3\x68\x8a\xac\x9e\x7e\xb6\x2f\x9d\x63\xe7\xd6\xfb\xfc\xc6\xff\x74\x3a\x1e\x6e\xb9\x27\x38\xf5\xed\x9d\xbf\x1f\xc5\xfa\xd9\x3f\x21\x1e\x1e\x72\x36\x76\xa9\xa5\x6a\xe8\x6a\x7b\xf7\x51\x74\x95\x66\x53\xae\xab\x34\x45\xd6\x8c\x16\x47\x8b\x42\xe0\xa1\x12\x88\x2b\x90\xd8\xf3\xb0\xf7\x5b\xa9\x8b\xdd\xe9\x97\xde\x25\x3d\x9e\xde\x4f\x3f\x1f\xde\x7f\x3a\xc5\xe1\x16\xff\x82\x8e\xbd\x7d\x1c\xa9\xa2\x78\xd4\xa7\x6c\xfa\xfb\x8f\x32\xfb\xfd\x55\x93\xdf\x2f\xb5\x93\xe4\xf4\x2e\x66\x1f\x5a\x58\x76\x3c\x7e\x3f\x7b\xbb\x7f\xfd\xe1\xb7\x2f\xbb\x5f\x26\xce\xf8\xc3\xfe\xe4\xdd\x99\xfc\x79\x76\xfc\x69\x31\xd7\xda\xa0\xf1\x64\x33\x4e\xc5\x52\x6d\x73\x3c\x2a\x3c\x3b\x1b\xfe\x3f\x90\x73\x66\x49\x54\x03\xf8\x78\xf8\x61\xf3\xf8\xf3\xe6\xbe\x8e\xdf\x62\xaf\x65\x4e\xd8\x26\x34\x78\xa7\x36\x23\x7f\x47\x7c\xba\xd9\xa7\x77\xbd\x6d\x97\xd9\xae\x77\xd3\xbb\x19\x5b\x7b\x92\x2a\xf2\x4a\xba\xd7\xb3\xd7\xe9\xc2\xc4\x38\x75\x82\x4d\xab\xa1\x3f\x79\x65\xbf\x7e\x7d\xd3\x73\x85\x65\xcf\x76\x26\x7b\xc4\x1d\xed\x49\x77\x3c\x61\xd7\xdb\xb6\x33\x92\xd7\xff\xf3\x5f\x7f\x39\xfe\x7c\x71\x76\x00\xff\x6b\x26\xdc\x09\x95\xf4\x13\xb5\x91\x29\xbd\x64\xe9\xc6\x1a\x95\xb0\xb1\xd3\xdb\xd9\x78\x19\xaa\x22\xfc\x79\xf8\xfe\xf2\xfc\xe2\xf8\xec\xdc\xe8\x42\xdf\x0c\x3f\x73\xb4\x58\x57\x48\x18\x85\xf4\xfd\xc9\x2b\x2e\x5e\xf5\x66\x34\xe8\xed\x71\xd4\xab\xe6\x88\xa9\xb5\xb5\x6b\x4f\xc6\xea\xba\x4f\xac\x8d\xb4\xf6\xe2\x37\xc5\x36\x56\x4d\x22\x05\xb9\x7f\x5d\x86\x29\x17\xf2\x93\x98\xef\x32\x79\x33\xda\x92\x27\xde\xdb\xeb\x57\xa3\xcf\xfe\xd1\xde\x21\x69\xb7\xfe\x1d\x00\x00\xff\xff\x08\xa1\x83\xae\xd8\x75\x00\x00")

func connector_mgmtYamlBytes() ([]byte, error) {
	return bindataRead(
		_connector_mgmtYaml,
		"connector_mgmt.yaml",
	)
}

func connector_mgmtYaml() (*asset, error) {
	bytes, err := connector_mgmtYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "connector_mgmt.yaml", size: 30168, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"connector_mgmt.yaml": connector_mgmtYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"connector_mgmt.yaml": &bintree{connector_mgmtYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
