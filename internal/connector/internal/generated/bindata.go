// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package generated generated by go-bindata.// sources:
// .generate/openapi/connector_mgmt.yaml
package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _connector_mgmtYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x7d\x7d\x73\xdb\x38\x92\xf7\xff\xfa\x14\xfd\x28\xcf\x96\x77\xef\x6c\x49\x7e\x49\x9c\xa8\x2e\x53\xe5\xd8\x4a\xc6\x93\xc4\x49\x6c\x67\x92\xec\xd6\x94\x05\x91\x2d\x09\x16\x09\xd0\x00\x28\x5b\xd9\xdb\xef\x7e\x05\x80\x14\xdf\x25\xca\xf1\xc4\x9e\x44\xae\x4a\x55\x44\x36\x1a\xdd\x8d\xc6\x0f\x8d\x6e\x90\xe4\x01\x32\x12\xd0\x2e\xec\xb6\x3a\xad\x0e\x3c\x02\x86\xe8\x82\x1a\x53\x09\x44\xc2\x90\x0a\xa9\xc0\xa3\x0c\x41\x71\x20\x9e\xc7\xaf\x41\x72\x1f\xe1\xf8\xa8\x27\xf5\xa5\x09\xe3\xd7\x96\x5a\x37\x60\x10\xb1\x03\x97\x3b\xa1\x8f\x4c\xb5\x1a\x8f\xe0\xc0\xf3\x00\x99\x1b\x70\xca\x94\x04\x17\x87\x94\xa1\x0b\x63\x14\x08\xd7\xd4\xf3\x60\x80\xe0\x52\xe9\xf0\x29\x0a\x32\xf0\x10\x06\x33\xdd\x13\x84\x12\x85\x6c\xc1\xf1\x10\x94\xa1\xd5\x1d\x44\xd2\x71\x98\x20\x06\x56\x92\x84\x73\x33\x10\x74\x4a\x14\x36\x37\x81\xb8\x5a\x07\xf4\x35\xa9\x1a\x23\x34\x27\x44\x6e\x0d\x3d\x44\xb5\xe5\x13\x46\x46\x28\xb6\x22\xe2\xd6\x8c\xf8\x5e\x13\x86\xd4\xc3\x06\x65\x43\xde\x6d\x00\x28\xaa\x3c\xec\xc2\x21\x67\x0c\x1d\xc5\x05\x9c\xa1\x98\x52\x07\xe1\xa5\xe6\x00\x6f\x2d\x87\x06\xc0\x14\x85\xa4\x9c\x75\xa1\xd3\xea\xb4\x76\x1b\x00\x2e\x4a\x47\xd0\x40\x99\x8b\x4b\xda\x5b\x85\x4e\x51\x2a\x38\x78\x7f\xac\x25\xb5\xa2\x81\x13\xb7\x93\xad\x86\x44\xa1\x3b\xd1\x52\x6d\x41\x28\xbc\x2e\x8c\x95\x0a\x64\xb7\xdd\x26\x01\x6d\x69\x6b\xcb\x31\x1d\xaa\x96\xc3\xfd\x06\x40\x4e\x80\xb7\x84\x32\xf8\x7b\x20\xb8\x1b\x3a\xfa\xca\x3f\xc0\xb2\x2b\x67\x26\x15\x19\xe1\x32\x96\x67\x8a\x8c\x28\x1b\x95\x32\xea\xb6\xdb\x1e\x77\x88\x37\xe6\x52\x75\x9f\x76\x3a\x9d\x62\xf3\xf9\xfd\xa4\x65\xbb\x48\xe5\x84\x42\x20\x53\xe0\x72\x9f\x50\xd6\x50\x64\x14\x19\x80\x11\x3f\x33\x2e\xe7\xb3\x00\x65\xb1\x7d\xb3\x59\x46\x5d\x9b\x10\x0e\xbd\x50\x2a\xac\x68\xd0\x08\x88\x1a\x1b\x79\x1e\xe9\x7f\x70\x3e\x46\x89\x40\x04\x1a\x47\x9b\x8f\x1d\x08\xf4\x88\x42\x57\x8f\xad\x8c\x88\x9b\xda\xce\xed\x39\xc9\x85\x3f\xf2\x55\x7b\xba\xdd\x9e\x90\xe1\x84\x5c\x24\xd7\x95\x56\xab\xfd\xef\xec\x85\x0b\xea\xfe\xa7\xd9\x35\x22\x05\x44\x10\x1f\x55\xe4\x17\xfa\x2f\xd6\xa1\xd0\x24\xba\x9f\x53\xe3\x7c\x8c\x40\x5d\xe0\xc3\x9c\xcc\xba\xd1\xbc\x85\x74\xc6\xe8\x93\xee\xfc\x37\x98\xdb\x5d\x90\x4a\x50\x36\x9a\x5f\xa6\xac\x0b\xda\x24\xf3\x0b\x02\xaf\x42\x2a\xd0\xed\x82\x12\xa1\x65\x37\x42\x15\xf3\x89\x07\x33\x96\xbb\x6c\x30\x35\x0f\x19\x70\x26\x31\x45\xda\xdc\xe9\x74\x9a\x69\x69\x1c\xce\x14\x32\x95\xbe\x04\x40\x82\xc0\xa3\x0e\xd1\x6a\xb6\x2f\x25\x67\xd9\xbb\x65\x4a\xd9\xbf\xff\x2f\x70\xd8\x85\xe6\xa3\xb6\xc3\xfd\x80\x33\x64\x4a\xb6\x2d\xad\x6c\xcf\x45\xd4\x12\x36\x53\x4d\x0b\x36\xcd\x5a\x12\x7c\xa2\x9c\xb1\x9e\x2d\xda\xca\xda\x2c\x68\x1c\x3f\xd2\x67\xaf\xb3\x7d\x3f\xfa\xf4\x84\xe0\xa2\x99\x6b\x82\x37\xc4\x0f\xbc\xb4\xc1\xe3\xbf\xbd\xce\x76\xcf\xde\x2c\xde\x2b\xef\x28\xe6\xd5\x4e\x9a\x56\x9a\xed\x20\x54\x63\x50\x7c\x82\x4c\xe3\x21\x65\x53\xe2\xa5\xbc\xb6\xb9\xd7\xd9\xfb\x8b\x18\x69\xef\xf6\x46\xda\x5b\x66\xa4\x13\x9e\xf8\x52\xce\xc7\xf0\x86\x4a\x25\x13\x83\x3d\xbe\xaf\x59\xb2\xa2\xc1\x1e\x77\x3a\xb7\x35\x58\xd2\xb4\xd2\x60\x1f\x19\xde\x04\xe8\x68\xfc\x45\x2d\x17\x70\xc7\x2c\x2a\xb1\x67\x49\x74\x42\x41\xd5\x2c\x8d\x44\x2f\x90\x08\x14\x5d\xf8\x17\xfc\x11\x5d\xe5\x01\x0a\x63\xa4\x63\xb7\xab\x31\x2c\x03\x04\x2f\x66\xc7\x47\x31\xb7\xd0\xf7\x89\x98\x75\xe1\x15\x2a\x20\xf9\x11\x1a\xcc\x80\xba\x8d\x06\xc0\x2a\xe8\xdf\xbd\x1d\x6e\xde\x42\x2f\x8f\xca\xac\x62\x32\xaf\xd5\x29\xaa\x50\x30\x1d\xac\x68\x5a\xbd\x6a\x64\x35\x8c\x1b\x14\x97\x25\xdd\x7d\xd9\x50\x26\x94\xed\x80\x8c\x52\xc3\xb8\x94\x5c\xd2\xaf\xab\x90\x73\xe1\xa2\x78\x31\x5b\xa5\x03\x24\xc2\x19\x37\x1f\xfc\x3a\xf4\x86\x4a\x55\x0d\xaa\x4b\x46\x6a\xbd\xfa\xd4\x5b\x7d\xd6\x60\xba\x0c\x4c\xeb\x61\x5a\x24\x72\xa0\x37\x06\xcb\xf0\x4c\x96\x81\x94\x23\x90\x28\x9c\xd3\x2c\x04\x1c\x1d\x90\x5e\x85\x28\x66\x29\x7d\x6c\x74\x4c\xe4\x8c\x39\x55\x5a\xbe\x47\x31\xe4\xc2\x37\xb1\x1a\x31\xdb\x25\xa0\x4c\x6f\x69\x4d\xab\xb1\xe0\x8c\x87\x52\x6f\xd1\x18\x8a\xc6\xe2\xd1\xb5\x71\xf2\x80\x73\x0f\x09\x4b\xdd\x29\x89\x8c\x21\x8e\x0b\x5f\x70\x37\x85\xda\x15\xfb\x48\x97\x28\x32\xa7\x29\x71\xc6\xc5\xae\x58\xee\x88\xb5\x10\xa7\xb9\x28\xba\xaf\x82\xc9\x9d\x7b\x86\xc9\xea\x59\xef\x38\x18\x28\xcc\x84\x99\x7f\x8d\x89\xbe\xd7\xe9\x1c\xea\xa9\x40\x39\xbb\x3d\x2a\xe6\x59\x54\xda\xe9\x77\x8d\x86\x86\xd2\x4e\x7c\x99\x0f\xa3\xd6\xeb\xc8\x7a\x17\x53\x7f\x17\x73\x9e\xec\x82\xd1\xd5\x98\xc1\x43\xe1\x20\xb8\x1c\x25\xdb\x50\x76\x27\xb3\x5e\x7b\x73\x8e\xc5\x20\xac\x5a\x7e\xed\xaa\x18\xe7\x17\x9c\xdc\xe2\x58\x6f\x2b\x30\x0f\xf2\x0d\x26\xa0\xc9\xb0\x5e\xe7\x78\xd5\xd9\x85\xdc\xe7\x1e\xa0\x7a\xc1\xb7\x61\x48\x6a\x26\x96\x78\xa4\xa1\x01\xc7\xa6\xfc\x20\x43\x5b\xbd\xb6\x67\x72\x60\x0f\x73\x93\xb0\xea\x06\x61\xbd\x37\x58\xef\x0d\x1e\x44\xa2\x25\x93\x90\xb8\x55\x32\xa2\x66\x9e\x5d\xb6\xff\xbd\x38\xa7\xbe\x04\x87\xa8\xdb\x9c\x93\x16\x31\xa8\x02\x81\xea\xe3\x4f\x8d\xfc\xfb\x2a\xc8\xfc\x30\x51\xaa\x66\x3a\x7d\x9d\x49\x5f\xc7\xa0\x75\x8c\xb4\xce\xa4\xaf\x64\xb0\xfb\xcf\xa4\xe7\xe1\x3d\x97\x41\x6f\x58\x79\x3c\x54\xf8\x8d\x40\xf7\x50\x9c\x3f\x63\xdc\x23\xa3\xd9\x7a\x37\xfd\xc3\x22\x99\x1d\xe0\x6f\xc0\xb3\x0c\x83\x45\xa8\x66\xc3\x88\x68\x69\x84\x6b\xaa\xc6\x20\x03\x74\xe8\x90\xa2\x0b\xc7\x47\x7f\x65\x74\xfb\x36\x23\xe6\x19\x7c\x4f\xa4\xb3\xc8\x55\x09\x76\x56\xae\x02\xde\x05\x7a\x81\xfa\x46\xb8\x7b\xb0\xb9\xd7\x75\x5c\xf7\xf3\xa2\xe1\x3a\xae\xfb\xa1\xe3\x3a\x83\x5b\x95\x60\x67\xee\x16\xb0\xae\x4e\xfd\xeb\x88\x28\x02\x8a\x47\x1c\xb2\x27\xd6\xf4\x42\xd7\x58\x30\x92\xdf\xa1\x22\x96\xed\xc4\x47\x31\xc2\x2d\x23\xea\x7f\x7f\x97\x0e\x75\x27\x2b\xf6\x97\x4b\x05\xfe\x76\xf6\xee\x04\xde\x6b\x0e\x9b\x70\xfa\xf2\x10\x9e\x3c\xeb\xec\xc0\xd6\xfc\x6c\xa8\xe2\xdc\x93\x2d\x8a\x6a\xd8\xe2\x62\xd4\x1e\x2b\xdf\x6b\x8b\xa1\xa3\xa9\x72\x7c\x6d\x7e\x82\x0f\x2e\xd1\x49\x50\x3c\x57\x30\x34\x67\x26\x7b\xf3\x33\xbb\x43\xb3\x08\x30\x7b\xa8\x34\x19\xd6\x28\x1d\x22\x81\x30\x37\x75\x99\x8c\x90\x29\x88\xaa\xb8\x35\x8f\xd3\xc4\xac\xa2\x34\x4f\x9d\x12\x74\xf6\x00\xe8\xe2\x52\x74\x44\x1a\x51\xfe\x74\x15\xe9\x38\x6f\x75\x6f\x95\xe9\xc8\xfe\x7f\xc9\x02\x75\x41\xf6\x75\x9d\x7a\x5d\xa7\x5e\xc7\x92\x75\x8c\xb4\xae\x53\x3f\xac\x70\xf2\x16\x75\xea\x78\xed\x58\x29\xe0\x5c\x52\xaf\xce\xf0\xac\x75\x7a\x36\xb7\xd4\x7f\xef\xfa\xf5\xc3\xac\xca\x44\x46\x59\xf9\x8c\xa9\x93\x35\xe6\x1a\x76\xd7\xa5\xe4\x87\x53\x4a\xce\xcd\xf4\x5a\x15\xe5\x94\x43\xaf\xb8\xdd\x48\x3f\xbe\x15\x5d\xbb\xa0\xee\x7f\xa2\x5d\x48\x8d\x07\xb8\x92\x46\xe5\x31\x78\xd5\x33\x5c\x59\x54\xfd\xfe\x8f\x71\xe5\xcc\xfc\xa0\x01\xae\x66\x96\x32\xde\xe4\xac\xb3\x95\xeb\x08\xb3\x8e\x91\x6e\x99\xad\x8c\xdd\x6c\x9d\xb5\xbc\xaf\x6a\x74\x36\x99\x53\xf9\x58\x57\x0c\xb1\x16\xcb\xc3\xbb\x02\xc5\xec\xcc\xc8\x26\x5c\x22\xd7\x90\x8a\xa8\xd0\x3c\x6b\x1f\x06\x2e\x59\x97\x8e\x0b\x86\x5a\xc3\xcf\x37\xc3\xcf\x1a\x79\xca\x6c\xf6\x27\x20\x8f\x9d\xc2\x79\xf0\x79\x31\x3b\x76\xf3\x00\x14\xba\x01\xc9\x16\x8a\x73\x61\x5e\xfd\x22\x4a\x84\x1b\x0f\xa1\x84\xb2\x2c\x75\xdb\x80\xfa\x87\x7f\x6e\x83\xb0\xeb\x43\x40\x6b\x24\xff\xb1\x0e\x01\xcd\x73\x95\xeb\xf3\x3f\x0f\xf1\xfc\x4f\x45\x78\x59\x3c\x06\x94\x42\xf7\xbb\x49\x3b\xb4\x89\xeb\x72\x76\x91\xcf\x3b\xac\xf3\x10\xf7\x33\x07\x0e\xf4\x68\xbc\x8f\x8d\xbf\x30\xcd\xaa\xcd\x9b\x0c\x13\xa8\x31\x51\x20\xc7\x3c\xf4\x5c\x18\x20\x84\xd2\xbe\x0e\xcb\xe1\x6c\x48\x47\x61\xf4\x12\x22\xfb\x1e\xa9\x4c\xe1\x5c\x77\x08\x9c\xd9\x31\xb2\x96\x69\xad\x57\x9c\x1f\x75\xc5\x59\xa7\x2e\x7e\x8a\x0d\x44\x49\xea\x22\x8b\x2c\x85\x5c\x77\x45\x26\x63\x43\x46\x08\x91\x20\x4d\xa3\x91\xe8\xa9\x45\x8a\x6c\x6a\xa5\xcb\xbc\x89\x24\x16\x38\xa3\xed\x2f\x5b\x73\x35\x4e\x31\x10\x28\x35\x9f\xe2\xbb\x71\x64\x18\x04\x5c\x68\x9b\x0c\x66\x06\x9b\x0e\xde\x1f\xa7\xb6\x34\x06\xf7\x53\xf6\xd0\x6b\x53\xea\x67\xf4\xfa\xbd\xd4\x15\xed\x39\x17\x56\xd4\xe8\x2a\xf1\xbc\x77\xc3\x34\x8f\x45\x0e\xf3\xce\x1c\x5d\x3a\xc5\x21\x0a\x64\x4e\xa6\xa6\x57\x7a\xb6\x09\x20\x10\x7a\x44\x14\xcd\xfb\x93\x59\x45\x73\x5e\x94\x9d\x47\xc4\xc7\xf2\x17\xb0\xb5\x72\xcd\x4a\x97\x49\xfd\x17\xbf\x7d\x70\x51\x37\xbf\x5b\x9a\x6f\xec\xc9\x19\x13\xc6\xd0\x2b\xcc\x99\x6c\x8e\x2a\x22\x5a\xa5\x2f\x22\x04\x99\xe5\xee\x50\x85\x7e\xc9\xec\xac\x14\x2e\x2d\xc4\x22\xf9\x0e\xd2\x3f\x0b\x42\xd6\xb6\x05\x75\x38\xbb\x18\x6b\x27\x5a\xd4\xd9\xc7\xd3\x37\xe6\x8d\x99\xcc\xd0\xdf\xbe\x37\x8f\x0c\x96\xd9\xfd\x8d\x21\x49\x42\x01\xa2\x70\xc4\x05\xfd\x8a\xa5\x8f\x85\xdf\xbd\xfd\xf5\x1f\xb2\xd0\xd7\x30\x25\x29\x9b\x6c\x42\xb4\x09\xf9\x23\x43\x96\x9a\x9a\x0b\xd5\x49\x21\x47\xfc\x77\x60\x1a\x47\x10\x64\x43\x20\x87\xb0\x74\xfc\x33\xb5\x27\x80\x32\x41\xb4\x2c\xf0\x49\x82\x5a\xbd\x35\x82\x21\x45\xcf\x2d\x1f\x09\x3b\xcf\xe1\x11\x28\xee\xf2\x2e\x08\x0c\x3c\x12\x6f\xab\x06\xa8\xe2\xa5\xae\x08\x86\x3a\x96\xeb\xde\x06\x7a\xb2\x41\xe0\xca\x78\x53\x3a\x68\x2b\x8f\xf1\x0a\x6f\x41\xcc\xaa\xfe\x13\xa8\x9d\x57\xb9\x74\xd9\x3b\x48\xa1\xde\x98\x7b\xae\x8c\xe7\xa0\x89\xce\xed\x11\x35\x1b\xae\x6b\x22\x20\xf0\xda\x3c\xb6\xa3\x78\x40\x1d\x8b\x17\x5c\x8d\x51\x80\x9c\x49\x85\x7e\xeb\x7e\xd7\x30\x1f\x15\x71\x89\x2a\x4c\xd7\x0a\x36\x8b\x58\xe9\xbf\xf8\x51\xe8\xb2\xe0\x6a\x21\xb8\xf0\x6b\x86\x62\xe5\x56\x65\x2b\xf0\xd2\x46\xf6\x70\xaf\x7b\x41\x54\x59\xd3\x21\x17\x3e\x51\x5d\xd0\x48\xb3\xa5\x68\x2a\x16\xa9\xc9\x3e\x4a\xbe\xfe\x59\xec\xe3\xf4\xcf\x45\x45\x64\x90\x30\xa0\x4c\xe1\x08\xf3\x6b\x42\x5a\x08\xca\xd4\x93\xbd\xdc\x3a\x1b\x78\x7c\xe6\x23\x53\x17\x1e\xb7\x91\xfa\x4a\x69\x5f\x1b\x6a\x9e\x13\x31\x42\x95\x0d\xca\x8d\x67\xac\xc2\xcb\xcc\x9a\x68\x26\x52\xce\xce\x50\x29\xca\x46\x32\xcb\xb5\xf0\x2e\xdc\x72\x3f\x2e\x0b\x77\x32\xeb\x44\x6d\xf7\x8f\xa2\xa4\xda\xdd\xb8\x28\x75\x80\x7b\x21\x15\x51\x05\x57\xad\x6c\x65\x4b\x80\x35\xc8\x6f\xb6\x3c\xca\x26\x29\xca\xac\x41\xd2\x1c\xea\xbe\xe8\x12\x2a\x4e\xc8\x95\x9b\x1b\x36\x0a\xd7\x36\xaa\x76\x47\xbf\x2c\xe0\xa5\x25\x92\x25\x21\xa5\xde\x33\x84\x32\x3a\x8f\x91\x69\xaf\x69\xfb\x85\xce\xfb\x89\xec\x40\xd9\xfc\x59\x49\xc5\x33\x6d\xfb\xaf\x7a\xe7\x2b\xbd\xaa\xb3\xec\x45\xcd\xfd\x56\xb4\x5a\xa4\x9d\x7e\xbe\x62\x50\xad\xb8\x4f\x19\x49\x2d\x23\x73\xec\x9c\x9d\xd8\x17\x47\x50\x96\xe4\x1e\x7c\x12\x04\x94\x8d\x32\x55\x19\xbd\x5f\x5b\x98\x5f\xaa\x9c\x70\x8e\xc7\x43\xf7\x22\x10\x7c\x4a\x5d\xbd\xbb\xac\x9a\xaf\x3c\x74\xdf\x47\x44\xa5\xbc\x38\xc3\xfa\xcb\xd2\x22\x91\x16\xb7\x5c\x24\x88\x61\x51\x64\x5d\xba\x36\x37\xed\x3d\x09\xd7\x5c\x4c\x3c\x4e\x5c\x19\x45\xe8\x76\xeb\xeb\x64\xab\x51\x25\xb3\xbc\x6c\x47\x9a\x1a\xa6\xb2\xb5\x4f\xdf\x5e\x9a\xf2\x4c\x32\xac\x95\xa4\x91\x33\x55\x19\x62\x15\x7d\xed\xf0\x43\x3c\xfc\xf7\xa2\x6f\xc6\xff\x96\x91\x0b\x1c\xe5\x96\x9a\x52\x32\x3f\xf4\x14\xbd\x20\x5f\x8b\x84\xf1\x63\x2f\x89\xb3\x64\x52\xaf\xe5\xc6\x4b\x8e\xb7\xe6\x33\x23\x59\x8b\xa5\xc3\xcc\x5c\x78\x59\x3f\x03\xdc\x2c\x93\xad\x4a\xae\x9c\x3c\x0b\x06\xb0\x6c\x84\x16\x38\x59\x7c\x71\x4a\xbc\x10\x97\xb8\x62\x2e\xed\x54\x2e\xeb\x99\xdd\xb0\x0d\x35\x5e\x27\x27\xe6\x92\x2a\x34\x10\xf3\xdc\x10\x04\x1e\x61\x98\xca\x45\xd9\x25\xae\xf9\x43\x45\xbf\xeb\x20\xb6\x06\xfb\x1a\xb1\x4d\xa9\xfb\xfd\x04\xdb\xcf\xf9\x61\x09\xd3\xbc\x22\x00\xee\x2e\x98\xf8\x03\xce\x95\x54\x82\x04\x17\xf6\xdb\x1d\x35\x60\x9a\xea\x58\xbf\x06\x60\x44\x94\x12\x1d\x81\x6a\x31\x70\xe4\xe6\x67\xf7\xce\xc1\xab\xd6\x0a\x94\x4f\xdf\x15\xe5\x4c\x7b\xd4\x92\x75\x50\xff\x0c\xc8\x28\x9d\x98\x96\xf4\x6b\xfa\xa7\xe2\x8a\x78\xa9\xdf\xc6\x0f\x56\xd3\xbc\x96\x5a\x5a\x8a\x22\x51\x7e\xaf\xa7\x85\x5b\x4e\x65\x64\xae\x26\x33\x37\x4c\x7d\xe5\x56\xf3\xee\xee\x60\xda\xe1\x6e\xfd\xbd\x93\x40\x52\x52\x5a\xaa\x24\x9f\x6f\x8b\x96\x6d\x1e\x1b\xc5\x6d\x51\xd2\xc2\x16\xd4\xe7\x95\xc4\x42\x75\xf7\xf8\x48\x47\x19\x02\x1d\x2e\xe6\xb5\xa0\x5c\x9a\xb4\x44\xc2\x5c\x9d\xbc\xa4\x4a\x9e\xf6\x06\x2b\x43\xca\x4b\xf3\x8f\x24\x67\x1f\x3c\x26\x23\x04\xca\x5c\xbc\x29\x70\x1f\x12\x4f\x62\x7d\x29\x8b\xc5\xb6\xbc\x8f\xda\x60\x03\x9a\xdb\xd6\x07\xd2\xce\x69\x85\x4e\xcd\xa5\x85\x42\x9f\x84\xfe\x00\x85\x36\xa5\x99\x5e\x7a\x87\x87\xc4\x19\xa7\x95\xbe\x43\x35\xf2\x93\x68\xae\x46\xa7\x63\x15\x89\xbe\x3c\x50\x1a\x18\xfd\x6f\x92\xe2\x3e\x8b\xce\xe8\xd8\xfd\xad\x69\xa4\xb7\xb5\x8e\xa0\x0a\x05\x25\x2d\xe3\x21\x72\xc6\x14\xb9\xb1\x45\x04\x2a\xd3\xbb\x58\x99\x12\xc8\xa7\x1e\x11\xf1\x07\xaf\xd2\x4d\x10\xfa\x31\xe3\x3e\x38\x1e\x09\xa5\xa9\x3c\x11\x06\x67\x1f\xde\x98\x35\x17\xed\xa7\xba\x62\x5e\x3d\x6d\x37\x63\xe8\x38\xcf\x6e\xda\xdb\x2a\x1d\x61\xb3\x39\xdb\x4c\x9e\xa0\x6f\x13\xea\x32\xe1\xf3\x92\x8b\xd8\x74\x9b\x5a\x30\x61\x9e\xb4\x31\x1f\xf7\x3a\xcc\xbe\xb4\x31\xdd\x81\x1a\x23\x15\x66\xf0\x37\x41\x8b\xaa\x7b\x1a\x72\xcf\xe3\xd7\xe6\xc3\x53\x46\xb1\x6e\x63\xde\x49\xbf\xdf\x97\x57\x09\xba\xea\x76\x40\xa4\x93\xbe\x9f\x10\x9f\xaf\x2e\x04\x5c\x10\xe6\x5e\xc4\xc5\xb6\x6f\x11\x69\x33\x66\x52\x2d\x9f\xfd\xd8\x59\x66\x84\xd9\x86\x8a\x37\x6b\xee\x26\x70\x01\xd4\xd2\x18\x8f\x03\x2a\x01\xfd\x40\xcd\x36\xf5\xb5\xa4\x12\x6a\xc3\x6d\x19\x7a\x4a\x9a\x4f\x53\xa5\x34\xd3\xd2\xb4\xe6\x7e\x1d\x78\x1a\x3f\xd3\x8f\xca\x17\x7d\x3d\xe7\xca\x69\x77\x8f\x55\x6b\x56\xcc\x50\x3b\x85\x23\x06\xdf\x3a\x0b\xa5\x9a\x79\xd8\x35\x11\xa6\xc5\x0a\xf3\xa9\x8e\xf2\x19\x96\x4c\x30\x43\x94\x4c\xa8\x94\x2f\x2c\x9e\x59\x4b\x66\xd4\xf5\x18\x05\x66\xa6\x53\xd2\x65\x66\x56\xc1\x81\xf6\x13\x74\xa3\xd9\xa1\x71\xc9\xb0\xb3\x72\xe9\xc1\xe9\x6b\x2b\xf5\x37\xa1\x9f\x52\x41\xff\x8c\xbc\x45\xff\xd7\x94\x01\xfb\x9b\xe6\x75\x18\xfd\x28\xcf\xd8\x4f\x58\xdb\x85\x8a\x0b\x3b\xd8\xfd\xff\xf9\x45\xb7\x79\xde\x37\xee\xd2\x7f\x73\xfc\xba\xd7\x4f\x26\x65\xdc\xc6\xe1\xec\x32\x64\x8e\xa2\x53\xcc\xb7\x3f\x38\x39\xea\xdb\xae\xde\x9d\xf6\x5b\xf0\x2b\xbf\xc6\x29\x8a\x4d\x98\xf1\xd0\x00\x82\xd6\x98\x80\x4f\x6e\xa8\x1f\xfa\x5a\xf7\xed\x4e\xc2\x8e\x33\xa3\x23\x89\x35\x34\xee\x90\x32\x7b\x6f\xee\x5f\x65\xb3\x32\xf7\x5d\x1b\x5b\x71\xd3\xf6\x32\x9e\xd6\x27\xd7\x72\x4b\x5e\xc9\x2d\x9b\xe7\xb6\x42\x9a\xc4\xa0\x35\x09\xf4\xa5\x22\x03\x4f\x1b\xb3\xde\x34\xcd\xce\xd1\xe7\x90\xe5\x6f\xdf\x3e\x12\xb1\x7e\x0e\x96\x77\xba\xf9\xbf\x82\xad\x3f\xca\xd5\xb0\x75\x1d\xca\xa4\x22\x2c\x2e\x1c\x12\xdb\x8b\x3d\xc2\xa5\x88\x50\xd2\x5e\xd7\x5a\xdd\x52\x62\x8f\x4e\x50\x0b\xfd\xb7\x9d\xc7\x7f\x0a\xa0\x18\x98\xd4\x37\xb3\xc3\x92\xc2\x19\xa2\xcc\xfd\x50\xa2\x80\x31\x91\x10\xa0\xf0\xa9\x94\x51\xa1\x4b\xa2\xfd\x34\x9e\xb5\x0b\xba\x29\x3f\x38\xe1\x0a\xe3\xaf\x3b\x46\x8b\x4d\x72\xea\x4a\x7b\x7a\x74\x4c\x86\xca\x54\xeb\x6a\xd8\x8a\x82\x05\xe3\x73\x15\x60\x54\x0e\x3c\x25\x6b\x7b\x06\x57\x20\x0f\x77\xb5\xbc\xa4\x79\x3b\x58\x6b\x24\xe7\x80\x4c\xf2\x24\x16\x2b\x3a\x08\x94\x66\x8a\x5d\x18\x98\xab\xd1\x45\xfb\xe3\x65\xb4\xfd\xfe\xed\xd3\x79\x66\x83\x31\x56\x2a\xd0\xdc\xb3\xda\x56\xbf\xa6\x23\x97\x03\xa2\xae\x89\x6d\x76\x9b\xd9\x0d\x09\x34\x73\x47\xac\xc6\x36\xe6\xaf\x48\x9f\xdb\x97\x73\xb4\x33\x7c\x4c\xfc\x0e\xcd\xc3\x77\x27\x27\xbd\xc3\xf3\x77\xa7\x5b\x6f\x5f\xbd\x3d\xdf\xca\x90\x44\x51\x3b\x34\xcf\x52\xaf\xbd\x89\x5f\x88\x23\x81\x71\x95\x9c\x23\xb2\xd3\xc8\xbc\x20\xe7\xb9\xf6\x8e\x62\x9e\x2c\x17\xd6\x43\x73\x9b\x7e\x3a\xa6\xfe\xd5\x2b\x47\x1c\x85\x6f\x9e\x6c\x93\x8f\x37\xc7\xff\xbc\x7a\x71\x7e\x75\x72\x4a\x9a\xb1\x95\x8e\xad\x5b\x7e\xd0\xde\x54\xc3\x52\x3b\x77\x64\xa9\x9d\xa5\x86\xda\x29\xb3\xd3\x4b\x42\x3d\x7b\x2e\x22\x20\x42\x62\x06\x89\xbb\xf0\x91\x99\xaf\xac\x2a\x6e\x33\x9c\xaf\xd3\x2f\x8e\xb4\x2f\x64\x22\x01\xbd\xb0\xa5\x0e\x69\x3f\x5c\xda\x85\x42\xb7\x5d\x58\xd6\x4b\x72\xb6\xcb\xe1\x5e\xe8\x33\x8b\x58\x9a\x7f\x34\xc1\x60\x83\xba\x1b\x2d\x38\x2b\xa3\x33\x2b\x51\x37\xca\xfd\x6e\x46\xd1\x60\x36\x71\x1c\x5f\xb5\x49\xa3\x16\x7c\xb0\x18\x62\x47\x4a\x6f\xb8\xe0\x39\x6c\xa7\xed\x93\x1f\x77\xef\xd3\xd1\xab\x70\x36\x38\x16\x3d\x76\x23\x0e\xd0\xdf\xdf\xd9\x1b\x5d\x4d\x26\xf4\x68\x1a\x8f\x7b\xfe\x20\x65\xd9\x58\xef\x75\xf6\xee\x64\xac\xf7\x97\x0d\xf5\x7e\xc9\x48\xd7\x79\x55\xc9\x5c\x99\xd2\x73\xf4\x65\x2a\xed\xdf\x9f\x42\xc6\x1b\x4f\x33\x8f\x31\x50\xf7\xf9\xc6\x36\x7d\xbd\xeb\x86\xbf\x7f\x39\x9e\x4e\x1f\x7f\x99\xbe\xf1\x66\x5f\xb7\xfd\x57\xa7\xbb\xbf\xcd\xae\x4e\x36\x0c\x00\x0c\x79\xc8\xdc\x05\x53\xfc\xcb\xbb\xfd\xd1\xce\xe8\xc9\xaf\xe7\xee\xc7\xd7\x1f\xc9\xce\x44\xfe\xfa\x74\x67\xf2\xe1\x68\x77\x16\x5b\x27\x7f\xb0\xb8\x14\x00\xb7\xef\x06\xff\xb6\x97\xc2\xdf\x76\x89\x69\x92\x79\x3b\x45\x41\x87\x33\x8d\xf1\xf6\xb8\x72\x17\x4e\xa3\xa5\x0d\x48\xa8\xc6\x5c\xd0\xaf\xf1\x51\x93\x09\xb2\x7a\xf6\xd9\xfd\x38\xee\x8d\xaf\xfd\xcf\x2f\x82\x4f\xef\x87\xc7\x3b\xde\x09\x4e\x02\x77\xef\x9f\x47\xb1\x7d\x9e\x9d\x10\x1f\x0f\x39\x1b\x7a\xd4\x51\x35\x6c\xb5\xfb\xe4\x4e\x6c\x95\x66\x53\x6e\xab\x34\x45\xd6\x8d\xe6\xa7\x92\x0d\xf0\x50\x09\xc4\x13\x48\xdc\x99\x39\x35\x56\x69\x8b\x27\x93\x2f\x9d\x8f\xb4\x37\xf9\x3a\xf9\x7c\xf8\xf5\xd3\x7b\x3c\xde\xe1\x5f\x70\xec\xee\xf6\x22\x53\x14\x4f\x09\x97\xa9\xff\xec\x4e\xb4\x7f\xb6\x4c\xf9\x67\xa5\x7e\x92\x3c\xf8\x83\xd9\x4e\x0b\xc3\x8e\xbd\x37\xd3\x97\xcf\x2e\xdf\x7e\xf8\xf2\xe4\xcb\x68\x3c\x7c\xfb\x6c\xf4\xea\x54\xfe\x3a\xed\x7d\x9a\xeb\x5a\x1b\x34\xee\x4d\xe3\x54\x9c\xd6\xb4\x21\xa3\x79\xec\x26\x0a\xa0\x1d\x89\xaa\x0b\xef\x0e\xdf\x6e\xf5\x3e\x6f\x3d\xd3\xa1\x5f\xbc\x6a\xd9\x87\x73\x12\x1a\xbc\x51\x5b\xd1\x7a\x47\x02\xba\xb5\x4d\x6f\x3a\xbb\x1e\x73\x3d\xff\xaa\x73\x35\x74\xf6\x25\x55\xe4\xb1\xf4\x2e\xa7\x4f\xd3\x25\x8d\x61\xea\xf0\xbb\x36\xc3\xf6\xe8\xb1\xfb\xf4\xe9\x55\xc7\x13\x8e\x3b\xdd\x1b\xed\x13\x6f\xb0\x2f\xbd\xe1\x88\x5d\xee\xba\xe3\x81\xbc\xfc\xdb\xff\xfb\x7b\xef\xf3\xf9\xe9\x01\xfc\x97\x55\xb8\x65\x8c\xf4\x9c\xba\xc8\x94\x1e\xb2\xf4\x91\x1c\x2a\x61\x63\xaf\xb3\xb7\xb1\x69\x4c\x61\x7e\x1e\xbe\xf9\x78\x76\xde\x3b\x3d\xb3\xb6\xd0\x37\x4d\xf4\x39\x1f\x57\x48\x18\x19\xfa\xed\xd1\x63\x2e\x1e\x77\xa6\x34\xec\xec\x73\xd4\xa3\x36\x16\x13\x67\xe7\x89\x3b\x1a\xaa\xcb\x6d\xe2\x6c\xa4\xad\x17\x3f\x64\xbe\xb1\x4c\x89\x14\xe4\xfe\x63\x11\xa6\x9c\xcb\x4f\x62\xf6\x84\xc9\xab\xc1\x8e\x3c\xf1\x5f\x5e\x3e\x1e\x7c\x0e\x8e\xf6\x0f\x49\xb3\xf1\x7f\x01\x00\x00\xff\xff\x8e\xf1\xbe\x87\x76\x7e\x00\x00")

func connector_mgmtYamlBytes() ([]byte, error) {
	return bindataRead(
		_connector_mgmtYaml,
		"connector_mgmt.yaml",
	)
}

func connector_mgmtYaml() (*asset, error) {
	bytes, err := connector_mgmtYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "connector_mgmt.yaml", size: 32374, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"connector_mgmt.yaml": connector_mgmtYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"connector_mgmt.yaml": &bintree{connector_mgmtYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
