// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package generated generated by go-bindata.// sources:
// .generate/openapi/connector_mgmt.yaml
package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _connector_mgmtYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xfd\x72\xdb\x38\x92\xff\x5f\x4f\xd1\xa7\xdc\x96\x77\xef\x6c\x49\xfe\x48\x9c\xa8\x2e\x53\xe5\xd8\x4a\xc6\x93\xc4\x49\x6c\x67\x92\xec\xd6\x94\x05\x91\x2d\x09\x16\x09\xd0\x00\x28\x5b\xd9\x9b\x77\xdf\x02\x40\x8a\xdf\x12\xe5\x78\xc6\x9e\x44\xae\x4a\x55\x44\x36\x9a\xdd\x8d\xc6\xaf\x1b\x0d\x10\xe4\x01\x32\x12\xd0\x2e\xec\xb6\x3a\xad\x0e\x3c\x02\x86\xe8\x82\x1a\x53\x09\x44\xc2\x90\x0a\xa9\xc0\xa3\x0c\x41\x71\x20\x9e\xc7\xaf\x41\x72\x1f\xe1\xf8\xa8\x27\xf5\xa5\x09\xe3\xd7\x96\x5a\x37\x60\x10\xb1\x03\x97\x3b\xa1\x8f\x4c\xb5\x1a\x8f\xe0\xc0\xf3\x00\x99\x1b\x70\xca\x94\x04\x17\x87\x94\xa1\x0b\x63\x14\x08\xd7\xd4\xf3\x60\x80\xe0\x52\xe9\xf0\x29\x0a\x32\xf0\x10\x06\x33\xfd\x24\x08\x25\x0a\xd9\x82\xe3\x21\x28\x43\xab\x1f\x10\x49\xc7\x61\x82\x18\x58\x49\x12\xce\xcd\x40\xd0\x29\x51\xd8\xdc\x04\xe2\x6a\x1d\xd0\xd7\xa4\x6a\x8c\xd0\x1c\x7a\x88\x6a\xcb\x27\x8c\x8c\x50\x6c\x45\x84\xad\x19\xf1\xbd\x26\x0c\xa9\x87\x0d\xca\x86\xbc\xdb\x00\x50\x54\x79\xd8\x85\x43\xce\x18\x3a\x8a\x0b\x38\x43\x31\xa5\x0e\xc2\x4b\xcd\x01\xde\x5a\x0e\x0d\x80\x29\x0a\x49\x39\xeb\x42\xa7\xd5\x69\xed\x36\x00\x5c\x94\x8e\xa0\x81\x32\x17\x97\xb4\xb7\xca\x9c\xa2\x54\x70\xf0\xfe\x58\x4b\x69\x45\x03\x27\x6e\x27\x5b\x0d\x89\x42\x3f\x44\x4b\xb5\x05\xa1\xf0\xba\x30\x56\x2a\x90\xdd\x76\x9b\x04\xb4\xa5\x2d\x2d\xc7\x74\xa8\x5a\x0e\xf7\x1b\x00\x39\x01\xde\x12\xca\xe0\xef\x81\xe0\x6e\xe8\xe8\x2b\xff\x00\xcb\xae\x9c\x99\x54\x64\x84\xcb\x58\x9e\x29\x32\xa2\x6c\x54\xca\xa8\xdb\x6e\x7b\xdc\x21\xde\x98\x4b\xd5\x7d\xda\xe9\x74\x8a\xcd\xe7\xf7\x93\x96\xed\x22\x95\x13\x0a\x81\x4c\x81\xcb\x7d\x42\x59\x43\x91\x51\x64\x00\x46\xfc\x4c\xbf\x9c\xcf\x02\x94\xc5\xf6\xcd\x66\x19\x75\x6d\x42\x38\xf4\x42\xa9\xb0\xa2\x41\x23\x20\x6a\x6c\xe4\x79\xa4\xff\xc1\xf9\x18\x25\x02\x11\x68\x9c\x6c\xde\x77\x20\xd0\x23\x0a\x5d\xdd\xb7\x32\x22\x6e\x6a\x3b\xb7\xe7\x24\x17\xfe\xc8\x57\xed\xe9\x76\x7b\x42\x86\x13\x72\x91\x5c\x57\x5a\xad\xf6\xbf\xb3\x17\x2e\xa8\xfb\x7b\xb3\x6b\x44\x0a\x88\x20\x3e\xaa\xc8\x2f\xf4\x5f\xac\x43\xa1\x49\x74\x3f\xa7\xc6\xf9\x18\x81\xba\xc0\x87\x39\x99\x75\xa3\x79\x0b\xe9\x8c\xd1\x27\xdd\xf9\x6f\x30\xb7\xbb\x20\x95\xa0\x6c\x34\xbf\x4c\x59\x17\xb4\x49\xe6\x17\x04\x5e\x85\x54\xa0\xdb\x05\x25\x42\xcb\x6e\x84\x2a\xe6\x13\x77\x66\x2c\x77\x59\x67\x6a\x1e\x32\xe0\x4c\x62\x8a\xb4\xb9\xd3\xe9\x34\xd3\xd2\x38\x9c\x29\x64\x2a\x7d\x09\x80\x04\x81\x47\x1d\xa2\xd5\x6c\x5f\x4a\xce\xb2\x77\xcb\x94\xb2\x7f\xff\x2d\x70\xd8\x85\xe6\xa3\xb6\xc3\xfd\x80\x33\x64\x4a\xb6\x2d\xad\x6c\xcf\x45\xd4\x12\x36\x53\x4d\x0b\x36\xcd\x5a\x12\x7c\xa2\x9c\xb1\x1e\x2d\xda\xca\xda\x2c\x68\x1c\x3f\xd2\x67\xaf\xb3\x7d\x3f\xfa\xf4\x84\xe0\xa2\x99\x6b\x82\x37\xc4\x0f\xbc\xb4\xc1\xe3\xbf\xbd\xce\x76\xcf\xde\x2c\xde\x2b\x7f\x50\xcc\xab\x9d\x34\xad\x34\xdb\x41\xa8\xc6\xa0\xf8\x04\x99\xc6\x43\xca\xa6\xc4\x4b\x79\x6d\x73\xaf\xb3\xf7\x17\x31\xd2\xde\xed\x8d\xb4\xb7\xcc\x48\x27\x3c\xf1\xa5\x9c\x8f\xe1\x0d\x95\x4a\x26\x06\x7b\x7c\x5f\xa3\x64\x45\x83\x3d\xee\x74\x6e\x6b\xb0\xa4\x69\xa5\xc1\x3e\x32\xbc\x09\xd0\xd1\xf8\x8b\x5a\x2e\xe0\x8e\x09\x2a\xb1\x67\x49\x74\x42\x41\xd5\x2c\x8d\x44\x2f\x90\x08\x14\x5d\xf8\x17\xfc\x16\x5d\xe5\x01\x0a\x63\xa4\x63\xb7\xab\x31\x2c\x03\x04\x2f\x66\xc7\x47\x31\xb7\xd0\xf7\x89\x98\x75\xe1\x15\x2a\x20\xf9\x1e\x1a\xcc\x80\xba\x8d\x06\xc0\x2a\xe8\xdf\xbd\x1d\x6e\xde\x42\x2f\x8f\xca\xac\x62\x32\xaf\xd5\x29\xaa\x50\x30\x9d\xac\x68\x5a\x1d\x35\xb2\x1a\xc6\x0d\x8a\x61\x49\x3f\xbe\xac\x2b\x13\xca\x76\x40\x46\xa9\x6e\x5c\x4a\x2e\xe9\xd7\x39\xf9\xc3\x0d\x12\x6f\xa8\x54\xd5\x88\xb7\xc4\x8c\xeb\xd0\x50\x2f\x34\xac\x91\x6e\x19\xd2\xd5\x03\x9c\x48\xe4\x40\x67\xed\xcb\xc0\x46\x96\x21\x88\x23\x90\x28\x9c\xd3\x2c\x44\x03\x9d\x2d\x5e\x85\x28\x66\x29\x7d\x6c\xea\x4a\xe4\x8c\x39\x55\x5a\xbe\x47\x31\xe4\xc2\x37\x89\x14\x31\x73\x19\xa0\x4c\xcf\x35\x4d\xab\xb1\xe0\x8c\x87\x52\xcf\x9f\x18\x8a\xc6\xe2\xde\xb5\x49\xec\x80\x73\x0f\x09\x4b\xdd\x29\x49\x5b\x21\x4e\xda\x5e\x70\x37\x05\xa9\x15\x93\x3c\x97\x28\x32\xa7\x29\x71\xc6\xc5\xae\x58\xee\x88\xb5\x10\xa7\xb9\x28\xf5\xae\x82\xc9\x9d\x7b\x86\xc9\xea\x51\xef\x38\x18\x28\xcc\xe4\x80\x7f\x8d\x81\xbe\xd7\xe9\x1c\xea\xa1\x40\x39\xbb\x3d\x2a\xe6\x59\x54\xda\xe9\x57\x8d\x86\x86\xd2\x0e\x7c\x99\xcf\x71\xd6\x71\x64\x3d\xc5\xa8\x3f\xc5\x38\x4f\xa6\xa8\xe8\x6a\xcc\xe0\xa1\x70\x10\x5c\x8e\x92\x6d\x28\x3b\xcd\x58\xc7\xde\x9c\x63\x31\x08\xab\xc2\xaf\x8d\x8a\xf1\xe4\xdf\xc9\x05\xc7\x7a\x79\xfa\x3c\x03\x37\x98\x80\xa6\xf4\x79\x9d\xe3\x55\x67\x8a\x70\x5f\x09\xfa\xe2\x80\x6f\xd3\x90\xd4\x48\x2c\xf1\x48\x43\x03\x8e\xad\xc7\x41\x86\xb6\x3a\xb6\x67\x0a\x54\x0f\x73\x92\xb0\xea\x04\x61\x3d\x37\x58\xcf\x0d\x1e\x44\x15\x24\x53\x2d\xb8\x55\xa5\xa0\x66\x11\x5c\xb6\xff\xbd\xb8\xe0\xbd\x04\x87\xa8\xdb\x9c\x93\x16\x31\xa8\x02\x81\xea\xe3\x4f\x8d\xe2\xf8\x2a\xc8\xfc\x30\x51\xaa\x66\xad\x7b\x5d\xe6\x5e\xe7\xa0\x75\x8c\xb4\x2e\x73\xaf\x64\xb0\xfb\x2f\x73\xe7\xe1\x3d\x57\xde\x6e\x58\x79\x3c\x54\xf8\x8d\x40\xf7\x50\x9c\x3f\x63\xdc\x23\xa3\xd9\x7a\x36\xfd\xdd\x22\x99\xed\xe0\x6f\xc0\xb3\x0c\x83\x45\xa8\x66\xd3\x88\x28\x34\xc2\x35\x55\x63\x90\x01\x3a\x74\x48\xd1\x85\xe3\xa3\xbf\x32\xba\x7d\x9b\x11\xf3\x0c\xfe\x4c\xa4\xb3\xc8\x55\x09\x76\x56\xae\x02\xde\x05\x3a\x40\x7d\x23\xdc\x3d\xd8\xda\xeb\x3a\xaf\xfb\x71\xd1\x70\x9d\xd7\x7d\xd7\x79\x9d\xc1\xad\x4a\xb0\x33\x77\x0b\x58\x57\x67\xfd\xeb\x88\x28\x02\x8a\x47\x1c\xb2\xdb\xc9\x74\xa0\x6b\x2c\xe8\xc9\x3f\x61\x45\x2c\xfb\x10\x1f\xc5\x08\xb7\x8c\xa8\xff\xfb\xa7\x3c\x50\x3f\x64\xc5\xe7\xe5\x4a\x81\xbf\x9c\xbd\x3b\x81\xf7\x9a\xc3\x26\x9c\xbe\x3c\x84\x27\xcf\x3a\x3b\xb0\x35\xdf\xb8\xa9\x38\xf7\x64\x8b\xa2\x1a\xb6\xb8\x18\xb5\xc7\xca\xf7\xda\x62\xe8\x68\xaa\x1c\x5f\x5b\x9f\xe0\x83\x4b\x74\x12\x14\xcf\x2d\x18\x9a\x0d\x8d\xbd\xf9\x66\xda\xa1\x09\x02\xcc\xee\xf8\x4c\xba\x35\x2a\x87\x48\x20\xcc\x4d\x5d\x26\x23\x64\x0a\xa2\x55\xdc\x9a\x7b\x5d\x62\x56\x51\x99\xa7\xce\x12\x74\x76\x77\xe6\xe2\xa5\xe8\x88\x34\xa2\xfc\xe1\x56\xa4\xe3\xba\xd5\xbd\xad\x4c\x47\xf6\xff\x4b\x2e\x50\x17\x64\x5f\xaf\x53\xaf\xd7\xa9\xd7\xb9\x64\x1d\x23\xad\xd7\xa9\x1f\x56\x3a\x79\x8b\x75\xea\x38\x76\xac\x94\x70\x2e\x59\xaf\xce\xf0\xac\xb5\xb5\x35\x17\xea\xd7\x1b\x4c\x53\x81\x69\xe5\x3d\xa6\x4e\xd6\x98\x6b\xd8\x5d\x2f\x25\x3f\x9c\xa5\xe4\xdc\x48\xaf\xb5\xa2\x9c\x72\xe8\x15\xa7\x1b\xe9\x77\xab\xa2\x6b\x17\xd4\xfd\x3d\x9a\x85\xd4\x78\xbb\x2a\x69\x54\x9e\x83\x57\xbd\x60\x95\x45\xd5\x3f\xff\x1d\xab\x9c\x99\x1f\x34\xc0\xd5\xac\x52\xc6\x93\x9c\x75\xb5\x72\x9d\x61\xd6\x31\xd2\x2d\xab\x95\xb1\x9b\xad\xab\x96\xf7\xb5\x1a\x9d\x2d\xe6\x54\xbe\x73\x15\x43\xac\xc5\xf2\xf0\xae\x40\x31\x3b\x32\xb2\x05\x97\xc8\x35\xa4\x22\x2a\x34\x2f\xc1\x87\x81\x4b\xd6\x4b\xc7\x05\x43\xad\xe1\xe7\x9b\xe1\x67\x8d\x3c\x65\x36\xfb\x03\x90\xc7\x0e\xe1\x3c\xf8\xbc\x98\x1d\xbb\x79\x00\x0a\xdd\x80\x64\x17\x8a\x73\x69\x5e\xfd\x45\x94\x08\x37\x1e\xc2\x12\xca\xb2\xd2\x6d\x03\xea\x6f\xfe\xb9\x0d\xc2\xae\x37\x01\xad\x91\xfc\xfb\xda\x04\x34\xaf\x55\xae\xf7\xff\x3c\xc4\xfd\x3f\x15\xe9\x65\x71\x1b\x50\x0a\xdd\xef\xa6\xec\xd0\x26\xae\xcb\xd9\x45\xbe\xee\xb0\xae\x43\xdc\xcf\x18\x38\xd0\xbd\xf1\x3e\x36\xfe\xc2\x32\xab\x36\x6f\xd2\x4d\xa0\xc6\x44\x81\x1c\xf3\xd0\x73\x61\x80\x10\x4a\x7b\x4e\x95\xc3\xd9\x90\x8e\xc2\xe8\x84\x20\x7b\xc8\x53\x66\xe1\x5c\x3f\x10\x38\xb3\x7d\x64\x2d\xd3\x5a\x47\x9c\xef\x35\xe2\xac\x4b\x17\x3f\xc4\x04\xa2\xa4\x74\x91\x45\x96\x42\xad\xbb\xa2\x92\xb1\x21\x23\x84\x48\x90\xa6\xd1\x48\xf4\xd4\x22\x45\x36\xb5\xd2\x65\x4e\x22\x89\x05\xce\x68\xfb\xd3\xd6\x5c\x8d\x53\x0c\x04\x4a\xcd\xa7\x78\x70\x8d\x0c\x83\x80\x0b\x6d\x93\xc1\xcc\x60\xd3\xc1\xfb\xe3\xd4\x94\xc6\xe0\x7e\xca\x1e\x3a\x36\xa5\x7e\x46\x67\xe3\xa5\xae\x68\xcf\xb9\xb0\xa2\x46\x57\x89\xe7\xbd\x1b\xa6\x79\x2c\x72\x98\x77\x66\xeb\xd2\x29\x0e\x51\x20\x73\x32\x6b\x7a\xa5\x7b\x9b\x00\x02\xa1\x7b\x44\xd1\xbc\x3f\x99\x28\x9a\xf3\xa2\xec\x38\x22\x3e\x96\x9f\x8e\xd6\xca\x35\x2b\x0d\x93\xfa\x2f\x3e\x1a\x70\xd1\x63\x7e\xb5\x34\xdf\xf8\x24\x67\x4c\x18\x43\xaf\x30\x66\xb2\x35\xaa\x88\x68\x95\x67\x11\x21\xc8\x2c\x77\x87\x2a\xf4\x4b\x46\x67\xa5\x70\x69\x21\x16\xc9\x77\x90\xfe\x59\x10\xb2\xb6\x2d\xa8\xc3\xd9\xc5\x58\x3b\xd1\xa2\x87\x7d\x3c\x7d\x63\x8e\xb2\x64\x86\xfe\xf6\x4f\xf3\xc8\x60\x99\xdd\xdf\x18\x92\x24\x15\x20\x0a\x47\x5c\xd0\xaf\x58\xfa\x5a\xf8\xdd\xdb\x5f\xff\x21\x0b\x7d\x0d\x53\x92\xb2\xc9\x26\x44\x93\x90\xdf\x32\x64\xa9\xa1\xb9\x50\x9d\x14\x72\xc4\x7f\x07\xa6\x71\x04\x41\x36\x05\x72\x08\x4b\xe7\x3f\x53\xbb\x03\x28\x93\x44\xcb\x02\x9f\x24\xa9\xd5\x53\x23\x18\x52\xf4\xdc\xf2\x9e\xb0\xe3\x1c\x1e\x81\xe2\x2e\xef\x82\xc0\xc0\x23\xf1\xb4\x6a\x80\x2a\x0e\x75\x45\x30\xd4\xb9\x5c\xf7\x36\xd0\x93\x4d\x02\x57\xc6\x9b\xd2\x4e\x5b\xb9\x8f\x57\x38\xa2\x30\xab\xfa\x0f\xa0\x76\x5e\xe5\xd2\xb0\x77\x90\x42\xbd\x31\xf7\x5c\x19\x8f\x41\x93\x9d\xdb\x2d\x6a\x36\x5d\xd7\x44\x40\xe0\xb5\x79\x6d\x47\xf1\x80\x3a\x16\x2f\xb8\x1a\xa3\x00\x39\x93\x0a\xfd\xd6\xfd\xc6\x30\x1f\x15\x71\x89\x2a\x0c\xd7\x0a\x36\x8b\x58\xe9\xbf\xf8\x55\xe8\xb2\xe4\x6a\x21\xb8\xf0\x6b\x86\x62\xe5\x56\x65\x11\x78\x69\x23\xbb\xb9\xd7\xbd\x20\xaa\xac\xe9\x90\x0b\x9f\xa8\x2e\x68\xa4\xd9\x52\x34\x95\x8b\xd4\x64\x1f\x15\x5f\xff\x28\xf6\x71\xf9\xe7\xa2\x22\x33\x48\x18\x50\xa6\x70\x84\xf9\x98\x90\x16\x82\x32\xf5\x64\x2f\x17\x67\x03\x8f\xcf\x7c\x64\xea\xc2\xe3\x36\x53\x5f\xa9\xec\x6b\x53\xcd\x73\x22\x46\xa8\xb2\x49\xb9\xf1\x8c\x55\x78\x99\x51\x13\x8d\x44\xca\xd9\x19\x2a\x45\xd9\x48\x66\xb9\x16\x0e\xaa\x2d\xf7\xe3\xb2\x74\x27\x13\x27\x6a\xbb\x7f\x94\x25\xd5\x7e\x8c\x8b\x52\x27\xb8\x17\x52\x11\x55\x70\xd5\xca\x56\x76\x09\xb0\x06\xf9\xcd\x96\x47\xd9\x24\x45\x99\x35\x48\x9a\x43\xdd\x53\x28\xa1\x62\x87\x5c\xb9\xb9\x61\xa3\x70\x6d\xa3\x6a\x76\xf4\xd3\x02\x5e\x5a\x22\x59\x92\x52\xea\x39\x43\x28\xa3\xfd\x18\x99\xf6\x9a\xb6\x5f\x78\x78\x3f\x91\x1d\x28\x9b\xbf\x2b\xa9\x78\xa6\x6d\xff\x55\xef\x7c\xa5\x73\x34\xcb\x4e\x51\xee\xb7\xa2\x68\x91\x76\xfa\x79\xc4\xa0\x5a\x71\x9f\x32\x92\x0a\x23\x73\xec\x9c\x9d\xd8\x83\x23\x28\x4b\x6a\x0f\x3e\x09\x02\xca\x46\x99\x55\x19\x3d\x5f\x5b\x58\x5f\xaa\x1c\x70\x8e\xc7\x43\xf7\x22\x10\x7c\x4a\x5d\x3d\xbb\xac\x1a\xaf\x3c\x74\xdf\x47\x44\xa5\xbc\x38\xc3\xfa\x61\x69\x91\x48\x8b\x5b\x2e\x12\xc4\xb0\x28\xb2\x2e\x8d\xcd\x4d\x7b\x4f\xc2\x35\x17\x13\x8f\x13\x57\x46\x19\xba\x9d\xfa\x3a\xd9\xd5\xa8\x92\x51\x5e\x36\x23\x4d\x75\x53\x59\xec\xd3\xb7\x97\x96\x3c\x93\x0a\x6b\x25\x69\xe4\x4c\x55\x86\x58\x45\x5f\xdb\xfd\x10\x77\xff\xbd\xe8\x9b\xf1\xbf\x65\xe4\x02\x47\xb9\x50\x53\x4a\xe6\x87\x9e\xa2\x17\xe4\x6b\x91\x30\x7e\xed\x25\x71\x96\x4c\xe9\xb5\xdc\x78\xc9\xf6\xd6\x7c\x65\x24\x6b\xb1\x74\x9a\x99\x4b\x2f\xeb\x57\x80\x9b\x65\xb2\x55\xc9\x95\x93\x67\x41\x07\x96\xf5\xd0\x02\x27\x8b\x2f\x4e\x89\x17\xe2\x12\x57\xcc\x95\x9d\xca\x65\x3d\xb3\x13\xb6\xa1\xc6\xeb\x64\xc7\x5c\xb2\x0a\x0d\xc4\xbc\x37\x04\x81\x47\x18\xa6\x6a\x51\x36\xc4\x35\xbf\xab\xec\x77\x9d\xc4\xd6\x60\x5f\x23\xb7\x29\x75\xbf\x1f\x60\xfa\x39\xdf\x2c\x61\x9a\x57\x24\xc0\xdd\x05\x03\x7f\xc0\xb9\x92\x4a\x90\xe0\xc2\x7e\x58\xa3\x06\x4c\x53\x9d\xeb\xd7\x00\x8c\x88\x52\xa2\x23\x50\x2d\x06\x8e\xdc\xf8\xec\xde\x39\x78\xd5\x8a\x40\xf9\xf2\x5d\x51\xce\xb4\x47\x2d\x89\x83\xfa\x67\x40\x46\xe9\xc2\xb4\xa4\x5f\xd3\x3f\x15\x57\xc4\x4b\xfd\x36\x7e\xb0\x9a\xe6\xb5\xd4\xd2\x52\x14\x89\xf2\x73\x3d\x2d\xdc\x72\x2a\x23\x73\x35\x99\xb9\x61\xd6\x57\x6e\x35\xee\xee\x0e\xa6\x1d\xee\xd6\x9f\x3b\x09\x24\x25\x4b\x4b\x95\xe4\xf3\x69\xd1\xb2\xc9\x63\xa3\x38\x2d\x4a\x5a\xd8\x05\xf5\xf9\x4a\x62\x61\x75\xf7\xf8\x48\x67\x19\x02\x1d\x2e\xe6\x6b\x41\xb9\x32\x69\x89\x84\xb9\x75\xf2\x92\x55\xf2\xb4\x37\x58\x19\x52\x5e\x9a\x7f\x25\x39\xfb\xe2\x31\x19\x21\x50\xe6\xe2\x4d\x81\xfb\x90\x78\x12\xeb\x4b\x59\x5c\x6c\xcb\xfb\xa8\x4d\x36\xa0\xb9\x6d\x7d\x20\xed\x9c\x56\xe8\xd4\x58\x5a\x28\xf4\x49\xe8\x0f\x50\x68\x53\x9a\xe1\xa5\x67\x78\x48\x9c\x71\x5a\xe9\x3b\x54\x23\x3f\x88\xe6\x6a\x74\x3a\x56\x11\x2e\x5c\x14\x2f\x66\xa5\x89\xd1\xff\x27\x25\xee\xb3\x68\x8f\x8e\x9d\xdf\x9a\x46\x7a\x5a\xeb\x08\xaa\x50\x50\xd2\x32\x1e\x22\x67\x4c\x91\x1b\xbb\x88\x40\x65\x7a\x16\x2b\x53\x02\xf9\xd4\x23\x22\xfe\x12\x55\xba\x09\x42\x3f\x66\xdc\x07\xc7\x23\xa1\x34\x2b\x4f\x84\xc1\xd9\x87\x37\x26\xe6\xa2\xfd\x86\x56\xcc\xab\xa7\xed\x66\x0c\x1d\xd7\xd9\x4d\x7b\xbb\x4a\x47\xd8\x6c\xce\x36\x53\x27\xe8\xdb\x82\xba\x4c\xf8\xbc\xe4\x22\x36\xdd\xa6\x16\x4c\x98\x37\x6d\xcc\x57\xb7\x0e\xb3\x87\x36\xa6\x1f\xa0\xc6\x48\x85\xe9\xfc\x4d\xd0\xa2\xea\x27\x0d\xb9\xe7\xf1\x6b\xf3\x55\x28\xa3\x58\xb7\x31\x7f\x48\xbf\xdf\x97\x57\x09\xba\xea\x76\x40\xa4\x93\xbe\x9f\x10\x9f\xaf\x2e\x04\x5c\x10\xe6\x5e\xc4\x8b\x6d\xdf\x22\xd2\x66\xcc\xa4\x5a\x3e\xfb\x15\xb2\x4c\x0f\xb3\x0d\x15\x4f\xd6\xdc\x4d\xe0\x02\xa8\xa5\x31\x1e\x07\x54\x02\xfa\x81\x9a\x6d\xea\x6b\xc9\x4a\xa8\x4d\xb7\x65\xe8\x29\x69\xbe\x1b\x95\xd2\x4c\x4b\xd3\x9a\xfb\x75\xe0\x69\xfc\x4c\xbf\x2a\x5f\xf4\xf5\x9c\x2b\xa7\xdd\x3d\x56\xad\x59\x31\x42\xed\x10\x8e\x18\x7c\xeb\x28\x94\x6a\xe6\x61\xd7\x64\x98\x16\x2b\x90\x88\xe4\xa0\xa4\xec\x08\x4b\x06\x98\x21\x4a\x06\x54\xca\x17\x16\x8f\xac\x25\x23\xea\x7a\x8c\x02\x33\xc3\x29\x79\x64\x66\x54\xc1\x81\xf6\x13\x74\xa3\xd1\xa1\x71\xc9\xb0\xb3\x72\xe9\xce\xe9\x6b\x2b\xf5\x37\xa1\x9f\x52\x41\xff\x8c\xbc\x45\xff\xd7\x2c\x03\xf6\x37\xcd\x71\x18\xfd\xa8\xce\xd8\x4f\x58\xdb\x40\xc5\x85\xed\xec\xfe\xff\xfd\xa4\xdb\x3c\xef\x1b\x77\xe9\xbf\x39\x7e\xdd\xeb\x27\x83\x32\x6e\xe3\x70\x76\x19\x32\x47\xd1\x29\xe6\xdb\x1f\x9c\x1c\xf5\xed\xa3\xde\x9d\xf6\x5b\xf0\x33\xbf\xc6\x29\x8a\x4d\x98\xf1\xd0\x00\x82\xd6\x98\x80\x4f\x6e\xa8\x1f\xfa\x5a\xf7\xed\x4e\xc2\x8e\x33\xa3\x23\x89\x35\x34\xee\x90\x32\x7b\x6f\xee\x5f\x65\xa3\x32\xf7\xd1\x19\xbb\xe2\xa6\xed\x65\x3c\xad\x4f\xae\xe5\x96\xbc\x92\x5b\xb6\xce\x6d\x85\x34\x85\x41\x6b\x12\xe8\x4b\x45\x06\x9e\x36\x66\xbd\x61\x9a\x1d\xa3\xcf\x21\xcb\xdf\x9e\x3e\x12\xb1\x7e\x0e\x96\x77\xba\xf9\xbf\x82\xad\xdf\xca\xd5\xb0\xeb\x3a\x94\x49\x45\x58\xbc\x70\x48\xec\x53\xec\x16\x2e\x45\x84\x92\xf6\xba\xd6\xea\x96\x12\x7b\x74\x82\x5a\xe8\xbf\xed\x3c\xfe\x43\x00\xc5\xc0\xa4\xbe\x99\xed\x96\x14\xce\x10\x65\xee\x87\x12\x05\x8c\x89\x84\x00\x85\x4f\xa5\x8c\x16\xba\x24\xda\xef\xd6\x59\xbb\xa0\x9b\xf2\x83\x13\xae\x30\xfe\xec\x62\x14\x6c\x92\x5d\x57\xda\xd3\xa3\x6d\x32\x54\xa6\x5a\x57\xc3\x56\x94\x2c\x18\x9f\xab\x00\xa3\x72\xe0\x29\x89\xed\x19\x5c\x81\x3c\xdc\xd5\xf2\x92\xe6\xed\x60\xad\x91\xec\x03\x32\xc5\x93\x58\xac\x68\x23\x50\x9a\x29\x76\x61\x60\xae\x46\x17\xed\x8f\x97\xd1\xf4\xfb\x97\x4f\xe7\x99\x09\xc6\x58\xa9\x40\x73\xcf\x6a\x5b\x7d\x4c\x47\xae\x06\x44\x5d\x93\xdb\xec\x36\xb3\x13\x12\x68\xe6\xb6\x58\x8d\x6d\xce\x5f\x51\x3e\xb7\x87\x73\xb4\x33\x7c\x4c\xfe\x0e\xcd\xc3\x77\x27\x27\xbd\xc3\xf3\x77\xa7\x5b\x6f\x5f\xbd\x3d\xdf\xca\x90\x44\x59\x3b\x34\xcf\x52\xc7\xde\xc4\x07\xe2\x48\x60\x5c\x25\xfb\x88\xec\x30\x32\x07\xe4\x3c\xd7\xde\x51\xac\x93\xe5\xd2\x7a\x68\x6e\xd3\x4f\xc7\xd4\xbf\x7a\xe5\x88\xa3\xf0\xcd\x93\x6d\xf2\xf1\xe6\xf8\x9f\x57\x2f\xce\xaf\x4e\x4e\x49\x33\xb6\xd2\xb1\x75\xcb\x0f\xda\x9b\x6a\x58\x6a\xe7\x8e\x2c\xb5\xb3\xd4\x50\x3b\x65\x76\x7a\x49\xa8\x67\xf7\x45\x04\x44\x48\xcc\x20\x71\x17\x3e\x32\xf3\xf9\x53\xc5\x6d\x85\xf3\x75\xfa\xe0\x48\x7b\x20\x13\x09\xe8\x85\x5d\xea\x90\xf6\xab\xa2\x5d\x28\x3c\xb6\x0b\xcb\x9e\x92\xec\xed\x72\xb8\x17\xfa\xcc\x22\x96\xe6\x1f\x0d\x30\xd8\xa0\xee\x46\x0b\xce\xca\xe8\x4c\x24\xea\x46\xb5\xdf\xcd\x28\x1b\xcc\x16\x8e\xe3\xab\xb6\x68\xd4\x82\x0f\x16\x43\x6c\x4f\xe9\x09\x17\x3c\x87\xed\xb4\x7d\xf2\xfd\xee\x7d\x3a\x7a\x15\xce\x06\xc7\xa2\xc7\x6e\xc4\x01\xfa\xfb\x3b\x7b\xa3\xab\xc9\x84\x1e\x4d\xe3\x7e\xcf\x6f\xa4\x2c\xeb\xeb\xbd\xce\xde\x9d\xf4\xf5\xfe\xb2\xae\xde\x2f\xe9\xe9\x3a\x47\x95\xcc\x95\x29\xdd\x47\x5f\xa6\xd2\xfe\xfd\x29\x64\xbc\xf1\x34\xf3\x1a\x03\x75\x9f\x6f\x6c\xd3\xd7\xbb\x6e\xf8\xeb\x97\xe3\xe9\xf4\xf1\x97\xe9\x1b\x6f\xf6\x75\xdb\x7f\x75\xba\xfb\xcb\xec\xea\x64\xc3\x00\xc0\x90\x87\xcc\x5d\x30\xc4\xbf\xbc\xdb\x1f\xed\x8c\x9e\xfc\x7c\xee\x7e\x7c\xfd\x91\xec\x4c\xe4\xcf\x4f\x77\x26\x1f\x8e\x76\x67\xb1\x75\xf2\x1b\x8b\x4b\x01\x70\xfb\x6e\xf0\x6f\x7b\x29\xfc\x6d\x97\x98\x26\x19\xb7\x53\x14\x74\x38\xd3\x18\x6f\xb7\x2b\x77\xe1\x34\x0a\x6d\x40\x42\x35\xe6\x82\x7e\x8d\xb7\x9a\x4c\x90\xd5\xb3\xcf\xee\xc7\x71\x6f\x7c\xed\x7f\x7e\x11\x7c\x7a\x3f\x3c\xde\xf1\x4e\x70\x12\xb8\x7b\xff\x3c\x8a\xed\xf3\xec\x84\xf8\x78\xc8\xd9\xd0\xa3\x8e\xaa\x61\xab\xdd\x27\x77\x62\xab\x34\x9b\x72\x5b\xa5\x29\xb2\x6e\x34\xdf\x95\x6c\x80\x87\x4a\x20\x9e\x40\xe2\xce\xcc\xae\xb1\x4a\x5b\x3c\x99\x7c\xe9\x7c\xa4\xbd\xc9\xd7\xc9\xe7\xc3\xaf\x9f\xde\xe3\xf1\x0e\xff\x82\x63\x77\xb7\x17\x99\xa2\xb8\x4b\xb8\x4c\xfd\x67\x77\xa2\xfd\xb3\x65\xca\x3f\x2b\xf5\x93\xe4\xc5\x1f\xcc\x3e\xb4\xd0\xed\xd8\x7b\x33\x7d\xf9\xec\xf2\xed\x87\x2f\x4f\xbe\x8c\xc6\xc3\xb7\xcf\x46\xaf\x4e\xe5\xcf\xd3\xde\xa7\xb9\xae\xb5\x41\xe3\xde\x34\x4e\xe5\x69\x4d\x9b\x32\x9a\xd7\x6e\xa2\x04\xda\x91\xa8\xba\xf0\xee\xf0\xed\x56\xef\xf3\xd6\x33\x9d\xfa\xc5\x51\xcb\xbe\x9c\x93\xd0\xe0\x8d\xda\x8a\xe2\x1d\x09\xe8\xd6\x36\xbd\xe9\xec\x7a\xcc\xf5\xfc\xab\xce\xd5\xd0\xd9\x97\x54\x91\xc7\xd2\xbb\x9c\x3e\x4d\x2f\x69\x0c\x53\x9b\xdf\xb5\x19\xb6\x47\x8f\xdd\xa7\x4f\xaf\x3a\x9e\x70\xdc\xe9\xde\x68\x9f\x78\x83\x7d\xe9\x0d\x47\xec\x72\xd7\x1d\x0f\xe4\xe5\xdf\xfe\xeb\xef\xbd\xcf\xe7\xa7\x07\xf0\x3f\x56\xe1\x96\x31\xd2\x73\xea\x22\x53\xba\xcb\xd2\x5b\x72\xa8\x84\x8d\xbd\xce\xde\xc6\xa6\x31\x85\xf9\x79\xf8\xe6\xe3\xd9\x79\xef\xf4\xcc\xda\x42\xdf\x34\xd9\xe7\xbc\x5f\x21\x61\x64\xe8\xb7\x47\x8f\xb9\x78\xdc\x99\xd2\xb0\xb3\xcf\x51\xf7\xda\x58\x4c\x9c\x9d\x27\xee\x68\xa8\x2e\xb7\x89\xb3\x91\xb6\x5e\xfc\x92\xf9\xc6\x32\x25\x52\x90\xfb\x8f\x45\x98\x72\x2e\x3f\x89\xd9\x13\x26\xaf\x06\x3b\xf2\xc4\x7f\x79\xf9\x78\xf0\x39\x38\xda\x3f\x24\xcd\xc6\x7f\x02\x00\x00\xff\xff\xee\x34\x77\x44\x0f\x7e\x00\x00")

func connector_mgmtYamlBytes() ([]byte, error) {
	return bindataRead(
		_connector_mgmtYaml,
		"connector_mgmt.yaml",
	)
}

func connector_mgmtYaml() (*asset, error) {
	bytes, err := connector_mgmtYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "connector_mgmt.yaml", size: 32271, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"connector_mgmt.yaml": connector_mgmtYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"connector_mgmt.yaml": &bintree{connector_mgmtYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
