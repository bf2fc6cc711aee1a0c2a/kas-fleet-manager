// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package generated generated by go-bindata.// sources:
// internal/connector/internal/api/public/api/openapi.yaml
package generated

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x59\x73\xdb\x38\x12\x7e\xf7\xaf\xc0\x66\x77\x4b\x33\xbb\xb1\x75\xf9\x88\x55\x95\x07\xc7\x76\x32\xce\xc4\x8e\xc7\xc7\x38\x9e\xad\x2d\x15\x44\xb6\x24\x58\x24\x40\x03\xa0\x62\x79\x6a\xff\xfb\x16\x00\x8a\x37\x29\xca\xb7\x33\xcc\x53\x0c\x02\x0d\x74\xa3\xd1\x5f\x77\xa3\x49\x31\x0f\x28\xf6\x48\x0f\x75\xd7\x5a\x6b\xad\x15\x42\x87\xac\xb7\x82\x90\x0d\xc2\xe2\xc4\x93\x84\xd1\x1e\xda\x65\x94\x82\x25\x19\x47\xa7\xc0\xa7\xc4\x02\xf4\xd1\x01\x90\xe8\x10\x53\x3c\x02\x8e\x88\x40\x18\x9d\x80\x90\x68\xe7\xf8\x00\x49\x86\x5c\xfd\x00\x59\xf3\x71\x62\x6d\x05\x21\x49\xa4\x03\x0b\x89\xad\x20\x34\x05\x2e\xf4\xbc\xad\xb5\xd6\x5a\x77\x45\x00\x57\x2d\xbd\x95\xd5\xe4\xaa\x0e\x31\xa1\xe8\x27\x8f\x33\xdb\xb7\x54\xcb\xcf\xc8\xf4\x5c\x41\xc8\xe7\x4e\x0f\x8d\xa5\xf4\x44\xaf\xd9\xc4\x1e\x59\x53\x5c\x8a\x31\x19\xca\x35\x8b\xb9\x69\x42\xa7\x12\x8f\x08\x1d\x95\x0c\x17\x12\x8f\xa0\x9c\x88\xc3\x2c\xec\x8c\x99\x90\xf1\xf1\xbd\x66\x33\x6c\xef\xbd\x6b\xb5\x5a\xe9\x51\x96\xcf\x39\x50\x89\x6c\xe6\x62\x42\xe7\x43\x9b\x2b\x12\x8f\x34\xc3\x14\xbb\x09\x91\x9d\xcd\x3c\x10\xd9\xf6\x9c\x26\xb4\xeb\xf8\x42\x02\x17\x2b\x1e\x96\x63\xa1\xf6\x54\xb1\xd2\x0c\xf7\xa4\xef\x8e\x5c\xd9\x9c\xb6\x9b\x13\x3c\x9c\xe0\x7e\xd4\x2e\xd5\x1c\xcd\x3f\x93\x0d\x7d\x62\xff\x4f\xd1\x40\x68\x04\xd2\xfc\x07\x21\xe6\x01\xc7\x8a\x91\x03\xbb\xa7\xda\xc3\xc9\xd5\x32\x3f\xcc\x0e\xf6\x82\x7e\x1e\xe6\xd8\x05\xa9\x37\xd1\xb4\xa4\xc4\x70\x36\x06\x44\x6c\xc4\x86\x48\x8e\x63\x6a\x83\xd4\xcc\xc1\x08\x84\xe0\xc6\x73\x98\x0d\x3d\x34\xc4\x8e\x88\x9a\x09\xed\x21\xc5\x62\xd8\x60\x04\x91\x59\x7e\xf8\x9c\xc3\xb5\x4f\x38\xd8\x3d\x24\xb9\x1f\xd1\x11\xd6\x18\x5c\xdc\x0b\xff\x46\x7a\xf6\x1e\x12\x92\x13\x3a\x8a\xba\xc9\x99\xd2\x62\x41\x5c\xcf\x99\x0f\xe6\x20\x3c\x46\x05\x88\x68\xf4\x9b\x4e\xab\xf5\x26\x4e\xcc\x62\x54\x02\x95\xf1\x26\x84\xb0\xe7\x39\xc4\xd2\x22\x6c\x5e\x09\x46\x93\x4f\xf3\xd6\x64\xfe\xfd\x83\xc3\xb0\x87\x1a\x7f\x6f\x5a\xcc\xf5\x18\x05\x2a\x45\xd3\xf4\x15\xcd\xc4\x26\x34\x62\x43\x33\x12\x4f\xca\x19\xb9\x58\x5a\x63\x75\x0e\xd4\x1e\x28\x21\x81\x56\xe6\x80\x9f\xf5\x56\xfb\xfe\xfc\xc0\x0d\x56\x62\x13\x59\x8e\x14\xfd\x7d\xf3\xf4\x4d\xf6\x69\x3e\xc7\x73\x6a\xcd\x68\x6c\xe3\x01\x04\xb8\xcf\x39\xe3\x85\x82\xdb\xf1\xe5\x18\x49\x36\x01\xaa\xcc\x1e\xa1\x53\xec\xc4\x74\xeb\xcd\x7a\x6b\xfd\x91\xc5\xb4\x7e\x0f\x31\xad\x3f\x99\x98\x8e\x58\xa4\x4f\x29\x3d\x83\x1b\x22\xa4\x88\x44\xb6\xf1\x10\x27\xa5\x44\x64\x1b\xad\xd6\x9d\x45\x16\x8d\x7d\x7c\x91\x9d\x53\xb8\xf1\xc0\x92\x60\x23\x50\x1d\x11\xb3\x34\x3c\xcc\xb5\x4b\x80\xe5\x73\x22\x67\x91\x0d\xfd\x00\x98\x03\xef\xa1\xff\xfc\x77\xde\xc5\x77\x5d\xcc\x67\x3d\xf4\x09\x24\xc2\x69\xc1\x0f\x66\x28\x54\x55\x03\x30\x73\x42\x69\x80\x59\x0e\x2b\xca\x71\xc1\x21\x22\x09\x0c\xa2\x2a\x2a\x1c\x2b\x1f\x82\x50\x1b\x6e\x56\xca\xb6\xd9\xc3\x23\x48\xee\xc3\x14\x3b\x3e\xf4\xd0\x9b\xf6\x9b\x2c\x78\x24\x6c\xbe\xc2\x8e\x6b\x1f\xf8\x2c\x05\x1e\x8a\x64\x0e\x5e\x24\x81\x67\x39\xc0\x18\x32\xee\xe6\xb3\x79\xe4\xbb\x03\xe0\x0a\xfc\x88\x04\x57\xd9\x14\x04\xd8\x1a\x27\x17\x91\xc7\xb8\x20\xb7\x45\x8c\xb7\x5a\x77\x65\x5d\x11\x7d\x3c\xd6\x5f\x2e\x52\x7e\x21\x42\x16\x1b\x7d\xad\xc5\x6a\x8b\x92\x47\x4a\xd4\xf8\xb8\x24\x3e\xd6\xc6\xfe\xe1\x8d\xfd\x09\x48\x9f\x53\x15\x83\x95\x6b\xe9\xc3\xd8\xfc\x65\xcc\x7d\x6d\xea\xff\xba\xa6\x3e\x27\xc4\xd3\x9a\x84\x2c\x13\x98\xa2\x98\x59\x58\x6e\xdd\x46\x21\x73\x23\xba\x1f\x1a\xa6\x96\x85\xa8\x1a\x9d\xb2\x52\xaa\xd1\xe9\x95\xa1\x93\x79\xec\x31\x91\x0f\x37\x16\x07\x2c\x21\xec\x5d\x19\x6f\x80\xab\xe3\xae\x53\x1d\x58\x67\x0f\x95\x2d\xc6\x14\x61\x31\xa3\xd6\x98\x33\xca\x7c\x81\x5c\x4c\x29\xf0\x3b\x5a\x29\x4d\x29\xc7\x44\x55\x4a\x3a\x0d\x18\x73\x00\xd3\x52\x13\xa5\x13\x34\x1f\x98\x3d\x8b\x86\xe7\xe8\x6b\xb9\xb6\xe6\xab\x4e\x25\x6b\x14\x29\x4f\x41\xae\xd8\xc6\x12\x97\xf3\x9f\x6f\x66\x3b\xcf\x6c\x66\x8b\x8d\x87\x65\x81\x27\x21\x91\xed\x79\x5c\x7b\xb1\xde\x6a\xed\x2a\x05\x27\x8c\xde\xc3\xbc\xa6\x69\x3c\xbe\xfd\xf8\x5d\x99\x55\x3d\xa5\xb1\x1f\x22\x6d\x40\x6a\x48\xaa\x13\x8a\xcb\x89\xe9\x2c\x4a\x4a\x83\xad\x2c\x07\xf3\xb9\x05\xc8\x66\x20\x68\x43\x9a\xa4\x62\x0d\xe4\x19\xe5\xa2\xc8\x2f\xc2\x72\x83\x9d\xf3\x84\xbf\x95\x82\xd0\x65\x20\x5e\xdb\x17\x40\x18\x51\xf8\x9e\x21\x54\x82\xeb\x15\x03\xce\xe6\x9f\xe1\xe5\x93\x0d\x0e\x48\xc8\xf5\x04\xcc\xa3\xa5\x3d\x01\xa5\x57\x07\x7b\xca\x2d\xe1\x60\x31\x9e\x13\x93\x54\xba\x6e\x7a\xd4\xfb\xa5\x1f\x2f\x94\x7a\x00\x9b\xf6\xf0\x87\x65\x4f\x6b\x50\x0d\x51\x19\xc1\x3c\x3f\x44\x99\xad\xb9\x0f\x50\x25\x28\x3c\xc9\xfd\x97\x39\xa2\x01\x66\xa1\xef\x44\x8e\x91\xf0\xc0\x22\x43\x02\xb6\x32\x39\xcf\x70\x0f\x76\x4f\x31\xa6\x29\xbc\xae\x40\xd4\x2c\x3d\x7e\x2d\x56\x25\xf2\xac\x52\xee\x50\x63\xcd\x4b\xc6\x9a\xe7\x4e\xdb\x55\xac\xc1\xa8\xcb\x2f\x5e\x07\x14\xbd\x8a\x68\xa9\x2e\xbf\x78\x49\xe5\x17\x55\x70\xc6\x53\xdb\x95\x8b\x34\xfa\x49\x8d\x35\x2f\x0e\x6b\xee\x96\x7f\x5d\xd5\xdb\xf9\xef\xaa\xa9\xd8\xd4\x1d\xcf\xe7\xd3\xaf\x47\xe8\x58\x51\x78\x8b\x4e\x3e\xee\xa2\xcd\xed\x56\x07\xad\x86\xb5\xaa\x92\x31\x47\xac\x11\x90\xc3\x35\xc6\x47\xcd\xb1\x74\x9d\x26\x1f\x5a\xaa\x57\x8a\xae\xe1\x92\x0d\xae\xc0\x92\x05\xab\x75\x81\x8f\xe0\x01\x96\x7b\xa8\xe8\xc4\x17\xbd\xd5\x7d\xb7\xb9\x78\xd1\xaa\x57\x95\x45\x27\x43\x38\x2c\x31\x92\xcc\x9c\x99\x54\x31\xa9\xf2\xc0\xcb\x95\xf9\x95\xe5\xa3\x6b\xff\xa1\xf6\x1f\x1e\x49\x4c\xb5\xff\xf0\xac\xfe\x83\x31\x5f\x4b\x79\x10\x15\x0b\x36\x03\x64\x5d\xa6\x88\x27\x7c\x91\xc0\x74\xac\x6b\x79\xfe\x7a\xb5\x3c\x2f\x33\xb0\x0e\x14\x73\xe9\xca\x4d\x2b\xa9\xd0\x35\x3a\xd6\xe5\x31\x2f\xb3\x3c\x26\xa5\xa8\x45\xf5\x9b\x09\x03\x5d\xb5\x52\x26\x18\x54\xd9\xa8\xd7\x05\x33\x25\xca\xb4\x8c\xb9\x5a\x58\x37\x33\x0f\x7e\x5f\x6b\xfd\x4c\x86\xcf\xba\x8c\xa6\x2e\xa3\x79\x6e\xe8\xaa\x03\xbb\xba\x8c\xe6\x49\xcb\x68\xe6\x66\xfc\x0e\x2e\x41\x7e\x39\x4d\x8a\x60\x05\x67\x60\xc9\x90\x30\xfe\xca\x77\xd0\xd6\xbf\x43\xe1\xcd\x92\x8e\x45\xd1\xab\xdf\x49\x6e\xef\xfe\xf6\x77\xc4\xc9\x5d\x5d\x8b\x3b\xbf\x00\x5e\x17\xb9\xd4\x00\xb2\x84\x98\x5e\x65\x91\x4b\x88\x20\x75\x7d\xcb\x73\x47\x92\xd9\xfa\x96\xe5\x21\xa3\x5a\xbd\x4b\x6d\xe2\x8d\xc6\xbd\x98\x14\x58\xc5\x2b\xa2\x79\x64\x59\x5f\x15\xbd\x0e\x40\x78\x15\x11\x45\xfe\x55\xd1\x5c\xd5\xea\x2b\xa3\x67\xfa\xe2\xc7\x33\x45\x0b\x4d\x6c\xdb\x8c\xf6\xd3\x98\xb0\x04\xaa\xec\x28\x02\xc7\xe1\xf8\x1a\x64\x9e\x0b\x64\x92\x1b\x51\x7a\xcb\xa2\x84\x1f\xed\x10\x92\x63\x2c\x91\x18\x33\xdf\xb1\xd1\x00\x90\x2f\xc0\x46\x92\xa9\x95\x0f\xc9\xc8\xe7\xa0\xb7\xc8\x7c\x23\xce\x4e\x2c\x29\xda\x36\xad\x46\x88\x51\xb3\x9b\x46\xf6\x6b\x35\x46\xd5\x18\x55\x63\xd4\x0f\x87\x51\x0d\x11\x1c\x77\x2f\x6d\xf5\x17\xc2\x56\xc4\x8e\xea\x96\x14\x77\x59\xda\xdf\xdc\xb8\x47\xd6\xdf\xd6\xb7\xef\xdd\xe8\xf6\x7d\x42\xa8\xdd\x43\x5a\x34\x61\xdb\x58\x0b\xb1\x00\x27\x4d\x82\xbe\xd9\x6e\x75\x57\x22\x95\x51\x38\xb3\xfb\xf5\xe8\x68\x7f\xf7\xec\xeb\xc9\xea\xe1\xa7\xc3\xb3\xd5\x78\x07\x0e\x58\xe8\x0f\x50\xc6\xae\xd0\xe6\x97\x6b\x02\x51\x26\x91\xf0\x3d\x8f\x71\x09\xf6\x5b\x65\x45\xcd\x15\xd9\x7b\x85\x36\x91\xac\x42\x6a\x21\xb0\xf6\x15\x3b\x6d\x72\x71\x40\xdc\xeb\x4f\x16\xdf\xf3\xbf\x6c\xb6\xf1\xf9\xcd\xc1\x1f\xd7\x1f\xce\xae\x8f\x4e\x70\x28\x9d\x03\x63\x2f\x7e\xf3\x81\xcf\xaa\x48\xa8\xf3\x10\x12\xea\x2c\x10\x50\x27\x2b\x9f\xc6\x47\x4c\x1c\x83\x21\x1e\xe6\x02\x90\x00\xcc\xad\xb1\xb9\x45\x54\x2a\x8a\x07\x0e\xa8\xa7\xfa\x0a\xf5\xd7\xf8\x7b\x37\x02\x0d\x15\x9a\x78\xa4\x6f\x1c\x19\x61\xbe\x39\x1a\x3f\x21\x99\xf9\x7b\x68\xd1\x7c\xe1\xb6\x20\x8b\x39\xbe\x4b\xb5\xb7\x10\x23\xa9\xe6\x34\x63\x7a\xa8\xd1\x20\x76\xa3\xb1\x86\x4e\xf3\xc6\x08\x84\x39\xf4\x10\x87\x11\x61\xf4\xad\x6e\x7a\x8b\x2c\x87\xf9\x76\xdf\xe3\x6c\x4a\x6c\xe0\x6f\x63\x74\xcd\x73\x21\xb1\xf4\xc5\x1a\xd2\xfb\x36\x37\xfa\x3d\xe5\xfd\xbc\x47\xed\x4e\xb7\x51\xa4\x11\xce\xc5\xde\x27\x7f\x36\x38\xe0\xfb\xf4\x86\xef\x80\xbb\xd5\x59\x1f\x5d\x4f\x26\x64\x6f\x3a\xd7\x88\x8c\x35\xcf\xd3\x02\x05\x2a\xf7\xd6\x82\xad\x72\x25\xd8\xca\xe8\x40\xe5\x8b\x8b\xe2\x4c\x5a\x1e\x33\x5b\xcf\xc0\x8a\x56\xd0\x93\x44\xe2\x8c\xd8\xef\x1b\x6d\xf2\x6b\xd7\xf6\x7f\xbf\x3c\x98\x4e\x37\x2e\xa7\x5f\x9c\xd9\x6d\xdb\xfd\x74\xd2\xfd\x3c\xbb\x3e\x6a\x68\x63\x30\x64\x3e\xb5\x0b\x8f\xfb\xe5\xd7\xad\x51\x67\xb4\xf9\xcb\x99\x7d\xfe\xeb\x39\xee\x4c\xc4\x2f\xef\x3a\x93\xdf\xf6\xba\xb3\xb9\x54\x32\x1e\x4d\xae\x11\x6c\x3f\x80\x0d\x6c\x2f\x30\x81\xed\xec\x09\x8f\xce\xf0\x14\x38\x19\xce\xd0\xe7\x8b\x33\xe3\xd8\xf4\xd0\x49\xe0\x67\x23\xec\xcb\x31\xe3\xe4\xd6\x5c\x89\x1a\xb7\x27\x14\x4c\xa1\xda\x93\xcb\xee\xf9\x78\x7f\xfc\xdd\xfd\xf6\xc1\xbb\x38\x1e\x1e\x74\x9c\x23\x98\x78\xf6\xfa\x1f\x7b\x73\xc9\x6c\x1f\x61\x17\x76\x19\x1d\x3a\xc4\x92\x55\xa4\xd4\xdd\xbc\xbf\x94\xba\x9b\xe5\x52\x8a\x3d\x4f\x28\x4e\xe8\xb6\x28\x63\xa0\x3f\xbd\xec\x70\xc0\xf6\x4c\xbb\xd9\x05\x32\xd8\x9c\x5c\xb6\xce\xc9\xfe\xe4\x76\xf2\x6d\xf7\xf6\xe2\x18\x0e\x3a\xec\x12\xc6\x76\x77\x3f\x10\x41\x8e\x33\x92\xc7\xf6\xf6\xfd\xb9\xde\x2e\x67\x7a\x3b\xc3\xf3\x39\x8d\x92\xca\x90\x98\x2e\xbd\xcd\xb0\xff\x65\xfa\x71\xfb\xea\xf0\xb7\xcb\xcd\xcb\xd1\x78\x78\xb8\x3d\xfa\x74\x22\x7e\x99\xee\x5f\x84\x3c\x56\x37\x0b\xcf\xc1\x69\xc3\xf8\x57\xfa\x3a\x4d\x7f\x8e\x7a\x46\x2d\x01\xb2\x87\xbe\xee\x1e\xae\xee\x7f\x5b\xdd\x56\x31\xeb\x1c\x97\xcc\xa5\x5b\xd4\x07\x6e\xe4\x6a\x80\x6d\xd8\x23\xab\x6d\x72\xd3\xea\x3a\xd4\x76\xdc\xeb\xd6\xf5\xd0\xda\x12\x44\xe2\x0d\xe1\x5c\x4d\xdf\xa5\x61\x2a\x7a\xd5\xa2\x87\xda\xa3\x0d\xfb\xdd\xbb\xeb\x96\xc3\x2d\x7b\xba\x3e\xda\xc2\xce\x60\x4b\x38\xc3\x11\xbd\xea\xda\xe3\x81\xb8\xfa\xe7\xdf\x7e\xda\xff\x76\x76\xb2\x83\xfe\x65\x78\x5c\xd3\x52\x79\x4f\x6c\xa0\x52\xed\x10\x8f\xd1\x26\x02\x35\x1a\xeb\xad\xf5\x46\xe3\xad\x16\x80\x69\xd8\xfd\x72\x7e\x7a\xb6\x7f\x72\x6a\x64\xa0\x1f\x23\x4c\xed\x68\x2f\x51\x44\xcc\x8c\x68\x8f\x36\x18\xdf\x68\x4d\x89\xdf\xda\x62\xa0\xb6\x6a\xcc\x27\x56\x67\xd3\x1e\x0d\xe5\x55\x1b\x5b\x8d\x46\x02\xcb\x03\x6e\xf4\xb8\x52\x5e\x1a\x31\x9b\xfa\x73\x89\xed\x38\x13\x17\x7c\xb6\x49\xc5\xf5\xa0\x23\x8e\xdc\x8f\x57\x1b\x83\x6f\xde\xde\xd6\xae\x72\xa2\xd2\x39\x09\x62\xcf\x97\x52\xe5\x4d\x9c\xdc\x44\x44\x2a\x0d\x91\x7a\x07\x27\x37\xe1\x90\x76\xf9\x73\x92\x0d\xd9\x54\x43\xbc\xf8\xb6\xbc\x78\x37\x1b\xc2\xa4\x0b\x77\x33\x65\xbb\x79\x65\x5f\xe9\xa2\xaf\x4c\xc1\x6e\x7e\xcd\x6a\x75\xe6\xc2\x4a\xaf\x78\x79\xed\xb2\x05\xbb\x59\x66\xd3\xc5\xba\x39\xa5\xba\xd5\xd9\x8d\x15\xe9\x3e\x10\xbb\x41\x0c\x67\x46\x24\xbe\x67\x3a\x27\x82\x1d\xe7\xeb\x30\x8a\xa1\xca\x02\xc1\xaf\xfa\xc5\x9a\x13\x18\x02\x07\x6a\x85\xb1\x65\xf9\xa0\xc4\xa4\x7d\x3d\x5b\x23\x4f\xfa\x27\xe0\x71\x10\x6a\x68\xf6\xc3\xc4\x91\x3b\x3d\x98\xe9\x84\xcf\xce\xf1\x41\x5a\x4e\xe1\x62\x54\x9c\xdd\x37\xb3\x87\x6d\x31\xf7\x7b\x75\xfe\xf3\x01\x59\x91\x7c\x21\x51\x69\xe4\x12\x62\x89\x67\xbe\x96\x90\x85\x1a\x16\x97\x47\xe2\x33\x7e\x4f\xb3\x8c\xc2\x25\x3c\xb9\x72\x94\x28\xc6\x4e\x4c\x1b\xc6\xcc\xb1\xc5\x3c\x81\xab\x73\x85\x73\x57\x6f\xde\x09\xe1\xc0\x0b\x92\xcc\x23\x16\x92\x2c\x3c\x2b\x98\x32\x39\x06\x8e\xc4\x4c\x48\x70\x4d\xae\x30\x80\x83\x33\xcc\x63\x09\x68\x9b\xa8\xd9\x5d\x42\x71\x4c\x12\x08\xb9\xd8\xf3\x08\x1d\xc5\x0f\xbb\xce\x4a\x94\xa6\x47\x13\x13\xc4\x73\x28\xc9\x18\xae\x50\x3e\xaa\xd7\x71\xd0\xa9\x80\x96\xc7\x15\x26\xc9\xd9\x91\x79\xb1\x91\x84\x21\x00\xa3\x50\x75\xf3\x8a\xd7\xba\x60\xff\x16\xac\x2f\x4b\x37\x1f\x01\xf5\x23\x81\xbe\x33\x3e\x71\x18\x56\x5b\xcc\x74\xed\xb0\xce\xfa\x24\x33\xf4\x01\xbb\x24\x6e\x84\xb5\x0b\x16\x13\x6e\x6e\x3e\x3d\x4a\xd0\x2f\xe8\x9a\x35\x29\x31\xa1\x66\x5e\x31\x2c\x16\xc1\x12\xac\x1a\x75\x40\x73\x75\xb8\x3f\xab\x09\xe5\x5a\xd4\xdd\x64\x17\x16\x76\x73\x7d\x47\x92\x3e\xbe\xcd\x76\x4c\x16\x57\x2f\x27\xbf\xec\x2d\x42\xae\xdc\xa2\xf7\x34\x0a\x52\x81\x1a\xb3\xa3\xa5\x25\x2c\x57\x25\xf5\x0f\xd7\xd0\x48\x2c\x15\x73\x8e\x67\x39\x2b\x2d\x58\x65\x6a\x75\x25\x3b\xb9\x50\x0f\x33\x91\x47\x6e\xaf\xac\x42\xa6\xee\xcb\x9e\xdc\x96\x07\xf3\x96\x98\xf4\x53\x3d\x44\x87\x17\xb1\x0a\x03\x75\x12\x7c\xcf\x36\xa5\x8d\x36\x96\x18\x79\x0e\xa6\x10\xcb\x02\x9b\xc4\x56\x2e\x97\x4f\x07\x9a\xb1\x09\xe3\x2c\x6a\xd4\x09\x3a\x11\x46\x4f\x41\xaa\x20\x2d\xdc\xef\x3c\x0d\x18\x30\x26\x85\xe4\xd8\xeb\x9b\x5f\x16\xaa\x70\xae\x09\x50\xb9\xd8\x82\x85\x3d\x05\x58\x1c\x64\x69\xef\xd4\x5e\x97\xad\xb7\xc2\xbc\x95\xcc\x93\x8e\x8e\x97\xd4\xea\xf8\xfe\xde\xd9\x2e\xa6\x23\x13\xd3\x89\x50\x09\xa3\x58\x6c\x9a\x76\xe9\xf3\x7b\x49\x26\xb1\xb3\xa8\x5b\xd6\x14\x6a\x33\x95\x67\x18\x57\xe3\x71\xc6\x6a\x3c\x14\x58\x35\x73\x15\x49\x46\xc7\xd8\x4f\x75\xc8\xf5\x64\xb9\x2e\x63\xe4\xde\x97\x6d\x93\x8e\x73\x62\x42\x4b\x06\x60\xd8\x85\xfc\xdf\x78\x5a\x5b\x68\x29\x83\x9f\x04\x2b\x22\xfd\xbb\x79\x7e\x47\xea\xd6\x18\x53\x0a\x8e\xb8\x3f\xf9\x14\x4a\x15\xce\x98\x45\x9f\xf4\x9c\x45\x4b\xd9\x89\xff\x99\x59\xd0\x42\x56\x89\xc5\x68\x3f\x7d\x40\x93\x17\x7e\x27\x5f\x02\xf7\x4c\xf5\x5d\x7e\x06\x07\x0f\xca\x44\x69\x1e\x47\x35\x01\x58\xc2\x88\x71\x72\x0b\xb9\x5f\xa1\x2c\x90\x29\x50\xdf\x4d\xb6\xa8\x13\x45\x27\xe9\x26\x9d\x61\xbf\xeb\x6e\xc4\x02\xcd\x92\xdd\x50\xbd\x82\x30\xdc\xd4\x3d\x58\x98\xc6\x8b\x1e\xa6\xe6\x1d\x9e\x44\x5d\xa6\x88\xd5\x95\x08\x0f\xac\xc4\x0a\x87\x04\x1c\x3b\x2b\xe5\x3c\x0f\x20\x19\x66\x96\x9a\xf6\xb4\x0c\x73\x84\x9a\x72\xa9\xd0\x72\xe1\x6e\xa3\x44\x9a\x39\x01\xe9\xf3\x2d\xb6\xd2\x42\xcd\x22\xfb\x2e\x48\xac\x3c\x95\x52\x64\x0a\x3e\x35\xb3\x10\x9d\xd8\x77\x5a\xc1\x07\x48\x5b\xd0\x7c\x83\xa5\xdf\x10\xb1\xfb\x38\x81\xfd\x43\xc6\x5d\x2c\x7b\xca\xb7\x82\x55\x49\x12\x37\x92\xb9\x64\x8c\x37\x76\x6f\x32\xf3\xcb\xb8\x7e\x8e\x95\x9e\x13\x23\x54\x6e\xae\x97\xa2\x69\x4a\xf6\x65\x22\x4f\x6f\x0b\xaa\x5a\x2e\x9b\xda\xd6\xf8\xab\x98\x9e\xc3\x66\xae\xf2\xa9\x1c\x66\x0a\x3a\x2a\x13\xcf\x0f\xdb\xb5\x5a\x54\xa5\x51\xe0\x5c\x46\xd4\x32\xbf\x66\xb8\x58\x45\x12\x16\x26\xdb\x3d\xf5\x15\x9d\x00\x02\x17\x92\xb5\x41\x28\x87\xa7\xaf\x5c\xf5\xc5\x7a\x6a\x1c\xfa\xd2\x6e\xf9\x61\x45\xa5\x93\xf7\x43\x1e\xa8\x7c\x79\x3c\xca\x69\xc8\x97\x78\xe3\x3e\xbb\xf7\x12\x0c\x7c\x4e\x4d\x7c\xda\xce\xc7\xdc\xdc\xb2\x75\xea\x8b\xbb\xc5\xd6\x0f\x8b\x0a\xd9\x95\xc4\xc5\x52\x71\xe7\x79\x39\x95\x0e\xa1\xe7\x6b\x09\x2a\xaa\x82\x51\x03\xfd\xd7\xc7\x40\xa9\x3e\x5f\x9c\x05\xed\x5a\x10\xd0\x0b\x9e\x27\xc2\x89\xb1\x94\xde\xca\xff\x03\x00\x00\xff\xff\x06\x99\x87\x6e\xea\x77\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 30698, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
