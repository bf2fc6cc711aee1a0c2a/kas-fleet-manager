// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"context"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/internal/connector/internal/api/dbapi"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/api"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/errors"
	coreService "github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/services"
	"gorm.io/gorm"
	"sync"
)

// Ensure, that ConnectorNamespaceServiceMock does implement ConnectorNamespaceService.
// If this is not the case, regenerate this file with moq.
var _ ConnectorNamespaceService = &ConnectorNamespaceServiceMock{}

// ConnectorNamespaceServiceMock is a mock implementation of ConnectorNamespaceService.
//
//	func TestSomethingThatUsesConnectorNamespaceService(t *testing.T) {
//
//		// make and configure a mocked ConnectorNamespaceService
//		mockedConnectorNamespaceService := &ConnectorNamespaceServiceMock{
//			CanCreateEvalNamespaceFunc: func(userId string) *errors.ServiceError {
//				panic("mock out the CanCreateEvalNamespace method")
//			},
//			CheckConnectorQuotaFunc: func(namespaceId string) *errors.ServiceError {
//				panic("mock out the CheckConnectorQuota method")
//			},
//			CreateFunc: func(ctx context.Context, request *dbapi.ConnectorNamespace) *errors.ServiceError {
//				panic("mock out the Create method")
//			},
//			CreateDefaultNamespaceFunc: func(ctx context.Context, connectorCluster *dbapi.ConnectorCluster) *errors.ServiceError {
//				panic("mock out the CreateDefaultNamespace method")
//			},
//			DeleteFunc: func(ctx context.Context, namespaceId string) *errors.ServiceError {
//				panic("mock out the Delete method")
//			},
//			DeleteNamespacesFunc: func(ctx context.Context, dbConn *gorm.DB, query interface{}, values ...interface{}) (int64, *errors.ServiceError) {
//				panic("mock out the DeleteNamespaces method")
//			},
//			GetFunc: func(ctx context.Context, namespaceID string) (*dbapi.ConnectorNamespace, *errors.ServiceError) {
//				panic("mock out the Get method")
//			},
//			GetEmptyDeletingNamespacesFunc: func(clusterId string) (dbapi.ConnectorNamespaceList, *errors.ServiceError) {
//				panic("mock out the GetEmptyDeletingNamespaces method")
//			},
//			GetNamespaceTenantFunc: func(namespaceId string) (*dbapi.ConnectorNamespace, *errors.ServiceError) {
//				panic("mock out the GetNamespaceTenant method")
//			},
//			ListFunc: func(ctx context.Context, clusterIDs []string, listArguments *coreService.ListArguments, gtVersion int64) (dbapi.ConnectorNamespaceList, *api.PagingMeta, *errors.ServiceError) {
//				panic("mock out the List method")
//			},
//			ReconcileDeletedNamespacesFunc: func(ctx context.Context) (int64, *errors.ServiceError) {
//				panic("mock out the ReconcileDeletedNamespaces method")
//			},
//			ReconcileExpiredNamespacesFunc: func(ctx context.Context) (int64, *errors.ServiceError) {
//				panic("mock out the ReconcileExpiredNamespaces method")
//			},
//			ReconcileUnusedDeletingNamespacesFunc: func(ctx context.Context) (int64, *errors.ServiceError) {
//				panic("mock out the ReconcileUnusedDeletingNamespaces method")
//			},
//			ReconcileUsedDeletingNamespacesFunc: func(ctx context.Context) (int64, *errors.ServiceError) {
//				panic("mock out the ReconcileUsedDeletingNamespaces method")
//			},
//			SetEvalClusterIdFunc: func(request *dbapi.ConnectorNamespace) *errors.ServiceError {
//				panic("mock out the SetEvalClusterId method")
//			},
//			UpdateFunc: func(ctx context.Context, request *dbapi.ConnectorNamespace) *errors.ServiceError {
//				panic("mock out the Update method")
//			},
//			UpdateConnectorNamespaceStatusFunc: func(ctx context.Context, namespaceID string, status *dbapi.ConnectorNamespaceStatus) *errors.ServiceError {
//				panic("mock out the UpdateConnectorNamespaceStatus method")
//			},
//		}
//
//		// use mockedConnectorNamespaceService in code that requires ConnectorNamespaceService
//		// and then make assertions.
//
//	}
type ConnectorNamespaceServiceMock struct {
	// CanCreateEvalNamespaceFunc mocks the CanCreateEvalNamespace method.
	CanCreateEvalNamespaceFunc func(userId string) *errors.ServiceError

	// CheckConnectorQuotaFunc mocks the CheckConnectorQuota method.
	CheckConnectorQuotaFunc func(namespaceId string) *errors.ServiceError

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, request *dbapi.ConnectorNamespace) *errors.ServiceError

	// CreateDefaultNamespaceFunc mocks the CreateDefaultNamespace method.
	CreateDefaultNamespaceFunc func(ctx context.Context, connectorCluster *dbapi.ConnectorCluster) *errors.ServiceError

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, namespaceId string) *errors.ServiceError

	// DeleteNamespacesFunc mocks the DeleteNamespaces method.
	DeleteNamespacesFunc func(ctx context.Context, dbConn *gorm.DB, query interface{}, values ...interface{}) (int64, *errors.ServiceError)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, namespaceID string) (*dbapi.ConnectorNamespace, *errors.ServiceError)

	// GetEmptyDeletingNamespacesFunc mocks the GetEmptyDeletingNamespaces method.
	GetEmptyDeletingNamespacesFunc func(clusterId string) (dbapi.ConnectorNamespaceList, *errors.ServiceError)

	// GetNamespaceTenantFunc mocks the GetNamespaceTenant method.
	GetNamespaceTenantFunc func(namespaceId string) (*dbapi.ConnectorNamespace, *errors.ServiceError)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, clusterIDs []string, listArguments *coreService.ListArguments, gtVersion int64) (dbapi.ConnectorNamespaceList, *api.PagingMeta, *errors.ServiceError)

	// ReconcileDeletedNamespacesFunc mocks the ReconcileDeletedNamespaces method.
	ReconcileDeletedNamespacesFunc func(ctx context.Context) (int64, *errors.ServiceError)

	// ReconcileExpiredNamespacesFunc mocks the ReconcileExpiredNamespaces method.
	ReconcileExpiredNamespacesFunc func(ctx context.Context) (int64, *errors.ServiceError)

	// ReconcileUnusedDeletingNamespacesFunc mocks the ReconcileUnusedDeletingNamespaces method.
	ReconcileUnusedDeletingNamespacesFunc func(ctx context.Context) (int64, *errors.ServiceError)

	// ReconcileUsedDeletingNamespacesFunc mocks the ReconcileUsedDeletingNamespaces method.
	ReconcileUsedDeletingNamespacesFunc func(ctx context.Context) (int64, *errors.ServiceError)

	// SetEvalClusterIdFunc mocks the SetEvalClusterId method.
	SetEvalClusterIdFunc func(request *dbapi.ConnectorNamespace) *errors.ServiceError

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, request *dbapi.ConnectorNamespace) *errors.ServiceError

	// UpdateConnectorNamespaceStatusFunc mocks the UpdateConnectorNamespaceStatus method.
	UpdateConnectorNamespaceStatusFunc func(ctx context.Context, namespaceID string, status *dbapi.ConnectorNamespaceStatus) *errors.ServiceError

	// calls tracks calls to the methods.
	calls struct {
		// CanCreateEvalNamespace holds details about calls to the CanCreateEvalNamespace method.
		CanCreateEvalNamespace []struct {
			// UserId is the userId argument value.
			UserId string
		}
		// CheckConnectorQuota holds details about calls to the CheckConnectorQuota method.
		CheckConnectorQuota []struct {
			// NamespaceId is the namespaceId argument value.
			NamespaceId string
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Request is the request argument value.
			Request *dbapi.ConnectorNamespace
		}
		// CreateDefaultNamespace holds details about calls to the CreateDefaultNamespace method.
		CreateDefaultNamespace []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectorCluster is the connectorCluster argument value.
			ConnectorCluster *dbapi.ConnectorCluster
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NamespaceId is the namespaceId argument value.
			NamespaceId string
		}
		// DeleteNamespaces holds details about calls to the DeleteNamespaces method.
		DeleteNamespaces []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DbConn is the dbConn argument value.
			DbConn *gorm.DB
			// Query is the query argument value.
			Query interface{}
			// Values is the values argument value.
			Values []interface{}
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NamespaceID is the namespaceID argument value.
			NamespaceID string
		}
		// GetEmptyDeletingNamespaces holds details about calls to the GetEmptyDeletingNamespaces method.
		GetEmptyDeletingNamespaces []struct {
			// ClusterId is the clusterId argument value.
			ClusterId string
		}
		// GetNamespaceTenant holds details about calls to the GetNamespaceTenant method.
		GetNamespaceTenant []struct {
			// NamespaceId is the namespaceId argument value.
			NamespaceId string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClusterIDs is the clusterIDs argument value.
			ClusterIDs []string
			// ListArguments is the listArguments argument value.
			ListArguments *coreService.ListArguments
			// GtVersion is the gtVersion argument value.
			GtVersion int64
		}
		// ReconcileDeletedNamespaces holds details about calls to the ReconcileDeletedNamespaces method.
		ReconcileDeletedNamespaces []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ReconcileExpiredNamespaces holds details about calls to the ReconcileExpiredNamespaces method.
		ReconcileExpiredNamespaces []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ReconcileUnusedDeletingNamespaces holds details about calls to the ReconcileUnusedDeletingNamespaces method.
		ReconcileUnusedDeletingNamespaces []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ReconcileUsedDeletingNamespaces holds details about calls to the ReconcileUsedDeletingNamespaces method.
		ReconcileUsedDeletingNamespaces []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SetEvalClusterId holds details about calls to the SetEvalClusterId method.
		SetEvalClusterId []struct {
			// Request is the request argument value.
			Request *dbapi.ConnectorNamespace
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Request is the request argument value.
			Request *dbapi.ConnectorNamespace
		}
		// UpdateConnectorNamespaceStatus holds details about calls to the UpdateConnectorNamespaceStatus method.
		UpdateConnectorNamespaceStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// NamespaceID is the namespaceID argument value.
			NamespaceID string
			// Status is the status argument value.
			Status *dbapi.ConnectorNamespaceStatus
		}
	}
	lockCanCreateEvalNamespace            sync.RWMutex
	lockCheckConnectorQuota               sync.RWMutex
	lockCreate                            sync.RWMutex
	lockCreateDefaultNamespace            sync.RWMutex
	lockDelete                            sync.RWMutex
	lockDeleteNamespaces                  sync.RWMutex
	lockGet                               sync.RWMutex
	lockGetEmptyDeletingNamespaces        sync.RWMutex
	lockGetNamespaceTenant                sync.RWMutex
	lockList                              sync.RWMutex
	lockReconcileDeletedNamespaces        sync.RWMutex
	lockReconcileExpiredNamespaces        sync.RWMutex
	lockReconcileUnusedDeletingNamespaces sync.RWMutex
	lockReconcileUsedDeletingNamespaces   sync.RWMutex
	lockSetEvalClusterId                  sync.RWMutex
	lockUpdate                            sync.RWMutex
	lockUpdateConnectorNamespaceStatus    sync.RWMutex
}

// CanCreateEvalNamespace calls CanCreateEvalNamespaceFunc.
func (mock *ConnectorNamespaceServiceMock) CanCreateEvalNamespace(userId string) *errors.ServiceError {
	if mock.CanCreateEvalNamespaceFunc == nil {
		panic("ConnectorNamespaceServiceMock.CanCreateEvalNamespaceFunc: method is nil but ConnectorNamespaceService.CanCreateEvalNamespace was just called")
	}
	callInfo := struct {
		UserId string
	}{
		UserId: userId,
	}
	mock.lockCanCreateEvalNamespace.Lock()
	mock.calls.CanCreateEvalNamespace = append(mock.calls.CanCreateEvalNamespace, callInfo)
	mock.lockCanCreateEvalNamespace.Unlock()
	return mock.CanCreateEvalNamespaceFunc(userId)
}

// CanCreateEvalNamespaceCalls gets all the calls that were made to CanCreateEvalNamespace.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.CanCreateEvalNamespaceCalls())
func (mock *ConnectorNamespaceServiceMock) CanCreateEvalNamespaceCalls() []struct {
	UserId string
} {
	var calls []struct {
		UserId string
	}
	mock.lockCanCreateEvalNamespace.RLock()
	calls = mock.calls.CanCreateEvalNamespace
	mock.lockCanCreateEvalNamespace.RUnlock()
	return calls
}

// CheckConnectorQuota calls CheckConnectorQuotaFunc.
func (mock *ConnectorNamespaceServiceMock) CheckConnectorQuota(namespaceId string) *errors.ServiceError {
	if mock.CheckConnectorQuotaFunc == nil {
		panic("ConnectorNamespaceServiceMock.CheckConnectorQuotaFunc: method is nil but ConnectorNamespaceService.CheckConnectorQuota was just called")
	}
	callInfo := struct {
		NamespaceId string
	}{
		NamespaceId: namespaceId,
	}
	mock.lockCheckConnectorQuota.Lock()
	mock.calls.CheckConnectorQuota = append(mock.calls.CheckConnectorQuota, callInfo)
	mock.lockCheckConnectorQuota.Unlock()
	return mock.CheckConnectorQuotaFunc(namespaceId)
}

// CheckConnectorQuotaCalls gets all the calls that were made to CheckConnectorQuota.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.CheckConnectorQuotaCalls())
func (mock *ConnectorNamespaceServiceMock) CheckConnectorQuotaCalls() []struct {
	NamespaceId string
} {
	var calls []struct {
		NamespaceId string
	}
	mock.lockCheckConnectorQuota.RLock()
	calls = mock.calls.CheckConnectorQuota
	mock.lockCheckConnectorQuota.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ConnectorNamespaceServiceMock) Create(ctx context.Context, request *dbapi.ConnectorNamespace) *errors.ServiceError {
	if mock.CreateFunc == nil {
		panic("ConnectorNamespaceServiceMock.CreateFunc: method is nil but ConnectorNamespaceService.Create was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Request *dbapi.ConnectorNamespace
	}{
		Ctx:     ctx,
		Request: request,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, request)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.CreateCalls())
func (mock *ConnectorNamespaceServiceMock) CreateCalls() []struct {
	Ctx     context.Context
	Request *dbapi.ConnectorNamespace
} {
	var calls []struct {
		Ctx     context.Context
		Request *dbapi.ConnectorNamespace
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// CreateDefaultNamespace calls CreateDefaultNamespaceFunc.
func (mock *ConnectorNamespaceServiceMock) CreateDefaultNamespace(ctx context.Context, connectorCluster *dbapi.ConnectorCluster) *errors.ServiceError {
	if mock.CreateDefaultNamespaceFunc == nil {
		panic("ConnectorNamespaceServiceMock.CreateDefaultNamespaceFunc: method is nil but ConnectorNamespaceService.CreateDefaultNamespace was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		ConnectorCluster *dbapi.ConnectorCluster
	}{
		Ctx:              ctx,
		ConnectorCluster: connectorCluster,
	}
	mock.lockCreateDefaultNamespace.Lock()
	mock.calls.CreateDefaultNamespace = append(mock.calls.CreateDefaultNamespace, callInfo)
	mock.lockCreateDefaultNamespace.Unlock()
	return mock.CreateDefaultNamespaceFunc(ctx, connectorCluster)
}

// CreateDefaultNamespaceCalls gets all the calls that were made to CreateDefaultNamespace.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.CreateDefaultNamespaceCalls())
func (mock *ConnectorNamespaceServiceMock) CreateDefaultNamespaceCalls() []struct {
	Ctx              context.Context
	ConnectorCluster *dbapi.ConnectorCluster
} {
	var calls []struct {
		Ctx              context.Context
		ConnectorCluster *dbapi.ConnectorCluster
	}
	mock.lockCreateDefaultNamespace.RLock()
	calls = mock.calls.CreateDefaultNamespace
	mock.lockCreateDefaultNamespace.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ConnectorNamespaceServiceMock) Delete(ctx context.Context, namespaceId string) *errors.ServiceError {
	if mock.DeleteFunc == nil {
		panic("ConnectorNamespaceServiceMock.DeleteFunc: method is nil but ConnectorNamespaceService.Delete was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		NamespaceId string
	}{
		Ctx:         ctx,
		NamespaceId: namespaceId,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, namespaceId)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.DeleteCalls())
func (mock *ConnectorNamespaceServiceMock) DeleteCalls() []struct {
	Ctx         context.Context
	NamespaceId string
} {
	var calls []struct {
		Ctx         context.Context
		NamespaceId string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// DeleteNamespaces calls DeleteNamespacesFunc.
func (mock *ConnectorNamespaceServiceMock) DeleteNamespaces(ctx context.Context, dbConn *gorm.DB, query interface{}, values ...interface{}) (int64, *errors.ServiceError) {
	if mock.DeleteNamespacesFunc == nil {
		panic("ConnectorNamespaceServiceMock.DeleteNamespacesFunc: method is nil but ConnectorNamespaceService.DeleteNamespaces was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		DbConn *gorm.DB
		Query  interface{}
		Values []interface{}
	}{
		Ctx:    ctx,
		DbConn: dbConn,
		Query:  query,
		Values: values,
	}
	mock.lockDeleteNamespaces.Lock()
	mock.calls.DeleteNamespaces = append(mock.calls.DeleteNamespaces, callInfo)
	mock.lockDeleteNamespaces.Unlock()
	return mock.DeleteNamespacesFunc(ctx, dbConn, query, values...)
}

// DeleteNamespacesCalls gets all the calls that were made to DeleteNamespaces.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.DeleteNamespacesCalls())
func (mock *ConnectorNamespaceServiceMock) DeleteNamespacesCalls() []struct {
	Ctx    context.Context
	DbConn *gorm.DB
	Query  interface{}
	Values []interface{}
} {
	var calls []struct {
		Ctx    context.Context
		DbConn *gorm.DB
		Query  interface{}
		Values []interface{}
	}
	mock.lockDeleteNamespaces.RLock()
	calls = mock.calls.DeleteNamespaces
	mock.lockDeleteNamespaces.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ConnectorNamespaceServiceMock) Get(ctx context.Context, namespaceID string) (*dbapi.ConnectorNamespace, *errors.ServiceError) {
	if mock.GetFunc == nil {
		panic("ConnectorNamespaceServiceMock.GetFunc: method is nil but ConnectorNamespaceService.Get was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		NamespaceID string
	}{
		Ctx:         ctx,
		NamespaceID: namespaceID,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, namespaceID)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.GetCalls())
func (mock *ConnectorNamespaceServiceMock) GetCalls() []struct {
	Ctx         context.Context
	NamespaceID string
} {
	var calls []struct {
		Ctx         context.Context
		NamespaceID string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetEmptyDeletingNamespaces calls GetEmptyDeletingNamespacesFunc.
func (mock *ConnectorNamespaceServiceMock) GetEmptyDeletingNamespaces(clusterId string) (dbapi.ConnectorNamespaceList, *errors.ServiceError) {
	if mock.GetEmptyDeletingNamespacesFunc == nil {
		panic("ConnectorNamespaceServiceMock.GetEmptyDeletingNamespacesFunc: method is nil but ConnectorNamespaceService.GetEmptyDeletingNamespaces was just called")
	}
	callInfo := struct {
		ClusterId string
	}{
		ClusterId: clusterId,
	}
	mock.lockGetEmptyDeletingNamespaces.Lock()
	mock.calls.GetEmptyDeletingNamespaces = append(mock.calls.GetEmptyDeletingNamespaces, callInfo)
	mock.lockGetEmptyDeletingNamespaces.Unlock()
	return mock.GetEmptyDeletingNamespacesFunc(clusterId)
}

// GetEmptyDeletingNamespacesCalls gets all the calls that were made to GetEmptyDeletingNamespaces.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.GetEmptyDeletingNamespacesCalls())
func (mock *ConnectorNamespaceServiceMock) GetEmptyDeletingNamespacesCalls() []struct {
	ClusterId string
} {
	var calls []struct {
		ClusterId string
	}
	mock.lockGetEmptyDeletingNamespaces.RLock()
	calls = mock.calls.GetEmptyDeletingNamespaces
	mock.lockGetEmptyDeletingNamespaces.RUnlock()
	return calls
}

// GetNamespaceTenant calls GetNamespaceTenantFunc.
func (mock *ConnectorNamespaceServiceMock) GetNamespaceTenant(namespaceId string) (*dbapi.ConnectorNamespace, *errors.ServiceError) {
	if mock.GetNamespaceTenantFunc == nil {
		panic("ConnectorNamespaceServiceMock.GetNamespaceTenantFunc: method is nil but ConnectorNamespaceService.GetNamespaceTenant was just called")
	}
	callInfo := struct {
		NamespaceId string
	}{
		NamespaceId: namespaceId,
	}
	mock.lockGetNamespaceTenant.Lock()
	mock.calls.GetNamespaceTenant = append(mock.calls.GetNamespaceTenant, callInfo)
	mock.lockGetNamespaceTenant.Unlock()
	return mock.GetNamespaceTenantFunc(namespaceId)
}

// GetNamespaceTenantCalls gets all the calls that were made to GetNamespaceTenant.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.GetNamespaceTenantCalls())
func (mock *ConnectorNamespaceServiceMock) GetNamespaceTenantCalls() []struct {
	NamespaceId string
} {
	var calls []struct {
		NamespaceId string
	}
	mock.lockGetNamespaceTenant.RLock()
	calls = mock.calls.GetNamespaceTenant
	mock.lockGetNamespaceTenant.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ConnectorNamespaceServiceMock) List(ctx context.Context, clusterIDs []string, listArguments *coreService.ListArguments, gtVersion int64) (dbapi.ConnectorNamespaceList, *api.PagingMeta, *errors.ServiceError) {
	if mock.ListFunc == nil {
		panic("ConnectorNamespaceServiceMock.ListFunc: method is nil but ConnectorNamespaceService.List was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		ClusterIDs    []string
		ListArguments *coreService.ListArguments
		GtVersion     int64
	}{
		Ctx:           ctx,
		ClusterIDs:    clusterIDs,
		ListArguments: listArguments,
		GtVersion:     gtVersion,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, clusterIDs, listArguments, gtVersion)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.ListCalls())
func (mock *ConnectorNamespaceServiceMock) ListCalls() []struct {
	Ctx           context.Context
	ClusterIDs    []string
	ListArguments *coreService.ListArguments
	GtVersion     int64
} {
	var calls []struct {
		Ctx           context.Context
		ClusterIDs    []string
		ListArguments *coreService.ListArguments
		GtVersion     int64
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ReconcileDeletedNamespaces calls ReconcileDeletedNamespacesFunc.
func (mock *ConnectorNamespaceServiceMock) ReconcileDeletedNamespaces(ctx context.Context) (int64, *errors.ServiceError) {
	if mock.ReconcileDeletedNamespacesFunc == nil {
		panic("ConnectorNamespaceServiceMock.ReconcileDeletedNamespacesFunc: method is nil but ConnectorNamespaceService.ReconcileDeletedNamespaces was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockReconcileDeletedNamespaces.Lock()
	mock.calls.ReconcileDeletedNamespaces = append(mock.calls.ReconcileDeletedNamespaces, callInfo)
	mock.lockReconcileDeletedNamespaces.Unlock()
	return mock.ReconcileDeletedNamespacesFunc(ctx)
}

// ReconcileDeletedNamespacesCalls gets all the calls that were made to ReconcileDeletedNamespaces.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.ReconcileDeletedNamespacesCalls())
func (mock *ConnectorNamespaceServiceMock) ReconcileDeletedNamespacesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockReconcileDeletedNamespaces.RLock()
	calls = mock.calls.ReconcileDeletedNamespaces
	mock.lockReconcileDeletedNamespaces.RUnlock()
	return calls
}

// ReconcileExpiredNamespaces calls ReconcileExpiredNamespacesFunc.
func (mock *ConnectorNamespaceServiceMock) ReconcileExpiredNamespaces(ctx context.Context) (int64, *errors.ServiceError) {
	if mock.ReconcileExpiredNamespacesFunc == nil {
		panic("ConnectorNamespaceServiceMock.ReconcileExpiredNamespacesFunc: method is nil but ConnectorNamespaceService.ReconcileExpiredNamespaces was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockReconcileExpiredNamespaces.Lock()
	mock.calls.ReconcileExpiredNamespaces = append(mock.calls.ReconcileExpiredNamespaces, callInfo)
	mock.lockReconcileExpiredNamespaces.Unlock()
	return mock.ReconcileExpiredNamespacesFunc(ctx)
}

// ReconcileExpiredNamespacesCalls gets all the calls that were made to ReconcileExpiredNamespaces.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.ReconcileExpiredNamespacesCalls())
func (mock *ConnectorNamespaceServiceMock) ReconcileExpiredNamespacesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockReconcileExpiredNamespaces.RLock()
	calls = mock.calls.ReconcileExpiredNamespaces
	mock.lockReconcileExpiredNamespaces.RUnlock()
	return calls
}

// ReconcileUnusedDeletingNamespaces calls ReconcileUnusedDeletingNamespacesFunc.
func (mock *ConnectorNamespaceServiceMock) ReconcileUnusedDeletingNamespaces(ctx context.Context) (int64, *errors.ServiceError) {
	if mock.ReconcileUnusedDeletingNamespacesFunc == nil {
		panic("ConnectorNamespaceServiceMock.ReconcileUnusedDeletingNamespacesFunc: method is nil but ConnectorNamespaceService.ReconcileUnusedDeletingNamespaces was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockReconcileUnusedDeletingNamespaces.Lock()
	mock.calls.ReconcileUnusedDeletingNamespaces = append(mock.calls.ReconcileUnusedDeletingNamespaces, callInfo)
	mock.lockReconcileUnusedDeletingNamespaces.Unlock()
	return mock.ReconcileUnusedDeletingNamespacesFunc(ctx)
}

// ReconcileUnusedDeletingNamespacesCalls gets all the calls that were made to ReconcileUnusedDeletingNamespaces.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.ReconcileUnusedDeletingNamespacesCalls())
func (mock *ConnectorNamespaceServiceMock) ReconcileUnusedDeletingNamespacesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockReconcileUnusedDeletingNamespaces.RLock()
	calls = mock.calls.ReconcileUnusedDeletingNamespaces
	mock.lockReconcileUnusedDeletingNamespaces.RUnlock()
	return calls
}

// ReconcileUsedDeletingNamespaces calls ReconcileUsedDeletingNamespacesFunc.
func (mock *ConnectorNamespaceServiceMock) ReconcileUsedDeletingNamespaces(ctx context.Context) (int64, *errors.ServiceError) {
	if mock.ReconcileUsedDeletingNamespacesFunc == nil {
		panic("ConnectorNamespaceServiceMock.ReconcileUsedDeletingNamespacesFunc: method is nil but ConnectorNamespaceService.ReconcileUsedDeletingNamespaces was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockReconcileUsedDeletingNamespaces.Lock()
	mock.calls.ReconcileUsedDeletingNamespaces = append(mock.calls.ReconcileUsedDeletingNamespaces, callInfo)
	mock.lockReconcileUsedDeletingNamespaces.Unlock()
	return mock.ReconcileUsedDeletingNamespacesFunc(ctx)
}

// ReconcileUsedDeletingNamespacesCalls gets all the calls that were made to ReconcileUsedDeletingNamespaces.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.ReconcileUsedDeletingNamespacesCalls())
func (mock *ConnectorNamespaceServiceMock) ReconcileUsedDeletingNamespacesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockReconcileUsedDeletingNamespaces.RLock()
	calls = mock.calls.ReconcileUsedDeletingNamespaces
	mock.lockReconcileUsedDeletingNamespaces.RUnlock()
	return calls
}

// SetEvalClusterId calls SetEvalClusterIdFunc.
func (mock *ConnectorNamespaceServiceMock) SetEvalClusterId(request *dbapi.ConnectorNamespace) *errors.ServiceError {
	if mock.SetEvalClusterIdFunc == nil {
		panic("ConnectorNamespaceServiceMock.SetEvalClusterIdFunc: method is nil but ConnectorNamespaceService.SetEvalClusterId was just called")
	}
	callInfo := struct {
		Request *dbapi.ConnectorNamespace
	}{
		Request: request,
	}
	mock.lockSetEvalClusterId.Lock()
	mock.calls.SetEvalClusterId = append(mock.calls.SetEvalClusterId, callInfo)
	mock.lockSetEvalClusterId.Unlock()
	return mock.SetEvalClusterIdFunc(request)
}

// SetEvalClusterIdCalls gets all the calls that were made to SetEvalClusterId.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.SetEvalClusterIdCalls())
func (mock *ConnectorNamespaceServiceMock) SetEvalClusterIdCalls() []struct {
	Request *dbapi.ConnectorNamespace
} {
	var calls []struct {
		Request *dbapi.ConnectorNamespace
	}
	mock.lockSetEvalClusterId.RLock()
	calls = mock.calls.SetEvalClusterId
	mock.lockSetEvalClusterId.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ConnectorNamespaceServiceMock) Update(ctx context.Context, request *dbapi.ConnectorNamespace) *errors.ServiceError {
	if mock.UpdateFunc == nil {
		panic("ConnectorNamespaceServiceMock.UpdateFunc: method is nil but ConnectorNamespaceService.Update was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Request *dbapi.ConnectorNamespace
	}{
		Ctx:     ctx,
		Request: request,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, request)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.UpdateCalls())
func (mock *ConnectorNamespaceServiceMock) UpdateCalls() []struct {
	Ctx     context.Context
	Request *dbapi.ConnectorNamespace
} {
	var calls []struct {
		Ctx     context.Context
		Request *dbapi.ConnectorNamespace
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// UpdateConnectorNamespaceStatus calls UpdateConnectorNamespaceStatusFunc.
func (mock *ConnectorNamespaceServiceMock) UpdateConnectorNamespaceStatus(ctx context.Context, namespaceID string, status *dbapi.ConnectorNamespaceStatus) *errors.ServiceError {
	if mock.UpdateConnectorNamespaceStatusFunc == nil {
		panic("ConnectorNamespaceServiceMock.UpdateConnectorNamespaceStatusFunc: method is nil but ConnectorNamespaceService.UpdateConnectorNamespaceStatus was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		NamespaceID string
		Status      *dbapi.ConnectorNamespaceStatus
	}{
		Ctx:         ctx,
		NamespaceID: namespaceID,
		Status:      status,
	}
	mock.lockUpdateConnectorNamespaceStatus.Lock()
	mock.calls.UpdateConnectorNamespaceStatus = append(mock.calls.UpdateConnectorNamespaceStatus, callInfo)
	mock.lockUpdateConnectorNamespaceStatus.Unlock()
	return mock.UpdateConnectorNamespaceStatusFunc(ctx, namespaceID, status)
}

// UpdateConnectorNamespaceStatusCalls gets all the calls that were made to UpdateConnectorNamespaceStatus.
// Check the length with:
//
//	len(mockedConnectorNamespaceService.UpdateConnectorNamespaceStatusCalls())
func (mock *ConnectorNamespaceServiceMock) UpdateConnectorNamespaceStatusCalls() []struct {
	Ctx         context.Context
	NamespaceID string
	Status      *dbapi.ConnectorNamespaceStatus
} {
	var calls []struct {
		Ctx         context.Context
		NamespaceID string
		Status      *dbapi.ConnectorNamespaceStatus
	}
	mock.lockUpdateConnectorNamespaceStatus.RLock()
	calls = mock.calls.UpdateConnectorNamespaceStatus
	mock.lockUpdateConnectorNamespaceStatus.RUnlock()
	return calls
}
