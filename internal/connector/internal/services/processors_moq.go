// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"context"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/internal/connector/internal/api/dbapi"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/api"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/errors"
	coreService "github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/services"
	"sync"
)

// Ensure, that ProcessorsServiceMock does implement ProcessorsService.
// If this is not the case, regenerate this file with moq.
var _ ProcessorsService = &ProcessorsServiceMock{}

// ProcessorsServiceMock is a mock implementation of ProcessorsService.
//
//	func TestSomethingThatUsesProcessorsService(t *testing.T) {
//
//		// make and configure a mocked ProcessorsService
//		mockedProcessorsService := &ProcessorsServiceMock{
//			CreateFunc: func(ctx context.Context, resource *dbapi.Processor) *errors.ServiceError {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, id string) *errors.ServiceError {
//				panic("mock out the Delete method")
//			},
//			ForEachFunc: func(f func(*dbapi.Processor) *errors.ServiceError, query string, args ...interface{}) []error {
//				panic("mock out the ForEach method")
//			},
//			ForceDeleteFunc: func(ctx context.Context, id string) *errors.ServiceError {
//				panic("mock out the ForceDelete method")
//			},
//			GetFunc: func(ctx context.Context, id string) (*dbapi.ProcessorWithConditions, *errors.ServiceError) {
//				panic("mock out the Get method")
//			},
//			ListFunc: func(ctx context.Context, listArgs *coreService.ListArguments, clusterId string) (dbapi.ProcessorWithConditionsList, *api.PagingMeta, *errors.ServiceError) {
//				panic("mock out the List method")
//			},
//			ResolveProcessorRefsWithBase64SecretsFunc: func(resource *dbapi.Processor) (bool, *errors.ServiceError) {
//				panic("mock out the ResolveProcessorRefsWithBase64Secrets method")
//			},
//			SaveStatusFunc: func(ctx context.Context, resource dbapi.ProcessorStatus) *errors.ServiceError {
//				panic("mock out the SaveStatus method")
//			},
//			UpdateFunc: func(ctx context.Context, resource *dbapi.Processor) *errors.ServiceError {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedProcessorsService in code that requires ProcessorsService
//		// and then make assertions.
//
//	}
type ProcessorsServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, resource *dbapi.Processor) *errors.ServiceError

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id string) *errors.ServiceError

	// ForEachFunc mocks the ForEach method.
	ForEachFunc func(f func(*dbapi.Processor) *errors.ServiceError, query string, args ...interface{}) []error

	// ForceDeleteFunc mocks the ForceDelete method.
	ForceDeleteFunc func(ctx context.Context, id string) *errors.ServiceError

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id string) (*dbapi.ProcessorWithConditions, *errors.ServiceError)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, listArgs *coreService.ListArguments, clusterId string) (dbapi.ProcessorWithConditionsList, *api.PagingMeta, *errors.ServiceError)

	// ResolveProcessorRefsWithBase64SecretsFunc mocks the ResolveProcessorRefsWithBase64Secrets method.
	ResolveProcessorRefsWithBase64SecretsFunc func(resource *dbapi.Processor) (bool, *errors.ServiceError)

	// SaveStatusFunc mocks the SaveStatus method.
	SaveStatusFunc func(ctx context.Context, resource dbapi.ProcessorStatus) *errors.ServiceError

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, resource *dbapi.Processor) *errors.ServiceError

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Resource is the resource argument value.
			Resource *dbapi.Processor
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// ForEach holds details about calls to the ForEach method.
		ForEach []struct {
			// F is the f argument value.
			F func(*dbapi.Processor) *errors.ServiceError
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []interface{}
		}
		// ForceDelete holds details about calls to the ForceDelete method.
		ForceDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ListArgs is the listArgs argument value.
			ListArgs *coreService.ListArguments
			// ClusterId is the clusterId argument value.
			ClusterId string
		}
		// ResolveProcessorRefsWithBase64Secrets holds details about calls to the ResolveProcessorRefsWithBase64Secrets method.
		ResolveProcessorRefsWithBase64Secrets []struct {
			// Resource is the resource argument value.
			Resource *dbapi.Processor
		}
		// SaveStatus holds details about calls to the SaveStatus method.
		SaveStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Resource is the resource argument value.
			Resource dbapi.ProcessorStatus
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Resource is the resource argument value.
			Resource *dbapi.Processor
		}
	}
	lockCreate                                sync.RWMutex
	lockDelete                                sync.RWMutex
	lockForEach                               sync.RWMutex
	lockForceDelete                           sync.RWMutex
	lockGet                                   sync.RWMutex
	lockList                                  sync.RWMutex
	lockResolveProcessorRefsWithBase64Secrets sync.RWMutex
	lockSaveStatus                            sync.RWMutex
	lockUpdate                                sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ProcessorsServiceMock) Create(ctx context.Context, resource *dbapi.Processor) *errors.ServiceError {
	if mock.CreateFunc == nil {
		panic("ProcessorsServiceMock.CreateFunc: method is nil but ProcessorsService.Create was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Resource *dbapi.Processor
	}{
		Ctx:      ctx,
		Resource: resource,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, resource)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedProcessorsService.CreateCalls())
func (mock *ProcessorsServiceMock) CreateCalls() []struct {
	Ctx      context.Context
	Resource *dbapi.Processor
} {
	var calls []struct {
		Ctx      context.Context
		Resource *dbapi.Processor
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ProcessorsServiceMock) Delete(ctx context.Context, id string) *errors.ServiceError {
	if mock.DeleteFunc == nil {
		panic("ProcessorsServiceMock.DeleteFunc: method is nil but ProcessorsService.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedProcessorsService.DeleteCalls())
func (mock *ProcessorsServiceMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// ForEach calls ForEachFunc.
func (mock *ProcessorsServiceMock) ForEach(f func(*dbapi.Processor) *errors.ServiceError, query string, args ...interface{}) []error {
	if mock.ForEachFunc == nil {
		panic("ProcessorsServiceMock.ForEachFunc: method is nil but ProcessorsService.ForEach was just called")
	}
	callInfo := struct {
		F     func(*dbapi.Processor) *errors.ServiceError
		Query string
		Args  []interface{}
	}{
		F:     f,
		Query: query,
		Args:  args,
	}
	mock.lockForEach.Lock()
	mock.calls.ForEach = append(mock.calls.ForEach, callInfo)
	mock.lockForEach.Unlock()
	return mock.ForEachFunc(f, query, args...)
}

// ForEachCalls gets all the calls that were made to ForEach.
// Check the length with:
//
//	len(mockedProcessorsService.ForEachCalls())
func (mock *ProcessorsServiceMock) ForEachCalls() []struct {
	F     func(*dbapi.Processor) *errors.ServiceError
	Query string
	Args  []interface{}
} {
	var calls []struct {
		F     func(*dbapi.Processor) *errors.ServiceError
		Query string
		Args  []interface{}
	}
	mock.lockForEach.RLock()
	calls = mock.calls.ForEach
	mock.lockForEach.RUnlock()
	return calls
}

// ForceDelete calls ForceDeleteFunc.
func (mock *ProcessorsServiceMock) ForceDelete(ctx context.Context, id string) *errors.ServiceError {
	if mock.ForceDeleteFunc == nil {
		panic("ProcessorsServiceMock.ForceDeleteFunc: method is nil but ProcessorsService.ForceDelete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockForceDelete.Lock()
	mock.calls.ForceDelete = append(mock.calls.ForceDelete, callInfo)
	mock.lockForceDelete.Unlock()
	return mock.ForceDeleteFunc(ctx, id)
}

// ForceDeleteCalls gets all the calls that were made to ForceDelete.
// Check the length with:
//
//	len(mockedProcessorsService.ForceDeleteCalls())
func (mock *ProcessorsServiceMock) ForceDeleteCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockForceDelete.RLock()
	calls = mock.calls.ForceDelete
	mock.lockForceDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ProcessorsServiceMock) Get(ctx context.Context, id string) (*dbapi.ProcessorWithConditions, *errors.ServiceError) {
	if mock.GetFunc == nil {
		panic("ProcessorsServiceMock.GetFunc: method is nil but ProcessorsService.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedProcessorsService.GetCalls())
func (mock *ProcessorsServiceMock) GetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ProcessorsServiceMock) List(ctx context.Context, listArgs *coreService.ListArguments, clusterId string) (dbapi.ProcessorWithConditionsList, *api.PagingMeta, *errors.ServiceError) {
	if mock.ListFunc == nil {
		panic("ProcessorsServiceMock.ListFunc: method is nil but ProcessorsService.List was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ListArgs  *coreService.ListArguments
		ClusterId string
	}{
		Ctx:       ctx,
		ListArgs:  listArgs,
		ClusterId: clusterId,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, listArgs, clusterId)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedProcessorsService.ListCalls())
func (mock *ProcessorsServiceMock) ListCalls() []struct {
	Ctx       context.Context
	ListArgs  *coreService.ListArguments
	ClusterId string
} {
	var calls []struct {
		Ctx       context.Context
		ListArgs  *coreService.ListArguments
		ClusterId string
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ResolveProcessorRefsWithBase64Secrets calls ResolveProcessorRefsWithBase64SecretsFunc.
func (mock *ProcessorsServiceMock) ResolveProcessorRefsWithBase64Secrets(resource *dbapi.Processor) (bool, *errors.ServiceError) {
	if mock.ResolveProcessorRefsWithBase64SecretsFunc == nil {
		panic("ProcessorsServiceMock.ResolveProcessorRefsWithBase64SecretsFunc: method is nil but ProcessorsService.ResolveProcessorRefsWithBase64Secrets was just called")
	}
	callInfo := struct {
		Resource *dbapi.Processor
	}{
		Resource: resource,
	}
	mock.lockResolveProcessorRefsWithBase64Secrets.Lock()
	mock.calls.ResolveProcessorRefsWithBase64Secrets = append(mock.calls.ResolveProcessorRefsWithBase64Secrets, callInfo)
	mock.lockResolveProcessorRefsWithBase64Secrets.Unlock()
	return mock.ResolveProcessorRefsWithBase64SecretsFunc(resource)
}

// ResolveProcessorRefsWithBase64SecretsCalls gets all the calls that were made to ResolveProcessorRefsWithBase64Secrets.
// Check the length with:
//
//	len(mockedProcessorsService.ResolveProcessorRefsWithBase64SecretsCalls())
func (mock *ProcessorsServiceMock) ResolveProcessorRefsWithBase64SecretsCalls() []struct {
	Resource *dbapi.Processor
} {
	var calls []struct {
		Resource *dbapi.Processor
	}
	mock.lockResolveProcessorRefsWithBase64Secrets.RLock()
	calls = mock.calls.ResolveProcessorRefsWithBase64Secrets
	mock.lockResolveProcessorRefsWithBase64Secrets.RUnlock()
	return calls
}

// SaveStatus calls SaveStatusFunc.
func (mock *ProcessorsServiceMock) SaveStatus(ctx context.Context, resource dbapi.ProcessorStatus) *errors.ServiceError {
	if mock.SaveStatusFunc == nil {
		panic("ProcessorsServiceMock.SaveStatusFunc: method is nil but ProcessorsService.SaveStatus was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Resource dbapi.ProcessorStatus
	}{
		Ctx:      ctx,
		Resource: resource,
	}
	mock.lockSaveStatus.Lock()
	mock.calls.SaveStatus = append(mock.calls.SaveStatus, callInfo)
	mock.lockSaveStatus.Unlock()
	return mock.SaveStatusFunc(ctx, resource)
}

// SaveStatusCalls gets all the calls that were made to SaveStatus.
// Check the length with:
//
//	len(mockedProcessorsService.SaveStatusCalls())
func (mock *ProcessorsServiceMock) SaveStatusCalls() []struct {
	Ctx      context.Context
	Resource dbapi.ProcessorStatus
} {
	var calls []struct {
		Ctx      context.Context
		Resource dbapi.ProcessorStatus
	}
	mock.lockSaveStatus.RLock()
	calls = mock.calls.SaveStatus
	mock.lockSaveStatus.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ProcessorsServiceMock) Update(ctx context.Context, resource *dbapi.Processor) *errors.ServiceError {
	if mock.UpdateFunc == nil {
		panic("ProcessorsServiceMock.UpdateFunc: method is nil but ProcessorsService.Update was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Resource *dbapi.Processor
	}{
		Ctx:      ctx,
		Resource: resource,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, resource)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedProcessorsService.UpdateCalls())
func (mock *ProcessorsServiceMock) UpdateCalls() []struct {
	Ctx      context.Context
	Resource *dbapi.Processor
} {
	var calls []struct {
		Ctx      context.Context
		Resource *dbapi.Processor
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
