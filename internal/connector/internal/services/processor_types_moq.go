// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/internal/connector/internal/api/dbapi"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/internal/connector/internal/config"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/api"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/errors"
	coreService "github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/services"
	"sync"
)

// Ensure, that ProcessorTypesServiceMock does implement ProcessorTypesService.
// If this is not the case, regenerate this file with moq.
var _ ProcessorTypesService = &ProcessorTypesServiceMock{}

// ProcessorTypesServiceMock is a mock implementation of ProcessorTypesService.
//
//	func TestSomethingThatUsesProcessorTypesService(t *testing.T) {
//
//		// make and configure a mocked ProcessorTypesService
//		mockedProcessorTypesService := &ProcessorTypesServiceMock{
//			CatalogEntriesReconciledFunc: func() (bool, *errors.ServiceError) {
//				panic("mock out the CatalogEntriesReconciled method")
//			},
//			CleanupDeploymentsFunc: func() *errors.ServiceError {
//				panic("mock out the CleanupDeployments method")
//			},
//			CreateFunc: func(resource *dbapi.ProcessorType) *errors.ServiceError {
//				panic("mock out the Create method")
//			},
//			DeleteOrDeprecateRemovedTypesFunc: func() *errors.ServiceError {
//				panic("mock out the DeleteOrDeprecateRemovedTypes method")
//			},
//			ForEachProcessorCatalogEntryFunc: func(f func(processorTypeId string, channel string, ccc *config.ProcessorChannelConfig) *errors.ServiceError) *errors.ServiceError {
//				panic("mock out the ForEachProcessorCatalogEntry method")
//			},
//			GetFunc: func(processorTypeId string) (*dbapi.ProcessorType, *errors.ServiceError) {
//				panic("mock out the Get method")
//			},
//			GetLatestProcessorShardMetadataFunc: func() (*dbapi.ProcessorShardMetadata, *errors.ServiceError) {
//				panic("mock out the GetLatestProcessorShardMetadata method")
//			},
//			ListFunc: func(listArgs *coreService.ListArguments) (dbapi.ProcessorTypeList, *api.PagingMeta, *errors.ServiceError) {
//				panic("mock out the List method")
//			},
//			PutProcessorShardMetadataFunc: func(processorShardMetadata *dbapi.ProcessorShardMetadata) (int64, *errors.ServiceError) {
//				panic("mock out the PutProcessorShardMetadata method")
//			},
//		}
//
//		// use mockedProcessorTypesService in code that requires ProcessorTypesService
//		// and then make assertions.
//
//	}
type ProcessorTypesServiceMock struct {
	// CatalogEntriesReconciledFunc mocks the CatalogEntriesReconciled method.
	CatalogEntriesReconciledFunc func() (bool, *errors.ServiceError)

	// CleanupDeploymentsFunc mocks the CleanupDeployments method.
	CleanupDeploymentsFunc func() *errors.ServiceError

	// CreateFunc mocks the Create method.
	CreateFunc func(resource *dbapi.ProcessorType) *errors.ServiceError

	// DeleteOrDeprecateRemovedTypesFunc mocks the DeleteOrDeprecateRemovedTypes method.
	DeleteOrDeprecateRemovedTypesFunc func() *errors.ServiceError

	// ForEachProcessorCatalogEntryFunc mocks the ForEachProcessorCatalogEntry method.
	ForEachProcessorCatalogEntryFunc func(f func(processorTypeId string, channel string, ccc *config.ProcessorChannelConfig) *errors.ServiceError) *errors.ServiceError

	// GetFunc mocks the Get method.
	GetFunc func(processorTypeId string) (*dbapi.ProcessorType, *errors.ServiceError)

	// GetLatestProcessorShardMetadataFunc mocks the GetLatestProcessorShardMetadata method.
	GetLatestProcessorShardMetadataFunc func() (*dbapi.ProcessorShardMetadata, *errors.ServiceError)

	// ListFunc mocks the List method.
	ListFunc func(listArgs *coreService.ListArguments) (dbapi.ProcessorTypeList, *api.PagingMeta, *errors.ServiceError)

	// PutProcessorShardMetadataFunc mocks the PutProcessorShardMetadata method.
	PutProcessorShardMetadataFunc func(processorShardMetadata *dbapi.ProcessorShardMetadata) (int64, *errors.ServiceError)

	// calls tracks calls to the methods.
	calls struct {
		// CatalogEntriesReconciled holds details about calls to the CatalogEntriesReconciled method.
		CatalogEntriesReconciled []struct {
		}
		// CleanupDeployments holds details about calls to the CleanupDeployments method.
		CleanupDeployments []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Resource is the resource argument value.
			Resource *dbapi.ProcessorType
		}
		// DeleteOrDeprecateRemovedTypes holds details about calls to the DeleteOrDeprecateRemovedTypes method.
		DeleteOrDeprecateRemovedTypes []struct {
		}
		// ForEachProcessorCatalogEntry holds details about calls to the ForEachProcessorCatalogEntry method.
		ForEachProcessorCatalogEntry []struct {
			// F is the f argument value.
			F func(processorTypeId string, channel string, ccc *config.ProcessorChannelConfig) *errors.ServiceError
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// ProcessorTypeId is the processorTypeId argument value.
			ProcessorTypeId string
		}
		// GetLatestProcessorShardMetadata holds details about calls to the GetLatestProcessorShardMetadata method.
		GetLatestProcessorShardMetadata []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// ListArgs is the listArgs argument value.
			ListArgs *coreService.ListArguments
		}
		// PutProcessorShardMetadata holds details about calls to the PutProcessorShardMetadata method.
		PutProcessorShardMetadata []struct {
			// ProcessorShardMetadata is the processorShardMetadata argument value.
			ProcessorShardMetadata *dbapi.ProcessorShardMetadata
		}
	}
	lockCatalogEntriesReconciled        sync.RWMutex
	lockCleanupDeployments              sync.RWMutex
	lockCreate                          sync.RWMutex
	lockDeleteOrDeprecateRemovedTypes   sync.RWMutex
	lockForEachProcessorCatalogEntry    sync.RWMutex
	lockGet                             sync.RWMutex
	lockGetLatestProcessorShardMetadata sync.RWMutex
	lockList                            sync.RWMutex
	lockPutProcessorShardMetadata       sync.RWMutex
}

// CatalogEntriesReconciled calls CatalogEntriesReconciledFunc.
func (mock *ProcessorTypesServiceMock) CatalogEntriesReconciled() (bool, *errors.ServiceError) {
	if mock.CatalogEntriesReconciledFunc == nil {
		panic("ProcessorTypesServiceMock.CatalogEntriesReconciledFunc: method is nil but ProcessorTypesService.CatalogEntriesReconciled was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCatalogEntriesReconciled.Lock()
	mock.calls.CatalogEntriesReconciled = append(mock.calls.CatalogEntriesReconciled, callInfo)
	mock.lockCatalogEntriesReconciled.Unlock()
	return mock.CatalogEntriesReconciledFunc()
}

// CatalogEntriesReconciledCalls gets all the calls that were made to CatalogEntriesReconciled.
// Check the length with:
//
//	len(mockedProcessorTypesService.CatalogEntriesReconciledCalls())
func (mock *ProcessorTypesServiceMock) CatalogEntriesReconciledCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCatalogEntriesReconciled.RLock()
	calls = mock.calls.CatalogEntriesReconciled
	mock.lockCatalogEntriesReconciled.RUnlock()
	return calls
}

// CleanupDeployments calls CleanupDeploymentsFunc.
func (mock *ProcessorTypesServiceMock) CleanupDeployments() *errors.ServiceError {
	if mock.CleanupDeploymentsFunc == nil {
		panic("ProcessorTypesServiceMock.CleanupDeploymentsFunc: method is nil but ProcessorTypesService.CleanupDeployments was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCleanupDeployments.Lock()
	mock.calls.CleanupDeployments = append(mock.calls.CleanupDeployments, callInfo)
	mock.lockCleanupDeployments.Unlock()
	return mock.CleanupDeploymentsFunc()
}

// CleanupDeploymentsCalls gets all the calls that were made to CleanupDeployments.
// Check the length with:
//
//	len(mockedProcessorTypesService.CleanupDeploymentsCalls())
func (mock *ProcessorTypesServiceMock) CleanupDeploymentsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCleanupDeployments.RLock()
	calls = mock.calls.CleanupDeployments
	mock.lockCleanupDeployments.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ProcessorTypesServiceMock) Create(resource *dbapi.ProcessorType) *errors.ServiceError {
	if mock.CreateFunc == nil {
		panic("ProcessorTypesServiceMock.CreateFunc: method is nil but ProcessorTypesService.Create was just called")
	}
	callInfo := struct {
		Resource *dbapi.ProcessorType
	}{
		Resource: resource,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(resource)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedProcessorTypesService.CreateCalls())
func (mock *ProcessorTypesServiceMock) CreateCalls() []struct {
	Resource *dbapi.ProcessorType
} {
	var calls []struct {
		Resource *dbapi.ProcessorType
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteOrDeprecateRemovedTypes calls DeleteOrDeprecateRemovedTypesFunc.
func (mock *ProcessorTypesServiceMock) DeleteOrDeprecateRemovedTypes() *errors.ServiceError {
	if mock.DeleteOrDeprecateRemovedTypesFunc == nil {
		panic("ProcessorTypesServiceMock.DeleteOrDeprecateRemovedTypesFunc: method is nil but ProcessorTypesService.DeleteOrDeprecateRemovedTypes was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDeleteOrDeprecateRemovedTypes.Lock()
	mock.calls.DeleteOrDeprecateRemovedTypes = append(mock.calls.DeleteOrDeprecateRemovedTypes, callInfo)
	mock.lockDeleteOrDeprecateRemovedTypes.Unlock()
	return mock.DeleteOrDeprecateRemovedTypesFunc()
}

// DeleteOrDeprecateRemovedTypesCalls gets all the calls that were made to DeleteOrDeprecateRemovedTypes.
// Check the length with:
//
//	len(mockedProcessorTypesService.DeleteOrDeprecateRemovedTypesCalls())
func (mock *ProcessorTypesServiceMock) DeleteOrDeprecateRemovedTypesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDeleteOrDeprecateRemovedTypes.RLock()
	calls = mock.calls.DeleteOrDeprecateRemovedTypes
	mock.lockDeleteOrDeprecateRemovedTypes.RUnlock()
	return calls
}

// ForEachProcessorCatalogEntry calls ForEachProcessorCatalogEntryFunc.
func (mock *ProcessorTypesServiceMock) ForEachProcessorCatalogEntry(f func(processorTypeId string, channel string, ccc *config.ProcessorChannelConfig) *errors.ServiceError) *errors.ServiceError {
	if mock.ForEachProcessorCatalogEntryFunc == nil {
		panic("ProcessorTypesServiceMock.ForEachProcessorCatalogEntryFunc: method is nil but ProcessorTypesService.ForEachProcessorCatalogEntry was just called")
	}
	callInfo := struct {
		F func(processorTypeId string, channel string, ccc *config.ProcessorChannelConfig) *errors.ServiceError
	}{
		F: f,
	}
	mock.lockForEachProcessorCatalogEntry.Lock()
	mock.calls.ForEachProcessorCatalogEntry = append(mock.calls.ForEachProcessorCatalogEntry, callInfo)
	mock.lockForEachProcessorCatalogEntry.Unlock()
	return mock.ForEachProcessorCatalogEntryFunc(f)
}

// ForEachProcessorCatalogEntryCalls gets all the calls that were made to ForEachProcessorCatalogEntry.
// Check the length with:
//
//	len(mockedProcessorTypesService.ForEachProcessorCatalogEntryCalls())
func (mock *ProcessorTypesServiceMock) ForEachProcessorCatalogEntryCalls() []struct {
	F func(processorTypeId string, channel string, ccc *config.ProcessorChannelConfig) *errors.ServiceError
} {
	var calls []struct {
		F func(processorTypeId string, channel string, ccc *config.ProcessorChannelConfig) *errors.ServiceError
	}
	mock.lockForEachProcessorCatalogEntry.RLock()
	calls = mock.calls.ForEachProcessorCatalogEntry
	mock.lockForEachProcessorCatalogEntry.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ProcessorTypesServiceMock) Get(processorTypeId string) (*dbapi.ProcessorType, *errors.ServiceError) {
	if mock.GetFunc == nil {
		panic("ProcessorTypesServiceMock.GetFunc: method is nil but ProcessorTypesService.Get was just called")
	}
	callInfo := struct {
		ProcessorTypeId string
	}{
		ProcessorTypeId: processorTypeId,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(processorTypeId)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedProcessorTypesService.GetCalls())
func (mock *ProcessorTypesServiceMock) GetCalls() []struct {
	ProcessorTypeId string
} {
	var calls []struct {
		ProcessorTypeId string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetLatestProcessorShardMetadata calls GetLatestProcessorShardMetadataFunc.
func (mock *ProcessorTypesServiceMock) GetLatestProcessorShardMetadata() (*dbapi.ProcessorShardMetadata, *errors.ServiceError) {
	if mock.GetLatestProcessorShardMetadataFunc == nil {
		panic("ProcessorTypesServiceMock.GetLatestProcessorShardMetadataFunc: method is nil but ProcessorTypesService.GetLatestProcessorShardMetadata was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetLatestProcessorShardMetadata.Lock()
	mock.calls.GetLatestProcessorShardMetadata = append(mock.calls.GetLatestProcessorShardMetadata, callInfo)
	mock.lockGetLatestProcessorShardMetadata.Unlock()
	return mock.GetLatestProcessorShardMetadataFunc()
}

// GetLatestProcessorShardMetadataCalls gets all the calls that were made to GetLatestProcessorShardMetadata.
// Check the length with:
//
//	len(mockedProcessorTypesService.GetLatestProcessorShardMetadataCalls())
func (mock *ProcessorTypesServiceMock) GetLatestProcessorShardMetadataCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetLatestProcessorShardMetadata.RLock()
	calls = mock.calls.GetLatestProcessorShardMetadata
	mock.lockGetLatestProcessorShardMetadata.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ProcessorTypesServiceMock) List(listArgs *coreService.ListArguments) (dbapi.ProcessorTypeList, *api.PagingMeta, *errors.ServiceError) {
	if mock.ListFunc == nil {
		panic("ProcessorTypesServiceMock.ListFunc: method is nil but ProcessorTypesService.List was just called")
	}
	callInfo := struct {
		ListArgs *coreService.ListArguments
	}{
		ListArgs: listArgs,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(listArgs)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedProcessorTypesService.ListCalls())
func (mock *ProcessorTypesServiceMock) ListCalls() []struct {
	ListArgs *coreService.ListArguments
} {
	var calls []struct {
		ListArgs *coreService.ListArguments
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// PutProcessorShardMetadata calls PutProcessorShardMetadataFunc.
func (mock *ProcessorTypesServiceMock) PutProcessorShardMetadata(processorShardMetadata *dbapi.ProcessorShardMetadata) (int64, *errors.ServiceError) {
	if mock.PutProcessorShardMetadataFunc == nil {
		panic("ProcessorTypesServiceMock.PutProcessorShardMetadataFunc: method is nil but ProcessorTypesService.PutProcessorShardMetadata was just called")
	}
	callInfo := struct {
		ProcessorShardMetadata *dbapi.ProcessorShardMetadata
	}{
		ProcessorShardMetadata: processorShardMetadata,
	}
	mock.lockPutProcessorShardMetadata.Lock()
	mock.calls.PutProcessorShardMetadata = append(mock.calls.PutProcessorShardMetadata, callInfo)
	mock.lockPutProcessorShardMetadata.Unlock()
	return mock.PutProcessorShardMetadataFunc(processorShardMetadata)
}

// PutProcessorShardMetadataCalls gets all the calls that were made to PutProcessorShardMetadata.
// Check the length with:
//
//	len(mockedProcessorTypesService.PutProcessorShardMetadataCalls())
func (mock *ProcessorTypesServiceMock) PutProcessorShardMetadataCalls() []struct {
	ProcessorShardMetadata *dbapi.ProcessorShardMetadata
} {
	var calls []struct {
		ProcessorShardMetadata *dbapi.ProcessorShardMetadata
	}
	mock.lockPutProcessorShardMetadata.RLock()
	calls = mock.calls.PutProcessorShardMetadata
	mock.lockPutProcessorShardMetadata.RUnlock()
	return calls
}
