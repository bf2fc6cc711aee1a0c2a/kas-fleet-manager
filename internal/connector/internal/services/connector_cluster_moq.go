// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"context"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/internal/connector/internal/api/dbapi"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/api"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/errors"
	coreService "github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/services"
	"sync"
)

// Ensure, that ConnectorClusterServiceMock does implement ConnectorClusterService.
// If this is not the case, regenerate this file with moq.
var _ ConnectorClusterService = &ConnectorClusterServiceMock{}

// ConnectorClusterServiceMock is a mock implementation of ConnectorClusterService.
//
//	func TestSomethingThatUsesConnectorClusterService(t *testing.T) {
//
//		// make and configure a mocked ConnectorClusterService
//		mockedConnectorClusterService := &ConnectorClusterServiceMock{
//			CleanupDeploymentsFunc: func() *errors.ServiceError {
//				panic("mock out the CleanupDeployments method")
//			},
//			CreateFunc: func(ctx context.Context, resource *dbapi.ConnectorCluster) *errors.ServiceError {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(ctx context.Context, id string) *errors.ServiceError {
//				panic("mock out the Delete method")
//			},
//			FindAvailableNamespaceFunc: func(owner string, orgId string, namespaceId *string) (*dbapi.ConnectorNamespace, *errors.ServiceError) {
//				panic("mock out the FindAvailableNamespace method")
//			},
//			GetFunc: func(ctx context.Context, id string) (*dbapi.ConnectorCluster, *errors.ServiceError) {
//				panic("mock out the Get method")
//			},
//			GetClusterIdsFunc: func(query string, args ...interface{}) ([]string, error) {
//				panic("mock out the GetClusterIds method")
//			},
//			GetClusterOrgFunc: func(id string) (string, *errors.ServiceError) {
//				panic("mock out the GetClusterOrg method")
//			},
//			GetConnectorClusterStatusFunc: func(ctx context.Context, id string) (dbapi.ConnectorClusterStatus, *errors.ServiceError) {
//				panic("mock out the GetConnectorClusterStatus method")
//			},
//			GetDeploymentFunc: func(ctx context.Context, id string) (dbapi.ConnectorDeployment, *errors.ServiceError) {
//				panic("mock out the GetDeployment method")
//			},
//			GetDeploymentByConnectorIdFunc: func(ctx context.Context, connectorID string) (dbapi.ConnectorDeployment, *errors.ServiceError) {
//				panic("mock out the GetDeploymentByConnectorId method")
//			},
//			GetProcessorDeploymentFunc: func(ctx context.Context, id string) (*dbapi.ProcessorDeployment, *errors.ServiceError) {
//				panic("mock out the GetProcessorDeployment method")
//			},
//			ListFunc: func(ctx context.Context, listArgs *coreService.ListArguments) (dbapi.ConnectorClusterList, *api.PagingMeta, *errors.ServiceError) {
//				panic("mock out the List method")
//			},
//			ListConnectorDeploymentsFunc: func(ctx context.Context, clusterId string, filterChannelUpdates bool, filterOperatorUpdates bool, includeDanglingDeploymentsOnly bool, listArgs *coreService.ListArguments, gtVersion int64) (dbapi.ConnectorDeploymentList, *api.PagingMeta, *errors.ServiceError) {
//				panic("mock out the ListConnectorDeployments method")
//			},
//			ListProcessorDeploymentsFunc: func(ctx context.Context, clusterId string, filterChannelUpdates bool, filterOperatorUpdates bool, includeDanglingDeploymentsOnly bool, listArgs *coreService.ListArguments, gtVersion int64) (dbapi.ProcessorDeploymentList, *api.PagingMeta, *errors.ServiceError) {
//				panic("mock out the ListProcessorDeployments method")
//			},
//			ReconcileEmptyDeletingClustersFunc: func(ctx context.Context, clusterIds []string) (int, []*errors.ServiceError) {
//				panic("mock out the ReconcileEmptyDeletingClusters method")
//			},
//			ReconcileNonEmptyDeletingClustersFunc: func(ctx context.Context, clusterIds []string) (int, []*errors.ServiceError) {
//				panic("mock out the ReconcileNonEmptyDeletingClusters method")
//			},
//			ResetServiceAccountFunc: func(ctx context.Context, cluster *dbapi.ConnectorCluster) *errors.ServiceError {
//				panic("mock out the ResetServiceAccount method")
//			},
//			SaveDeploymentFunc: func(ctx context.Context, resource *dbapi.ConnectorDeployment) *errors.ServiceError {
//				panic("mock out the SaveDeployment method")
//			},
//			UpdateFunc: func(ctx context.Context, resource *dbapi.ConnectorCluster) *errors.ServiceError {
//				panic("mock out the Update method")
//			},
//			UpdateConnectorClusterStatusFunc: func(ctx context.Context, id string, status dbapi.ConnectorClusterStatus) *errors.ServiceError {
//				panic("mock out the UpdateConnectorClusterStatus method")
//			},
//			UpdateConnectorDeploymentStatusFunc: func(ctx context.Context, status dbapi.ConnectorDeploymentStatus) *errors.ServiceError {
//				panic("mock out the UpdateConnectorDeploymentStatus method")
//			},
//			UpdateDeploymentFunc: func(resource *dbapi.ConnectorDeployment) *errors.ServiceError {
//				panic("mock out the UpdateDeployment method")
//			},
//			UpdateProcessorDeploymentStatusFunc: func(ctx context.Context, status dbapi.ProcessorDeploymentStatus) *errors.ServiceError {
//				panic("mock out the UpdateProcessorDeploymentStatus method")
//			},
//		}
//
//		// use mockedConnectorClusterService in code that requires ConnectorClusterService
//		// and then make assertions.
//
//	}
type ConnectorClusterServiceMock struct {
	// CleanupDeploymentsFunc mocks the CleanupDeployments method.
	CleanupDeploymentsFunc func() *errors.ServiceError

	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, resource *dbapi.ConnectorCluster) *errors.ServiceError

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id string) *errors.ServiceError

	// FindAvailableNamespaceFunc mocks the FindAvailableNamespace method.
	FindAvailableNamespaceFunc func(owner string, orgId string, namespaceId *string) (*dbapi.ConnectorNamespace, *errors.ServiceError)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id string) (*dbapi.ConnectorCluster, *errors.ServiceError)

	// GetClusterIdsFunc mocks the GetClusterIds method.
	GetClusterIdsFunc func(query string, args ...interface{}) ([]string, error)

	// GetClusterOrgFunc mocks the GetClusterOrg method.
	GetClusterOrgFunc func(id string) (string, *errors.ServiceError)

	// GetConnectorClusterStatusFunc mocks the GetConnectorClusterStatus method.
	GetConnectorClusterStatusFunc func(ctx context.Context, id string) (dbapi.ConnectorClusterStatus, *errors.ServiceError)

	// GetDeploymentFunc mocks the GetDeployment method.
	GetDeploymentFunc func(ctx context.Context, id string) (dbapi.ConnectorDeployment, *errors.ServiceError)

	// GetDeploymentByConnectorIdFunc mocks the GetDeploymentByConnectorId method.
	GetDeploymentByConnectorIdFunc func(ctx context.Context, connectorID string) (dbapi.ConnectorDeployment, *errors.ServiceError)

	// GetProcessorDeploymentFunc mocks the GetProcessorDeployment method.
	GetProcessorDeploymentFunc func(ctx context.Context, id string) (*dbapi.ProcessorDeployment, *errors.ServiceError)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, listArgs *coreService.ListArguments) (dbapi.ConnectorClusterList, *api.PagingMeta, *errors.ServiceError)

	// ListConnectorDeploymentsFunc mocks the ListConnectorDeployments method.
	ListConnectorDeploymentsFunc func(ctx context.Context, clusterId string, filterChannelUpdates bool, filterOperatorUpdates bool, includeDanglingDeploymentsOnly bool, listArgs *coreService.ListArguments, gtVersion int64) (dbapi.ConnectorDeploymentList, *api.PagingMeta, *errors.ServiceError)

	// ListProcessorDeploymentsFunc mocks the ListProcessorDeployments method.
	ListProcessorDeploymentsFunc func(ctx context.Context, clusterId string, filterChannelUpdates bool, filterOperatorUpdates bool, includeDanglingDeploymentsOnly bool, listArgs *coreService.ListArguments, gtVersion int64) (dbapi.ProcessorDeploymentList, *api.PagingMeta, *errors.ServiceError)

	// ReconcileEmptyDeletingClustersFunc mocks the ReconcileEmptyDeletingClusters method.
	ReconcileEmptyDeletingClustersFunc func(ctx context.Context, clusterIds []string) (int, []*errors.ServiceError)

	// ReconcileNonEmptyDeletingClustersFunc mocks the ReconcileNonEmptyDeletingClusters method.
	ReconcileNonEmptyDeletingClustersFunc func(ctx context.Context, clusterIds []string) (int, []*errors.ServiceError)

	// ResetServiceAccountFunc mocks the ResetServiceAccount method.
	ResetServiceAccountFunc func(ctx context.Context, cluster *dbapi.ConnectorCluster) *errors.ServiceError

	// SaveDeploymentFunc mocks the SaveDeployment method.
	SaveDeploymentFunc func(ctx context.Context, resource *dbapi.ConnectorDeployment) *errors.ServiceError

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, resource *dbapi.ConnectorCluster) *errors.ServiceError

	// UpdateConnectorClusterStatusFunc mocks the UpdateConnectorClusterStatus method.
	UpdateConnectorClusterStatusFunc func(ctx context.Context, id string, status dbapi.ConnectorClusterStatus) *errors.ServiceError

	// UpdateConnectorDeploymentStatusFunc mocks the UpdateConnectorDeploymentStatus method.
	UpdateConnectorDeploymentStatusFunc func(ctx context.Context, status dbapi.ConnectorDeploymentStatus) *errors.ServiceError

	// UpdateDeploymentFunc mocks the UpdateDeployment method.
	UpdateDeploymentFunc func(resource *dbapi.ConnectorDeployment) *errors.ServiceError

	// UpdateProcessorDeploymentStatusFunc mocks the UpdateProcessorDeploymentStatus method.
	UpdateProcessorDeploymentStatusFunc func(ctx context.Context, status dbapi.ProcessorDeploymentStatus) *errors.ServiceError

	// calls tracks calls to the methods.
	calls struct {
		// CleanupDeployments holds details about calls to the CleanupDeployments method.
		CleanupDeployments []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Resource is the resource argument value.
			Resource *dbapi.ConnectorCluster
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// FindAvailableNamespace holds details about calls to the FindAvailableNamespace method.
		FindAvailableNamespace []struct {
			// Owner is the owner argument value.
			Owner string
			// OrgId is the orgId argument value.
			OrgId string
			// NamespaceId is the namespaceId argument value.
			NamespaceId *string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetClusterIds holds details about calls to the GetClusterIds method.
		GetClusterIds []struct {
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []interface{}
		}
		// GetClusterOrg holds details about calls to the GetClusterOrg method.
		GetClusterOrg []struct {
			// ID is the id argument value.
			ID string
		}
		// GetConnectorClusterStatus holds details about calls to the GetConnectorClusterStatus method.
		GetConnectorClusterStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetDeployment holds details about calls to the GetDeployment method.
		GetDeployment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetDeploymentByConnectorId holds details about calls to the GetDeploymentByConnectorId method.
		GetDeploymentByConnectorId []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConnectorID is the connectorID argument value.
			ConnectorID string
		}
		// GetProcessorDeployment holds details about calls to the GetProcessorDeployment method.
		GetProcessorDeployment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ListArgs is the listArgs argument value.
			ListArgs *coreService.ListArguments
		}
		// ListConnectorDeployments holds details about calls to the ListConnectorDeployments method.
		ListConnectorDeployments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClusterId is the clusterId argument value.
			ClusterId string
			// FilterChannelUpdates is the filterChannelUpdates argument value.
			FilterChannelUpdates bool
			// FilterOperatorUpdates is the filterOperatorUpdates argument value.
			FilterOperatorUpdates bool
			// IncludeDanglingDeploymentsOnly is the includeDanglingDeploymentsOnly argument value.
			IncludeDanglingDeploymentsOnly bool
			// ListArgs is the listArgs argument value.
			ListArgs *coreService.ListArguments
			// GtVersion is the gtVersion argument value.
			GtVersion int64
		}
		// ListProcessorDeployments holds details about calls to the ListProcessorDeployments method.
		ListProcessorDeployments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClusterId is the clusterId argument value.
			ClusterId string
			// FilterChannelUpdates is the filterChannelUpdates argument value.
			FilterChannelUpdates bool
			// FilterOperatorUpdates is the filterOperatorUpdates argument value.
			FilterOperatorUpdates bool
			// IncludeDanglingDeploymentsOnly is the includeDanglingDeploymentsOnly argument value.
			IncludeDanglingDeploymentsOnly bool
			// ListArgs is the listArgs argument value.
			ListArgs *coreService.ListArguments
			// GtVersion is the gtVersion argument value.
			GtVersion int64
		}
		// ReconcileEmptyDeletingClusters holds details about calls to the ReconcileEmptyDeletingClusters method.
		ReconcileEmptyDeletingClusters []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClusterIds is the clusterIds argument value.
			ClusterIds []string
		}
		// ReconcileNonEmptyDeletingClusters holds details about calls to the ReconcileNonEmptyDeletingClusters method.
		ReconcileNonEmptyDeletingClusters []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClusterIds is the clusterIds argument value.
			ClusterIds []string
		}
		// ResetServiceAccount holds details about calls to the ResetServiceAccount method.
		ResetServiceAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cluster is the cluster argument value.
			Cluster *dbapi.ConnectorCluster
		}
		// SaveDeployment holds details about calls to the SaveDeployment method.
		SaveDeployment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Resource is the resource argument value.
			Resource *dbapi.ConnectorDeployment
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Resource is the resource argument value.
			Resource *dbapi.ConnectorCluster
		}
		// UpdateConnectorClusterStatus holds details about calls to the UpdateConnectorClusterStatus method.
		UpdateConnectorClusterStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Status is the status argument value.
			Status dbapi.ConnectorClusterStatus
		}
		// UpdateConnectorDeploymentStatus holds details about calls to the UpdateConnectorDeploymentStatus method.
		UpdateConnectorDeploymentStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Status is the status argument value.
			Status dbapi.ConnectorDeploymentStatus
		}
		// UpdateDeployment holds details about calls to the UpdateDeployment method.
		UpdateDeployment []struct {
			// Resource is the resource argument value.
			Resource *dbapi.ConnectorDeployment
		}
		// UpdateProcessorDeploymentStatus holds details about calls to the UpdateProcessorDeploymentStatus method.
		UpdateProcessorDeploymentStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Status is the status argument value.
			Status dbapi.ProcessorDeploymentStatus
		}
	}
	lockCleanupDeployments                sync.RWMutex
	lockCreate                            sync.RWMutex
	lockDelete                            sync.RWMutex
	lockFindAvailableNamespace            sync.RWMutex
	lockGet                               sync.RWMutex
	lockGetClusterIds                     sync.RWMutex
	lockGetClusterOrg                     sync.RWMutex
	lockGetConnectorClusterStatus         sync.RWMutex
	lockGetDeployment                     sync.RWMutex
	lockGetDeploymentByConnectorId        sync.RWMutex
	lockGetProcessorDeployment            sync.RWMutex
	lockList                              sync.RWMutex
	lockListConnectorDeployments          sync.RWMutex
	lockListProcessorDeployments          sync.RWMutex
	lockReconcileEmptyDeletingClusters    sync.RWMutex
	lockReconcileNonEmptyDeletingClusters sync.RWMutex
	lockResetServiceAccount               sync.RWMutex
	lockSaveDeployment                    sync.RWMutex
	lockUpdate                            sync.RWMutex
	lockUpdateConnectorClusterStatus      sync.RWMutex
	lockUpdateConnectorDeploymentStatus   sync.RWMutex
	lockUpdateDeployment                  sync.RWMutex
	lockUpdateProcessorDeploymentStatus   sync.RWMutex
}

// CleanupDeployments calls CleanupDeploymentsFunc.
func (mock *ConnectorClusterServiceMock) CleanupDeployments() *errors.ServiceError {
	if mock.CleanupDeploymentsFunc == nil {
		panic("ConnectorClusterServiceMock.CleanupDeploymentsFunc: method is nil but ConnectorClusterService.CleanupDeployments was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCleanupDeployments.Lock()
	mock.calls.CleanupDeployments = append(mock.calls.CleanupDeployments, callInfo)
	mock.lockCleanupDeployments.Unlock()
	return mock.CleanupDeploymentsFunc()
}

// CleanupDeploymentsCalls gets all the calls that were made to CleanupDeployments.
// Check the length with:
//
//	len(mockedConnectorClusterService.CleanupDeploymentsCalls())
func (mock *ConnectorClusterServiceMock) CleanupDeploymentsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCleanupDeployments.RLock()
	calls = mock.calls.CleanupDeployments
	mock.lockCleanupDeployments.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ConnectorClusterServiceMock) Create(ctx context.Context, resource *dbapi.ConnectorCluster) *errors.ServiceError {
	if mock.CreateFunc == nil {
		panic("ConnectorClusterServiceMock.CreateFunc: method is nil but ConnectorClusterService.Create was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Resource *dbapi.ConnectorCluster
	}{
		Ctx:      ctx,
		Resource: resource,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, resource)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedConnectorClusterService.CreateCalls())
func (mock *ConnectorClusterServiceMock) CreateCalls() []struct {
	Ctx      context.Context
	Resource *dbapi.ConnectorCluster
} {
	var calls []struct {
		Ctx      context.Context
		Resource *dbapi.ConnectorCluster
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ConnectorClusterServiceMock) Delete(ctx context.Context, id string) *errors.ServiceError {
	if mock.DeleteFunc == nil {
		panic("ConnectorClusterServiceMock.DeleteFunc: method is nil but ConnectorClusterService.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedConnectorClusterService.DeleteCalls())
func (mock *ConnectorClusterServiceMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// FindAvailableNamespace calls FindAvailableNamespaceFunc.
func (mock *ConnectorClusterServiceMock) FindAvailableNamespace(owner string, orgId string, namespaceId *string) (*dbapi.ConnectorNamespace, *errors.ServiceError) {
	if mock.FindAvailableNamespaceFunc == nil {
		panic("ConnectorClusterServiceMock.FindAvailableNamespaceFunc: method is nil but ConnectorClusterService.FindAvailableNamespace was just called")
	}
	callInfo := struct {
		Owner       string
		OrgId       string
		NamespaceId *string
	}{
		Owner:       owner,
		OrgId:       orgId,
		NamespaceId: namespaceId,
	}
	mock.lockFindAvailableNamespace.Lock()
	mock.calls.FindAvailableNamespace = append(mock.calls.FindAvailableNamespace, callInfo)
	mock.lockFindAvailableNamespace.Unlock()
	return mock.FindAvailableNamespaceFunc(owner, orgId, namespaceId)
}

// FindAvailableNamespaceCalls gets all the calls that were made to FindAvailableNamespace.
// Check the length with:
//
//	len(mockedConnectorClusterService.FindAvailableNamespaceCalls())
func (mock *ConnectorClusterServiceMock) FindAvailableNamespaceCalls() []struct {
	Owner       string
	OrgId       string
	NamespaceId *string
} {
	var calls []struct {
		Owner       string
		OrgId       string
		NamespaceId *string
	}
	mock.lockFindAvailableNamespace.RLock()
	calls = mock.calls.FindAvailableNamespace
	mock.lockFindAvailableNamespace.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ConnectorClusterServiceMock) Get(ctx context.Context, id string) (*dbapi.ConnectorCluster, *errors.ServiceError) {
	if mock.GetFunc == nil {
		panic("ConnectorClusterServiceMock.GetFunc: method is nil but ConnectorClusterService.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedConnectorClusterService.GetCalls())
func (mock *ConnectorClusterServiceMock) GetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetClusterIds calls GetClusterIdsFunc.
func (mock *ConnectorClusterServiceMock) GetClusterIds(query string, args ...interface{}) ([]string, error) {
	if mock.GetClusterIdsFunc == nil {
		panic("ConnectorClusterServiceMock.GetClusterIdsFunc: method is nil but ConnectorClusterService.GetClusterIds was just called")
	}
	callInfo := struct {
		Query string
		Args  []interface{}
	}{
		Query: query,
		Args:  args,
	}
	mock.lockGetClusterIds.Lock()
	mock.calls.GetClusterIds = append(mock.calls.GetClusterIds, callInfo)
	mock.lockGetClusterIds.Unlock()
	return mock.GetClusterIdsFunc(query, args...)
}

// GetClusterIdsCalls gets all the calls that were made to GetClusterIds.
// Check the length with:
//
//	len(mockedConnectorClusterService.GetClusterIdsCalls())
func (mock *ConnectorClusterServiceMock) GetClusterIdsCalls() []struct {
	Query string
	Args  []interface{}
} {
	var calls []struct {
		Query string
		Args  []interface{}
	}
	mock.lockGetClusterIds.RLock()
	calls = mock.calls.GetClusterIds
	mock.lockGetClusterIds.RUnlock()
	return calls
}

// GetClusterOrg calls GetClusterOrgFunc.
func (mock *ConnectorClusterServiceMock) GetClusterOrg(id string) (string, *errors.ServiceError) {
	if mock.GetClusterOrgFunc == nil {
		panic("ConnectorClusterServiceMock.GetClusterOrgFunc: method is nil but ConnectorClusterService.GetClusterOrg was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetClusterOrg.Lock()
	mock.calls.GetClusterOrg = append(mock.calls.GetClusterOrg, callInfo)
	mock.lockGetClusterOrg.Unlock()
	return mock.GetClusterOrgFunc(id)
}

// GetClusterOrgCalls gets all the calls that were made to GetClusterOrg.
// Check the length with:
//
//	len(mockedConnectorClusterService.GetClusterOrgCalls())
func (mock *ConnectorClusterServiceMock) GetClusterOrgCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetClusterOrg.RLock()
	calls = mock.calls.GetClusterOrg
	mock.lockGetClusterOrg.RUnlock()
	return calls
}

// GetConnectorClusterStatus calls GetConnectorClusterStatusFunc.
func (mock *ConnectorClusterServiceMock) GetConnectorClusterStatus(ctx context.Context, id string) (dbapi.ConnectorClusterStatus, *errors.ServiceError) {
	if mock.GetConnectorClusterStatusFunc == nil {
		panic("ConnectorClusterServiceMock.GetConnectorClusterStatusFunc: method is nil but ConnectorClusterService.GetConnectorClusterStatus was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetConnectorClusterStatus.Lock()
	mock.calls.GetConnectorClusterStatus = append(mock.calls.GetConnectorClusterStatus, callInfo)
	mock.lockGetConnectorClusterStatus.Unlock()
	return mock.GetConnectorClusterStatusFunc(ctx, id)
}

// GetConnectorClusterStatusCalls gets all the calls that were made to GetConnectorClusterStatus.
// Check the length with:
//
//	len(mockedConnectorClusterService.GetConnectorClusterStatusCalls())
func (mock *ConnectorClusterServiceMock) GetConnectorClusterStatusCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetConnectorClusterStatus.RLock()
	calls = mock.calls.GetConnectorClusterStatus
	mock.lockGetConnectorClusterStatus.RUnlock()
	return calls
}

// GetDeployment calls GetDeploymentFunc.
func (mock *ConnectorClusterServiceMock) GetDeployment(ctx context.Context, id string) (dbapi.ConnectorDeployment, *errors.ServiceError) {
	if mock.GetDeploymentFunc == nil {
		panic("ConnectorClusterServiceMock.GetDeploymentFunc: method is nil but ConnectorClusterService.GetDeployment was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetDeployment.Lock()
	mock.calls.GetDeployment = append(mock.calls.GetDeployment, callInfo)
	mock.lockGetDeployment.Unlock()
	return mock.GetDeploymentFunc(ctx, id)
}

// GetDeploymentCalls gets all the calls that were made to GetDeployment.
// Check the length with:
//
//	len(mockedConnectorClusterService.GetDeploymentCalls())
func (mock *ConnectorClusterServiceMock) GetDeploymentCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetDeployment.RLock()
	calls = mock.calls.GetDeployment
	mock.lockGetDeployment.RUnlock()
	return calls
}

// GetDeploymentByConnectorId calls GetDeploymentByConnectorIdFunc.
func (mock *ConnectorClusterServiceMock) GetDeploymentByConnectorId(ctx context.Context, connectorID string) (dbapi.ConnectorDeployment, *errors.ServiceError) {
	if mock.GetDeploymentByConnectorIdFunc == nil {
		panic("ConnectorClusterServiceMock.GetDeploymentByConnectorIdFunc: method is nil but ConnectorClusterService.GetDeploymentByConnectorId was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ConnectorID string
	}{
		Ctx:         ctx,
		ConnectorID: connectorID,
	}
	mock.lockGetDeploymentByConnectorId.Lock()
	mock.calls.GetDeploymentByConnectorId = append(mock.calls.GetDeploymentByConnectorId, callInfo)
	mock.lockGetDeploymentByConnectorId.Unlock()
	return mock.GetDeploymentByConnectorIdFunc(ctx, connectorID)
}

// GetDeploymentByConnectorIdCalls gets all the calls that were made to GetDeploymentByConnectorId.
// Check the length with:
//
//	len(mockedConnectorClusterService.GetDeploymentByConnectorIdCalls())
func (mock *ConnectorClusterServiceMock) GetDeploymentByConnectorIdCalls() []struct {
	Ctx         context.Context
	ConnectorID string
} {
	var calls []struct {
		Ctx         context.Context
		ConnectorID string
	}
	mock.lockGetDeploymentByConnectorId.RLock()
	calls = mock.calls.GetDeploymentByConnectorId
	mock.lockGetDeploymentByConnectorId.RUnlock()
	return calls
}

// GetProcessorDeployment calls GetProcessorDeploymentFunc.
func (mock *ConnectorClusterServiceMock) GetProcessorDeployment(ctx context.Context, id string) (*dbapi.ProcessorDeployment, *errors.ServiceError) {
	if mock.GetProcessorDeploymentFunc == nil {
		panic("ConnectorClusterServiceMock.GetProcessorDeploymentFunc: method is nil but ConnectorClusterService.GetProcessorDeployment was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetProcessorDeployment.Lock()
	mock.calls.GetProcessorDeployment = append(mock.calls.GetProcessorDeployment, callInfo)
	mock.lockGetProcessorDeployment.Unlock()
	return mock.GetProcessorDeploymentFunc(ctx, id)
}

// GetProcessorDeploymentCalls gets all the calls that were made to GetProcessorDeployment.
// Check the length with:
//
//	len(mockedConnectorClusterService.GetProcessorDeploymentCalls())
func (mock *ConnectorClusterServiceMock) GetProcessorDeploymentCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetProcessorDeployment.RLock()
	calls = mock.calls.GetProcessorDeployment
	mock.lockGetProcessorDeployment.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ConnectorClusterServiceMock) List(ctx context.Context, listArgs *coreService.ListArguments) (dbapi.ConnectorClusterList, *api.PagingMeta, *errors.ServiceError) {
	if mock.ListFunc == nil {
		panic("ConnectorClusterServiceMock.ListFunc: method is nil but ConnectorClusterService.List was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ListArgs *coreService.ListArguments
	}{
		Ctx:      ctx,
		ListArgs: listArgs,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, listArgs)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedConnectorClusterService.ListCalls())
func (mock *ConnectorClusterServiceMock) ListCalls() []struct {
	Ctx      context.Context
	ListArgs *coreService.ListArguments
} {
	var calls []struct {
		Ctx      context.Context
		ListArgs *coreService.ListArguments
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ListConnectorDeployments calls ListConnectorDeploymentsFunc.
func (mock *ConnectorClusterServiceMock) ListConnectorDeployments(ctx context.Context, clusterId string, filterChannelUpdates bool, filterOperatorUpdates bool, includeDanglingDeploymentsOnly bool, listArgs *coreService.ListArguments, gtVersion int64) (dbapi.ConnectorDeploymentList, *api.PagingMeta, *errors.ServiceError) {
	if mock.ListConnectorDeploymentsFunc == nil {
		panic("ConnectorClusterServiceMock.ListConnectorDeploymentsFunc: method is nil but ConnectorClusterService.ListConnectorDeployments was just called")
	}
	callInfo := struct {
		Ctx                            context.Context
		ClusterId                      string
		FilterChannelUpdates           bool
		FilterOperatorUpdates          bool
		IncludeDanglingDeploymentsOnly bool
		ListArgs                       *coreService.ListArguments
		GtVersion                      int64
	}{
		Ctx:                            ctx,
		ClusterId:                      clusterId,
		FilterChannelUpdates:           filterChannelUpdates,
		FilterOperatorUpdates:          filterOperatorUpdates,
		IncludeDanglingDeploymentsOnly: includeDanglingDeploymentsOnly,
		ListArgs:                       listArgs,
		GtVersion:                      gtVersion,
	}
	mock.lockListConnectorDeployments.Lock()
	mock.calls.ListConnectorDeployments = append(mock.calls.ListConnectorDeployments, callInfo)
	mock.lockListConnectorDeployments.Unlock()
	return mock.ListConnectorDeploymentsFunc(ctx, clusterId, filterChannelUpdates, filterOperatorUpdates, includeDanglingDeploymentsOnly, listArgs, gtVersion)
}

// ListConnectorDeploymentsCalls gets all the calls that were made to ListConnectorDeployments.
// Check the length with:
//
//	len(mockedConnectorClusterService.ListConnectorDeploymentsCalls())
func (mock *ConnectorClusterServiceMock) ListConnectorDeploymentsCalls() []struct {
	Ctx                            context.Context
	ClusterId                      string
	FilterChannelUpdates           bool
	FilterOperatorUpdates          bool
	IncludeDanglingDeploymentsOnly bool
	ListArgs                       *coreService.ListArguments
	GtVersion                      int64
} {
	var calls []struct {
		Ctx                            context.Context
		ClusterId                      string
		FilterChannelUpdates           bool
		FilterOperatorUpdates          bool
		IncludeDanglingDeploymentsOnly bool
		ListArgs                       *coreService.ListArguments
		GtVersion                      int64
	}
	mock.lockListConnectorDeployments.RLock()
	calls = mock.calls.ListConnectorDeployments
	mock.lockListConnectorDeployments.RUnlock()
	return calls
}

// ListProcessorDeployments calls ListProcessorDeploymentsFunc.
func (mock *ConnectorClusterServiceMock) ListProcessorDeployments(ctx context.Context, clusterId string, filterChannelUpdates bool, filterOperatorUpdates bool, includeDanglingDeploymentsOnly bool, listArgs *coreService.ListArguments, gtVersion int64) (dbapi.ProcessorDeploymentList, *api.PagingMeta, *errors.ServiceError) {
	if mock.ListProcessorDeploymentsFunc == nil {
		panic("ConnectorClusterServiceMock.ListProcessorDeploymentsFunc: method is nil but ConnectorClusterService.ListProcessorDeployments was just called")
	}
	callInfo := struct {
		Ctx                            context.Context
		ClusterId                      string
		FilterChannelUpdates           bool
		FilterOperatorUpdates          bool
		IncludeDanglingDeploymentsOnly bool
		ListArgs                       *coreService.ListArguments
		GtVersion                      int64
	}{
		Ctx:                            ctx,
		ClusterId:                      clusterId,
		FilterChannelUpdates:           filterChannelUpdates,
		FilterOperatorUpdates:          filterOperatorUpdates,
		IncludeDanglingDeploymentsOnly: includeDanglingDeploymentsOnly,
		ListArgs:                       listArgs,
		GtVersion:                      gtVersion,
	}
	mock.lockListProcessorDeployments.Lock()
	mock.calls.ListProcessorDeployments = append(mock.calls.ListProcessorDeployments, callInfo)
	mock.lockListProcessorDeployments.Unlock()
	return mock.ListProcessorDeploymentsFunc(ctx, clusterId, filterChannelUpdates, filterOperatorUpdates, includeDanglingDeploymentsOnly, listArgs, gtVersion)
}

// ListProcessorDeploymentsCalls gets all the calls that were made to ListProcessorDeployments.
// Check the length with:
//
//	len(mockedConnectorClusterService.ListProcessorDeploymentsCalls())
func (mock *ConnectorClusterServiceMock) ListProcessorDeploymentsCalls() []struct {
	Ctx                            context.Context
	ClusterId                      string
	FilterChannelUpdates           bool
	FilterOperatorUpdates          bool
	IncludeDanglingDeploymentsOnly bool
	ListArgs                       *coreService.ListArguments
	GtVersion                      int64
} {
	var calls []struct {
		Ctx                            context.Context
		ClusterId                      string
		FilterChannelUpdates           bool
		FilterOperatorUpdates          bool
		IncludeDanglingDeploymentsOnly bool
		ListArgs                       *coreService.ListArguments
		GtVersion                      int64
	}
	mock.lockListProcessorDeployments.RLock()
	calls = mock.calls.ListProcessorDeployments
	mock.lockListProcessorDeployments.RUnlock()
	return calls
}

// ReconcileEmptyDeletingClusters calls ReconcileEmptyDeletingClustersFunc.
func (mock *ConnectorClusterServiceMock) ReconcileEmptyDeletingClusters(ctx context.Context, clusterIds []string) (int, []*errors.ServiceError) {
	if mock.ReconcileEmptyDeletingClustersFunc == nil {
		panic("ConnectorClusterServiceMock.ReconcileEmptyDeletingClustersFunc: method is nil but ConnectorClusterService.ReconcileEmptyDeletingClusters was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ClusterIds []string
	}{
		Ctx:        ctx,
		ClusterIds: clusterIds,
	}
	mock.lockReconcileEmptyDeletingClusters.Lock()
	mock.calls.ReconcileEmptyDeletingClusters = append(mock.calls.ReconcileEmptyDeletingClusters, callInfo)
	mock.lockReconcileEmptyDeletingClusters.Unlock()
	return mock.ReconcileEmptyDeletingClustersFunc(ctx, clusterIds)
}

// ReconcileEmptyDeletingClustersCalls gets all the calls that were made to ReconcileEmptyDeletingClusters.
// Check the length with:
//
//	len(mockedConnectorClusterService.ReconcileEmptyDeletingClustersCalls())
func (mock *ConnectorClusterServiceMock) ReconcileEmptyDeletingClustersCalls() []struct {
	Ctx        context.Context
	ClusterIds []string
} {
	var calls []struct {
		Ctx        context.Context
		ClusterIds []string
	}
	mock.lockReconcileEmptyDeletingClusters.RLock()
	calls = mock.calls.ReconcileEmptyDeletingClusters
	mock.lockReconcileEmptyDeletingClusters.RUnlock()
	return calls
}

// ReconcileNonEmptyDeletingClusters calls ReconcileNonEmptyDeletingClustersFunc.
func (mock *ConnectorClusterServiceMock) ReconcileNonEmptyDeletingClusters(ctx context.Context, clusterIds []string) (int, []*errors.ServiceError) {
	if mock.ReconcileNonEmptyDeletingClustersFunc == nil {
		panic("ConnectorClusterServiceMock.ReconcileNonEmptyDeletingClustersFunc: method is nil but ConnectorClusterService.ReconcileNonEmptyDeletingClusters was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ClusterIds []string
	}{
		Ctx:        ctx,
		ClusterIds: clusterIds,
	}
	mock.lockReconcileNonEmptyDeletingClusters.Lock()
	mock.calls.ReconcileNonEmptyDeletingClusters = append(mock.calls.ReconcileNonEmptyDeletingClusters, callInfo)
	mock.lockReconcileNonEmptyDeletingClusters.Unlock()
	return mock.ReconcileNonEmptyDeletingClustersFunc(ctx, clusterIds)
}

// ReconcileNonEmptyDeletingClustersCalls gets all the calls that were made to ReconcileNonEmptyDeletingClusters.
// Check the length with:
//
//	len(mockedConnectorClusterService.ReconcileNonEmptyDeletingClustersCalls())
func (mock *ConnectorClusterServiceMock) ReconcileNonEmptyDeletingClustersCalls() []struct {
	Ctx        context.Context
	ClusterIds []string
} {
	var calls []struct {
		Ctx        context.Context
		ClusterIds []string
	}
	mock.lockReconcileNonEmptyDeletingClusters.RLock()
	calls = mock.calls.ReconcileNonEmptyDeletingClusters
	mock.lockReconcileNonEmptyDeletingClusters.RUnlock()
	return calls
}

// ResetServiceAccount calls ResetServiceAccountFunc.
func (mock *ConnectorClusterServiceMock) ResetServiceAccount(ctx context.Context, cluster *dbapi.ConnectorCluster) *errors.ServiceError {
	if mock.ResetServiceAccountFunc == nil {
		panic("ConnectorClusterServiceMock.ResetServiceAccountFunc: method is nil but ConnectorClusterService.ResetServiceAccount was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Cluster *dbapi.ConnectorCluster
	}{
		Ctx:     ctx,
		Cluster: cluster,
	}
	mock.lockResetServiceAccount.Lock()
	mock.calls.ResetServiceAccount = append(mock.calls.ResetServiceAccount, callInfo)
	mock.lockResetServiceAccount.Unlock()
	return mock.ResetServiceAccountFunc(ctx, cluster)
}

// ResetServiceAccountCalls gets all the calls that were made to ResetServiceAccount.
// Check the length with:
//
//	len(mockedConnectorClusterService.ResetServiceAccountCalls())
func (mock *ConnectorClusterServiceMock) ResetServiceAccountCalls() []struct {
	Ctx     context.Context
	Cluster *dbapi.ConnectorCluster
} {
	var calls []struct {
		Ctx     context.Context
		Cluster *dbapi.ConnectorCluster
	}
	mock.lockResetServiceAccount.RLock()
	calls = mock.calls.ResetServiceAccount
	mock.lockResetServiceAccount.RUnlock()
	return calls
}

// SaveDeployment calls SaveDeploymentFunc.
func (mock *ConnectorClusterServiceMock) SaveDeployment(ctx context.Context, resource *dbapi.ConnectorDeployment) *errors.ServiceError {
	if mock.SaveDeploymentFunc == nil {
		panic("ConnectorClusterServiceMock.SaveDeploymentFunc: method is nil but ConnectorClusterService.SaveDeployment was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Resource *dbapi.ConnectorDeployment
	}{
		Ctx:      ctx,
		Resource: resource,
	}
	mock.lockSaveDeployment.Lock()
	mock.calls.SaveDeployment = append(mock.calls.SaveDeployment, callInfo)
	mock.lockSaveDeployment.Unlock()
	return mock.SaveDeploymentFunc(ctx, resource)
}

// SaveDeploymentCalls gets all the calls that were made to SaveDeployment.
// Check the length with:
//
//	len(mockedConnectorClusterService.SaveDeploymentCalls())
func (mock *ConnectorClusterServiceMock) SaveDeploymentCalls() []struct {
	Ctx      context.Context
	Resource *dbapi.ConnectorDeployment
} {
	var calls []struct {
		Ctx      context.Context
		Resource *dbapi.ConnectorDeployment
	}
	mock.lockSaveDeployment.RLock()
	calls = mock.calls.SaveDeployment
	mock.lockSaveDeployment.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ConnectorClusterServiceMock) Update(ctx context.Context, resource *dbapi.ConnectorCluster) *errors.ServiceError {
	if mock.UpdateFunc == nil {
		panic("ConnectorClusterServiceMock.UpdateFunc: method is nil but ConnectorClusterService.Update was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Resource *dbapi.ConnectorCluster
	}{
		Ctx:      ctx,
		Resource: resource,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, resource)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedConnectorClusterService.UpdateCalls())
func (mock *ConnectorClusterServiceMock) UpdateCalls() []struct {
	Ctx      context.Context
	Resource *dbapi.ConnectorCluster
} {
	var calls []struct {
		Ctx      context.Context
		Resource *dbapi.ConnectorCluster
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// UpdateConnectorClusterStatus calls UpdateConnectorClusterStatusFunc.
func (mock *ConnectorClusterServiceMock) UpdateConnectorClusterStatus(ctx context.Context, id string, status dbapi.ConnectorClusterStatus) *errors.ServiceError {
	if mock.UpdateConnectorClusterStatusFunc == nil {
		panic("ConnectorClusterServiceMock.UpdateConnectorClusterStatusFunc: method is nil but ConnectorClusterService.UpdateConnectorClusterStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     string
		Status dbapi.ConnectorClusterStatus
	}{
		Ctx:    ctx,
		ID:     id,
		Status: status,
	}
	mock.lockUpdateConnectorClusterStatus.Lock()
	mock.calls.UpdateConnectorClusterStatus = append(mock.calls.UpdateConnectorClusterStatus, callInfo)
	mock.lockUpdateConnectorClusterStatus.Unlock()
	return mock.UpdateConnectorClusterStatusFunc(ctx, id, status)
}

// UpdateConnectorClusterStatusCalls gets all the calls that were made to UpdateConnectorClusterStatus.
// Check the length with:
//
//	len(mockedConnectorClusterService.UpdateConnectorClusterStatusCalls())
func (mock *ConnectorClusterServiceMock) UpdateConnectorClusterStatusCalls() []struct {
	Ctx    context.Context
	ID     string
	Status dbapi.ConnectorClusterStatus
} {
	var calls []struct {
		Ctx    context.Context
		ID     string
		Status dbapi.ConnectorClusterStatus
	}
	mock.lockUpdateConnectorClusterStatus.RLock()
	calls = mock.calls.UpdateConnectorClusterStatus
	mock.lockUpdateConnectorClusterStatus.RUnlock()
	return calls
}

// UpdateConnectorDeploymentStatus calls UpdateConnectorDeploymentStatusFunc.
func (mock *ConnectorClusterServiceMock) UpdateConnectorDeploymentStatus(ctx context.Context, status dbapi.ConnectorDeploymentStatus) *errors.ServiceError {
	if mock.UpdateConnectorDeploymentStatusFunc == nil {
		panic("ConnectorClusterServiceMock.UpdateConnectorDeploymentStatusFunc: method is nil but ConnectorClusterService.UpdateConnectorDeploymentStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Status dbapi.ConnectorDeploymentStatus
	}{
		Ctx:    ctx,
		Status: status,
	}
	mock.lockUpdateConnectorDeploymentStatus.Lock()
	mock.calls.UpdateConnectorDeploymentStatus = append(mock.calls.UpdateConnectorDeploymentStatus, callInfo)
	mock.lockUpdateConnectorDeploymentStatus.Unlock()
	return mock.UpdateConnectorDeploymentStatusFunc(ctx, status)
}

// UpdateConnectorDeploymentStatusCalls gets all the calls that were made to UpdateConnectorDeploymentStatus.
// Check the length with:
//
//	len(mockedConnectorClusterService.UpdateConnectorDeploymentStatusCalls())
func (mock *ConnectorClusterServiceMock) UpdateConnectorDeploymentStatusCalls() []struct {
	Ctx    context.Context
	Status dbapi.ConnectorDeploymentStatus
} {
	var calls []struct {
		Ctx    context.Context
		Status dbapi.ConnectorDeploymentStatus
	}
	mock.lockUpdateConnectorDeploymentStatus.RLock()
	calls = mock.calls.UpdateConnectorDeploymentStatus
	mock.lockUpdateConnectorDeploymentStatus.RUnlock()
	return calls
}

// UpdateDeployment calls UpdateDeploymentFunc.
func (mock *ConnectorClusterServiceMock) UpdateDeployment(resource *dbapi.ConnectorDeployment) *errors.ServiceError {
	if mock.UpdateDeploymentFunc == nil {
		panic("ConnectorClusterServiceMock.UpdateDeploymentFunc: method is nil but ConnectorClusterService.UpdateDeployment was just called")
	}
	callInfo := struct {
		Resource *dbapi.ConnectorDeployment
	}{
		Resource: resource,
	}
	mock.lockUpdateDeployment.Lock()
	mock.calls.UpdateDeployment = append(mock.calls.UpdateDeployment, callInfo)
	mock.lockUpdateDeployment.Unlock()
	return mock.UpdateDeploymentFunc(resource)
}

// UpdateDeploymentCalls gets all the calls that were made to UpdateDeployment.
// Check the length with:
//
//	len(mockedConnectorClusterService.UpdateDeploymentCalls())
func (mock *ConnectorClusterServiceMock) UpdateDeploymentCalls() []struct {
	Resource *dbapi.ConnectorDeployment
} {
	var calls []struct {
		Resource *dbapi.ConnectorDeployment
	}
	mock.lockUpdateDeployment.RLock()
	calls = mock.calls.UpdateDeployment
	mock.lockUpdateDeployment.RUnlock()
	return calls
}

// UpdateProcessorDeploymentStatus calls UpdateProcessorDeploymentStatusFunc.
func (mock *ConnectorClusterServiceMock) UpdateProcessorDeploymentStatus(ctx context.Context, status dbapi.ProcessorDeploymentStatus) *errors.ServiceError {
	if mock.UpdateProcessorDeploymentStatusFunc == nil {
		panic("ConnectorClusterServiceMock.UpdateProcessorDeploymentStatusFunc: method is nil but ConnectorClusterService.UpdateProcessorDeploymentStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Status dbapi.ProcessorDeploymentStatus
	}{
		Ctx:    ctx,
		Status: status,
	}
	mock.lockUpdateProcessorDeploymentStatus.Lock()
	mock.calls.UpdateProcessorDeploymentStatus = append(mock.calls.UpdateProcessorDeploymentStatus, callInfo)
	mock.lockUpdateProcessorDeploymentStatus.Unlock()
	return mock.UpdateProcessorDeploymentStatusFunc(ctx, status)
}

// UpdateProcessorDeploymentStatusCalls gets all the calls that were made to UpdateProcessorDeploymentStatus.
// Check the length with:
//
//	len(mockedConnectorClusterService.UpdateProcessorDeploymentStatusCalls())
func (mock *ConnectorClusterServiceMock) UpdateProcessorDeploymentStatusCalls() []struct {
	Ctx    context.Context
	Status dbapi.ProcessorDeploymentStatus
} {
	var calls []struct {
		Ctx    context.Context
		Status dbapi.ProcessorDeploymentStatus
	}
	mock.lockUpdateProcessorDeploymentStatus.RLock()
	calls = mock.calls.UpdateProcessorDeploymentStatus
	mock.lockUpdateProcessorDeploymentStatus.RUnlock()
	return calls
}
