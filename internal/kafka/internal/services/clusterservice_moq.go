// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"context"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/internal/kafka/internal/clusters/types"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/api"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/client/ocm"
	apiErrors "github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/errors"
	"sync"
)

// Ensure, that ClusterServiceMock does implement ClusterService.
// If this is not the case, regenerate this file with moq.
var _ ClusterService = &ClusterServiceMock{}

// ClusterServiceMock is a mock implementation of ClusterService.
//
//	func TestSomethingThatUsesClusterService(t *testing.T) {
//
//		// make and configure a mocked ClusterService
//		mockedClusterService := &ClusterServiceMock{
//			ApplyResourcesFunc: func(cluster *api.Cluster, resources types.ResourceSet) *apiErrors.ServiceError {
//				panic("mock out the ApplyResources method")
//			},
//			CheckClusterStatusFunc: func(cluster *api.Cluster) (*api.Cluster, *apiErrors.ServiceError) {
//				panic("mock out the CheckClusterStatus method")
//			},
//			CheckStrimziVersionReadyFunc: func(cluster *api.Cluster, strimziVersion string) (bool, error) {
//				panic("mock out the CheckStrimziVersionReady method")
//			},
//			ConfigureAndSaveIdentityProviderFunc: func(cluster *api.Cluster, identityProviderInfo types.IdentityProviderInfo) (*api.Cluster, *apiErrors.ServiceError) {
//				panic("mock out the ConfigureAndSaveIdentityProvider method")
//			},
//			CountByStatusFunc: func(clusterStatuss []api.ClusterStatus) ([]ClusterStatusCount, *apiErrors.ServiceError) {
//				panic("mock out the CountByStatus method")
//			},
//			CreateFunc: func(cluster *api.Cluster) (*api.Cluster, *apiErrors.ServiceError) {
//				panic("mock out the Create method")
//			},
//			DeleteFunc: func(cluster *api.Cluster) (bool, *apiErrors.ServiceError) {
//				panic("mock out the Delete method")
//			},
//			DeleteByClusterIDFunc: func(clusterID string) *apiErrors.ServiceError {
//				panic("mock out the DeleteByClusterID method")
//			},
//			FindAllClustersFunc: func(criteria FindClusterCriteria) ([]*api.Cluster, error) {
//				panic("mock out the FindAllClusters method")
//			},
//			FindClusterFunc: func(criteria FindClusterCriteria) (*api.Cluster, error) {
//				panic("mock out the FindCluster method")
//			},
//			FindClusterByIDFunc: func(clusterID string) (*api.Cluster, *apiErrors.ServiceError) {
//				panic("mock out the FindClusterByID method")
//			},
//			FindKafkaInstanceCountFunc: func(clusterIDs []string) ([]ResKafkaInstanceCount, error) {
//				panic("mock out the FindKafkaInstanceCount method")
//			},
//			FindNonEmptyClusterByIDFunc: func(clusterID string) (*api.Cluster, *apiErrors.ServiceError) {
//				panic("mock out the FindNonEmptyClusterByID method")
//			},
//			FindStreamingUnitCountByClusterAndInstanceTypeFunc: func() (KafkaStreamingUnitCountPerClusterList, error) {
//				panic("mock out the FindStreamingUnitCountByClusterAndInstanceType method")
//			},
//			GetClientIDFunc: func(clusterID string) (string, error) {
//				panic("mock out the GetClientID method")
//			},
//			GetClusterDNSFunc: func(clusterID string) (string, *apiErrors.ServiceError) {
//				panic("mock out the GetClusterDNS method")
//			},
//			GetExternalIDFunc: func(clusterID string) (string, *apiErrors.ServiceError) {
//				panic("mock out the GetExternalID method")
//			},
//			InstallClusterLoggingFunc: func(cluster *api.Cluster, params []ocm.Parameter) (bool, *apiErrors.ServiceError) {
//				panic("mock out the InstallClusterLogging method")
//			},
//			InstallStrimziFunc: func(cluster *api.Cluster) (bool, *apiErrors.ServiceError) {
//				panic("mock out the InstallStrimzi method")
//			},
//			IsStrimziKafkaVersionAvailableInClusterFunc: func(cluster *api.Cluster, strimziVersion string, kafkaVersion string, ibpVersion string) (bool, error) {
//				panic("mock out the IsStrimziKafkaVersionAvailableInCluster method")
//			},
//			ListFunc: func(ctx context.Context) ([]*api.Cluster, *apiErrors.ServiceError) {
//				panic("mock out the List method")
//			},
//			ListByStatusFunc: func(state api.ClusterStatus) ([]api.Cluster, *apiErrors.ServiceError) {
//				panic("mock out the ListByStatus method")
//			},
//			ListGroupByProviderAndRegionFunc: func(providers []string, regions []string, status []string) ([]*ResGroupCPRegion, *apiErrors.ServiceError) {
//				panic("mock out the ListGroupByProviderAndRegion method")
//			},
//			ListNonEnterpriseClusterIDsFunc: func() ([]api.Cluster, *apiErrors.ServiceError) {
//				panic("mock out the ListNonEnterpriseClusterIDs method")
//			},
//			RegisterClusterJobFunc: func(clusterRequest *api.Cluster) *apiErrors.ServiceError {
//				panic("mock out the RegisterClusterJob method")
//			},
//			UpdateFunc: func(cluster api.Cluster) *apiErrors.ServiceError {
//				panic("mock out the Update method")
//			},
//			UpdateMultiClusterStatusFunc: func(clusterIDs []string, status api.ClusterStatus) *apiErrors.ServiceError {
//				panic("mock out the UpdateMultiClusterStatus method")
//			},
//			UpdateStatusFunc: func(cluster api.Cluster, status api.ClusterStatus) error {
//				panic("mock out the UpdateStatus method")
//			},
//		}
//
//		// use mockedClusterService in code that requires ClusterService
//		// and then make assertions.
//
//	}
type ClusterServiceMock struct {
	// ApplyResourcesFunc mocks the ApplyResources method.
	ApplyResourcesFunc func(cluster *api.Cluster, resources types.ResourceSet) *apiErrors.ServiceError

	// CheckClusterStatusFunc mocks the CheckClusterStatus method.
	CheckClusterStatusFunc func(cluster *api.Cluster) (*api.Cluster, *apiErrors.ServiceError)

	// CheckStrimziVersionReadyFunc mocks the CheckStrimziVersionReady method.
	CheckStrimziVersionReadyFunc func(cluster *api.Cluster, strimziVersion string) (bool, error)

	// ConfigureAndSaveIdentityProviderFunc mocks the ConfigureAndSaveIdentityProvider method.
	ConfigureAndSaveIdentityProviderFunc func(cluster *api.Cluster, identityProviderInfo types.IdentityProviderInfo) (*api.Cluster, *apiErrors.ServiceError)

	// CountByStatusFunc mocks the CountByStatus method.
	CountByStatusFunc func(clusterStatuss []api.ClusterStatus) ([]ClusterStatusCount, *apiErrors.ServiceError)

	// CreateFunc mocks the Create method.
	CreateFunc func(cluster *api.Cluster) (*api.Cluster, *apiErrors.ServiceError)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(cluster *api.Cluster) (bool, *apiErrors.ServiceError)

	// DeleteByClusterIDFunc mocks the DeleteByClusterID method.
	DeleteByClusterIDFunc func(clusterID string) *apiErrors.ServiceError

	// FindAllClustersFunc mocks the FindAllClusters method.
	FindAllClustersFunc func(criteria FindClusterCriteria) ([]*api.Cluster, error)

	// FindClusterFunc mocks the FindCluster method.
	FindClusterFunc func(criteria FindClusterCriteria) (*api.Cluster, error)

	// FindClusterByIDFunc mocks the FindClusterByID method.
	FindClusterByIDFunc func(clusterID string) (*api.Cluster, *apiErrors.ServiceError)

	// FindKafkaInstanceCountFunc mocks the FindKafkaInstanceCount method.
	FindKafkaInstanceCountFunc func(clusterIDs []string) ([]ResKafkaInstanceCount, error)

	// FindNonEmptyClusterByIDFunc mocks the FindNonEmptyClusterByID method.
	FindNonEmptyClusterByIDFunc func(clusterID string) (*api.Cluster, *apiErrors.ServiceError)

	// FindStreamingUnitCountByClusterAndInstanceTypeFunc mocks the FindStreamingUnitCountByClusterAndInstanceType method.
	FindStreamingUnitCountByClusterAndInstanceTypeFunc func() (KafkaStreamingUnitCountPerClusterList, error)

	// GetClientIDFunc mocks the GetClientID method.
	GetClientIDFunc func(clusterID string) (string, error)

	// GetClusterDNSFunc mocks the GetClusterDNS method.
	GetClusterDNSFunc func(clusterID string) (string, *apiErrors.ServiceError)

	// GetExternalIDFunc mocks the GetExternalID method.
	GetExternalIDFunc func(clusterID string) (string, *apiErrors.ServiceError)

	// InstallClusterLoggingFunc mocks the InstallClusterLogging method.
	InstallClusterLoggingFunc func(cluster *api.Cluster, params []ocm.Parameter) (bool, *apiErrors.ServiceError)

	// InstallStrimziFunc mocks the InstallStrimzi method.
	InstallStrimziFunc func(cluster *api.Cluster) (bool, *apiErrors.ServiceError)

	// IsStrimziKafkaVersionAvailableInClusterFunc mocks the IsStrimziKafkaVersionAvailableInCluster method.
	IsStrimziKafkaVersionAvailableInClusterFunc func(cluster *api.Cluster, strimziVersion string, kafkaVersion string, ibpVersion string) (bool, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context) ([]*api.Cluster, *apiErrors.ServiceError)

	// ListByStatusFunc mocks the ListByStatus method.
	ListByStatusFunc func(state api.ClusterStatus) ([]api.Cluster, *apiErrors.ServiceError)

	// ListGroupByProviderAndRegionFunc mocks the ListGroupByProviderAndRegion method.
	ListGroupByProviderAndRegionFunc func(providers []string, regions []string, status []string) ([]*ResGroupCPRegion, *apiErrors.ServiceError)

	// ListNonEnterpriseClusterIDsFunc mocks the ListNonEnterpriseClusterIDs method.
	ListNonEnterpriseClusterIDsFunc func() ([]api.Cluster, *apiErrors.ServiceError)

	// RegisterClusterJobFunc mocks the RegisterClusterJob method.
	RegisterClusterJobFunc func(clusterRequest *api.Cluster) *apiErrors.ServiceError

	// UpdateFunc mocks the Update method.
	UpdateFunc func(cluster api.Cluster) *apiErrors.ServiceError

	// UpdateMultiClusterStatusFunc mocks the UpdateMultiClusterStatus method.
	UpdateMultiClusterStatusFunc func(clusterIDs []string, status api.ClusterStatus) *apiErrors.ServiceError

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(cluster api.Cluster, status api.ClusterStatus) error

	// calls tracks calls to the methods.
	calls struct {
		// ApplyResources holds details about calls to the ApplyResources method.
		ApplyResources []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
			// Resources is the resources argument value.
			Resources types.ResourceSet
		}
		// CheckClusterStatus holds details about calls to the CheckClusterStatus method.
		CheckClusterStatus []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
		}
		// CheckStrimziVersionReady holds details about calls to the CheckStrimziVersionReady method.
		CheckStrimziVersionReady []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
			// StrimziVersion is the strimziVersion argument value.
			StrimziVersion string
		}
		// ConfigureAndSaveIdentityProvider holds details about calls to the ConfigureAndSaveIdentityProvider method.
		ConfigureAndSaveIdentityProvider []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
			// IdentityProviderInfo is the identityProviderInfo argument value.
			IdentityProviderInfo types.IdentityProviderInfo
		}
		// CountByStatus holds details about calls to the CountByStatus method.
		CountByStatus []struct {
			// ClusterStatuss is the clusterStatuss argument value.
			ClusterStatuss []api.ClusterStatus
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
		}
		// DeleteByClusterID holds details about calls to the DeleteByClusterID method.
		DeleteByClusterID []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// FindAllClusters holds details about calls to the FindAllClusters method.
		FindAllClusters []struct {
			// Criteria is the criteria argument value.
			Criteria FindClusterCriteria
		}
		// FindCluster holds details about calls to the FindCluster method.
		FindCluster []struct {
			// Criteria is the criteria argument value.
			Criteria FindClusterCriteria
		}
		// FindClusterByID holds details about calls to the FindClusterByID method.
		FindClusterByID []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// FindKafkaInstanceCount holds details about calls to the FindKafkaInstanceCount method.
		FindKafkaInstanceCount []struct {
			// ClusterIDs is the clusterIDs argument value.
			ClusterIDs []string
		}
		// FindNonEmptyClusterByID holds details about calls to the FindNonEmptyClusterByID method.
		FindNonEmptyClusterByID []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// FindStreamingUnitCountByClusterAndInstanceType holds details about calls to the FindStreamingUnitCountByClusterAndInstanceType method.
		FindStreamingUnitCountByClusterAndInstanceType []struct {
		}
		// GetClientID holds details about calls to the GetClientID method.
		GetClientID []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetClusterDNS holds details about calls to the GetClusterDNS method.
		GetClusterDNS []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetExternalID holds details about calls to the GetExternalID method.
		GetExternalID []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// InstallClusterLogging holds details about calls to the InstallClusterLogging method.
		InstallClusterLogging []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
			// Params is the params argument value.
			Params []ocm.Parameter
		}
		// InstallStrimzi holds details about calls to the InstallStrimzi method.
		InstallStrimzi []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
		}
		// IsStrimziKafkaVersionAvailableInCluster holds details about calls to the IsStrimziKafkaVersionAvailableInCluster method.
		IsStrimziKafkaVersionAvailableInCluster []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
			// StrimziVersion is the strimziVersion argument value.
			StrimziVersion string
			// KafkaVersion is the kafkaVersion argument value.
			KafkaVersion string
			// IbpVersion is the ibpVersion argument value.
			IbpVersion string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ListByStatus holds details about calls to the ListByStatus method.
		ListByStatus []struct {
			// State is the state argument value.
			State api.ClusterStatus
		}
		// ListGroupByProviderAndRegion holds details about calls to the ListGroupByProviderAndRegion method.
		ListGroupByProviderAndRegion []struct {
			// Providers is the providers argument value.
			Providers []string
			// Regions is the regions argument value.
			Regions []string
			// Status is the status argument value.
			Status []string
		}
		// ListNonEnterpriseClusterIDs holds details about calls to the ListNonEnterpriseClusterIDs method.
		ListNonEnterpriseClusterIDs []struct {
		}
		// RegisterClusterJob holds details about calls to the RegisterClusterJob method.
		RegisterClusterJob []struct {
			// ClusterRequest is the clusterRequest argument value.
			ClusterRequest *api.Cluster
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Cluster is the cluster argument value.
			Cluster api.Cluster
		}
		// UpdateMultiClusterStatus holds details about calls to the UpdateMultiClusterStatus method.
		UpdateMultiClusterStatus []struct {
			// ClusterIDs is the clusterIDs argument value.
			ClusterIDs []string
			// Status is the status argument value.
			Status api.ClusterStatus
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// Cluster is the cluster argument value.
			Cluster api.Cluster
			// Status is the status argument value.
			Status api.ClusterStatus
		}
	}
	lockApplyResources                                 sync.RWMutex
	lockCheckClusterStatus                             sync.RWMutex
	lockCheckStrimziVersionReady                       sync.RWMutex
	lockConfigureAndSaveIdentityProvider               sync.RWMutex
	lockCountByStatus                                  sync.RWMutex
	lockCreate                                         sync.RWMutex
	lockDelete                                         sync.RWMutex
	lockDeleteByClusterID                              sync.RWMutex
	lockFindAllClusters                                sync.RWMutex
	lockFindCluster                                    sync.RWMutex
	lockFindClusterByID                                sync.RWMutex
	lockFindKafkaInstanceCount                         sync.RWMutex
	lockFindNonEmptyClusterByID                        sync.RWMutex
	lockFindStreamingUnitCountByClusterAndInstanceType sync.RWMutex
	lockGetClientID                                    sync.RWMutex
	lockGetClusterDNS                                  sync.RWMutex
	lockGetExternalID                                  sync.RWMutex
	lockInstallClusterLogging                          sync.RWMutex
	lockInstallStrimzi                                 sync.RWMutex
	lockIsStrimziKafkaVersionAvailableInCluster        sync.RWMutex
	lockList                                           sync.RWMutex
	lockListByStatus                                   sync.RWMutex
	lockListGroupByProviderAndRegion                   sync.RWMutex
	lockListNonEnterpriseClusterIDs                    sync.RWMutex
	lockRegisterClusterJob                             sync.RWMutex
	lockUpdate                                         sync.RWMutex
	lockUpdateMultiClusterStatus                       sync.RWMutex
	lockUpdateStatus                                   sync.RWMutex
}

// ApplyResources calls ApplyResourcesFunc.
func (mock *ClusterServiceMock) ApplyResources(cluster *api.Cluster, resources types.ResourceSet) *apiErrors.ServiceError {
	if mock.ApplyResourcesFunc == nil {
		panic("ClusterServiceMock.ApplyResourcesFunc: method is nil but ClusterService.ApplyResources was just called")
	}
	callInfo := struct {
		Cluster   *api.Cluster
		Resources types.ResourceSet
	}{
		Cluster:   cluster,
		Resources: resources,
	}
	mock.lockApplyResources.Lock()
	mock.calls.ApplyResources = append(mock.calls.ApplyResources, callInfo)
	mock.lockApplyResources.Unlock()
	return mock.ApplyResourcesFunc(cluster, resources)
}

// ApplyResourcesCalls gets all the calls that were made to ApplyResources.
// Check the length with:
//
//	len(mockedClusterService.ApplyResourcesCalls())
func (mock *ClusterServiceMock) ApplyResourcesCalls() []struct {
	Cluster   *api.Cluster
	Resources types.ResourceSet
} {
	var calls []struct {
		Cluster   *api.Cluster
		Resources types.ResourceSet
	}
	mock.lockApplyResources.RLock()
	calls = mock.calls.ApplyResources
	mock.lockApplyResources.RUnlock()
	return calls
}

// CheckClusterStatus calls CheckClusterStatusFunc.
func (mock *ClusterServiceMock) CheckClusterStatus(cluster *api.Cluster) (*api.Cluster, *apiErrors.ServiceError) {
	if mock.CheckClusterStatusFunc == nil {
		panic("ClusterServiceMock.CheckClusterStatusFunc: method is nil but ClusterService.CheckClusterStatus was just called")
	}
	callInfo := struct {
		Cluster *api.Cluster
	}{
		Cluster: cluster,
	}
	mock.lockCheckClusterStatus.Lock()
	mock.calls.CheckClusterStatus = append(mock.calls.CheckClusterStatus, callInfo)
	mock.lockCheckClusterStatus.Unlock()
	return mock.CheckClusterStatusFunc(cluster)
}

// CheckClusterStatusCalls gets all the calls that were made to CheckClusterStatus.
// Check the length with:
//
//	len(mockedClusterService.CheckClusterStatusCalls())
func (mock *ClusterServiceMock) CheckClusterStatusCalls() []struct {
	Cluster *api.Cluster
} {
	var calls []struct {
		Cluster *api.Cluster
	}
	mock.lockCheckClusterStatus.RLock()
	calls = mock.calls.CheckClusterStatus
	mock.lockCheckClusterStatus.RUnlock()
	return calls
}

// CheckStrimziVersionReady calls CheckStrimziVersionReadyFunc.
func (mock *ClusterServiceMock) CheckStrimziVersionReady(cluster *api.Cluster, strimziVersion string) (bool, error) {
	if mock.CheckStrimziVersionReadyFunc == nil {
		panic("ClusterServiceMock.CheckStrimziVersionReadyFunc: method is nil but ClusterService.CheckStrimziVersionReady was just called")
	}
	callInfo := struct {
		Cluster        *api.Cluster
		StrimziVersion string
	}{
		Cluster:        cluster,
		StrimziVersion: strimziVersion,
	}
	mock.lockCheckStrimziVersionReady.Lock()
	mock.calls.CheckStrimziVersionReady = append(mock.calls.CheckStrimziVersionReady, callInfo)
	mock.lockCheckStrimziVersionReady.Unlock()
	return mock.CheckStrimziVersionReadyFunc(cluster, strimziVersion)
}

// CheckStrimziVersionReadyCalls gets all the calls that were made to CheckStrimziVersionReady.
// Check the length with:
//
//	len(mockedClusterService.CheckStrimziVersionReadyCalls())
func (mock *ClusterServiceMock) CheckStrimziVersionReadyCalls() []struct {
	Cluster        *api.Cluster
	StrimziVersion string
} {
	var calls []struct {
		Cluster        *api.Cluster
		StrimziVersion string
	}
	mock.lockCheckStrimziVersionReady.RLock()
	calls = mock.calls.CheckStrimziVersionReady
	mock.lockCheckStrimziVersionReady.RUnlock()
	return calls
}

// ConfigureAndSaveIdentityProvider calls ConfigureAndSaveIdentityProviderFunc.
func (mock *ClusterServiceMock) ConfigureAndSaveIdentityProvider(cluster *api.Cluster, identityProviderInfo types.IdentityProviderInfo) (*api.Cluster, *apiErrors.ServiceError) {
	if mock.ConfigureAndSaveIdentityProviderFunc == nil {
		panic("ClusterServiceMock.ConfigureAndSaveIdentityProviderFunc: method is nil but ClusterService.ConfigureAndSaveIdentityProvider was just called")
	}
	callInfo := struct {
		Cluster              *api.Cluster
		IdentityProviderInfo types.IdentityProviderInfo
	}{
		Cluster:              cluster,
		IdentityProviderInfo: identityProviderInfo,
	}
	mock.lockConfigureAndSaveIdentityProvider.Lock()
	mock.calls.ConfigureAndSaveIdentityProvider = append(mock.calls.ConfigureAndSaveIdentityProvider, callInfo)
	mock.lockConfigureAndSaveIdentityProvider.Unlock()
	return mock.ConfigureAndSaveIdentityProviderFunc(cluster, identityProviderInfo)
}

// ConfigureAndSaveIdentityProviderCalls gets all the calls that were made to ConfigureAndSaveIdentityProvider.
// Check the length with:
//
//	len(mockedClusterService.ConfigureAndSaveIdentityProviderCalls())
func (mock *ClusterServiceMock) ConfigureAndSaveIdentityProviderCalls() []struct {
	Cluster              *api.Cluster
	IdentityProviderInfo types.IdentityProviderInfo
} {
	var calls []struct {
		Cluster              *api.Cluster
		IdentityProviderInfo types.IdentityProviderInfo
	}
	mock.lockConfigureAndSaveIdentityProvider.RLock()
	calls = mock.calls.ConfigureAndSaveIdentityProvider
	mock.lockConfigureAndSaveIdentityProvider.RUnlock()
	return calls
}

// CountByStatus calls CountByStatusFunc.
func (mock *ClusterServiceMock) CountByStatus(clusterStatuss []api.ClusterStatus) ([]ClusterStatusCount, *apiErrors.ServiceError) {
	if mock.CountByStatusFunc == nil {
		panic("ClusterServiceMock.CountByStatusFunc: method is nil but ClusterService.CountByStatus was just called")
	}
	callInfo := struct {
		ClusterStatuss []api.ClusterStatus
	}{
		ClusterStatuss: clusterStatuss,
	}
	mock.lockCountByStatus.Lock()
	mock.calls.CountByStatus = append(mock.calls.CountByStatus, callInfo)
	mock.lockCountByStatus.Unlock()
	return mock.CountByStatusFunc(clusterStatuss)
}

// CountByStatusCalls gets all the calls that were made to CountByStatus.
// Check the length with:
//
//	len(mockedClusterService.CountByStatusCalls())
func (mock *ClusterServiceMock) CountByStatusCalls() []struct {
	ClusterStatuss []api.ClusterStatus
} {
	var calls []struct {
		ClusterStatuss []api.ClusterStatus
	}
	mock.lockCountByStatus.RLock()
	calls = mock.calls.CountByStatus
	mock.lockCountByStatus.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ClusterServiceMock) Create(cluster *api.Cluster) (*api.Cluster, *apiErrors.ServiceError) {
	if mock.CreateFunc == nil {
		panic("ClusterServiceMock.CreateFunc: method is nil but ClusterService.Create was just called")
	}
	callInfo := struct {
		Cluster *api.Cluster
	}{
		Cluster: cluster,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(cluster)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedClusterService.CreateCalls())
func (mock *ClusterServiceMock) CreateCalls() []struct {
	Cluster *api.Cluster
} {
	var calls []struct {
		Cluster *api.Cluster
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ClusterServiceMock) Delete(cluster *api.Cluster) (bool, *apiErrors.ServiceError) {
	if mock.DeleteFunc == nil {
		panic("ClusterServiceMock.DeleteFunc: method is nil but ClusterService.Delete was just called")
	}
	callInfo := struct {
		Cluster *api.Cluster
	}{
		Cluster: cluster,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(cluster)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedClusterService.DeleteCalls())
func (mock *ClusterServiceMock) DeleteCalls() []struct {
	Cluster *api.Cluster
} {
	var calls []struct {
		Cluster *api.Cluster
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// DeleteByClusterID calls DeleteByClusterIDFunc.
func (mock *ClusterServiceMock) DeleteByClusterID(clusterID string) *apiErrors.ServiceError {
	if mock.DeleteByClusterIDFunc == nil {
		panic("ClusterServiceMock.DeleteByClusterIDFunc: method is nil but ClusterService.DeleteByClusterID was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockDeleteByClusterID.Lock()
	mock.calls.DeleteByClusterID = append(mock.calls.DeleteByClusterID, callInfo)
	mock.lockDeleteByClusterID.Unlock()
	return mock.DeleteByClusterIDFunc(clusterID)
}

// DeleteByClusterIDCalls gets all the calls that were made to DeleteByClusterID.
// Check the length with:
//
//	len(mockedClusterService.DeleteByClusterIDCalls())
func (mock *ClusterServiceMock) DeleteByClusterIDCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockDeleteByClusterID.RLock()
	calls = mock.calls.DeleteByClusterID
	mock.lockDeleteByClusterID.RUnlock()
	return calls
}

// FindAllClusters calls FindAllClustersFunc.
func (mock *ClusterServiceMock) FindAllClusters(criteria FindClusterCriteria) ([]*api.Cluster, error) {
	if mock.FindAllClustersFunc == nil {
		panic("ClusterServiceMock.FindAllClustersFunc: method is nil but ClusterService.FindAllClusters was just called")
	}
	callInfo := struct {
		Criteria FindClusterCriteria
	}{
		Criteria: criteria,
	}
	mock.lockFindAllClusters.Lock()
	mock.calls.FindAllClusters = append(mock.calls.FindAllClusters, callInfo)
	mock.lockFindAllClusters.Unlock()
	return mock.FindAllClustersFunc(criteria)
}

// FindAllClustersCalls gets all the calls that were made to FindAllClusters.
// Check the length with:
//
//	len(mockedClusterService.FindAllClustersCalls())
func (mock *ClusterServiceMock) FindAllClustersCalls() []struct {
	Criteria FindClusterCriteria
} {
	var calls []struct {
		Criteria FindClusterCriteria
	}
	mock.lockFindAllClusters.RLock()
	calls = mock.calls.FindAllClusters
	mock.lockFindAllClusters.RUnlock()
	return calls
}

// FindCluster calls FindClusterFunc.
func (mock *ClusterServiceMock) FindCluster(criteria FindClusterCriteria) (*api.Cluster, error) {
	if mock.FindClusterFunc == nil {
		panic("ClusterServiceMock.FindClusterFunc: method is nil but ClusterService.FindCluster was just called")
	}
	callInfo := struct {
		Criteria FindClusterCriteria
	}{
		Criteria: criteria,
	}
	mock.lockFindCluster.Lock()
	mock.calls.FindCluster = append(mock.calls.FindCluster, callInfo)
	mock.lockFindCluster.Unlock()
	return mock.FindClusterFunc(criteria)
}

// FindClusterCalls gets all the calls that were made to FindCluster.
// Check the length with:
//
//	len(mockedClusterService.FindClusterCalls())
func (mock *ClusterServiceMock) FindClusterCalls() []struct {
	Criteria FindClusterCriteria
} {
	var calls []struct {
		Criteria FindClusterCriteria
	}
	mock.lockFindCluster.RLock()
	calls = mock.calls.FindCluster
	mock.lockFindCluster.RUnlock()
	return calls
}

// FindClusterByID calls FindClusterByIDFunc.
func (mock *ClusterServiceMock) FindClusterByID(clusterID string) (*api.Cluster, *apiErrors.ServiceError) {
	if mock.FindClusterByIDFunc == nil {
		panic("ClusterServiceMock.FindClusterByIDFunc: method is nil but ClusterService.FindClusterByID was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockFindClusterByID.Lock()
	mock.calls.FindClusterByID = append(mock.calls.FindClusterByID, callInfo)
	mock.lockFindClusterByID.Unlock()
	return mock.FindClusterByIDFunc(clusterID)
}

// FindClusterByIDCalls gets all the calls that were made to FindClusterByID.
// Check the length with:
//
//	len(mockedClusterService.FindClusterByIDCalls())
func (mock *ClusterServiceMock) FindClusterByIDCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockFindClusterByID.RLock()
	calls = mock.calls.FindClusterByID
	mock.lockFindClusterByID.RUnlock()
	return calls
}

// FindKafkaInstanceCount calls FindKafkaInstanceCountFunc.
func (mock *ClusterServiceMock) FindKafkaInstanceCount(clusterIDs []string) ([]ResKafkaInstanceCount, error) {
	if mock.FindKafkaInstanceCountFunc == nil {
		panic("ClusterServiceMock.FindKafkaInstanceCountFunc: method is nil but ClusterService.FindKafkaInstanceCount was just called")
	}
	callInfo := struct {
		ClusterIDs []string
	}{
		ClusterIDs: clusterIDs,
	}
	mock.lockFindKafkaInstanceCount.Lock()
	mock.calls.FindKafkaInstanceCount = append(mock.calls.FindKafkaInstanceCount, callInfo)
	mock.lockFindKafkaInstanceCount.Unlock()
	return mock.FindKafkaInstanceCountFunc(clusterIDs)
}

// FindKafkaInstanceCountCalls gets all the calls that were made to FindKafkaInstanceCount.
// Check the length with:
//
//	len(mockedClusterService.FindKafkaInstanceCountCalls())
func (mock *ClusterServiceMock) FindKafkaInstanceCountCalls() []struct {
	ClusterIDs []string
} {
	var calls []struct {
		ClusterIDs []string
	}
	mock.lockFindKafkaInstanceCount.RLock()
	calls = mock.calls.FindKafkaInstanceCount
	mock.lockFindKafkaInstanceCount.RUnlock()
	return calls
}

// FindNonEmptyClusterByID calls FindNonEmptyClusterByIDFunc.
func (mock *ClusterServiceMock) FindNonEmptyClusterByID(clusterID string) (*api.Cluster, *apiErrors.ServiceError) {
	if mock.FindNonEmptyClusterByIDFunc == nil {
		panic("ClusterServiceMock.FindNonEmptyClusterByIDFunc: method is nil but ClusterService.FindNonEmptyClusterByID was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockFindNonEmptyClusterByID.Lock()
	mock.calls.FindNonEmptyClusterByID = append(mock.calls.FindNonEmptyClusterByID, callInfo)
	mock.lockFindNonEmptyClusterByID.Unlock()
	return mock.FindNonEmptyClusterByIDFunc(clusterID)
}

// FindNonEmptyClusterByIDCalls gets all the calls that were made to FindNonEmptyClusterByID.
// Check the length with:
//
//	len(mockedClusterService.FindNonEmptyClusterByIDCalls())
func (mock *ClusterServiceMock) FindNonEmptyClusterByIDCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockFindNonEmptyClusterByID.RLock()
	calls = mock.calls.FindNonEmptyClusterByID
	mock.lockFindNonEmptyClusterByID.RUnlock()
	return calls
}

// FindStreamingUnitCountByClusterAndInstanceType calls FindStreamingUnitCountByClusterAndInstanceTypeFunc.
func (mock *ClusterServiceMock) FindStreamingUnitCountByClusterAndInstanceType() (KafkaStreamingUnitCountPerClusterList, error) {
	if mock.FindStreamingUnitCountByClusterAndInstanceTypeFunc == nil {
		panic("ClusterServiceMock.FindStreamingUnitCountByClusterAndInstanceTypeFunc: method is nil but ClusterService.FindStreamingUnitCountByClusterAndInstanceType was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFindStreamingUnitCountByClusterAndInstanceType.Lock()
	mock.calls.FindStreamingUnitCountByClusterAndInstanceType = append(mock.calls.FindStreamingUnitCountByClusterAndInstanceType, callInfo)
	mock.lockFindStreamingUnitCountByClusterAndInstanceType.Unlock()
	return mock.FindStreamingUnitCountByClusterAndInstanceTypeFunc()
}

// FindStreamingUnitCountByClusterAndInstanceTypeCalls gets all the calls that were made to FindStreamingUnitCountByClusterAndInstanceType.
// Check the length with:
//
//	len(mockedClusterService.FindStreamingUnitCountByClusterAndInstanceTypeCalls())
func (mock *ClusterServiceMock) FindStreamingUnitCountByClusterAndInstanceTypeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockFindStreamingUnitCountByClusterAndInstanceType.RLock()
	calls = mock.calls.FindStreamingUnitCountByClusterAndInstanceType
	mock.lockFindStreamingUnitCountByClusterAndInstanceType.RUnlock()
	return calls
}

// GetClientID calls GetClientIDFunc.
func (mock *ClusterServiceMock) GetClientID(clusterID string) (string, error) {
	if mock.GetClientIDFunc == nil {
		panic("ClusterServiceMock.GetClientIDFunc: method is nil but ClusterService.GetClientID was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetClientID.Lock()
	mock.calls.GetClientID = append(mock.calls.GetClientID, callInfo)
	mock.lockGetClientID.Unlock()
	return mock.GetClientIDFunc(clusterID)
}

// GetClientIDCalls gets all the calls that were made to GetClientID.
// Check the length with:
//
//	len(mockedClusterService.GetClientIDCalls())
func (mock *ClusterServiceMock) GetClientIDCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetClientID.RLock()
	calls = mock.calls.GetClientID
	mock.lockGetClientID.RUnlock()
	return calls
}

// GetClusterDNS calls GetClusterDNSFunc.
func (mock *ClusterServiceMock) GetClusterDNS(clusterID string) (string, *apiErrors.ServiceError) {
	if mock.GetClusterDNSFunc == nil {
		panic("ClusterServiceMock.GetClusterDNSFunc: method is nil but ClusterService.GetClusterDNS was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetClusterDNS.Lock()
	mock.calls.GetClusterDNS = append(mock.calls.GetClusterDNS, callInfo)
	mock.lockGetClusterDNS.Unlock()
	return mock.GetClusterDNSFunc(clusterID)
}

// GetClusterDNSCalls gets all the calls that were made to GetClusterDNS.
// Check the length with:
//
//	len(mockedClusterService.GetClusterDNSCalls())
func (mock *ClusterServiceMock) GetClusterDNSCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetClusterDNS.RLock()
	calls = mock.calls.GetClusterDNS
	mock.lockGetClusterDNS.RUnlock()
	return calls
}

// GetExternalID calls GetExternalIDFunc.
func (mock *ClusterServiceMock) GetExternalID(clusterID string) (string, *apiErrors.ServiceError) {
	if mock.GetExternalIDFunc == nil {
		panic("ClusterServiceMock.GetExternalIDFunc: method is nil but ClusterService.GetExternalID was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetExternalID.Lock()
	mock.calls.GetExternalID = append(mock.calls.GetExternalID, callInfo)
	mock.lockGetExternalID.Unlock()
	return mock.GetExternalIDFunc(clusterID)
}

// GetExternalIDCalls gets all the calls that were made to GetExternalID.
// Check the length with:
//
//	len(mockedClusterService.GetExternalIDCalls())
func (mock *ClusterServiceMock) GetExternalIDCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetExternalID.RLock()
	calls = mock.calls.GetExternalID
	mock.lockGetExternalID.RUnlock()
	return calls
}

// InstallClusterLogging calls InstallClusterLoggingFunc.
func (mock *ClusterServiceMock) InstallClusterLogging(cluster *api.Cluster, params []ocm.Parameter) (bool, *apiErrors.ServiceError) {
	if mock.InstallClusterLoggingFunc == nil {
		panic("ClusterServiceMock.InstallClusterLoggingFunc: method is nil but ClusterService.InstallClusterLogging was just called")
	}
	callInfo := struct {
		Cluster *api.Cluster
		Params  []ocm.Parameter
	}{
		Cluster: cluster,
		Params:  params,
	}
	mock.lockInstallClusterLogging.Lock()
	mock.calls.InstallClusterLogging = append(mock.calls.InstallClusterLogging, callInfo)
	mock.lockInstallClusterLogging.Unlock()
	return mock.InstallClusterLoggingFunc(cluster, params)
}

// InstallClusterLoggingCalls gets all the calls that were made to InstallClusterLogging.
// Check the length with:
//
//	len(mockedClusterService.InstallClusterLoggingCalls())
func (mock *ClusterServiceMock) InstallClusterLoggingCalls() []struct {
	Cluster *api.Cluster
	Params  []ocm.Parameter
} {
	var calls []struct {
		Cluster *api.Cluster
		Params  []ocm.Parameter
	}
	mock.lockInstallClusterLogging.RLock()
	calls = mock.calls.InstallClusterLogging
	mock.lockInstallClusterLogging.RUnlock()
	return calls
}

// InstallStrimzi calls InstallStrimziFunc.
func (mock *ClusterServiceMock) InstallStrimzi(cluster *api.Cluster) (bool, *apiErrors.ServiceError) {
	if mock.InstallStrimziFunc == nil {
		panic("ClusterServiceMock.InstallStrimziFunc: method is nil but ClusterService.InstallStrimzi was just called")
	}
	callInfo := struct {
		Cluster *api.Cluster
	}{
		Cluster: cluster,
	}
	mock.lockInstallStrimzi.Lock()
	mock.calls.InstallStrimzi = append(mock.calls.InstallStrimzi, callInfo)
	mock.lockInstallStrimzi.Unlock()
	return mock.InstallStrimziFunc(cluster)
}

// InstallStrimziCalls gets all the calls that were made to InstallStrimzi.
// Check the length with:
//
//	len(mockedClusterService.InstallStrimziCalls())
func (mock *ClusterServiceMock) InstallStrimziCalls() []struct {
	Cluster *api.Cluster
} {
	var calls []struct {
		Cluster *api.Cluster
	}
	mock.lockInstallStrimzi.RLock()
	calls = mock.calls.InstallStrimzi
	mock.lockInstallStrimzi.RUnlock()
	return calls
}

// IsStrimziKafkaVersionAvailableInCluster calls IsStrimziKafkaVersionAvailableInClusterFunc.
func (mock *ClusterServiceMock) IsStrimziKafkaVersionAvailableInCluster(cluster *api.Cluster, strimziVersion string, kafkaVersion string, ibpVersion string) (bool, error) {
	if mock.IsStrimziKafkaVersionAvailableInClusterFunc == nil {
		panic("ClusterServiceMock.IsStrimziKafkaVersionAvailableInClusterFunc: method is nil but ClusterService.IsStrimziKafkaVersionAvailableInCluster was just called")
	}
	callInfo := struct {
		Cluster        *api.Cluster
		StrimziVersion string
		KafkaVersion   string
		IbpVersion     string
	}{
		Cluster:        cluster,
		StrimziVersion: strimziVersion,
		KafkaVersion:   kafkaVersion,
		IbpVersion:     ibpVersion,
	}
	mock.lockIsStrimziKafkaVersionAvailableInCluster.Lock()
	mock.calls.IsStrimziKafkaVersionAvailableInCluster = append(mock.calls.IsStrimziKafkaVersionAvailableInCluster, callInfo)
	mock.lockIsStrimziKafkaVersionAvailableInCluster.Unlock()
	return mock.IsStrimziKafkaVersionAvailableInClusterFunc(cluster, strimziVersion, kafkaVersion, ibpVersion)
}

// IsStrimziKafkaVersionAvailableInClusterCalls gets all the calls that were made to IsStrimziKafkaVersionAvailableInCluster.
// Check the length with:
//
//	len(mockedClusterService.IsStrimziKafkaVersionAvailableInClusterCalls())
func (mock *ClusterServiceMock) IsStrimziKafkaVersionAvailableInClusterCalls() []struct {
	Cluster        *api.Cluster
	StrimziVersion string
	KafkaVersion   string
	IbpVersion     string
} {
	var calls []struct {
		Cluster        *api.Cluster
		StrimziVersion string
		KafkaVersion   string
		IbpVersion     string
	}
	mock.lockIsStrimziKafkaVersionAvailableInCluster.RLock()
	calls = mock.calls.IsStrimziKafkaVersionAvailableInCluster
	mock.lockIsStrimziKafkaVersionAvailableInCluster.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ClusterServiceMock) List(ctx context.Context) ([]*api.Cluster, *apiErrors.ServiceError) {
	if mock.ListFunc == nil {
		panic("ClusterServiceMock.ListFunc: method is nil but ClusterService.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedClusterService.ListCalls())
func (mock *ClusterServiceMock) ListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ListByStatus calls ListByStatusFunc.
func (mock *ClusterServiceMock) ListByStatus(state api.ClusterStatus) ([]api.Cluster, *apiErrors.ServiceError) {
	if mock.ListByStatusFunc == nil {
		panic("ClusterServiceMock.ListByStatusFunc: method is nil but ClusterService.ListByStatus was just called")
	}
	callInfo := struct {
		State api.ClusterStatus
	}{
		State: state,
	}
	mock.lockListByStatus.Lock()
	mock.calls.ListByStatus = append(mock.calls.ListByStatus, callInfo)
	mock.lockListByStatus.Unlock()
	return mock.ListByStatusFunc(state)
}

// ListByStatusCalls gets all the calls that were made to ListByStatus.
// Check the length with:
//
//	len(mockedClusterService.ListByStatusCalls())
func (mock *ClusterServiceMock) ListByStatusCalls() []struct {
	State api.ClusterStatus
} {
	var calls []struct {
		State api.ClusterStatus
	}
	mock.lockListByStatus.RLock()
	calls = mock.calls.ListByStatus
	mock.lockListByStatus.RUnlock()
	return calls
}

// ListGroupByProviderAndRegion calls ListGroupByProviderAndRegionFunc.
func (mock *ClusterServiceMock) ListGroupByProviderAndRegion(providers []string, regions []string, status []string) ([]*ResGroupCPRegion, *apiErrors.ServiceError) {
	if mock.ListGroupByProviderAndRegionFunc == nil {
		panic("ClusterServiceMock.ListGroupByProviderAndRegionFunc: method is nil but ClusterService.ListGroupByProviderAndRegion was just called")
	}
	callInfo := struct {
		Providers []string
		Regions   []string
		Status    []string
	}{
		Providers: providers,
		Regions:   regions,
		Status:    status,
	}
	mock.lockListGroupByProviderAndRegion.Lock()
	mock.calls.ListGroupByProviderAndRegion = append(mock.calls.ListGroupByProviderAndRegion, callInfo)
	mock.lockListGroupByProviderAndRegion.Unlock()
	return mock.ListGroupByProviderAndRegionFunc(providers, regions, status)
}

// ListGroupByProviderAndRegionCalls gets all the calls that were made to ListGroupByProviderAndRegion.
// Check the length with:
//
//	len(mockedClusterService.ListGroupByProviderAndRegionCalls())
func (mock *ClusterServiceMock) ListGroupByProviderAndRegionCalls() []struct {
	Providers []string
	Regions   []string
	Status    []string
} {
	var calls []struct {
		Providers []string
		Regions   []string
		Status    []string
	}
	mock.lockListGroupByProviderAndRegion.RLock()
	calls = mock.calls.ListGroupByProviderAndRegion
	mock.lockListGroupByProviderAndRegion.RUnlock()
	return calls
}

// ListNonEnterpriseClusterIDs calls ListNonEnterpriseClusterIDsFunc.
func (mock *ClusterServiceMock) ListNonEnterpriseClusterIDs() ([]api.Cluster, *apiErrors.ServiceError) {
	if mock.ListNonEnterpriseClusterIDsFunc == nil {
		panic("ClusterServiceMock.ListNonEnterpriseClusterIDsFunc: method is nil but ClusterService.ListNonEnterpriseClusterIDs was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListNonEnterpriseClusterIDs.Lock()
	mock.calls.ListNonEnterpriseClusterIDs = append(mock.calls.ListNonEnterpriseClusterIDs, callInfo)
	mock.lockListNonEnterpriseClusterIDs.Unlock()
	return mock.ListNonEnterpriseClusterIDsFunc()
}

// ListNonEnterpriseClusterIDsCalls gets all the calls that were made to ListNonEnterpriseClusterIDs.
// Check the length with:
//
//	len(mockedClusterService.ListNonEnterpriseClusterIDsCalls())
func (mock *ClusterServiceMock) ListNonEnterpriseClusterIDsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListNonEnterpriseClusterIDs.RLock()
	calls = mock.calls.ListNonEnterpriseClusterIDs
	mock.lockListNonEnterpriseClusterIDs.RUnlock()
	return calls
}

// RegisterClusterJob calls RegisterClusterJobFunc.
func (mock *ClusterServiceMock) RegisterClusterJob(clusterRequest *api.Cluster) *apiErrors.ServiceError {
	if mock.RegisterClusterJobFunc == nil {
		panic("ClusterServiceMock.RegisterClusterJobFunc: method is nil but ClusterService.RegisterClusterJob was just called")
	}
	callInfo := struct {
		ClusterRequest *api.Cluster
	}{
		ClusterRequest: clusterRequest,
	}
	mock.lockRegisterClusterJob.Lock()
	mock.calls.RegisterClusterJob = append(mock.calls.RegisterClusterJob, callInfo)
	mock.lockRegisterClusterJob.Unlock()
	return mock.RegisterClusterJobFunc(clusterRequest)
}

// RegisterClusterJobCalls gets all the calls that were made to RegisterClusterJob.
// Check the length with:
//
//	len(mockedClusterService.RegisterClusterJobCalls())
func (mock *ClusterServiceMock) RegisterClusterJobCalls() []struct {
	ClusterRequest *api.Cluster
} {
	var calls []struct {
		ClusterRequest *api.Cluster
	}
	mock.lockRegisterClusterJob.RLock()
	calls = mock.calls.RegisterClusterJob
	mock.lockRegisterClusterJob.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ClusterServiceMock) Update(cluster api.Cluster) *apiErrors.ServiceError {
	if mock.UpdateFunc == nil {
		panic("ClusterServiceMock.UpdateFunc: method is nil but ClusterService.Update was just called")
	}
	callInfo := struct {
		Cluster api.Cluster
	}{
		Cluster: cluster,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(cluster)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedClusterService.UpdateCalls())
func (mock *ClusterServiceMock) UpdateCalls() []struct {
	Cluster api.Cluster
} {
	var calls []struct {
		Cluster api.Cluster
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// UpdateMultiClusterStatus calls UpdateMultiClusterStatusFunc.
func (mock *ClusterServiceMock) UpdateMultiClusterStatus(clusterIDs []string, status api.ClusterStatus) *apiErrors.ServiceError {
	if mock.UpdateMultiClusterStatusFunc == nil {
		panic("ClusterServiceMock.UpdateMultiClusterStatusFunc: method is nil but ClusterService.UpdateMultiClusterStatus was just called")
	}
	callInfo := struct {
		ClusterIDs []string
		Status     api.ClusterStatus
	}{
		ClusterIDs: clusterIDs,
		Status:     status,
	}
	mock.lockUpdateMultiClusterStatus.Lock()
	mock.calls.UpdateMultiClusterStatus = append(mock.calls.UpdateMultiClusterStatus, callInfo)
	mock.lockUpdateMultiClusterStatus.Unlock()
	return mock.UpdateMultiClusterStatusFunc(clusterIDs, status)
}

// UpdateMultiClusterStatusCalls gets all the calls that were made to UpdateMultiClusterStatus.
// Check the length with:
//
//	len(mockedClusterService.UpdateMultiClusterStatusCalls())
func (mock *ClusterServiceMock) UpdateMultiClusterStatusCalls() []struct {
	ClusterIDs []string
	Status     api.ClusterStatus
} {
	var calls []struct {
		ClusterIDs []string
		Status     api.ClusterStatus
	}
	mock.lockUpdateMultiClusterStatus.RLock()
	calls = mock.calls.UpdateMultiClusterStatus
	mock.lockUpdateMultiClusterStatus.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *ClusterServiceMock) UpdateStatus(cluster api.Cluster, status api.ClusterStatus) error {
	if mock.UpdateStatusFunc == nil {
		panic("ClusterServiceMock.UpdateStatusFunc: method is nil but ClusterService.UpdateStatus was just called")
	}
	callInfo := struct {
		Cluster api.Cluster
		Status  api.ClusterStatus
	}{
		Cluster: cluster,
		Status:  status,
	}
	mock.lockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	mock.lockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(cluster, status)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//
//	len(mockedClusterService.UpdateStatusCalls())
func (mock *ClusterServiceMock) UpdateStatusCalls() []struct {
	Cluster api.Cluster
	Status  api.ClusterStatus
} {
	var calls []struct {
		Cluster api.Cluster
		Status  api.ClusterStatus
	}
	mock.lockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	mock.lockUpdateStatus.RUnlock()
	return calls
}
