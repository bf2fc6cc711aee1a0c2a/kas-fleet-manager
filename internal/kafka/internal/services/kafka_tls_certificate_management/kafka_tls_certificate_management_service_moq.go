// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package kafka_tls_certificate_management

import (
	"context"
	"sync"
)

// Ensure, that KafkaTLSCertificateManagementServiceMock does implement KafkaTLSCertificateManagementService.
// If this is not the case, regenerate this file with moq.
var _ KafkaTLSCertificateManagementService = &KafkaTLSCertificateManagementServiceMock{}

// KafkaTLSCertificateManagementServiceMock is a mock implementation of KafkaTLSCertificateManagementService.
//
//	func TestSomethingThatUsesKafkaTLSCertificateManagementService(t *testing.T) {
//
//		// make and configure a mocked KafkaTLSCertificateManagementService
//		mockedKafkaTLSCertificateManagementService := &KafkaTLSCertificateManagementServiceMock{
//			GetCertificateFunc: func(ctx context.Context, request GetCertificateRequest) (Certificate, error) {
//				panic("mock out the GetCertificate method")
//			},
//			IsAutomaticCertificateManagementEnabledFunc: func() bool {
//				panic("mock out the IsAutomaticCertificateManagementEnabled method")
//			},
//			IsKafkaExternalCertificateEnabledFunc: func() bool {
//				panic("mock out the IsKafkaExternalCertificateEnabled method")
//			},
//			ManageCertificateFunc: func(ctx context.Context, domain string) (CertificateManagementOutput, error) {
//				panic("mock out the ManageCertificate method")
//			},
//			RevokeCertificateFunc: func(ctx context.Context, domain string, reason CertificateRevocationReason) error {
//				panic("mock out the RevokeCertificate method")
//			},
//		}
//
//		// use mockedKafkaTLSCertificateManagementService in code that requires KafkaTLSCertificateManagementService
//		// and then make assertions.
//
//	}
type KafkaTLSCertificateManagementServiceMock struct {
	// GetCertificateFunc mocks the GetCertificate method.
	GetCertificateFunc func(ctx context.Context, request GetCertificateRequest) (Certificate, error)

	// IsAutomaticCertificateManagementEnabledFunc mocks the IsAutomaticCertificateManagementEnabled method.
	IsAutomaticCertificateManagementEnabledFunc func() bool

	// IsKafkaExternalCertificateEnabledFunc mocks the IsKafkaExternalCertificateEnabled method.
	IsKafkaExternalCertificateEnabledFunc func() bool

	// ManageCertificateFunc mocks the ManageCertificate method.
	ManageCertificateFunc func(ctx context.Context, domain string) (CertificateManagementOutput, error)

	// RevokeCertificateFunc mocks the RevokeCertificate method.
	RevokeCertificateFunc func(ctx context.Context, domain string, reason CertificateRevocationReason) error

	// calls tracks calls to the methods.
	calls struct {
		// GetCertificate holds details about calls to the GetCertificate method.
		GetCertificate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Request is the request argument value.
			Request GetCertificateRequest
		}
		// IsAutomaticCertificateManagementEnabled holds details about calls to the IsAutomaticCertificateManagementEnabled method.
		IsAutomaticCertificateManagementEnabled []struct {
		}
		// IsKafkaExternalCertificateEnabled holds details about calls to the IsKafkaExternalCertificateEnabled method.
		IsKafkaExternalCertificateEnabled []struct {
		}
		// ManageCertificate holds details about calls to the ManageCertificate method.
		ManageCertificate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Domain is the domain argument value.
			Domain string
		}
		// RevokeCertificate holds details about calls to the RevokeCertificate method.
		RevokeCertificate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Domain is the domain argument value.
			Domain string
			// Reason is the reason argument value.
			Reason CertificateRevocationReason
		}
	}
	lockGetCertificate                          sync.RWMutex
	lockIsAutomaticCertificateManagementEnabled sync.RWMutex
	lockIsKafkaExternalCertificateEnabled       sync.RWMutex
	lockManageCertificate                       sync.RWMutex
	lockRevokeCertificate                       sync.RWMutex
}

// GetCertificate calls GetCertificateFunc.
func (mock *KafkaTLSCertificateManagementServiceMock) GetCertificate(ctx context.Context, request GetCertificateRequest) (Certificate, error) {
	if mock.GetCertificateFunc == nil {
		panic("KafkaTLSCertificateManagementServiceMock.GetCertificateFunc: method is nil but KafkaTLSCertificateManagementService.GetCertificate was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Request GetCertificateRequest
	}{
		Ctx:     ctx,
		Request: request,
	}
	mock.lockGetCertificate.Lock()
	mock.calls.GetCertificate = append(mock.calls.GetCertificate, callInfo)
	mock.lockGetCertificate.Unlock()
	return mock.GetCertificateFunc(ctx, request)
}

// GetCertificateCalls gets all the calls that were made to GetCertificate.
// Check the length with:
//
//	len(mockedKafkaTLSCertificateManagementService.GetCertificateCalls())
func (mock *KafkaTLSCertificateManagementServiceMock) GetCertificateCalls() []struct {
	Ctx     context.Context
	Request GetCertificateRequest
} {
	var calls []struct {
		Ctx     context.Context
		Request GetCertificateRequest
	}
	mock.lockGetCertificate.RLock()
	calls = mock.calls.GetCertificate
	mock.lockGetCertificate.RUnlock()
	return calls
}

// IsAutomaticCertificateManagementEnabled calls IsAutomaticCertificateManagementEnabledFunc.
func (mock *KafkaTLSCertificateManagementServiceMock) IsAutomaticCertificateManagementEnabled() bool {
	if mock.IsAutomaticCertificateManagementEnabledFunc == nil {
		panic("KafkaTLSCertificateManagementServiceMock.IsAutomaticCertificateManagementEnabledFunc: method is nil but KafkaTLSCertificateManagementService.IsAutomaticCertificateManagementEnabled was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsAutomaticCertificateManagementEnabled.Lock()
	mock.calls.IsAutomaticCertificateManagementEnabled = append(mock.calls.IsAutomaticCertificateManagementEnabled, callInfo)
	mock.lockIsAutomaticCertificateManagementEnabled.Unlock()
	return mock.IsAutomaticCertificateManagementEnabledFunc()
}

// IsAutomaticCertificateManagementEnabledCalls gets all the calls that were made to IsAutomaticCertificateManagementEnabled.
// Check the length with:
//
//	len(mockedKafkaTLSCertificateManagementService.IsAutomaticCertificateManagementEnabledCalls())
func (mock *KafkaTLSCertificateManagementServiceMock) IsAutomaticCertificateManagementEnabledCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsAutomaticCertificateManagementEnabled.RLock()
	calls = mock.calls.IsAutomaticCertificateManagementEnabled
	mock.lockIsAutomaticCertificateManagementEnabled.RUnlock()
	return calls
}

// IsKafkaExternalCertificateEnabled calls IsKafkaExternalCertificateEnabledFunc.
func (mock *KafkaTLSCertificateManagementServiceMock) IsKafkaExternalCertificateEnabled() bool {
	if mock.IsKafkaExternalCertificateEnabledFunc == nil {
		panic("KafkaTLSCertificateManagementServiceMock.IsKafkaExternalCertificateEnabledFunc: method is nil but KafkaTLSCertificateManagementService.IsKafkaExternalCertificateEnabled was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsKafkaExternalCertificateEnabled.Lock()
	mock.calls.IsKafkaExternalCertificateEnabled = append(mock.calls.IsKafkaExternalCertificateEnabled, callInfo)
	mock.lockIsKafkaExternalCertificateEnabled.Unlock()
	return mock.IsKafkaExternalCertificateEnabledFunc()
}

// IsKafkaExternalCertificateEnabledCalls gets all the calls that were made to IsKafkaExternalCertificateEnabled.
// Check the length with:
//
//	len(mockedKafkaTLSCertificateManagementService.IsKafkaExternalCertificateEnabledCalls())
func (mock *KafkaTLSCertificateManagementServiceMock) IsKafkaExternalCertificateEnabledCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsKafkaExternalCertificateEnabled.RLock()
	calls = mock.calls.IsKafkaExternalCertificateEnabled
	mock.lockIsKafkaExternalCertificateEnabled.RUnlock()
	return calls
}

// ManageCertificate calls ManageCertificateFunc.
func (mock *KafkaTLSCertificateManagementServiceMock) ManageCertificate(ctx context.Context, domain string) (CertificateManagementOutput, error) {
	if mock.ManageCertificateFunc == nil {
		panic("KafkaTLSCertificateManagementServiceMock.ManageCertificateFunc: method is nil but KafkaTLSCertificateManagementService.ManageCertificate was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Domain string
	}{
		Ctx:    ctx,
		Domain: domain,
	}
	mock.lockManageCertificate.Lock()
	mock.calls.ManageCertificate = append(mock.calls.ManageCertificate, callInfo)
	mock.lockManageCertificate.Unlock()
	return mock.ManageCertificateFunc(ctx, domain)
}

// ManageCertificateCalls gets all the calls that were made to ManageCertificate.
// Check the length with:
//
//	len(mockedKafkaTLSCertificateManagementService.ManageCertificateCalls())
func (mock *KafkaTLSCertificateManagementServiceMock) ManageCertificateCalls() []struct {
	Ctx    context.Context
	Domain string
} {
	var calls []struct {
		Ctx    context.Context
		Domain string
	}
	mock.lockManageCertificate.RLock()
	calls = mock.calls.ManageCertificate
	mock.lockManageCertificate.RUnlock()
	return calls
}

// RevokeCertificate calls RevokeCertificateFunc.
func (mock *KafkaTLSCertificateManagementServiceMock) RevokeCertificate(ctx context.Context, domain string, reason CertificateRevocationReason) error {
	if mock.RevokeCertificateFunc == nil {
		panic("KafkaTLSCertificateManagementServiceMock.RevokeCertificateFunc: method is nil but KafkaTLSCertificateManagementService.RevokeCertificate was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Domain string
		Reason CertificateRevocationReason
	}{
		Ctx:    ctx,
		Domain: domain,
		Reason: reason,
	}
	mock.lockRevokeCertificate.Lock()
	mock.calls.RevokeCertificate = append(mock.calls.RevokeCertificate, callInfo)
	mock.lockRevokeCertificate.Unlock()
	return mock.RevokeCertificateFunc(ctx, domain, reason)
}

// RevokeCertificateCalls gets all the calls that were made to RevokeCertificate.
// Check the length with:
//
//	len(mockedKafkaTLSCertificateManagementService.RevokeCertificateCalls())
func (mock *KafkaTLSCertificateManagementServiceMock) RevokeCertificateCalls() []struct {
	Ctx    context.Context
	Domain string
	Reason CertificateRevocationReason
} {
	var calls []struct {
		Ctx    context.Context
		Domain string
		Reason CertificateRevocationReason
	}
	mock.lockRevokeCertificate.RLock()
	calls = mock.calls.RevokeCertificate
	mock.lockRevokeCertificate.RUnlock()
	return calls
}
