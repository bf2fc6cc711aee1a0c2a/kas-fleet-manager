// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package kafka_tls_certificate_management

import (
	"context"
	"sync"
)

// Ensure, that certMagicClientWrapperMock does implement certMagicClientWrapper.
// If this is not the case, regenerate this file with moq.
var _ certMagicClientWrapper = &certMagicClientWrapperMock{}

// certMagicClientWrapperMock is a mock implementation of certMagicClientWrapper.
//
//	func TestSomethingThatUsescertMagicClientWrapper(t *testing.T) {
//
//		// make and configure a mocked certMagicClientWrapper
//		mockedcertMagicClientWrapper := &certMagicClientWrapperMock{
//			GetCerticateRefsFunc: func(domain string) CertificateManagementOutput {
//				panic("mock out the GetCerticateRefs method")
//			},
//			ManageSyncFunc: func(ctx context.Context, domainNames []string) error {
//				panic("mock out the ManageSync method")
//			},
//			RevokeCertFunc: func(ctx context.Context, domain string, reason int) error {
//				panic("mock out the RevokeCert method")
//			},
//		}
//
//		// use mockedcertMagicClientWrapper in code that requires certMagicClientWrapper
//		// and then make assertions.
//
//	}
type certMagicClientWrapperMock struct {
	// GetCerticateRefsFunc mocks the GetCerticateRefs method.
	GetCerticateRefsFunc func(domain string) CertificateManagementOutput

	// ManageSyncFunc mocks the ManageSync method.
	ManageSyncFunc func(ctx context.Context, domainNames []string) error

	// RevokeCertFunc mocks the RevokeCert method.
	RevokeCertFunc func(ctx context.Context, domain string, reason int) error

	// calls tracks calls to the methods.
	calls struct {
		// GetCerticateRefs holds details about calls to the GetCerticateRefs method.
		GetCerticateRefs []struct {
			// Domain is the domain argument value.
			Domain string
		}
		// ManageSync holds details about calls to the ManageSync method.
		ManageSync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DomainNames is the domainNames argument value.
			DomainNames []string
		}
		// RevokeCert holds details about calls to the RevokeCert method.
		RevokeCert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Domain is the domain argument value.
			Domain string
			// Reason is the reason argument value.
			Reason int
		}
	}
	lockGetCerticateRefs sync.RWMutex
	lockManageSync       sync.RWMutex
	lockRevokeCert       sync.RWMutex
}

// GetCerticateRefs calls GetCerticateRefsFunc.
func (mock *certMagicClientWrapperMock) GetCerticateRefs(domain string) CertificateManagementOutput {
	if mock.GetCerticateRefsFunc == nil {
		panic("certMagicClientWrapperMock.GetCerticateRefsFunc: method is nil but certMagicClientWrapper.GetCerticateRefs was just called")
	}
	callInfo := struct {
		Domain string
	}{
		Domain: domain,
	}
	mock.lockGetCerticateRefs.Lock()
	mock.calls.GetCerticateRefs = append(mock.calls.GetCerticateRefs, callInfo)
	mock.lockGetCerticateRefs.Unlock()
	return mock.GetCerticateRefsFunc(domain)
}

// GetCerticateRefsCalls gets all the calls that were made to GetCerticateRefs.
// Check the length with:
//
//	len(mockedcertMagicClientWrapper.GetCerticateRefsCalls())
func (mock *certMagicClientWrapperMock) GetCerticateRefsCalls() []struct {
	Domain string
} {
	var calls []struct {
		Domain string
	}
	mock.lockGetCerticateRefs.RLock()
	calls = mock.calls.GetCerticateRefs
	mock.lockGetCerticateRefs.RUnlock()
	return calls
}

// ManageSync calls ManageSyncFunc.
func (mock *certMagicClientWrapperMock) ManageSync(ctx context.Context, domainNames []string) error {
	if mock.ManageSyncFunc == nil {
		panic("certMagicClientWrapperMock.ManageSyncFunc: method is nil but certMagicClientWrapper.ManageSync was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		DomainNames []string
	}{
		Ctx:         ctx,
		DomainNames: domainNames,
	}
	mock.lockManageSync.Lock()
	mock.calls.ManageSync = append(mock.calls.ManageSync, callInfo)
	mock.lockManageSync.Unlock()
	return mock.ManageSyncFunc(ctx, domainNames)
}

// ManageSyncCalls gets all the calls that were made to ManageSync.
// Check the length with:
//
//	len(mockedcertMagicClientWrapper.ManageSyncCalls())
func (mock *certMagicClientWrapperMock) ManageSyncCalls() []struct {
	Ctx         context.Context
	DomainNames []string
} {
	var calls []struct {
		Ctx         context.Context
		DomainNames []string
	}
	mock.lockManageSync.RLock()
	calls = mock.calls.ManageSync
	mock.lockManageSync.RUnlock()
	return calls
}

// RevokeCert calls RevokeCertFunc.
func (mock *certMagicClientWrapperMock) RevokeCert(ctx context.Context, domain string, reason int) error {
	if mock.RevokeCertFunc == nil {
		panic("certMagicClientWrapperMock.RevokeCertFunc: method is nil but certMagicClientWrapper.RevokeCert was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Domain string
		Reason int
	}{
		Ctx:    ctx,
		Domain: domain,
		Reason: reason,
	}
	mock.lockRevokeCert.Lock()
	mock.calls.RevokeCert = append(mock.calls.RevokeCert, callInfo)
	mock.lockRevokeCert.Unlock()
	return mock.RevokeCertFunc(ctx, domain, reason)
}

// RevokeCertCalls gets all the calls that were made to RevokeCert.
// Check the length with:
//
//	len(mockedcertMagicClientWrapper.RevokeCertCalls())
func (mock *certMagicClientWrapperMock) RevokeCertCalls() []struct {
	Ctx    context.Context
	Domain string
	Reason int
} {
	var calls []struct {
		Ctx    context.Context
		Domain string
		Reason int
	}
	mock.lockRevokeCert.RLock()
	calls = mock.calls.RevokeCert
	mock.lockRevokeCert.RUnlock()
	return calls
}
