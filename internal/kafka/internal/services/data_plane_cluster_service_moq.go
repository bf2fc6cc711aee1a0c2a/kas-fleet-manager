// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"context"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/internal/kafka/internal/api/dbapi"
	serviceError "github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/errors"
	"sync"
)

// Ensure, that DataPlaneClusterServiceMock does implement DataPlaneClusterService.
// If this is not the case, regenerate this file with moq.
var _ DataPlaneClusterService = &DataPlaneClusterServiceMock{}

// DataPlaneClusterServiceMock is a mock implementation of DataPlaneClusterService.
//
// 	func TestSomethingThatUsesDataPlaneClusterService(t *testing.T) {
//
// 		// make and configure a mocked DataPlaneClusterService
// 		mockedDataPlaneClusterService := &DataPlaneClusterServiceMock{
// 			GetDataPlaneClusterConfigFunc: func(ctx context.Context, clusterID string) (*dbapi.DataPlaneClusterConfig, *serviceError.ServiceError) {
// 				panic("mock out the GetDataPlaneClusterConfig method")
// 			},
// 			UpdateDataPlaneClusterStatusFunc: func(ctx context.Context, clusterID string, status *dbapi.DataPlaneClusterStatus) *serviceError.ServiceError {
// 				panic("mock out the UpdateDataPlaneClusterStatus method")
// 			},
// 		}
//
// 		// use mockedDataPlaneClusterService in code that requires DataPlaneClusterService
// 		// and then make assertions.
//
// 	}
type DataPlaneClusterServiceMock struct {
	// GetDataPlaneClusterConfigFunc mocks the GetDataPlaneClusterConfig method.
	GetDataPlaneClusterConfigFunc func(ctx context.Context, clusterID string) (*dbapi.DataPlaneClusterConfig, *serviceError.ServiceError)

	// UpdateDataPlaneClusterStatusFunc mocks the UpdateDataPlaneClusterStatus method.
	UpdateDataPlaneClusterStatusFunc func(ctx context.Context, clusterID string, status *dbapi.DataPlaneClusterStatus) *serviceError.ServiceError

	// calls tracks calls to the methods.
	calls struct {
		// GetDataPlaneClusterConfig holds details about calls to the GetDataPlaneClusterConfig method.
		GetDataPlaneClusterConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// UpdateDataPlaneClusterStatus holds details about calls to the UpdateDataPlaneClusterStatus method.
		UpdateDataPlaneClusterStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClusterID is the clusterID argument value.
			ClusterID string
			// Status is the status argument value.
			Status *dbapi.DataPlaneClusterStatus
		}
	}
	lockGetDataPlaneClusterConfig    sync.RWMutex
	lockUpdateDataPlaneClusterStatus sync.RWMutex
}

// GetDataPlaneClusterConfig calls GetDataPlaneClusterConfigFunc.
func (mock *DataPlaneClusterServiceMock) GetDataPlaneClusterConfig(ctx context.Context, clusterID string) (*dbapi.DataPlaneClusterConfig, *serviceError.ServiceError) {
	if mock.GetDataPlaneClusterConfigFunc == nil {
		panic("DataPlaneClusterServiceMock.GetDataPlaneClusterConfigFunc: method is nil but DataPlaneClusterService.GetDataPlaneClusterConfig was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ClusterID string
	}{
		Ctx:       ctx,
		ClusterID: clusterID,
	}
	mock.lockGetDataPlaneClusterConfig.Lock()
	mock.calls.GetDataPlaneClusterConfig = append(mock.calls.GetDataPlaneClusterConfig, callInfo)
	mock.lockGetDataPlaneClusterConfig.Unlock()
	return mock.GetDataPlaneClusterConfigFunc(ctx, clusterID)
}

// GetDataPlaneClusterConfigCalls gets all the calls that were made to GetDataPlaneClusterConfig.
// Check the length with:
//     len(mockedDataPlaneClusterService.GetDataPlaneClusterConfigCalls())
func (mock *DataPlaneClusterServiceMock) GetDataPlaneClusterConfigCalls() []struct {
	Ctx       context.Context
	ClusterID string
} {
	var calls []struct {
		Ctx       context.Context
		ClusterID string
	}
	mock.lockGetDataPlaneClusterConfig.RLock()
	calls = mock.calls.GetDataPlaneClusterConfig
	mock.lockGetDataPlaneClusterConfig.RUnlock()
	return calls
}

// UpdateDataPlaneClusterStatus calls UpdateDataPlaneClusterStatusFunc.
func (mock *DataPlaneClusterServiceMock) UpdateDataPlaneClusterStatus(ctx context.Context, clusterID string, status *dbapi.DataPlaneClusterStatus) *serviceError.ServiceError {
	if mock.UpdateDataPlaneClusterStatusFunc == nil {
		panic("DataPlaneClusterServiceMock.UpdateDataPlaneClusterStatusFunc: method is nil but DataPlaneClusterService.UpdateDataPlaneClusterStatus was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		ClusterID string
		Status    *dbapi.DataPlaneClusterStatus
	}{
		Ctx:       ctx,
		ClusterID: clusterID,
		Status:    status,
	}
	mock.lockUpdateDataPlaneClusterStatus.Lock()
	mock.calls.UpdateDataPlaneClusterStatus = append(mock.calls.UpdateDataPlaneClusterStatus, callInfo)
	mock.lockUpdateDataPlaneClusterStatus.Unlock()
	return mock.UpdateDataPlaneClusterStatusFunc(ctx, clusterID, status)
}

// UpdateDataPlaneClusterStatusCalls gets all the calls that were made to UpdateDataPlaneClusterStatus.
// Check the length with:
//     len(mockedDataPlaneClusterService.UpdateDataPlaneClusterStatusCalls())
func (mock *DataPlaneClusterServiceMock) UpdateDataPlaneClusterStatusCalls() []struct {
	Ctx       context.Context
	ClusterID string
	Status    *dbapi.DataPlaneClusterStatus
} {
	var calls []struct {
		Ctx       context.Context
		ClusterID string
		Status    *dbapi.DataPlaneClusterStatus
	}
	mock.lockUpdateDataPlaneClusterStatus.RLock()
	calls = mock.calls.UpdateDataPlaneClusterStatus
	mock.lockUpdateDataPlaneClusterStatus.RUnlock()
	return calls
}
