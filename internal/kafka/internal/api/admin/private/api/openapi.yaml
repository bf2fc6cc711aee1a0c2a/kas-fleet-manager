openapi: 3.0.0
info:
  description: The admin APIs for the fleet manager of Kafka service
  title: Kafka Service Fleet Manager Admin APIs
  version: 0.0.2
servers:
- description: Main (production) server
  url: https://api.openshift.com
- description: Staging server
  url: https://api.stage.openshift.com
- description: localhost
  url: http://localhost:8000
- description: current domain
  url: /
tags:
- name: Admin APIs
paths:
  /api/kafkas_mgmt/v1/admin/kafkas:
    get:
      operationId: getKafkas
      parameters:
      - description: Page index
        examples:
          page:
            value: "1"
        in: query
        name: page
        required: false
        schema:
          type: string
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        in: query
        name: size
        required: false
        schema:
          type: string
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the `kafkaRequests` fields.
          For example, to return all Kafka instances ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Kafka instances ordered by their name _and_ created date, use the following syntax:

          ```sql
          name asc, created_at asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |
          Search criteria.

          The syntax of this parameter is similar to the syntax of the `where` clause of an
          SQL statement. Allowed fields in the search are `cloud_provider`, `name`, `owner`, `region`, and `status`. Allowed comparators are `<>`, `=`, or `LIKE`.
          Allowed joins are `AND` and `OR`. However, you can use a maximum of 10 joins in a search query.

          Examples:

          To return a Kafka instance with the name `my-kafka` and the region `aws`, use the following syntax:

          ```
          name = my-kafka and cloud_provider = aws
          ```[p-]

          To return a Kafka instance with a name that starts with `my`, use the following syntax:

          ```
          name like my%25
          ```

          If the parameter isn't provided, or if the value is empty, then all the Kafka instances
          that the user has permission to see are returned.

          Note. If the query is invalid, an error is returned.
        examples:
          search:
            value: name = my-kafka and cloud_provider = aws
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaList'
          description: Return a list of Kafka instances. This endpoint will return
            all Kafka instances that are stored in the database and the are not filtered
            based on user ids or org ids.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorised to access the service
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of Kafkas
  /api/kafkas_mgmt/v1/admin/kafkas/{id}:
    delete:
      operationId: deleteKafkaById
      parameters:
      - description: The ID of record
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Perform the action in an asynchronous manner
        explode: true
        in: query
        name: async
        required: true
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kafka'
          description: Kafka updated by ID
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorised to access the service
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No Kafka found with the specified ID
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Delete a Kafka by ID
    get:
      operationId: getKafkaById
      parameters:
      - description: The ID of record
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kafka'
          description: Kafka found by ID
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorised to access the service
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No Kafka found with the specified ID
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Return the details of Kafka instance by id
    patch:
      operationId: updateKafkaById
      parameters:
      - description: The ID of record
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KafkaUpdateRequest'
        description: Kafka update data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kafka'
          description: Kafka updated by ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorised to access the service
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No Kafka found with the specified ID
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Update a Kafka instance by id
components:
  schemas:
    Kafka:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - required:
        - kafka_upgrading
        - multi_az
        - strimzi_upgrading
      - $ref: '#/components/schemas/Kafka_allOf'
    KafkaList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/KafkaList_allOf'
    KafkaUpdateRequest:
      example:
        strimzi_version: strimzi_version
        kafka_version: kafka_version
      properties:
        strimzi_version:
          type: string
        kafka_version:
          type: string
      type: object
    Error:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Error_allOf'
    ObjectReference:
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
      type: object
    List:
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
      required:
      - items
      - kind
      - page
      - size
      - total
      type: object
    Kafka_allOf_routes:
      properties:
        domain:
          type: string
        router:
          type: string
    Kafka_allOf:
      properties:
        status:
          description: 'Values: [accepted, preparing, provisioning, ready, failed,
            deprovision, deleting] '
          type: string
        cloud_provider:
          description: Name of Cloud used to deploy. For example AWS
          type: string
        multi_az:
          type: boolean
        region:
          description: 'Values will be regions of specific cloud provider. For example:
            us-east-1 for AWS'
          type: string
        owner:
          type: string
        name:
          type: string
        bootstrap_server_host:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        failed_reason:
          type: string
        actual_kafka_version:
          type: string
        actual_strimzi_version:
          type: string
        desired_kafka_version:
          type: string
        desired_strimzi_version:
          type: string
        kafka_upgrading:
          type: boolean
        strimzi_upgrading:
          type: boolean
        organisation_id:
          type: string
        subscription_id:
          type: string
        sso_client_id:
          type: string
        owner_account_id:
          type: string
        instance_type:
          type: string
        quota_type:
          type: string
        routes:
          items:
            $ref: '#/components/schemas/Kafka_allOf_routes'
          type: array
        routes_created:
          type: boolean
        cluster_id:
          type: string
        namespace:
          type: string
    KafkaList_allOf:
      properties:
        items:
          items:
            allOf:
            - $ref: '#/components/schemas/Kafka'
          type: array
    Error_allOf:
      properties:
        code:
          type: string
        reason:
          type: string
        operation_id:
          type: string
  securitySchemes:
    Bearer:
      bearerFormat: JWT
      scheme: bearer
      type: http
