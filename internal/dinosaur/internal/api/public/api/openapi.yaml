openapi: 3.0.0
info:
  description: Dinosaur Service Fleet Manager is a Rest API to manage Dinosaur instances.
  title: Dinosaur Service Fleet Manager
  version: 1.2.0
servers:
- description: Main (production) server
  url: https://api.openshift.com
- description: Staging server
  url: https://api.stage.openshift.com
- description: localhost
  url: http://localhost:8000
- description: current domain
  url: /
paths:
  /api/dinosaurs_mgmt/v1:
    get:
      operationId: getVersionMetadata
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionMetadata'
          description: Version metadata
      summary: Returns the version metadata
  /api/dinosaurs_mgmt/v1/errors/{id}:
    get:
      operationId: getErrorById
      parameters:
      - description: The ID of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Get error by Id
      summary: Returns the error by id
      tags:
      - errors
  /api/dinosaurs_mgmt/v1/errors:
    get:
      operationId: getErrors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: List of possible errors
      summary: Returns the list of possible API errors
      tags:
      - errors
  /api/dinosaurs_mgmt/v1/status:
    get:
      operationId: getServiceStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStatus'
          description: Ok
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns the status of resources, such as whether maximum service capacity
        has been reached
  /api/dinosaurs_mgmt/v1/dinosaurs/{id}:
    delete:
      operationId: deleteDinosaurById
      parameters:
      - description: The ID of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Perform the action in an asynchronous manner
        explode: true
        in: query
        name: async
        required: true
        schema:
          type: boolean
        style: form
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        "400":
          content:
            application/json:
              examples:
                "400DeletionExample":
                  $ref: '#/components/examples/400DeletionExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              examples:
                "403Example":
                  $ref: '#/components/examples/403Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: User not authorized to access the service
        "404":
          content:
            application/json:
              examples:
                "404DeleteExample":
                  $ref: '#/components/examples/404DeleteExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: No Dinosaur request with specified ID exists
        "500":
          content:
            application/json:
              examples:
                "500DeleteExample":
                  $ref: '#/components/examples/500DeleteExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Deletes a Dinosaur request by ID
    get:
      operationId: getDinosaurById
      parameters:
      - description: The ID of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                DinosaurRequestGetResponseExample:
                  $ref: '#/components/examples/DinosaurRequestExample'
                DinosaurRequestGetResponseWithFailedCreationStatusExample:
                  $ref: '#/components/examples/DinosaurRequestFailedCreationStatusExample'
              schema:
                $ref: '#/components/schemas/DinosaurRequest'
          description: Dinosaur request found by ID
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              examples:
                "403Example":
                  $ref: '#/components/examples/403Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: User not authorized to access the service
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No Dinosaur request with specified ID exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a Dinosaur request by ID
    patch:
      operationId: updateDinosaurById
      parameters:
      - description: The ID of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DinosaurUpdateRequest'
        description: Update owner of dinosaur
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                DinosaurRequestPostResponseExample:
                  $ref: '#/components/examples/DinosaurRequestExample'
              schema:
                $ref: '#/components/schemas/DinosaurRequest'
          description: Dinosaur updated by ID
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorised to access the service
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: No Dinosaur found with the specified ID
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Update a Dinosaur instance by id
  /api/dinosaurs_mgmt/v1/dinosaurs:
    get:
      operationId: getDinosaurs
      parameters:
      - description: Page index
        examples:
          page:
            value: "1"
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: string
        style: form
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the following `dinosaurRequests` fields:

          * host
          * cloud_provider
          * cluster_id
          * created_at
          * href
          * id
          * instance_type
          * multi_az
          * name
          * organisation_id
          * owner
          * region
          * status
          * updated_at
          * version

          For example, to return all Dinosaur instances ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Dinosaur instances ordered by their name _and_ created date, use the following syntax:

          ```sql
          name asc, created_at asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |
          Search criteria.

          The syntax of this parameter is similar to the syntax of the `where` clause of an
          SQL statement. Allowed fields in the search are `cloud_provider`, `name`, `owner`, `region`, and `status`. Allowed comparators are `<>`, `=`, or `LIKE`.
          Allowed joins are `AND` and `OR`. However, you can use a maximum of 10 joins in a search query.

          Examples:

          To return a Dinosaur instance with the name `my-dinosaur` and the region `aws`, use the following syntax:

          ```
          name = my-dinosaur and cloud_provider = aws
          ```[p-]

          To return a Dinosaur instance with a name that starts with `my`, use the following syntax:

          ```
          name like my%25
          ```

          If the parameter isn't provided, or if the value is empty, then all the Dinosaur instances
          that the user has permission to see are returned.

          Note. If the query is invalid, an error is returned.
        examples:
          search:
            value: name = my-dinosaur and cloud_provider = aws
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DinosaurRequestList'
          description: A list of Dinosaur requests
        "400":
          content:
            application/json:
              examples:
                InvalidQueryExample:
                  $ref: '#/components/examples/400InvalidQueryExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              examples:
                "403Example":
                  $ref: '#/components/examples/403Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: User not authorized to access the service
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of Dinosaur requests
    post:
      operationId: createDinosaur
      parameters:
      - description: Perform the action in an asynchronous manner
        explode: true
        in: query
        name: async
        required: true
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            examples:
              USRegion:
                $ref: '#/components/examples/USRegionExample'
              EURegion:
                $ref: '#/components/examples/EURegionExample'
            schema:
              $ref: '#/components/schemas/DinosaurRequestPayload'
        description: Dinosaur data
        required: true
      responses:
        "202":
          content:
            application/json:
              examples:
                DinosaurRequestPostResponseExample:
                  $ref: '#/components/examples/DinosaurRequestExample'
              schema:
                $ref: '#/components/schemas/DinosaurRequest'
          description: Accepted
        "400":
          content:
            application/json:
              examples:
                "400CreationExample":
                  $ref: '#/components/examples/400CreationExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              examples:
                "403Example":
                  $ref: '#/components/examples/403Example'
                "403MaxAllowedInstanceReachedExample":
                  $ref: '#/components/examples/403MaxAllowedInstanceReachedExample'
                "403TermsNotAcceptedExample":
                  $ref: '#/components/examples/403TermsNotAcceptedExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: User forbidden either because the user is not authorized to
            access the service or because the maximum number of instances that can
            be created by this user has been reached.
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource doesn't exist
        "409":
          content:
            application/json:
              examples:
                "409NameConflictExample":
                  $ref: '#/components/examples/409NameConflictExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: A conflict has been detected in the creation of this resource
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred while creating the Dinosaur request
      security:
      - Bearer: []
      summary: Creates a Dinosaur request
  /api/dinosaurs_mgmt/v1/cloud_providers:
    get:
      operationId: getCloudProviders
      parameters:
      - description: Page index
        examples:
          page:
            value: "1"
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: string
        style: form
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudProviderList'
          description: Returned list of supported cloud providers
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns the list of supported cloud providers
  /api/dinosaurs_mgmt/v1/cloud_providers/{id}/regions:
    get:
      operationId: getCloudProviderRegions
      parameters:
      - description: The ID of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: string
        style: form
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: string
        style: form
      - description: The Dinosaur instance type to filter the results by
        examples:
          eval_instance_type:
            value: eval
          standard_instance_type:
            value: standard
        explode: true
        in: query
        name: instance_type
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudRegionList'
          description: Returned list of supported cloud provider regions
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns the list of supported regions of the supported cloud provider
  /api/dinosaurs_mgmt/v1/dinosaurs/{id}/metrics/query_range:
    get:
      operationId: getMetricsByRangeQuery
      parameters:
      - description: The ID of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The length of time in minutes for which to return the metrics
        examples:
          duration:
            value: 5
        explode: true
        in: query
        name: duration
        required: true
        schema:
          default: 5
          format: int64
          maximum: 4320
          minimum: 1
          type: integer
        style: form
      - description: The interval in seconds between data points
        examples:
          interval:
            value: 30
        explode: true
        in: query
        name: interval
        required: true
        schema:
          default: 30
          format: int64
          maximum: 10800
          minimum: 1
          type: integer
        style: form
      - description: List of metrics to fetch. Fetch all metrics when empty. List
          entries are Dinosaur internal metric names.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsRangeQueryList'
          description: Returned JSON array of Prometheus metrics objects from observatorium
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns metrics with timeseries range query by Dinosaur ID
  /api/dinosaurs_mgmt/v1/dinosaurs/{id}/metrics/query:
    get:
      operationId: getMetricsByInstantQuery
      parameters:
      - description: The ID of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: List of metrics to fetch. Fetch all metrics when empty. List
          entries are Dinosaur internal metric names.
        explode: true
        in: query
        name: filters
        required: false
        schema:
          default: []
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsInstantQueryList'
          description: Returned JSON array of Prometheus metrics objects from observatorium
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns metrics with instant query by Dinosaur ID
  /api/dinosaurs_mgmt/v1/dinosaurs/{id}/metrics/federate:
    get:
      operationId: federateMetrics
      parameters:
      - description: The ID of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: Returned Dinosaur metrics in a Prometheus text format
        "400":
          content:
            application/json:
              examples:
                MissingParameterExample:
                  $ref: '#/components/examples/400MissingParameterExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Dinosaur id not found
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns all metrics in scrapeable format for a given dinosaur id
components:
  examples:
    USRegionExample:
      value:
        region: us-east-1
        cloud_provider: aws
        name: serviceapitest
    EURegionExample:
      value:
        region: eu-west-1
        cloud_provider: aws
        name: serviceapitest
    DinosaurRequestExample:
      value:
        id: 1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
        kind: dinosaur
        href: /api/dinosaurs_mgmt/v1/dinosaurs/1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
        status: ready
        cloud_provider: aws
        multi_az: true
        region: us-east-1
        owner: api_dinosaur_service
        name: serviceapi
        host: serviceapi-1isy6rq3jki8q0otmjqfd3ocfrg.example.dinosaur.com
        created_at: 2020-10-05T12:51:24.053142Z
        updated_at: 2020-10-05T12:56:36.362208Z
        version: 2.6.0
        instance_type: standard
    DinosaurRequestFailedCreationStatusExample:
      value:
        id: 1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
        kind: dinosaur
        href: /api/dinosaurs_mgmt/v1/dinosaurs/1iSY6RQ3JKI8Q0OTmjQFd3ocFRg
        status: failed
        cloud_provider: aws
        multi_az: true
        region: us-east-1
        owner: api_dinosaur_service
        name: serviceapi
        host: serviceapi-1isy6rq3jki8q0otmjqfd3ocfrg.example.dinosaur.com
        created_at: 2020-10-05T12:51:24.053142Z
        updated_at: 2020-10-05T12:56:36.362208Z
        failed_reason: a reason the Dinosaur request creation failed
        instance_type: standard
    CloudProviderExample:
      value:
        kind: CloudProvider
        id: aws
        name: aws
        display_name: Amazon Web Services
        enabled: true
    CloudRegionExample:
      value:
        kind: CloudRegion
        id: us-east-1
        display_name: US East, N. Virginia
        enabled: true
        supported_instance_types:
        - standard
        - eval
    MetricsRangeQueryExample:
      value:
        metric:
          __name__: dinosaur_server_brokertopicmetrics_bytes_in_total
          dinosaur_operator_io_cluster: dinosaur-service
          topic: __consumer_offsets
        values:
        - timestamp: 1611670230000
          value: 84154
        - timestamp: 1611670260000
          value: 85888
        - timestamp: 1611670290000
          value: 87622
    MetricsInstantQueryExample:
      value:
        metric:
          __name__: dinosaur_server_brokertopicmetrics_bytes_in_total
          dinosaur_operator_io_cluster: dinosaur-service
          topic: __consumer_offsets
        timestamp: 1611670230000
        value: 84154
    "400DeletionExample":
      value:
        id: "103"
        kind: Error
        href: /api/dinosaurs_mgmt/v1/errors/103
        code: DINOSAURS-MGMT-103
        reason: Synchronous action is not supported, use async=true parameter
        operation_id: 1iWIimqGcrDuL61aUxIZqBTqNRa
    "400CreationExample":
      value:
        id: "103"
        kind: Error
        href: /api/dinosaurs_mgmt/v1/errors/103
        code: DINOSAURS-MGMT-103
        reason: Synchronous action is not supported, use async=true parameter
        operation_id: 1iWIimqGcrDuL61aUxIZqBTqNRa
    "400InvalidQueryExample":
      value:
        id: "23"
        kind: Error
        href: /api/dinosaurs_mgmt/v1/errors/23
        code: DINOSAURS-MGMT-23
        reason: 'Failed to parse search query: Unable to list Dinosaur requests for
          api_dinosaur_service: DINOSAURS-MGMT-23: Failed to parse search query: Unsupported
          column name for search: ''id''. Supported column names are: region, name,
          cloud_provider, name, status. Query invalid: id = 123'
        operation_id: 1lWDGuybIrEnxrAem724gqkkiDv
    "400MissingParameterExample":
      value:
        id: "21"
        kind: Error
        href: /api/dinosaurs_mgmt/v1/errors/21
        code: DINOSAURS-MGMT-21
        reason: 'missing path parameter: dinosaur id'
        operation_id: 1lWDGuybIrEnxrAem724gqkkiDv
    "404Example":
      value:
        id: "7"
        kind: Error
        href: /api/dinosaurs_mgmt/v1/errors/7
        code: DINOSAURS-MGMT-7
        reason: The requested resource doesn't exist
    "404DeleteExample":
      value:
        id: "7"
        kind: Error
        href: /api/dinosaurs_mgmt/v1/errors/7
        code: DINOSAURS-MGMT-7
        reason: DinosaurResource with id='1iK3duVYIvv5YvLlyz1mGR3JyqN' not found
        operation_id: 1iYO7g2g6HTdUKUa2ksH82kQD3y
    "401Example":
      value:
        id: "11"
        kind: Error
        href: /api/dinosaurs_mgmt/v1/errors/11
        code: DINOSAURS-MGMT-11
        reason: 'Unable to verify JWT token: Required authorization token not found'
        operation_id: 1iY3UhEhwmXBpWPfI2lNekpd4ZD
    "403Example":
      value:
        id: "4"
        kind: Error
        href: /api/dinosaurs_mgmt/v1/errors/4
        code: DINOSAURS-MGMT-4
        reason: User 'foo-bar' is not authorized to access the service.
        operation_id: 1lY3UiEhznXBpWPfI2lNejpd4YC
    "403MaxAllowedInstanceReachedExample":
      value:
        id: "5"
        kind: Error
        href: /api/dinosaurs_mgmt/v1/errors/5
        code: DINOSAURS-MGMT-5
        reason: User 'foo-bar' has reached a maximum number of 6 allowed instances.
        operation_id: 1lY3UiEkxnXBpVPeI2oNejd3XB
    "403TermsNotAcceptedExample":
      value:
        id: "12"
        kind: Error
        href: /api/dinosaurs_mgmt/v1/errors/12
        code: DINOSAURS-MGMT-12
        reason: Required terms have not been accepted
        operation_id: kXCzWPeI2oXBpVPeI2LvF9jMQY
    "409NameConflictExample":
      value:
        id: "36"
        kind: Error
        href: /api/dinosaurs_mgmt/v1/errors/36
        code: DINOSAURS-MGMT-36
        reason: Dinosaur cluster name is already used
        operation_id: 6kY0UiEkzkXCzWPeI2oYehd3ED
    "500Example":
      value:
        id: "9"
        kind: Error
        href: /api/dinosaurs_mgmt/v1/errors/9
        code: DINOSAURS-MGMT-9
        reason: Unspecified error
        operation_id: 1ieELvF9jMQY6YghfM9gGRsHvEW
    "500DeleteExample":
      value:
        id: "9"
        kind: Error
        href: /api/dinosaurs_mgmt/v1/errors/9
        code: DINOSAURS-MGMT-9
        reason: 'error deleting syncset: OCM-EX-9: failed to delete syncset: ext-serviceapi-1ix03lndlmq0qfc7sita5sljv8e
          for cluster id: 1g5d88q0lrcdv4g7alb7slfgnj3dhbsj%!(EXTRA *errors.Error=identifier
          is ''404'', code is ''CLUSTERS-MGMT-404'' and operation identifier is ''1g5or50viu07oealuehrkc26dgftj1ac'':
          Cluster ''1g5d88q0lrcdv4g7alb7slfgnj3dhbsj'' not found)'
        operation_id: 1iYTsWry6nsqb2sNmFj5bXpD7Ca
  parameters:
    id:
      description: The ID of record
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    duration:
      description: The length of time in minutes for which to return the metrics
      examples:
        duration:
          value: 5
      explode: true
      in: query
      name: duration
      required: true
      schema:
        default: 5
        format: int64
        maximum: 4320
        minimum: 1
        type: integer
      style: form
    interval:
      description: The interval in seconds between data points
      examples:
        interval:
          value: 30
      explode: true
      in: query
      name: interval
      required: true
      schema:
        default: 30
        format: int64
        maximum: 10800
        minimum: 1
        type: integer
      style: form
    filters:
      description: List of metrics to fetch. Fetch all metrics when empty. List entries
        are Dinosaur internal metric names.
      explode: true
      in: query
      name: filters
      required: false
      schema:
        default: []
        items:
          type: string
        type: array
      style: form
    page:
      description: Page index
      examples:
        page:
          value: "1"
      explode: true
      in: query
      name: page
      required: false
      schema:
        type: string
      style: form
    size:
      description: Number of items in each page
      examples:
        size:
          value: "100"
      explode: true
      in: query
      name: size
      required: false
      schema:
        type: string
      style: form
    orderBy:
      description: |-
        Specifies the order by criteria. The syntax of this parameter is
        similar to the syntax of the `order by` clause of an SQL statement.
        Each query can be ordered by any of the following `dinosaurRequests` fields:

        * host
        * cloud_provider
        * cluster_id
        * created_at
        * href
        * id
        * instance_type
        * multi_az
        * name
        * organisation_id
        * owner
        * region
        * status
        * updated_at
        * version

        For example, to return all Dinosaur instances ordered by their name, use the following syntax:

        ```sql
        name asc
        ```

        To return all Dinosaur instances ordered by their name _and_ created date, use the following syntax:

        ```sql
        name asc, created_at asc
        ```

        If the parameter isn't provided, or if the value is empty, then
        the results are ordered by name.
      examples:
        orderBy:
          value: name asc
      explode: true
      in: query
      name: orderBy
      required: false
      schema:
        type: string
      style: form
    search:
      description: |
        Search criteria.

        The syntax of this parameter is similar to the syntax of the `where` clause of an
        SQL statement. Allowed fields in the search are `cloud_provider`, `name`, `owner`, `region`, and `status`. Allowed comparators are `<>`, `=`, or `LIKE`.
        Allowed joins are `AND` and `OR`. However, you can use a maximum of 10 joins in a search query.

        Examples:

        To return a Dinosaur instance with the name `my-dinosaur` and the region `aws`, use the following syntax:

        ```
        name = my-dinosaur and cloud_provider = aws
        ```[p-]

        To return a Dinosaur instance with a name that starts with `my`, use the following syntax:

        ```
        name like my%25
        ```

        If the parameter isn't provided, or if the value is empty, then all the Dinosaur instances
        that the user has permission to see are returned.

        Note. If the query is invalid, an error is returned.
      examples:
        search:
          value: name = my-dinosaur and cloud_provider = aws
      explode: true
      in: query
      name: search
      required: false
      schema:
        type: string
      style: form
    instance_type:
      description: The Dinosaur instance type to filter the results by
      examples:
        eval_instance_type:
          value: eval
        standard_instance_type:
          value: standard
      explode: true
      in: query
      name: instance_type
      required: false
      schema:
        type: string
      style: form
  schemas:
    ObjectReference:
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
      type: object
    List:
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
      required:
      - items
      - kind
      - page
      - size
      - total
      type: object
    Error:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Error_allOf'
    ErrorList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ErrorList_allOf'
    DinosaurRequest:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/DinosaurRequest_allOf'
    DinosaurRequestList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/DinosaurRequestList_allOf'
    VersionMetadata:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/VersionMetadata_allOf'
    ServiceStatus:
      description: Schema for the service status response body
      example:
        dinosaurs:
          max_capacity_reached: true
      properties:
        dinosaurs:
          $ref: '#/components/schemas/ServiceStatus_dinosaurs'
      type: object
    DinosaurRequestPayload:
      description: Schema for the request body sent to /dinosaurs POST
      example:
        multi_az: true
        name: name
        cloud_provider: cloud_provider
        region: region
      properties:
        cloud_provider:
          description: The cloud provider where the Dinosaur cluster will be created
            in
          type: string
        multi_az:
          description: Set this to true to configure the Dinosaur cluster to be multiAZ
          type: boolean
        name:
          description: The name of the Dinosaur cluster. It must consist of lower-case
            alphanumeric characters or '-', start with an alphabetic character, and
            end with an alphanumeric character, and can not be longer than 32 characters.
          type: string
        region:
          description: The region where the Dinosaur cluster will be created in
          type: string
      required:
      - name
      type: object
    CloudProviderList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/CloudProviderList_allOf'
    CloudRegionList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/CloudRegionList_allOf'
    CloudProvider:
      description: Cloud provider.
      properties:
        kind:
          description: Indicates the type of this object. Will be 'CloudProvider'
            link.
          type: string
        id:
          description: Unique identifier of the object.
          type: string
        display_name:
          description: Name of the cloud provider for display purposes.
          type: string
        name:
          description: Human friendly identifier of the cloud provider, for example
            `aws`.
          type: string
        enabled:
          description: Whether the cloud provider is enabled for deploying an OSD
            cluster.
          type: boolean
      required:
      - enabled
    CloudRegion:
      description: Description of a region of a cloud provider.
      properties:
        kind:
          description: Indicates the type of this object. Will be 'CloudRegion'.
          type: string
        id:
          description: Unique identifier of the object.
          type: string
        display_name:
          description: Name of the region for display purposes, for example `N. Virginia`.
          type: string
        enabled:
          default: false
          description: Whether the region is enabled for deploying an OSD cluster.
          type: boolean
        supported_instance_types:
          description: The Dinosaur instance types supported by this region.
          items:
            type: string
          type: array
      required:
      - enabled
      - supported_instance_types
    MetricsRangeQueryList:
      allOf:
      - $ref: '#/components/schemas/MetricsRangeQueryList_allOf'
    RangeQuery:
      properties:
        metric:
          additionalProperties:
            type: string
          type: object
        values:
          items:
            $ref: '#/components/schemas/values'
          type: array
      type: object
    values:
      properties:
        timestamp:
          format: int64
          type: integer
        value:
          format: double
          type: number
      required:
      - value
      type: object
    MetricsInstantQueryList:
      allOf:
      - $ref: '#/components/schemas/MetricsInstantQueryList_allOf'
    MetricsFederationResult:
      type: string
    InstantQuery:
      properties:
        metric:
          additionalProperties:
            type: string
          type: object
        timestamp:
          format: int64
          type: integer
        value:
          format: double
          type: number
      required:
      - value
      type: object
    DinosaurUpdateRequest:
      example:
        owner: owner
      properties:
        owner:
          nullable: true
          type: string
      type: object
    Error_allOf:
      properties:
        code:
          type: string
        reason:
          type: string
        operation_id:
          type: string
    ErrorList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Error'
          type: array
    DinosaurRequest_allOf:
      example: '{"$ref":"#/components/examples/DinosaurRequestExample"}'
      properties:
        status:
          description: 'Values: [accepted, preparing, provisioning, ready, failed,
            deprovision, deleting] '
          type: string
        cloud_provider:
          description: Name of Cloud used to deploy. For example AWS
          type: string
        multi_az:
          type: boolean
        region:
          description: 'Values will be regions of specific cloud provider. For example:
            us-east-1 for AWS'
          type: string
        owner:
          type: string
        name:
          type: string
        host:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        failed_reason:
          type: string
        version:
          type: string
        instance_type:
          type: string
      required:
      - multi_az
    DinosaurRequestList_allOf:
      example: '{"kind":"DinosaurRequestList","page":"1","size":"1","total":"1","item":{"$ref":"#/components/examples/DinosaurRequestExample"}}'
      properties:
        items:
          items:
            allOf:
            - $ref: '#/components/schemas/DinosaurRequest'
          type: array
    VersionMetadata_allOf:
      example: '{"kind":"APIVersion","id":"v1","href":"/api/dinosaurs_mgmt/v1","collections":[{"id":"dinosaurs","href":"/api/dinosaurs_mgmt/v1/dinosaurs","kind":"DinosaurList"}]}'
      properties:
        collections:
          items:
            allOf:
            - $ref: '#/components/schemas/ObjectReference'
          type: array
    ServiceStatus_dinosaurs:
      description: The Dinosaur resource api status
      properties:
        max_capacity_reached:
          description: Indicates whether we have reached Dinosaur maximum capacity
          type: boolean
      required:
      - max_capacity_reached
    CloudProviderList_allOf:
      example: '{"kind":"CloudProviderList","page":"1","size":"1","total":"1","item":{"$ref":"#/components/examples/CloudProviderExample"}}'
      properties:
        items:
          items:
            allOf:
            - $ref: '#/components/schemas/CloudProvider'
          type: array
    CloudRegionList_allOf:
      example: '{"kind":"CloudRegionList","page":"1","size":"1","total":"1","item":{"$ref":"#/components/examples/CloudRegionExample"}}'
      properties:
        items:
          items:
            allOf:
            - $ref: '#/components/schemas/CloudRegion'
          type: array
    MetricsRangeQueryList_allOf:
      example: '{"kind":"MetricsRangeQueryList","id":"1nbpS70HduPe4l0to8jSg2CLzfu","items":{"$ref":"#/components/examples/MetricsRangeQueryExample"}}'
      properties:
        kind:
          type: string
        id:
          type: string
        items:
          items:
            allOf:
            - $ref: '#/components/schemas/RangeQuery'
          type: array
    MetricsInstantQueryList_allOf:
      example: '{"kind":"MetricsInstantQueryList","id":"1nbpS70HduPe4l0to8jSg2CLzfu","items":{"$ref":"#/components/examples/MetricsInstantQueryExample"}}'
      properties:
        kind:
          type: string
        id:
          type: string
        items:
          items:
            allOf:
            - $ref: '#/components/schemas/InstantQuery'
          type: array
  securitySchemes:
    Bearer:
      bearerFormat: JWT
      scheme: bearer
      type: http
