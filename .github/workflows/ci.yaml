# This runs checks to verify if code is properly formated and that tests (unit and integration against a mocked environment) are passing.
name: Lint & Test

on:
  push:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - 'build_deploy.sh'
      - '.github/*.md'
      - '.github/CODEOWNERS'
      - 'templates/**'
      - '.openapi-generator-ignore'
      - 'openapi/**'
      - 'docs/**'
      - 'pkg/api/openapi/docs/**'
      - 'pkg/api/openapi/.openapi-generator-ignore'
      - 'test/performance/**'
      
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, edited]
    paths-ignore:
      - '*.md'
      - 'build_deploy.sh'
      - '.github/*.md'
      - '.github/CODEOWNERS'
      - 'templates/**'
      - '.openapi-generator-ignore'
      - 'openapi/**'
      - 'docs/**'
      - 'pkg/api/openapi/docs/**'
      - 'pkg/api/openapi/.openapi-generator-ignore'
      - 'test/performance/**'

env:
  # set ocm env to integration
  OCM_ENV: integration
  # GORM env variables. These values are defined in the postgres service definition above
  GORM_DIALECT: postgres
  GORM_HOST: 127.0.0.1
  GORM_PORT: 5432
  GORM_NAME: serviceapitests
  GORM_USERNAME: kas_fleet_manager
  GORM_PASSWORD: foobar-bizz-buzz
  GORM_SSLMODE: disable
  GORM_DEBUG: false
  # Dummy MAS SSO variables
  MAS_SSO_CLIENT_ID: ${{ secrets.MAS_SSO_CLIENT_ID }}
  MAS_SSO_CLIENT_SECRET: ${{ secrets.MAS_SSO_CLIENT_SECRET }}
  OSD_IDP_MAS_SSO_CLIENT_ID: ${{ secrets.OSD_IDP_MAS_SSO_CLIENT_ID }}
  OSD_IDP_MAS_SSO_CLIENT_SECRET: ${{ secrets.OSD_IDP_MAS_SSO_CLIENT_SECRET }}
  # Dummy AWS credentials 
  AWS_ACCOUNT_ID: aws_accountid
  AWS_ACCESS_KEY: aws_accesskey
  AWS_SECRET_ACCESS_KEY: aws_secretaccesskey
  ROUTE53_ACCESS_KEY: aws_route53_access_key
  ROUTE53_SECRET_ACCESS_KEY: aws_route53_secret_access_key
  # Dummy Kafka TLS env variables
  KAFKA_TLS_CERT: kafka_tls_cert
  KAFKA_TLS_KEY: kafka_tls_key
  # So that OCM secrets are initialised
  DOCKER_PR_CHECK: true
  TEST_TIMEOUT: 30m

jobs:
  lint-test:
    name: "Lint & Test"
    runs-on: ubuntu-latest
    # Skip draft PRs and those with WIP in the subject, rerun as soon as its removed
    if: "github.event_name != 'pull_request' || ( \
           (
             github.event.pull_request.draft == false && \
             github.event.pull_request.state != 'closed' && \
             contains(github.event.pull_request.title, 'wip ') == false && \
             contains(github.event.pull_request.title, '[wip]') == false
           ) || \
           (
             github.event.action == 'edited' && \
             contains(github.event.pull_request.title, 'wip ') == false && \
             contains(github.event.pull_request.title, '[wip]') == false && \
             ( 
               contains(github.event.changes.title.from, 'wip ') || \
               contains(github.event.changes.title.from, '[wip]') \
             ) \ 
           ) \
         )"
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_PASSWORD: foobar-bizz-buzz
          POSTGRES_USER: kas_fleet_manager
          POSTGRES_DB: serviceapitests
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
     
    steps:
      - name: Cancel Previous Runs
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Go 1.15
        uses: actions/setup-go@v2
        with:
          go-version: "1.15"
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Cache go module
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup tests secrets
        run: |
          make ocm/setup aws/setup keycloak/setup kafkacert/setup observatorium/setup
      - name: Lint & Test
        run: |
          export GOPATH=$(go env GOPATH)
          export PATH=${PATH}:$GOPATH/bin
          make test test/integration
