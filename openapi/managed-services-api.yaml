openapi: 3.0.0
info:
  title: OCM Managed Service API
  description: OCM Managed Service API
  version: 0.0.1
servers:
  - url: https://api.openshift.com
    description: Main (production) server
  - url: https://api.stage.openshift.com
    description: Staging server
  - url: /
    description: current domain
paths:
  /api/ocm-example-service/v1/kafkas:
    get:
      summary: Returns a list of kafkas
      security:
        - Bearer: []
      responses:
        '200':
          description: A JSON array of kafka objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaList'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/orderBy'
    post:
      summary: Create a new kafka
      security:
        - Bearer: []
      requestBody:
        description: Kafka data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kafka'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kafka'
        '400':
          description: Validation errors occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Kafka already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred creating the kafka
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/ocm-example-service/v1/kafkas/{id}:
    get:
      summary: Get an kafka by id
      security:
        - Bearer: []
      responses:
        '200':
          description: Kafka found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kafka'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No kafka with specified id exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update an kafka
      security:
        - Bearer: []
      requestBody:
        description: Updated kafka data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KafkaPatchRequest'
      responses:
        '200':
          description: Kafka updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kafka'
        '400':
          description: Validation errors occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No kafka with specified id exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Kafka already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error updating kafka
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
      - $ref: '#/components/parameters/id'
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ObjectReference:
      type: object
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
    List:
      type: object
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
      required:
        - kind
        - page
        - size
        - total
        - items
    Error:
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            code:
              type: string
            reason:
              type: string
            operation_id:
              type: string
    ErrorList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Error'
    Kafka:
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            clusterID:
              type: string
            status:
              type: string
            cloud_provider:
              type: string
            multiAZ:
              type: string
            region:
              type: string
            name:
              type: string
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
    KafkaList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Kafka'
    KafkaPatchRequest:
      type: object
      properties:
        cluster_id:
          type: string
  parameters:
    id:
      name: id
      in: path
      description: The id of record
      required: true
      schema:
        type: string
    page:
      name: page
      in: query
      description: Page number of record list when record list exceeds specified page size
      schema:
        type: integer
        default: 1
        minimum: 1
      required: false
    size:
      name: size
      in: query
      description: Maximum number of records to return
      schema:
        type: integer
        default: 100
        minimum: 0
      required: false
    search:
      name: search
      in: query
      required: false
      description: |-
        Specifies the search criteria. The syntax of this parameter is
        similar to the syntax of the _where_ clause of an SQL statement,
        using the names of the json attributes / column names of the account. 
        For example, in order to retrieve all the accounts with a username
        starting with `my`:

        ```sql
        username like 'my%'
        ```

        The search criteria can also be applied on related resource.
        For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

        ```sql
        subscription_labels.key = 'foo' and subscription_labels.value = 'bar'
        ```

        If the parameter isn't provided, or if the value is empty, then
        all the accounts that the user has permission to see will be
        returned.
      schema:
        type: string
    orderBy:
      name: orderBy
      in: query
      required: false
      description: |-
        Specifies the order by criteria. The syntax of this parameter is
        similar to the syntax of the _order by_ clause of an SQL statement,
        but using the names of the json attributes / column of the account.
        For example, in order to retrieve all accounts ordered by username:

        ```sql
        username asc
        ```

        Or in order to retrieve all accounts ordered by username _and_ first name:

        ```sql
        username asc, firstName asc
        ```

        If the parameter isn't provided, or if the value is empty, then
        no explicit ordering will be applied.
      schema:
        type: string
