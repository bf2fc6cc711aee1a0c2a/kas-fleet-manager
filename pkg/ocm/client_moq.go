// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ocm

import (
	"github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
	"sync"
)

var (
	lockClientMockCreateCluster       sync.RWMutex
	lockClientMockGetClusterIngresses sync.RWMutex
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked Client
//         mockedClient := &ClientMock{
//             CreateClusterFunc: func(cluster *v1.Cluster) (*v1.Cluster, error) {
// 	               panic("mock out the CreateCluster method")
//             },
//             GetClusterIngressesFunc: func(clusterID string) (*v1.IngressesListResponse, error) {
// 	               panic("mock out the GetClusterIngresses method")
//             },
//         }
//
//         // use mockedClient in code that requires Client
//         // and then make assertions.
//
//     }
type ClientMock struct {
	// CreateClusterFunc mocks the CreateCluster method.
	CreateClusterFunc func(cluster *v1.Cluster) (*v1.Cluster, error)

	// GetClusterIngressesFunc mocks the GetClusterIngresses method.
	GetClusterIngressesFunc func(clusterID string) (*v1.IngressesListResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateCluster holds details about calls to the CreateCluster method.
		CreateCluster []struct {
			// Cluster is the cluster argument value.
			Cluster *v1.Cluster
		}
		// GetClusterIngresses holds details about calls to the GetClusterIngresses method.
		GetClusterIngresses []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
	}
}

// CreateCluster calls CreateClusterFunc.
func (mock *ClientMock) CreateCluster(cluster *v1.Cluster) (*v1.Cluster, error) {
	if mock.CreateClusterFunc == nil {
		panic("ClientMock.CreateClusterFunc: method is nil but Client.CreateCluster was just called")
	}
	callInfo := struct {
		Cluster *v1.Cluster
	}{
		Cluster: cluster,
	}
	lockClientMockCreateCluster.Lock()
	mock.calls.CreateCluster = append(mock.calls.CreateCluster, callInfo)
	lockClientMockCreateCluster.Unlock()
	return mock.CreateClusterFunc(cluster)
}

// CreateClusterCalls gets all the calls that were made to CreateCluster.
// Check the length with:
//     len(mockedClient.CreateClusterCalls())
func (mock *ClientMock) CreateClusterCalls() []struct {
	Cluster *v1.Cluster
} {
	var calls []struct {
		Cluster *v1.Cluster
	}
	lockClientMockCreateCluster.RLock()
	calls = mock.calls.CreateCluster
	lockClientMockCreateCluster.RUnlock()
	return calls
}

// GetClusterIngresses calls GetClusterIngressesFunc.
func (mock *ClientMock) GetClusterIngresses(clusterID string) (*v1.IngressesListResponse, error) {
	if mock.GetClusterIngressesFunc == nil {
		panic("ClientMock.GetClusterIngressesFunc: method is nil but Client.GetClusterIngresses was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	lockClientMockGetClusterIngresses.Lock()
	mock.calls.GetClusterIngresses = append(mock.calls.GetClusterIngresses, callInfo)
	lockClientMockGetClusterIngresses.Unlock()
	return mock.GetClusterIngressesFunc(clusterID)
}

// GetClusterIngressesCalls gets all the calls that were made to GetClusterIngresses.
// Check the length with:
//     len(mockedClient.GetClusterIngressesCalls())
func (mock *ClientMock) GetClusterIngressesCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	lockClientMockGetClusterIngresses.RLock()
	calls = mock.calls.GetClusterIngresses
	lockClientMockGetClusterIngresses.RUnlock()
	return calls
}
