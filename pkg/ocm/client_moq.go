// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ocm

import (
	"github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
	"sync"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked Client
//         mockedClient := &ClientMock{
//             CreateClusterFunc: func(cluster *v1.Cluster) (*v1.Cluster, error) {
// 	               panic("mock out the CreateCluster method")
//             },
//             CreateManagedKafkaAddonFunc: func(id string) (*v1.AddOnInstallation, error) {
// 	               panic("mock out the CreateManagedKafkaAddon method")
//             },
//             CreateSyncSetFunc: func(clusterID string, syncset *v1.Syncset) (*v1.Syncset, error) {
// 	               panic("mock out the CreateSyncSet method")
//             },
//             DeleteSyncSetFunc: func(clusterID string, syncsetID string) (int, error) {
// 	               panic("mock out the DeleteSyncSet method")
//             },
//             GetCloudProvidersFunc: func() (*v1.CloudProviderList, error) {
// 	               panic("mock out the GetCloudProviders method")
//             },
//             GetClusterDNSFunc: func(clusterID string) (string, error) {
// 	               panic("mock out the GetClusterDNS method")
//             },
//             GetClusterIngressesFunc: func(clusterID string) (*v1.IngressesListResponse, error) {
// 	               panic("mock out the GetClusterIngresses method")
//             },
//             GetClusterStatusFunc: func(id string) (*v1.ClusterStatus, error) {
// 	               panic("mock out the GetClusterStatus method")
//             },
//             GetManagedKafkaAddonFunc: func(id string) (*v1.AddOnInstallation, error) {
// 	               panic("mock out the GetManagedKafkaAddon method")
//             },
//             GetRegionsFunc: func(provider *v1.CloudProvider) (*v1.CloudRegionList, error) {
// 	               panic("mock out the GetRegions method")
//             },
//             ScaleDownComputeNodesFunc: func(clusterID string) (*v1.Cluster, error) {
// 	               panic("mock out the ScaleDownComputeNodes method")
//             },
//             ScaleUpComputeNodesFunc: func(clusterID string) (*v1.Cluster, error) {
// 	               panic("mock out the ScaleUpComputeNodes method")
//             },
//         }
//
//         // use mockedClient in code that requires Client
//         // and then make assertions.
//
//     }
type ClientMock struct {
	// CreateClusterFunc mocks the CreateCluster method.
	CreateClusterFunc func(cluster *v1.Cluster) (*v1.Cluster, error)

	// CreateManagedKafkaAddonFunc mocks the CreateManagedKafkaAddon method.
	CreateManagedKafkaAddonFunc func(id string) (*v1.AddOnInstallation, error)

	// CreateSyncSetFunc mocks the CreateSyncSet method.
	CreateSyncSetFunc func(clusterID string, syncset *v1.Syncset) (*v1.Syncset, error)

	// DeleteSyncSetFunc mocks the DeleteSyncSet method.
	DeleteSyncSetFunc func(clusterID string, syncsetID string) (int, error)

	// GetCloudProvidersFunc mocks the GetCloudProviders method.
	GetCloudProvidersFunc func() (*v1.CloudProviderList, error)

	// GetClusterDNSFunc mocks the GetClusterDNS method.
	GetClusterDNSFunc func(clusterID string) (string, error)

	// GetClusterIngressesFunc mocks the GetClusterIngresses method.
	GetClusterIngressesFunc func(clusterID string) (*v1.IngressesListResponse, error)

	// GetClusterStatusFunc mocks the GetClusterStatus method.
	GetClusterStatusFunc func(id string) (*v1.ClusterStatus, error)

	// GetManagedKafkaAddonFunc mocks the GetManagedKafkaAddon method.
	GetManagedKafkaAddonFunc func(id string) (*v1.AddOnInstallation, error)

	// GetRegionsFunc mocks the GetRegions method.
	GetRegionsFunc func(provider *v1.CloudProvider) (*v1.CloudRegionList, error)

	// ScaleDownComputeNodesFunc mocks the ScaleDownComputeNodes method.
	ScaleDownComputeNodesFunc func(clusterID string) (*v1.Cluster, error)

	// ScaleUpComputeNodesFunc mocks the ScaleUpComputeNodes method.
	ScaleUpComputeNodesFunc func(clusterID string) (*v1.Cluster, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateCluster holds details about calls to the CreateCluster method.
		CreateCluster []struct {
			// Cluster is the cluster argument value.
			Cluster *v1.Cluster
		}
		// CreateManagedKafkaAddon holds details about calls to the CreateManagedKafkaAddon method.
		CreateManagedKafkaAddon []struct {
			// ID is the id argument value.
			ID string
		}
		// CreateSyncSet holds details about calls to the CreateSyncSet method.
		CreateSyncSet []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// Syncset is the syncset argument value.
			Syncset *v1.Syncset
		}
		// DeleteSyncSet holds details about calls to the DeleteSyncSet method.
		DeleteSyncSet []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// SyncsetID is the syncsetID argument value.
			SyncsetID string
		}
		// GetCloudProviders holds details about calls to the GetCloudProviders method.
		GetCloudProviders []struct {
		}
		// GetClusterDNS holds details about calls to the GetClusterDNS method.
		GetClusterDNS []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetClusterIngresses holds details about calls to the GetClusterIngresses method.
		GetClusterIngresses []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetClusterStatus holds details about calls to the GetClusterStatus method.
		GetClusterStatus []struct {
			// ID is the id argument value.
			ID string
		}
		// GetManagedKafkaAddon holds details about calls to the GetManagedKafkaAddon method.
		GetManagedKafkaAddon []struct {
			// ID is the id argument value.
			ID string
		}
		// GetRegions holds details about calls to the GetRegions method.
		GetRegions []struct {
			// Provider is the provider argument value.
			Provider *v1.CloudProvider
		}
		// ScaleDownComputeNodes holds details about calls to the ScaleDownComputeNodes method.
		ScaleDownComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// ScaleUpComputeNodes holds details about calls to the ScaleUpComputeNodes method.
		ScaleUpComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
	}
	lockCreateCluster           sync.RWMutex
	lockCreateManagedKafkaAddon sync.RWMutex
	lockCreateSyncSet           sync.RWMutex
	lockDeleteSyncSet           sync.RWMutex
	lockGetCloudProviders       sync.RWMutex
	lockGetClusterDNS           sync.RWMutex
	lockGetClusterIngresses     sync.RWMutex
	lockGetClusterStatus        sync.RWMutex
	lockGetManagedKafkaAddon    sync.RWMutex
	lockGetRegions              sync.RWMutex
	lockScaleDownComputeNodes   sync.RWMutex
	lockScaleUpComputeNodes     sync.RWMutex
}

// CreateCluster calls CreateClusterFunc.
func (mock *ClientMock) CreateCluster(cluster *v1.Cluster) (*v1.Cluster, error) {
	if mock.CreateClusterFunc == nil {
		panic("ClientMock.CreateClusterFunc: method is nil but Client.CreateCluster was just called")
	}
	callInfo := struct {
		Cluster *v1.Cluster
	}{
		Cluster: cluster,
	}
	mock.lockCreateCluster.Lock()
	mock.calls.CreateCluster = append(mock.calls.CreateCluster, callInfo)
	mock.lockCreateCluster.Unlock()
	return mock.CreateClusterFunc(cluster)
}

// CreateClusterCalls gets all the calls that were made to CreateCluster.
// Check the length with:
//     len(mockedClient.CreateClusterCalls())
func (mock *ClientMock) CreateClusterCalls() []struct {
	Cluster *v1.Cluster
} {
	var calls []struct {
		Cluster *v1.Cluster
	}
	mock.lockCreateCluster.RLock()
	calls = mock.calls.CreateCluster
	mock.lockCreateCluster.RUnlock()
	return calls
}

// CreateManagedKafkaAddon calls CreateManagedKafkaAddonFunc.
func (mock *ClientMock) CreateManagedKafkaAddon(id string) (*v1.AddOnInstallation, error) {
	if mock.CreateManagedKafkaAddonFunc == nil {
		panic("ClientMock.CreateManagedKafkaAddonFunc: method is nil but Client.CreateManagedKafkaAddon was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockCreateManagedKafkaAddon.Lock()
	mock.calls.CreateManagedKafkaAddon = append(mock.calls.CreateManagedKafkaAddon, callInfo)
	mock.lockCreateManagedKafkaAddon.Unlock()
	return mock.CreateManagedKafkaAddonFunc(id)
}

// CreateManagedKafkaAddonCalls gets all the calls that were made to CreateManagedKafkaAddon.
// Check the length with:
//     len(mockedClient.CreateManagedKafkaAddonCalls())
func (mock *ClientMock) CreateManagedKafkaAddonCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockCreateManagedKafkaAddon.RLock()
	calls = mock.calls.CreateManagedKafkaAddon
	mock.lockCreateManagedKafkaAddon.RUnlock()
	return calls
}

// CreateSyncSet calls CreateSyncSetFunc.
func (mock *ClientMock) CreateSyncSet(clusterID string, syncset *v1.Syncset) (*v1.Syncset, error) {
	if mock.CreateSyncSetFunc == nil {
		panic("ClientMock.CreateSyncSetFunc: method is nil but Client.CreateSyncSet was just called")
	}
	callInfo := struct {
		ClusterID string
		Syncset   *v1.Syncset
	}{
		ClusterID: clusterID,
		Syncset:   syncset,
	}
	mock.lockCreateSyncSet.Lock()
	mock.calls.CreateSyncSet = append(mock.calls.CreateSyncSet, callInfo)
	mock.lockCreateSyncSet.Unlock()
	return mock.CreateSyncSetFunc(clusterID, syncset)
}

// CreateSyncSetCalls gets all the calls that were made to CreateSyncSet.
// Check the length with:
//     len(mockedClient.CreateSyncSetCalls())
func (mock *ClientMock) CreateSyncSetCalls() []struct {
	ClusterID string
	Syncset   *v1.Syncset
} {
	var calls []struct {
		ClusterID string
		Syncset   *v1.Syncset
	}
	mock.lockCreateSyncSet.RLock()
	calls = mock.calls.CreateSyncSet
	mock.lockCreateSyncSet.RUnlock()
	return calls
}

// DeleteSyncSet calls DeleteSyncSetFunc.
func (mock *ClientMock) DeleteSyncSet(clusterID string, syncsetID string) (int, error) {
	if mock.DeleteSyncSetFunc == nil {
		panic("ClientMock.DeleteSyncSetFunc: method is nil but Client.DeleteSyncSet was just called")
	}
	callInfo := struct {
		ClusterID string
		SyncsetID string
	}{
		ClusterID: clusterID,
		SyncsetID: syncsetID,
	}
	mock.lockDeleteSyncSet.Lock()
	mock.calls.DeleteSyncSet = append(mock.calls.DeleteSyncSet, callInfo)
	mock.lockDeleteSyncSet.Unlock()
	return mock.DeleteSyncSetFunc(clusterID, syncsetID)
}

// DeleteSyncSetCalls gets all the calls that were made to DeleteSyncSet.
// Check the length with:
//     len(mockedClient.DeleteSyncSetCalls())
func (mock *ClientMock) DeleteSyncSetCalls() []struct {
	ClusterID string
	SyncsetID string
} {
	var calls []struct {
		ClusterID string
		SyncsetID string
	}
	mock.lockDeleteSyncSet.RLock()
	calls = mock.calls.DeleteSyncSet
	mock.lockDeleteSyncSet.RUnlock()
	return calls
}

// GetCloudProviders calls GetCloudProvidersFunc.
func (mock *ClientMock) GetCloudProviders() (*v1.CloudProviderList, error) {
	if mock.GetCloudProvidersFunc == nil {
		panic("ClientMock.GetCloudProvidersFunc: method is nil but Client.GetCloudProviders was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetCloudProviders.Lock()
	mock.calls.GetCloudProviders = append(mock.calls.GetCloudProviders, callInfo)
	mock.lockGetCloudProviders.Unlock()
	return mock.GetCloudProvidersFunc()
}

// GetCloudProvidersCalls gets all the calls that were made to GetCloudProviders.
// Check the length with:
//     len(mockedClient.GetCloudProvidersCalls())
func (mock *ClientMock) GetCloudProvidersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetCloudProviders.RLock()
	calls = mock.calls.GetCloudProviders
	mock.lockGetCloudProviders.RUnlock()
	return calls
}

// GetClusterDNS calls GetClusterDNSFunc.
func (mock *ClientMock) GetClusterDNS(clusterID string) (string, error) {
	if mock.GetClusterDNSFunc == nil {
		panic("ClientMock.GetClusterDNSFunc: method is nil but Client.GetClusterDNS was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetClusterDNS.Lock()
	mock.calls.GetClusterDNS = append(mock.calls.GetClusterDNS, callInfo)
	mock.lockGetClusterDNS.Unlock()
	return mock.GetClusterDNSFunc(clusterID)
}

// GetClusterDNSCalls gets all the calls that were made to GetClusterDNS.
// Check the length with:
//     len(mockedClient.GetClusterDNSCalls())
func (mock *ClientMock) GetClusterDNSCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetClusterDNS.RLock()
	calls = mock.calls.GetClusterDNS
	mock.lockGetClusterDNS.RUnlock()
	return calls
}

// GetClusterIngresses calls GetClusterIngressesFunc.
func (mock *ClientMock) GetClusterIngresses(clusterID string) (*v1.IngressesListResponse, error) {
	if mock.GetClusterIngressesFunc == nil {
		panic("ClientMock.GetClusterIngressesFunc: method is nil but Client.GetClusterIngresses was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetClusterIngresses.Lock()
	mock.calls.GetClusterIngresses = append(mock.calls.GetClusterIngresses, callInfo)
	mock.lockGetClusterIngresses.Unlock()
	return mock.GetClusterIngressesFunc(clusterID)
}

// GetClusterIngressesCalls gets all the calls that were made to GetClusterIngresses.
// Check the length with:
//     len(mockedClient.GetClusterIngressesCalls())
func (mock *ClientMock) GetClusterIngressesCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetClusterIngresses.RLock()
	calls = mock.calls.GetClusterIngresses
	mock.lockGetClusterIngresses.RUnlock()
	return calls
}

// GetClusterStatus calls GetClusterStatusFunc.
func (mock *ClientMock) GetClusterStatus(id string) (*v1.ClusterStatus, error) {
	if mock.GetClusterStatusFunc == nil {
		panic("ClientMock.GetClusterStatusFunc: method is nil but Client.GetClusterStatus was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetClusterStatus.Lock()
	mock.calls.GetClusterStatus = append(mock.calls.GetClusterStatus, callInfo)
	mock.lockGetClusterStatus.Unlock()
	return mock.GetClusterStatusFunc(id)
}

// GetClusterStatusCalls gets all the calls that were made to GetClusterStatus.
// Check the length with:
//     len(mockedClient.GetClusterStatusCalls())
func (mock *ClientMock) GetClusterStatusCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetClusterStatus.RLock()
	calls = mock.calls.GetClusterStatus
	mock.lockGetClusterStatus.RUnlock()
	return calls
}

// GetManagedKafkaAddon calls GetManagedKafkaAddonFunc.
func (mock *ClientMock) GetManagedKafkaAddon(id string) (*v1.AddOnInstallation, error) {
	if mock.GetManagedKafkaAddonFunc == nil {
		panic("ClientMock.GetManagedKafkaAddonFunc: method is nil but Client.GetManagedKafkaAddon was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetManagedKafkaAddon.Lock()
	mock.calls.GetManagedKafkaAddon = append(mock.calls.GetManagedKafkaAddon, callInfo)
	mock.lockGetManagedKafkaAddon.Unlock()
	return mock.GetManagedKafkaAddonFunc(id)
}

// GetManagedKafkaAddonCalls gets all the calls that were made to GetManagedKafkaAddon.
// Check the length with:
//     len(mockedClient.GetManagedKafkaAddonCalls())
func (mock *ClientMock) GetManagedKafkaAddonCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetManagedKafkaAddon.RLock()
	calls = mock.calls.GetManagedKafkaAddon
	mock.lockGetManagedKafkaAddon.RUnlock()
	return calls
}

// GetRegions calls GetRegionsFunc.
func (mock *ClientMock) GetRegions(provider *v1.CloudProvider) (*v1.CloudRegionList, error) {
	if mock.GetRegionsFunc == nil {
		panic("ClientMock.GetRegionsFunc: method is nil but Client.GetRegions was just called")
	}
	callInfo := struct {
		Provider *v1.CloudProvider
	}{
		Provider: provider,
	}
	mock.lockGetRegions.Lock()
	mock.calls.GetRegions = append(mock.calls.GetRegions, callInfo)
	mock.lockGetRegions.Unlock()
	return mock.GetRegionsFunc(provider)
}

// GetRegionsCalls gets all the calls that were made to GetRegions.
// Check the length with:
//     len(mockedClient.GetRegionsCalls())
func (mock *ClientMock) GetRegionsCalls() []struct {
	Provider *v1.CloudProvider
} {
	var calls []struct {
		Provider *v1.CloudProvider
	}
	mock.lockGetRegions.RLock()
	calls = mock.calls.GetRegions
	mock.lockGetRegions.RUnlock()
	return calls
}

// ScaleDownComputeNodes calls ScaleDownComputeNodesFunc.
func (mock *ClientMock) ScaleDownComputeNodes(clusterID string) (*v1.Cluster, error) {
	if mock.ScaleDownComputeNodesFunc == nil {
		panic("ClientMock.ScaleDownComputeNodesFunc: method is nil but Client.ScaleDownComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockScaleDownComputeNodes.Lock()
	mock.calls.ScaleDownComputeNodes = append(mock.calls.ScaleDownComputeNodes, callInfo)
	mock.lockScaleDownComputeNodes.Unlock()
	return mock.ScaleDownComputeNodesFunc(clusterID)
}

// ScaleDownComputeNodesCalls gets all the calls that were made to ScaleDownComputeNodes.
// Check the length with:
//     len(mockedClient.ScaleDownComputeNodesCalls())
func (mock *ClientMock) ScaleDownComputeNodesCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockScaleDownComputeNodes.RLock()
	calls = mock.calls.ScaleDownComputeNodes
	mock.lockScaleDownComputeNodes.RUnlock()
	return calls
}

// ScaleUpComputeNodes calls ScaleUpComputeNodesFunc.
func (mock *ClientMock) ScaleUpComputeNodes(clusterID string) (*v1.Cluster, error) {
	if mock.ScaleUpComputeNodesFunc == nil {
		panic("ClientMock.ScaleUpComputeNodesFunc: method is nil but Client.ScaleUpComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockScaleUpComputeNodes.Lock()
	mock.calls.ScaleUpComputeNodes = append(mock.calls.ScaleUpComputeNodes, callInfo)
	mock.lockScaleUpComputeNodes.Unlock()
	return mock.ScaleUpComputeNodesFunc(clusterID)
}

// ScaleUpComputeNodesCalls gets all the calls that were made to ScaleUpComputeNodes.
// Check the length with:
//     len(mockedClient.ScaleUpComputeNodesCalls())
func (mock *ClientMock) ScaleUpComputeNodesCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockScaleUpComputeNodes.RLock()
	calls = mock.calls.ScaleUpComputeNodes
	mock.lockScaleUpComputeNodes.RUnlock()
	return calls
}
