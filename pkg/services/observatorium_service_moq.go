// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"gitlab.cee.redhat.com/service/managed-services-api/pkg/client/observatorium"
	"sync"
)

// Ensure, that ObservatoriumServiceMock does implement ObservatoriumService.
// If this is not the case, regenerate this file with moq.
var _ ObservatoriumService = &ObservatoriumServiceMock{}

// ObservatoriumServiceMock is a mock implementation of ObservatoriumService.
//
//     func TestSomethingThatUsesObservatoriumService(t *testing.T) {
//
//         // make and configure a mocked ObservatoriumService
//         mockedObservatoriumService := &ObservatoriumServiceMock{
//             GetKafkaStateFunc: func(name string, namespaceName string) (observatorium.KafkaState, error) {
// 	               panic("mock out the GetKafkaState method")
//             },
//         }
//
//         // use mockedObservatoriumService in code that requires ObservatoriumService
//         // and then make assertions.
//
//     }
type ObservatoriumServiceMock struct {
	// GetKafkaStateFunc mocks the GetKafkaState method.
	GetKafkaStateFunc func(name string, namespaceName string) (observatorium.KafkaState, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetKafkaState holds details about calls to the GetKafkaState method.
		GetKafkaState []struct {
			// Name is the name argument value.
			Name string
			// NamespaceName is the namespaceName argument value.
			NamespaceName string
		}
	}
	lockGetKafkaState sync.RWMutex
}

// GetKafkaState calls GetKafkaStateFunc.
func (mock *ObservatoriumServiceMock) GetKafkaState(name string, namespaceName string) (observatorium.KafkaState, error) {
	if mock.GetKafkaStateFunc == nil {
		panic("ObservatoriumServiceMock.GetKafkaStateFunc: method is nil but ObservatoriumService.GetKafkaState was just called")
	}
	callInfo := struct {
		Name          string
		NamespaceName string
	}{
		Name:          name,
		NamespaceName: namespaceName,
	}
	mock.lockGetKafkaState.Lock()
	mock.calls.GetKafkaState = append(mock.calls.GetKafkaState, callInfo)
	mock.lockGetKafkaState.Unlock()
	return mock.GetKafkaStateFunc(name, namespaceName)
}

// GetKafkaStateCalls gets all the calls that were made to GetKafkaState.
// Check the length with:
//     len(mockedObservatoriumService.GetKafkaStateCalls())
func (mock *ObservatoriumServiceMock) GetKafkaStateCalls() []struct {
	Name          string
	NamespaceName string
} {
	var calls []struct {
		Name          string
		NamespaceName string
	}
	mock.lockGetKafkaState.RLock()
	calls = mock.calls.GetKafkaState
	mock.lockGetKafkaState.RUnlock()
	return calls
}
