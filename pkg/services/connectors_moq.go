// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"context"
	"gitlab.cee.redhat.com/service/managed-services-api/pkg/api"
	"gitlab.cee.redhat.com/service/managed-services-api/pkg/errors"
	"sync"
)

var (
	lockConnectorsServiceMockCreate sync.RWMutex
	lockConnectorsServiceMockDelete sync.RWMutex
	lockConnectorsServiceMockGet    sync.RWMutex
	lockConnectorsServiceMockList   sync.RWMutex
	lockConnectorsServiceMockUpdate sync.RWMutex
)

// Ensure, that ConnectorsServiceMock does implement ConnectorsService.
// If this is not the case, regenerate this file with moq.
var _ ConnectorsService = &ConnectorsServiceMock{}

// ConnectorsServiceMock is a mock implementation of ConnectorsService.
//
//     func TestSomethingThatUsesConnectorsService(t *testing.T) {
//
//         // make and configure a mocked ConnectorsService
//         mockedConnectorsService := &ConnectorsServiceMock{
//             CreateFunc: func(ctx context.Context, resource *api.Connector) *errors.ServiceError {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(ctx context.Context, kid string, id string) *errors.ServiceError {
// 	               panic("mock out the Delete method")
//             },
//             GetFunc: func(ctx context.Context, kid string, id string, tid string) (*api.Connector, *errors.ServiceError) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(ctx context.Context, kid string, listArgs *ListArguments, tid string) (api.ConnectorList, *api.PagingMeta, *errors.ServiceError) {
// 	               panic("mock out the List method")
//             },
//             UpdateFunc: func(ctx context.Context, resource *api.Connector) *errors.ServiceError {
// 	               panic("mock out the Update method")
//             },
//         }
//
//         // use mockedConnectorsService in code that requires ConnectorsService
//         // and then make assertions.
//
//     }
type ConnectorsServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, resource *api.Connector) *errors.ServiceError

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, kid string, id string) *errors.ServiceError

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, kid string, id string, tid string) (*api.Connector, *errors.ServiceError)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, kid string, listArgs *ListArguments, tid string) (api.ConnectorList, *api.PagingMeta, *errors.ServiceError)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, resource *api.Connector) *errors.ServiceError

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Resource is the resource argument value.
			Resource *api.Connector
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Kid is the kid argument value.
			Kid string
			// ID is the id argument value.
			ID string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Kid is the kid argument value.
			Kid string
			// ID is the id argument value.
			ID string
			// Tid is the tid argument value.
			Tid string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Kid is the kid argument value.
			Kid string
			// ListArgs is the listArgs argument value.
			ListArgs *ListArguments
			// Tid is the tid argument value.
			Tid string
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Resource is the resource argument value.
			Resource *api.Connector
		}
	}
}

// Create calls CreateFunc.
func (mock *ConnectorsServiceMock) Create(ctx context.Context, resource *api.Connector) *errors.ServiceError {
	if mock.CreateFunc == nil {
		panic("ConnectorsServiceMock.CreateFunc: method is nil but ConnectorsService.Create was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Resource *api.Connector
	}{
		Ctx:      ctx,
		Resource: resource,
	}
	lockConnectorsServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockConnectorsServiceMockCreate.Unlock()
	return mock.CreateFunc(ctx, resource)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedConnectorsService.CreateCalls())
func (mock *ConnectorsServiceMock) CreateCalls() []struct {
	Ctx      context.Context
	Resource *api.Connector
} {
	var calls []struct {
		Ctx      context.Context
		Resource *api.Connector
	}
	lockConnectorsServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockConnectorsServiceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ConnectorsServiceMock) Delete(ctx context.Context, kid string, id string) *errors.ServiceError {
	if mock.DeleteFunc == nil {
		panic("ConnectorsServiceMock.DeleteFunc: method is nil but ConnectorsService.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Kid string
		ID  string
	}{
		Ctx: ctx,
		Kid: kid,
		ID:  id,
	}
	lockConnectorsServiceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockConnectorsServiceMockDelete.Unlock()
	return mock.DeleteFunc(ctx, kid, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedConnectorsService.DeleteCalls())
func (mock *ConnectorsServiceMock) DeleteCalls() []struct {
	Ctx context.Context
	Kid string
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		Kid string
		ID  string
	}
	lockConnectorsServiceMockDelete.RLock()
	calls = mock.calls.Delete
	lockConnectorsServiceMockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ConnectorsServiceMock) Get(ctx context.Context, kid string, id string, tid string) (*api.Connector, *errors.ServiceError) {
	if mock.GetFunc == nil {
		panic("ConnectorsServiceMock.GetFunc: method is nil but ConnectorsService.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Kid string
		ID  string
		Tid string
	}{
		Ctx: ctx,
		Kid: kid,
		ID:  id,
		Tid: tid,
	}
	lockConnectorsServiceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockConnectorsServiceMockGet.Unlock()
	return mock.GetFunc(ctx, kid, id, tid)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedConnectorsService.GetCalls())
func (mock *ConnectorsServiceMock) GetCalls() []struct {
	Ctx context.Context
	Kid string
	ID  string
	Tid string
} {
	var calls []struct {
		Ctx context.Context
		Kid string
		ID  string
		Tid string
	}
	lockConnectorsServiceMockGet.RLock()
	calls = mock.calls.Get
	lockConnectorsServiceMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ConnectorsServiceMock) List(ctx context.Context, kid string, listArgs *ListArguments, tid string) (api.ConnectorList, *api.PagingMeta, *errors.ServiceError) {
	if mock.ListFunc == nil {
		panic("ConnectorsServiceMock.ListFunc: method is nil but ConnectorsService.List was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Kid      string
		ListArgs *ListArguments
		Tid      string
	}{
		Ctx:      ctx,
		Kid:      kid,
		ListArgs: listArgs,
		Tid:      tid,
	}
	lockConnectorsServiceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockConnectorsServiceMockList.Unlock()
	return mock.ListFunc(ctx, kid, listArgs, tid)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedConnectorsService.ListCalls())
func (mock *ConnectorsServiceMock) ListCalls() []struct {
	Ctx      context.Context
	Kid      string
	ListArgs *ListArguments
	Tid      string
} {
	var calls []struct {
		Ctx      context.Context
		Kid      string
		ListArgs *ListArguments
		Tid      string
	}
	lockConnectorsServiceMockList.RLock()
	calls = mock.calls.List
	lockConnectorsServiceMockList.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ConnectorsServiceMock) Update(ctx context.Context, resource *api.Connector) *errors.ServiceError {
	if mock.UpdateFunc == nil {
		panic("ConnectorsServiceMock.UpdateFunc: method is nil but ConnectorsService.Update was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Resource *api.Connector
	}{
		Ctx:      ctx,
		Resource: resource,
	}
	lockConnectorsServiceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockConnectorsServiceMockUpdate.Unlock()
	return mock.UpdateFunc(ctx, resource)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedConnectorsService.UpdateCalls())
func (mock *ConnectorsServiceMock) UpdateCalls() []struct {
	Ctx      context.Context
	Resource *api.Connector
} {
	var calls []struct {
		Ctx      context.Context
		Resource *api.Connector
	}
	lockConnectorsServiceMockUpdate.RLock()
	calls = mock.calls.Update
	lockConnectorsServiceMockUpdate.RUnlock()
	return calls
}
