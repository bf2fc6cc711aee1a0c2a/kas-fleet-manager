// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"github.com/bf2fc6cc711aee1a0c2a/fleet-manager/pkg/api"
	"github.com/bf2fc6cc711aee1a0c2a/fleet-manager/pkg/client/keycloak"
	"github.com/bf2fc6cc711aee1a0c2a/fleet-manager/pkg/errors"
	"sync"
)

// Ensure, that KeycloakServiceMock does implement KeycloakService.
// If this is not the case, regenerate this file with moq.
var _ KeycloakService = &KeycloakServiceMock{}

// KeycloakServiceMock is a mock implementation of KeycloakService.
//
// 	func TestSomethingThatUsesKeycloakService(t *testing.T) {
//
// 		// make and configure a mocked KeycloakService
// 		mockedKeycloakService := &KeycloakServiceMock{
// 			CreateServiceAccountInternalFunc: func(request CompleteServiceAccountRequest) (*api.ServiceAccount, *errors.ServiceError) {
// 				panic("mock out the CreateServiceAccountInternal method")
// 			},
// 			DeRegisterClientInSSOFunc: func(dinosaurNamespace string) *errors.ServiceError {
// 				panic("mock out the DeRegisterClientInSSO method")
// 			},
// 			DeRegisterFleetshardOperatorServiceAccountFunc: func(agentClusterId string) *errors.ServiceError {
// 				panic("mock out the DeRegisterFleetshardOperatorServiceAccount method")
// 			},
// 			DeleteServiceAccountInternalFunc: func(clientId string) *errors.ServiceError {
// 				panic("mock out the DeleteServiceAccountInternal method")
// 			},
// 			GetConfigFunc: func() *keycloak.KeycloakConfig {
// 				panic("mock out the GetConfig method")
// 			},
// 			GetDinosaurClientSecretFunc: func(clientId string) (string, *errors.ServiceError) {
// 				panic("mock out the GetDinosaurClientSecret method")
// 			},
// 			GetRealmConfigFunc: func() *keycloak.KeycloakRealmConfig {
// 				panic("mock out the GetRealmConfig method")
// 			},
// 			IsDinosaurClientExistFunc: func(clientId string) *errors.ServiceError {
// 				panic("mock out the IsDinosaurClientExist method")
// 			},
// 			RegisterDinosaurClientInSSOFunc: func(dinosaurNamespace string, orgId string) (string, *errors.ServiceError) {
// 				panic("mock out the RegisterDinosaurClientInSSO method")
// 			},
// 			RegisterFleetshardOperatorServiceAccountFunc: func(agentClusterId string, roleName string) (*api.ServiceAccount, *errors.ServiceError) {
// 				panic("mock out the RegisterFleetshardOperatorServiceAccount method")
// 			},
// 			RegisterOSDClusterClientInSSOFunc: func(clusterId string, clusterOathCallbackURI string) (string, *errors.ServiceError) {
// 				panic("mock out the RegisterOSDClusterClientInSSO method")
// 			},
// 		}
//
// 		// use mockedKeycloakService in code that requires KeycloakService
// 		// and then make assertions.
//
// 	}
type KeycloakServiceMock struct {
	// CreateServiceAccountInternalFunc mocks the CreateServiceAccountInternal method.
	CreateServiceAccountInternalFunc func(request CompleteServiceAccountRequest) (*api.ServiceAccount, *errors.ServiceError)

	// DeRegisterClientInSSOFunc mocks the DeRegisterClientInSSO method.
	DeRegisterClientInSSOFunc func(dinosaurNamespace string) *errors.ServiceError

	// DeRegisterFleetshardOperatorServiceAccountFunc mocks the DeRegisterFleetshardOperatorServiceAccount method.
	DeRegisterFleetshardOperatorServiceAccountFunc func(agentClusterId string) *errors.ServiceError

	// DeleteServiceAccountInternalFunc mocks the DeleteServiceAccountInternal method.
	DeleteServiceAccountInternalFunc func(clientId string) *errors.ServiceError

	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func() *keycloak.KeycloakConfig

	// GetDinosaurClientSecretFunc mocks the GetDinosaurClientSecret method.
	GetDinosaurClientSecretFunc func(clientId string) (string, *errors.ServiceError)

	// GetRealmConfigFunc mocks the GetRealmConfig method.
	GetRealmConfigFunc func() *keycloak.KeycloakRealmConfig

	// IsDinosaurClientExistFunc mocks the IsDinosaurClientExist method.
	IsDinosaurClientExistFunc func(clientId string) *errors.ServiceError

	// RegisterDinosaurClientInSSOFunc mocks the RegisterDinosaurClientInSSO method.
	RegisterDinosaurClientInSSOFunc func(dinosaurNamespace string, orgId string) (string, *errors.ServiceError)

	// RegisterFleetshardOperatorServiceAccountFunc mocks the RegisterFleetshardOperatorServiceAccount method.
	RegisterFleetshardOperatorServiceAccountFunc func(agentClusterId string, roleName string) (*api.ServiceAccount, *errors.ServiceError)

	// RegisterOSDClusterClientInSSOFunc mocks the RegisterOSDClusterClientInSSO method.
	RegisterOSDClusterClientInSSOFunc func(clusterId string, clusterOathCallbackURI string) (string, *errors.ServiceError)

	// calls tracks calls to the methods.
	calls struct {
		// CreateServiceAccountInternal holds details about calls to the CreateServiceAccountInternal method.
		CreateServiceAccountInternal []struct {
			// Request is the request argument value.
			Request CompleteServiceAccountRequest
		}
		// DeRegisterClientInSSO holds details about calls to the DeRegisterClientInSSO method.
		DeRegisterClientInSSO []struct {
			// DinosaurNamespace is the dinosaurNamespace argument value.
			DinosaurNamespace string
		}
		// DeRegisterFleetshardOperatorServiceAccount holds details about calls to the DeRegisterFleetshardOperatorServiceAccount method.
		DeRegisterFleetshardOperatorServiceAccount []struct {
			// AgentClusterId is the agentClusterId argument value.
			AgentClusterId string
		}
		// DeleteServiceAccountInternal holds details about calls to the DeleteServiceAccountInternal method.
		DeleteServiceAccountInternal []struct {
			// ClientId is the clientId argument value.
			ClientId string
		}
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
		}
		// GetDinosaurClientSecret holds details about calls to the GetDinosaurClientSecret method.
		GetDinosaurClientSecret []struct {
			// ClientId is the clientId argument value.
			ClientId string
		}
		// GetRealmConfig holds details about calls to the GetRealmConfig method.
		GetRealmConfig []struct {
		}
		// IsDinosaurClientExist holds details about calls to the IsDinosaurClientExist method.
		IsDinosaurClientExist []struct {
			// ClientId is the clientId argument value.
			ClientId string
		}
		// RegisterDinosaurClientInSSO holds details about calls to the RegisterDinosaurClientInSSO method.
		RegisterDinosaurClientInSSO []struct {
			// DinosaurNamespace is the dinosaurNamespace argument value.
			DinosaurNamespace string
			// OrgId is the orgId argument value.
			OrgId string
		}
		// RegisterFleetshardOperatorServiceAccount holds details about calls to the RegisterFleetshardOperatorServiceAccount method.
		RegisterFleetshardOperatorServiceAccount []struct {
			// AgentClusterId is the agentClusterId argument value.
			AgentClusterId string
			// RoleName is the roleName argument value.
			RoleName string
		}
		// RegisterOSDClusterClientInSSO holds details about calls to the RegisterOSDClusterClientInSSO method.
		RegisterOSDClusterClientInSSO []struct {
			// ClusterId is the clusterId argument value.
			ClusterId string
			// ClusterOathCallbackURI is the clusterOathCallbackURI argument value.
			ClusterOathCallbackURI string
		}
	}
	lockCreateServiceAccountInternal               sync.RWMutex
	lockDeRegisterClientInSSO                      sync.RWMutex
	lockDeRegisterFleetshardOperatorServiceAccount sync.RWMutex
	lockDeleteServiceAccountInternal               sync.RWMutex
	lockGetConfig                                  sync.RWMutex
	lockGetDinosaurClientSecret                    sync.RWMutex
	lockGetRealmConfig                             sync.RWMutex
	lockIsDinosaurClientExist                      sync.RWMutex
	lockRegisterDinosaurClientInSSO                sync.RWMutex
	lockRegisterFleetshardOperatorServiceAccount   sync.RWMutex
	lockRegisterOSDClusterClientInSSO              sync.RWMutex
}

// CreateServiceAccountInternal calls CreateServiceAccountInternalFunc.
func (mock *KeycloakServiceMock) CreateServiceAccountInternal(request CompleteServiceAccountRequest) (*api.ServiceAccount, *errors.ServiceError) {
	if mock.CreateServiceAccountInternalFunc == nil {
		panic("KeycloakServiceMock.CreateServiceAccountInternalFunc: method is nil but KeycloakService.CreateServiceAccountInternal was just called")
	}
	callInfo := struct {
		Request CompleteServiceAccountRequest
	}{
		Request: request,
	}
	mock.lockCreateServiceAccountInternal.Lock()
	mock.calls.CreateServiceAccountInternal = append(mock.calls.CreateServiceAccountInternal, callInfo)
	mock.lockCreateServiceAccountInternal.Unlock()
	return mock.CreateServiceAccountInternalFunc(request)
}

// CreateServiceAccountInternalCalls gets all the calls that were made to CreateServiceAccountInternal.
// Check the length with:
//     len(mockedKeycloakService.CreateServiceAccountInternalCalls())
func (mock *KeycloakServiceMock) CreateServiceAccountInternalCalls() []struct {
	Request CompleteServiceAccountRequest
} {
	var calls []struct {
		Request CompleteServiceAccountRequest
	}
	mock.lockCreateServiceAccountInternal.RLock()
	calls = mock.calls.CreateServiceAccountInternal
	mock.lockCreateServiceAccountInternal.RUnlock()
	return calls
}

// DeRegisterClientInSSO calls DeRegisterClientInSSOFunc.
func (mock *KeycloakServiceMock) DeRegisterClientInSSO(dinosaurNamespace string) *errors.ServiceError {
	if mock.DeRegisterClientInSSOFunc == nil {
		panic("KeycloakServiceMock.DeRegisterClientInSSOFunc: method is nil but KeycloakService.DeRegisterClientInSSO was just called")
	}
	callInfo := struct {
		DinosaurNamespace string
	}{
		DinosaurNamespace: dinosaurNamespace,
	}
	mock.lockDeRegisterClientInSSO.Lock()
	mock.calls.DeRegisterClientInSSO = append(mock.calls.DeRegisterClientInSSO, callInfo)
	mock.lockDeRegisterClientInSSO.Unlock()
	return mock.DeRegisterClientInSSOFunc(dinosaurNamespace)
}

// DeRegisterClientInSSOCalls gets all the calls that were made to DeRegisterClientInSSO.
// Check the length with:
//     len(mockedKeycloakService.DeRegisterClientInSSOCalls())
func (mock *KeycloakServiceMock) DeRegisterClientInSSOCalls() []struct {
	DinosaurNamespace string
} {
	var calls []struct {
		DinosaurNamespace string
	}
	mock.lockDeRegisterClientInSSO.RLock()
	calls = mock.calls.DeRegisterClientInSSO
	mock.lockDeRegisterClientInSSO.RUnlock()
	return calls
}

// DeRegisterFleetshardOperatorServiceAccount calls DeRegisterFleetshardOperatorServiceAccountFunc.
func (mock *KeycloakServiceMock) DeRegisterFleetshardOperatorServiceAccount(agentClusterId string) *errors.ServiceError {
	if mock.DeRegisterFleetshardOperatorServiceAccountFunc == nil {
		panic("KeycloakServiceMock.DeRegisterFleetshardOperatorServiceAccountFunc: method is nil but KeycloakService.DeRegisterFleetshardOperatorServiceAccount was just called")
	}
	callInfo := struct {
		AgentClusterId string
	}{
		AgentClusterId: agentClusterId,
	}
	mock.lockDeRegisterFleetshardOperatorServiceAccount.Lock()
	mock.calls.DeRegisterFleetshardOperatorServiceAccount = append(mock.calls.DeRegisterFleetshardOperatorServiceAccount, callInfo)
	mock.lockDeRegisterFleetshardOperatorServiceAccount.Unlock()
	return mock.DeRegisterFleetshardOperatorServiceAccountFunc(agentClusterId)
}

// DeRegisterFleetshardOperatorServiceAccountCalls gets all the calls that were made to DeRegisterFleetshardOperatorServiceAccount.
// Check the length with:
//     len(mockedKeycloakService.DeRegisterFleetshardOperatorServiceAccountCalls())
func (mock *KeycloakServiceMock) DeRegisterFleetshardOperatorServiceAccountCalls() []struct {
	AgentClusterId string
} {
	var calls []struct {
		AgentClusterId string
	}
	mock.lockDeRegisterFleetshardOperatorServiceAccount.RLock()
	calls = mock.calls.DeRegisterFleetshardOperatorServiceAccount
	mock.lockDeRegisterFleetshardOperatorServiceAccount.RUnlock()
	return calls
}

// DeleteServiceAccountInternal calls DeleteServiceAccountInternalFunc.
func (mock *KeycloakServiceMock) DeleteServiceAccountInternal(clientId string) *errors.ServiceError {
	if mock.DeleteServiceAccountInternalFunc == nil {
		panic("KeycloakServiceMock.DeleteServiceAccountInternalFunc: method is nil but KeycloakService.DeleteServiceAccountInternal was just called")
	}
	callInfo := struct {
		ClientId string
	}{
		ClientId: clientId,
	}
	mock.lockDeleteServiceAccountInternal.Lock()
	mock.calls.DeleteServiceAccountInternal = append(mock.calls.DeleteServiceAccountInternal, callInfo)
	mock.lockDeleteServiceAccountInternal.Unlock()
	return mock.DeleteServiceAccountInternalFunc(clientId)
}

// DeleteServiceAccountInternalCalls gets all the calls that were made to DeleteServiceAccountInternal.
// Check the length with:
//     len(mockedKeycloakService.DeleteServiceAccountInternalCalls())
func (mock *KeycloakServiceMock) DeleteServiceAccountInternalCalls() []struct {
	ClientId string
} {
	var calls []struct {
		ClientId string
	}
	mock.lockDeleteServiceAccountInternal.RLock()
	calls = mock.calls.DeleteServiceAccountInternal
	mock.lockDeleteServiceAccountInternal.RUnlock()
	return calls
}

// GetConfig calls GetConfigFunc.
func (mock *KeycloakServiceMock) GetConfig() *keycloak.KeycloakConfig {
	if mock.GetConfigFunc == nil {
		panic("KeycloakServiceMock.GetConfigFunc: method is nil but KeycloakService.GetConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	mock.lockGetConfig.Unlock()
	return mock.GetConfigFunc()
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//     len(mockedKeycloakService.GetConfigCalls())
func (mock *KeycloakServiceMock) GetConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetConfig.RLock()
	calls = mock.calls.GetConfig
	mock.lockGetConfig.RUnlock()
	return calls
}

// GetDinosaurClientSecret calls GetDinosaurClientSecretFunc.
func (mock *KeycloakServiceMock) GetDinosaurClientSecret(clientId string) (string, *errors.ServiceError) {
	if mock.GetDinosaurClientSecretFunc == nil {
		panic("KeycloakServiceMock.GetDinosaurClientSecretFunc: method is nil but KeycloakService.GetDinosaurClientSecret was just called")
	}
	callInfo := struct {
		ClientId string
	}{
		ClientId: clientId,
	}
	mock.lockGetDinosaurClientSecret.Lock()
	mock.calls.GetDinosaurClientSecret = append(mock.calls.GetDinosaurClientSecret, callInfo)
	mock.lockGetDinosaurClientSecret.Unlock()
	return mock.GetDinosaurClientSecretFunc(clientId)
}

// GetDinosaurClientSecretCalls gets all the calls that were made to GetDinosaurClientSecret.
// Check the length with:
//     len(mockedKeycloakService.GetDinosaurClientSecretCalls())
func (mock *KeycloakServiceMock) GetDinosaurClientSecretCalls() []struct {
	ClientId string
} {
	var calls []struct {
		ClientId string
	}
	mock.lockGetDinosaurClientSecret.RLock()
	calls = mock.calls.GetDinosaurClientSecret
	mock.lockGetDinosaurClientSecret.RUnlock()
	return calls
}

// GetRealmConfig calls GetRealmConfigFunc.
func (mock *KeycloakServiceMock) GetRealmConfig() *keycloak.KeycloakRealmConfig {
	if mock.GetRealmConfigFunc == nil {
		panic("KeycloakServiceMock.GetRealmConfigFunc: method is nil but KeycloakService.GetRealmConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetRealmConfig.Lock()
	mock.calls.GetRealmConfig = append(mock.calls.GetRealmConfig, callInfo)
	mock.lockGetRealmConfig.Unlock()
	return mock.GetRealmConfigFunc()
}

// GetRealmConfigCalls gets all the calls that were made to GetRealmConfig.
// Check the length with:
//     len(mockedKeycloakService.GetRealmConfigCalls())
func (mock *KeycloakServiceMock) GetRealmConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetRealmConfig.RLock()
	calls = mock.calls.GetRealmConfig
	mock.lockGetRealmConfig.RUnlock()
	return calls
}

// IsDinosaurClientExist calls IsDinosaurClientExistFunc.
func (mock *KeycloakServiceMock) IsDinosaurClientExist(clientId string) *errors.ServiceError {
	if mock.IsDinosaurClientExistFunc == nil {
		panic("KeycloakServiceMock.IsDinosaurClientExistFunc: method is nil but KeycloakService.IsDinosaurClientExist was just called")
	}
	callInfo := struct {
		ClientId string
	}{
		ClientId: clientId,
	}
	mock.lockIsDinosaurClientExist.Lock()
	mock.calls.IsDinosaurClientExist = append(mock.calls.IsDinosaurClientExist, callInfo)
	mock.lockIsDinosaurClientExist.Unlock()
	return mock.IsDinosaurClientExistFunc(clientId)
}

// IsDinosaurClientExistCalls gets all the calls that were made to IsDinosaurClientExist.
// Check the length with:
//     len(mockedKeycloakService.IsDinosaurClientExistCalls())
func (mock *KeycloakServiceMock) IsDinosaurClientExistCalls() []struct {
	ClientId string
} {
	var calls []struct {
		ClientId string
	}
	mock.lockIsDinosaurClientExist.RLock()
	calls = mock.calls.IsDinosaurClientExist
	mock.lockIsDinosaurClientExist.RUnlock()
	return calls
}

// RegisterDinosaurClientInSSO calls RegisterDinosaurClientInSSOFunc.
func (mock *KeycloakServiceMock) RegisterDinosaurClientInSSO(dinosaurNamespace string, orgId string) (string, *errors.ServiceError) {
	if mock.RegisterDinosaurClientInSSOFunc == nil {
		panic("KeycloakServiceMock.RegisterDinosaurClientInSSOFunc: method is nil but KeycloakService.RegisterDinosaurClientInSSO was just called")
	}
	callInfo := struct {
		DinosaurNamespace string
		OrgId             string
	}{
		DinosaurNamespace: dinosaurNamespace,
		OrgId:             orgId,
	}
	mock.lockRegisterDinosaurClientInSSO.Lock()
	mock.calls.RegisterDinosaurClientInSSO = append(mock.calls.RegisterDinosaurClientInSSO, callInfo)
	mock.lockRegisterDinosaurClientInSSO.Unlock()
	return mock.RegisterDinosaurClientInSSOFunc(dinosaurNamespace, orgId)
}

// RegisterDinosaurClientInSSOCalls gets all the calls that were made to RegisterDinosaurClientInSSO.
// Check the length with:
//     len(mockedKeycloakService.RegisterDinosaurClientInSSOCalls())
func (mock *KeycloakServiceMock) RegisterDinosaurClientInSSOCalls() []struct {
	DinosaurNamespace string
	OrgId             string
} {
	var calls []struct {
		DinosaurNamespace string
		OrgId             string
	}
	mock.lockRegisterDinosaurClientInSSO.RLock()
	calls = mock.calls.RegisterDinosaurClientInSSO
	mock.lockRegisterDinosaurClientInSSO.RUnlock()
	return calls
}

// RegisterFleetshardOperatorServiceAccount calls RegisterFleetshardOperatorServiceAccountFunc.
func (mock *KeycloakServiceMock) RegisterFleetshardOperatorServiceAccount(agentClusterId string, roleName string) (*api.ServiceAccount, *errors.ServiceError) {
	if mock.RegisterFleetshardOperatorServiceAccountFunc == nil {
		panic("KeycloakServiceMock.RegisterFleetshardOperatorServiceAccountFunc: method is nil but KeycloakService.RegisterFleetshardOperatorServiceAccount was just called")
	}
	callInfo := struct {
		AgentClusterId string
		RoleName       string
	}{
		AgentClusterId: agentClusterId,
		RoleName:       roleName,
	}
	mock.lockRegisterFleetshardOperatorServiceAccount.Lock()
	mock.calls.RegisterFleetshardOperatorServiceAccount = append(mock.calls.RegisterFleetshardOperatorServiceAccount, callInfo)
	mock.lockRegisterFleetshardOperatorServiceAccount.Unlock()
	return mock.RegisterFleetshardOperatorServiceAccountFunc(agentClusterId, roleName)
}

// RegisterFleetshardOperatorServiceAccountCalls gets all the calls that were made to RegisterFleetshardOperatorServiceAccount.
// Check the length with:
//     len(mockedKeycloakService.RegisterFleetshardOperatorServiceAccountCalls())
func (mock *KeycloakServiceMock) RegisterFleetshardOperatorServiceAccountCalls() []struct {
	AgentClusterId string
	RoleName       string
} {
	var calls []struct {
		AgentClusterId string
		RoleName       string
	}
	mock.lockRegisterFleetshardOperatorServiceAccount.RLock()
	calls = mock.calls.RegisterFleetshardOperatorServiceAccount
	mock.lockRegisterFleetshardOperatorServiceAccount.RUnlock()
	return calls
}

// RegisterOSDClusterClientInSSO calls RegisterOSDClusterClientInSSOFunc.
func (mock *KeycloakServiceMock) RegisterOSDClusterClientInSSO(clusterId string, clusterOathCallbackURI string) (string, *errors.ServiceError) {
	if mock.RegisterOSDClusterClientInSSOFunc == nil {
		panic("KeycloakServiceMock.RegisterOSDClusterClientInSSOFunc: method is nil but KeycloakService.RegisterOSDClusterClientInSSO was just called")
	}
	callInfo := struct {
		ClusterId              string
		ClusterOathCallbackURI string
	}{
		ClusterId:              clusterId,
		ClusterOathCallbackURI: clusterOathCallbackURI,
	}
	mock.lockRegisterOSDClusterClientInSSO.Lock()
	mock.calls.RegisterOSDClusterClientInSSO = append(mock.calls.RegisterOSDClusterClientInSSO, callInfo)
	mock.lockRegisterOSDClusterClientInSSO.Unlock()
	return mock.RegisterOSDClusterClientInSSOFunc(clusterId, clusterOathCallbackURI)
}

// RegisterOSDClusterClientInSSOCalls gets all the calls that were made to RegisterOSDClusterClientInSSO.
// Check the length with:
//     len(mockedKeycloakService.RegisterOSDClusterClientInSSOCalls())
func (mock *KeycloakServiceMock) RegisterOSDClusterClientInSSOCalls() []struct {
	ClusterId              string
	ClusterOathCallbackURI string
} {
	var calls []struct {
		ClusterId              string
		ClusterOathCallbackURI string
	}
	mock.lockRegisterOSDClusterClientInSSO.RLock()
	calls = mock.calls.RegisterOSDClusterClientInSSO
	mock.lockRegisterOSDClusterClientInSSO.RUnlock()
	return calls
}
