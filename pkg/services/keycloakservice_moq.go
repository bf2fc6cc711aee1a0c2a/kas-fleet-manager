// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"context"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/api"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/config"
	apiErrors "github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/errors"
	"sync"
)

// Ensure, that KeycloakServiceMock does implement KeycloakService.
// If this is not the case, regenerate this file with moq.
var _ KeycloakService = &KeycloakServiceMock{}

// KeycloakServiceMock is a mock implementation of KeycloakService.
//
// 	func TestSomethingThatUsesKeycloakService(t *testing.T) {
//
// 		// make and configure a mocked KeycloakService
// 		mockedKeycloakService := &KeycloakServiceMock{
// 			CreateServiceAccountFunc: func(serviceAccountRequest *api.ServiceAccountRequest, ctx context.Context) (*api.ServiceAccount, *apiErrors.ServiceError) {
// 				panic("mock out the CreateServiceAccount method")
// 			},
// 			DeRegisterKafkaClientInSSOFunc: func(kafkaNamespace string) *apiErrors.ServiceError {
// 				panic("mock out the DeRegisterKafkaClientInSSO method")
// 			},
// 			DeleteServiceAccountFunc: func(ctx context.Context, clientId string) *apiErrors.ServiceError {
// 				panic("mock out the DeleteServiceAccount method")
// 			},
// 			GetConfigFunc: func() *config.KeycloakConfig {
// 				panic("mock out the GetConfig method")
// 			},
// 			GetSecretForRegisteredKafkaClientFunc: func(kafkaClusterName string) (string, *apiErrors.ServiceError) {
// 				panic("mock out the GetSecretForRegisteredKafkaClient method")
// 			},
// 			GetServiceAccountByIdFunc: func(ctx context.Context, id string) (*api.ServiceAccount, *apiErrors.ServiceError) {
// 				panic("mock out the GetServiceAccountById method")
// 			},
// 			IsKafkaClientExistFunc: func(clientId string) *apiErrors.ServiceError {
// 				panic("mock out the IsKafkaClientExist method")
// 			},
// 			ListServiceAccFunc: func(ctx context.Context, first int, max int) ([]api.ServiceAccount, *apiErrors.ServiceError) {
// 				panic("mock out the ListServiceAcc method")
// 			},
// 			RegisterConnectorFleetshardOperatorServiceAccountFunc: func(agentClusterId string, roleName string) (*api.ServiceAccount, *apiErrors.ServiceError) {
// 				panic("mock out the RegisterConnectorFleetshardOperatorServiceAccount method")
// 			},
// 			RegisterKafkaClientInSSOFunc: func(kafkaNamespace string, orgId string) (string, *apiErrors.ServiceError) {
// 				panic("mock out the RegisterKafkaClientInSSO method")
// 			},
// 			RegisterKasFleetshardOperatorServiceAccountFunc: func(agentClusterId string, roleName string) (*api.ServiceAccount, *apiErrors.ServiceError) {
// 				panic("mock out the RegisterKasFleetshardOperatorServiceAccount method")
// 			},
// 			ResetServiceAccountCredentialsFunc: func(ctx context.Context, clientId string) (*api.ServiceAccount, *apiErrors.ServiceError) {
// 				panic("mock out the ResetServiceAccountCredentials method")
// 			},
// 		}
//
// 		// use mockedKeycloakService in code that requires KeycloakService
// 		// and then make assertions.
//
// 	}
type KeycloakServiceMock struct {
	// CreateServiceAccountFunc mocks the CreateServiceAccount method.
	CreateServiceAccountFunc func(serviceAccountRequest *api.ServiceAccountRequest, ctx context.Context) (*api.ServiceAccount, *apiErrors.ServiceError)

	// DeRegisterKafkaClientInSSOFunc mocks the DeRegisterKafkaClientInSSO method.
	DeRegisterKafkaClientInSSOFunc func(kafkaNamespace string) *apiErrors.ServiceError

	// DeleteServiceAccountFunc mocks the DeleteServiceAccount method.
	DeleteServiceAccountFunc func(ctx context.Context, clientId string) *apiErrors.ServiceError

	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func() *config.KeycloakConfig

	// GetSecretForRegisteredKafkaClientFunc mocks the GetSecretForRegisteredKafkaClient method.
	GetSecretForRegisteredKafkaClientFunc func(kafkaClusterName string) (string, *apiErrors.ServiceError)

	// GetServiceAccountByIdFunc mocks the GetServiceAccountById method.
	GetServiceAccountByIdFunc func(ctx context.Context, id string) (*api.ServiceAccount, *apiErrors.ServiceError)

	// IsKafkaClientExistFunc mocks the IsKafkaClientExist method.
	IsKafkaClientExistFunc func(clientId string) *apiErrors.ServiceError

	// ListServiceAccFunc mocks the ListServiceAcc method.
	ListServiceAccFunc func(ctx context.Context, first int, max int) ([]api.ServiceAccount, *apiErrors.ServiceError)

	// RegisterConnectorFleetshardOperatorServiceAccountFunc mocks the RegisterConnectorFleetshardOperatorServiceAccount method.
	RegisterConnectorFleetshardOperatorServiceAccountFunc func(agentClusterId string, roleName string) (*api.ServiceAccount, *apiErrors.ServiceError)

	// RegisterKafkaClientInSSOFunc mocks the RegisterKafkaClientInSSO method.
	RegisterKafkaClientInSSOFunc func(kafkaNamespace string, orgId string) (string, *apiErrors.ServiceError)

	// RegisterKasFleetshardOperatorServiceAccountFunc mocks the RegisterKasFleetshardOperatorServiceAccount method.
	RegisterKasFleetshardOperatorServiceAccountFunc func(agentClusterId string, roleName string) (*api.ServiceAccount, *apiErrors.ServiceError)

	// ResetServiceAccountCredentialsFunc mocks the ResetServiceAccountCredentials method.
	ResetServiceAccountCredentialsFunc func(ctx context.Context, clientId string) (*api.ServiceAccount, *apiErrors.ServiceError)

	// calls tracks calls to the methods.
	calls struct {
		// CreateServiceAccount holds details about calls to the CreateServiceAccount method.
		CreateServiceAccount []struct {
			// ServiceAccountRequest is the serviceAccountRequest argument value.
			ServiceAccountRequest *api.ServiceAccountRequest
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// DeRegisterKafkaClientInSSO holds details about calls to the DeRegisterKafkaClientInSSO method.
		DeRegisterKafkaClientInSSO []struct {
			// KafkaNamespace is the kafkaNamespace argument value.
			KafkaNamespace string
		}
		// DeleteServiceAccount holds details about calls to the DeleteServiceAccount method.
		DeleteServiceAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClientId is the clientId argument value.
			ClientId string
		}
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
		}
		// GetSecretForRegisteredKafkaClient holds details about calls to the GetSecretForRegisteredKafkaClient method.
		GetSecretForRegisteredKafkaClient []struct {
			// KafkaClusterName is the kafkaClusterName argument value.
			KafkaClusterName string
		}
		// GetServiceAccountById holds details about calls to the GetServiceAccountById method.
		GetServiceAccountById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// IsKafkaClientExist holds details about calls to the IsKafkaClientExist method.
		IsKafkaClientExist []struct {
			// ClientId is the clientId argument value.
			ClientId string
		}
		// ListServiceAcc holds details about calls to the ListServiceAcc method.
		ListServiceAcc []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// First is the first argument value.
			First int
			// Max is the max argument value.
			Max int
		}
		// RegisterConnectorFleetshardOperatorServiceAccount holds details about calls to the RegisterConnectorFleetshardOperatorServiceAccount method.
		RegisterConnectorFleetshardOperatorServiceAccount []struct {
			// AgentClusterId is the agentClusterId argument value.
			AgentClusterId string
			// RoleName is the roleName argument value.
			RoleName string
		}
		// RegisterKafkaClientInSSO holds details about calls to the RegisterKafkaClientInSSO method.
		RegisterKafkaClientInSSO []struct {
			// KafkaNamespace is the kafkaNamespace argument value.
			KafkaNamespace string
			// OrgId is the orgId argument value.
			OrgId string
		}
		// RegisterKasFleetshardOperatorServiceAccount holds details about calls to the RegisterKasFleetshardOperatorServiceAccount method.
		RegisterKasFleetshardOperatorServiceAccount []struct {
			// AgentClusterId is the agentClusterId argument value.
			AgentClusterId string
			// RoleName is the roleName argument value.
			RoleName string
		}
		// ResetServiceAccountCredentials holds details about calls to the ResetServiceAccountCredentials method.
		ResetServiceAccountCredentials []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClientId is the clientId argument value.
			ClientId string
		}
	}
	lockCreateServiceAccount                              sync.RWMutex
	lockDeRegisterKafkaClientInSSO                        sync.RWMutex
	lockDeleteServiceAccount                              sync.RWMutex
	lockGetConfig                                         sync.RWMutex
	lockGetSecretForRegisteredKafkaClient                 sync.RWMutex
	lockGetServiceAccountById                             sync.RWMutex
	lockIsKafkaClientExist                                sync.RWMutex
	lockListServiceAcc                                    sync.RWMutex
	lockRegisterConnectorFleetshardOperatorServiceAccount sync.RWMutex
	lockRegisterKafkaClientInSSO                          sync.RWMutex
	lockRegisterKasFleetshardOperatorServiceAccount       sync.RWMutex
	lockResetServiceAccountCredentials                    sync.RWMutex
}

// CreateServiceAccount calls CreateServiceAccountFunc.
func (mock *KeycloakServiceMock) CreateServiceAccount(serviceAccountRequest *api.ServiceAccountRequest, ctx context.Context) (*api.ServiceAccount, *apiErrors.ServiceError) {
	if mock.CreateServiceAccountFunc == nil {
		panic("KeycloakServiceMock.CreateServiceAccountFunc: method is nil but KeycloakService.CreateServiceAccount was just called")
	}
	callInfo := struct {
		ServiceAccountRequest *api.ServiceAccountRequest
		Ctx                   context.Context
	}{
		ServiceAccountRequest: serviceAccountRequest,
		Ctx:                   ctx,
	}
	mock.lockCreateServiceAccount.Lock()
	mock.calls.CreateServiceAccount = append(mock.calls.CreateServiceAccount, callInfo)
	mock.lockCreateServiceAccount.Unlock()
	return mock.CreateServiceAccountFunc(serviceAccountRequest, ctx)
}

// CreateServiceAccountCalls gets all the calls that were made to CreateServiceAccount.
// Check the length with:
//     len(mockedKeycloakService.CreateServiceAccountCalls())
func (mock *KeycloakServiceMock) CreateServiceAccountCalls() []struct {
	ServiceAccountRequest *api.ServiceAccountRequest
	Ctx                   context.Context
} {
	var calls []struct {
		ServiceAccountRequest *api.ServiceAccountRequest
		Ctx                   context.Context
	}
	mock.lockCreateServiceAccount.RLock()
	calls = mock.calls.CreateServiceAccount
	mock.lockCreateServiceAccount.RUnlock()
	return calls
}

// DeRegisterKafkaClientInSSO calls DeRegisterKafkaClientInSSOFunc.
func (mock *KeycloakServiceMock) DeRegisterKafkaClientInSSO(kafkaNamespace string) *apiErrors.ServiceError {
	if mock.DeRegisterKafkaClientInSSOFunc == nil {
		panic("KeycloakServiceMock.DeRegisterKafkaClientInSSOFunc: method is nil but KeycloakService.DeRegisterKafkaClientInSSO was just called")
	}
	callInfo := struct {
		KafkaNamespace string
	}{
		KafkaNamespace: kafkaNamespace,
	}
	mock.lockDeRegisterKafkaClientInSSO.Lock()
	mock.calls.DeRegisterKafkaClientInSSO = append(mock.calls.DeRegisterKafkaClientInSSO, callInfo)
	mock.lockDeRegisterKafkaClientInSSO.Unlock()
	return mock.DeRegisterKafkaClientInSSOFunc(kafkaNamespace)
}

// DeRegisterKafkaClientInSSOCalls gets all the calls that were made to DeRegisterKafkaClientInSSO.
// Check the length with:
//     len(mockedKeycloakService.DeRegisterKafkaClientInSSOCalls())
func (mock *KeycloakServiceMock) DeRegisterKafkaClientInSSOCalls() []struct {
	KafkaNamespace string
} {
	var calls []struct {
		KafkaNamespace string
	}
	mock.lockDeRegisterKafkaClientInSSO.RLock()
	calls = mock.calls.DeRegisterKafkaClientInSSO
	mock.lockDeRegisterKafkaClientInSSO.RUnlock()
	return calls
}

// DeleteServiceAccount calls DeleteServiceAccountFunc.
func (mock *KeycloakServiceMock) DeleteServiceAccount(ctx context.Context, clientId string) *apiErrors.ServiceError {
	if mock.DeleteServiceAccountFunc == nil {
		panic("KeycloakServiceMock.DeleteServiceAccountFunc: method is nil but KeycloakService.DeleteServiceAccount was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ClientId string
	}{
		Ctx:      ctx,
		ClientId: clientId,
	}
	mock.lockDeleteServiceAccount.Lock()
	mock.calls.DeleteServiceAccount = append(mock.calls.DeleteServiceAccount, callInfo)
	mock.lockDeleteServiceAccount.Unlock()
	return mock.DeleteServiceAccountFunc(ctx, clientId)
}

// DeleteServiceAccountCalls gets all the calls that were made to DeleteServiceAccount.
// Check the length with:
//     len(mockedKeycloakService.DeleteServiceAccountCalls())
func (mock *KeycloakServiceMock) DeleteServiceAccountCalls() []struct {
	Ctx      context.Context
	ClientId string
} {
	var calls []struct {
		Ctx      context.Context
		ClientId string
	}
	mock.lockDeleteServiceAccount.RLock()
	calls = mock.calls.DeleteServiceAccount
	mock.lockDeleteServiceAccount.RUnlock()
	return calls
}

// GetConfig calls GetConfigFunc.
func (mock *KeycloakServiceMock) GetConfig() *config.KeycloakConfig {
	if mock.GetConfigFunc == nil {
		panic("KeycloakServiceMock.GetConfigFunc: method is nil but KeycloakService.GetConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	mock.lockGetConfig.Unlock()
	return mock.GetConfigFunc()
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//     len(mockedKeycloakService.GetConfigCalls())
func (mock *KeycloakServiceMock) GetConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetConfig.RLock()
	calls = mock.calls.GetConfig
	mock.lockGetConfig.RUnlock()
	return calls
}

// GetSecretForRegisteredKafkaClient calls GetSecretForRegisteredKafkaClientFunc.
func (mock *KeycloakServiceMock) GetSecretForRegisteredKafkaClient(kafkaClusterName string) (string, *apiErrors.ServiceError) {
	if mock.GetSecretForRegisteredKafkaClientFunc == nil {
		panic("KeycloakServiceMock.GetSecretForRegisteredKafkaClientFunc: method is nil but KeycloakService.GetSecretForRegisteredKafkaClient was just called")
	}
	callInfo := struct {
		KafkaClusterName string
	}{
		KafkaClusterName: kafkaClusterName,
	}
	mock.lockGetSecretForRegisteredKafkaClient.Lock()
	mock.calls.GetSecretForRegisteredKafkaClient = append(mock.calls.GetSecretForRegisteredKafkaClient, callInfo)
	mock.lockGetSecretForRegisteredKafkaClient.Unlock()
	return mock.GetSecretForRegisteredKafkaClientFunc(kafkaClusterName)
}

// GetSecretForRegisteredKafkaClientCalls gets all the calls that were made to GetSecretForRegisteredKafkaClient.
// Check the length with:
//     len(mockedKeycloakService.GetSecretForRegisteredKafkaClientCalls())
func (mock *KeycloakServiceMock) GetSecretForRegisteredKafkaClientCalls() []struct {
	KafkaClusterName string
} {
	var calls []struct {
		KafkaClusterName string
	}
	mock.lockGetSecretForRegisteredKafkaClient.RLock()
	calls = mock.calls.GetSecretForRegisteredKafkaClient
	mock.lockGetSecretForRegisteredKafkaClient.RUnlock()
	return calls
}

// GetServiceAccountById calls GetServiceAccountByIdFunc.
func (mock *KeycloakServiceMock) GetServiceAccountById(ctx context.Context, id string) (*api.ServiceAccount, *apiErrors.ServiceError) {
	if mock.GetServiceAccountByIdFunc == nil {
		panic("KeycloakServiceMock.GetServiceAccountByIdFunc: method is nil but KeycloakService.GetServiceAccountById was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetServiceAccountById.Lock()
	mock.calls.GetServiceAccountById = append(mock.calls.GetServiceAccountById, callInfo)
	mock.lockGetServiceAccountById.Unlock()
	return mock.GetServiceAccountByIdFunc(ctx, id)
}

// GetServiceAccountByIdCalls gets all the calls that were made to GetServiceAccountById.
// Check the length with:
//     len(mockedKeycloakService.GetServiceAccountByIdCalls())
func (mock *KeycloakServiceMock) GetServiceAccountByIdCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGetServiceAccountById.RLock()
	calls = mock.calls.GetServiceAccountById
	mock.lockGetServiceAccountById.RUnlock()
	return calls
}

// IsKafkaClientExist calls IsKafkaClientExistFunc.
func (mock *KeycloakServiceMock) IsKafkaClientExist(clientId string) *apiErrors.ServiceError {
	if mock.IsKafkaClientExistFunc == nil {
		panic("KeycloakServiceMock.IsKafkaClientExistFunc: method is nil but KeycloakService.IsKafkaClientExist was just called")
	}
	callInfo := struct {
		ClientId string
	}{
		ClientId: clientId,
	}
	mock.lockIsKafkaClientExist.Lock()
	mock.calls.IsKafkaClientExist = append(mock.calls.IsKafkaClientExist, callInfo)
	mock.lockIsKafkaClientExist.Unlock()
	return mock.IsKafkaClientExistFunc(clientId)
}

// IsKafkaClientExistCalls gets all the calls that were made to IsKafkaClientExist.
// Check the length with:
//     len(mockedKeycloakService.IsKafkaClientExistCalls())
func (mock *KeycloakServiceMock) IsKafkaClientExistCalls() []struct {
	ClientId string
} {
	var calls []struct {
		ClientId string
	}
	mock.lockIsKafkaClientExist.RLock()
	calls = mock.calls.IsKafkaClientExist
	mock.lockIsKafkaClientExist.RUnlock()
	return calls
}

// ListServiceAcc calls ListServiceAccFunc.
func (mock *KeycloakServiceMock) ListServiceAcc(ctx context.Context, first int, max int) ([]api.ServiceAccount, *apiErrors.ServiceError) {
	if mock.ListServiceAccFunc == nil {
		panic("KeycloakServiceMock.ListServiceAccFunc: method is nil but KeycloakService.ListServiceAcc was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		First int
		Max   int
	}{
		Ctx:   ctx,
		First: first,
		Max:   max,
	}
	mock.lockListServiceAcc.Lock()
	mock.calls.ListServiceAcc = append(mock.calls.ListServiceAcc, callInfo)
	mock.lockListServiceAcc.Unlock()
	return mock.ListServiceAccFunc(ctx, first, max)
}

// ListServiceAccCalls gets all the calls that were made to ListServiceAcc.
// Check the length with:
//     len(mockedKeycloakService.ListServiceAccCalls())
func (mock *KeycloakServiceMock) ListServiceAccCalls() []struct {
	Ctx   context.Context
	First int
	Max   int
} {
	var calls []struct {
		Ctx   context.Context
		First int
		Max   int
	}
	mock.lockListServiceAcc.RLock()
	calls = mock.calls.ListServiceAcc
	mock.lockListServiceAcc.RUnlock()
	return calls
}

// RegisterConnectorFleetshardOperatorServiceAccount calls RegisterConnectorFleetshardOperatorServiceAccountFunc.
func (mock *KeycloakServiceMock) RegisterConnectorFleetshardOperatorServiceAccount(agentClusterId string, roleName string) (*api.ServiceAccount, *apiErrors.ServiceError) {
	if mock.RegisterConnectorFleetshardOperatorServiceAccountFunc == nil {
		panic("KeycloakServiceMock.RegisterConnectorFleetshardOperatorServiceAccountFunc: method is nil but KeycloakService.RegisterConnectorFleetshardOperatorServiceAccount was just called")
	}
	callInfo := struct {
		AgentClusterId string
		RoleName       string
	}{
		AgentClusterId: agentClusterId,
		RoleName:       roleName,
	}
	mock.lockRegisterConnectorFleetshardOperatorServiceAccount.Lock()
	mock.calls.RegisterConnectorFleetshardOperatorServiceAccount = append(mock.calls.RegisterConnectorFleetshardOperatorServiceAccount, callInfo)
	mock.lockRegisterConnectorFleetshardOperatorServiceAccount.Unlock()
	return mock.RegisterConnectorFleetshardOperatorServiceAccountFunc(agentClusterId, roleName)
}

// RegisterConnectorFleetshardOperatorServiceAccountCalls gets all the calls that were made to RegisterConnectorFleetshardOperatorServiceAccount.
// Check the length with:
//     len(mockedKeycloakService.RegisterConnectorFleetshardOperatorServiceAccountCalls())
func (mock *KeycloakServiceMock) RegisterConnectorFleetshardOperatorServiceAccountCalls() []struct {
	AgentClusterId string
	RoleName       string
} {
	var calls []struct {
		AgentClusterId string
		RoleName       string
	}
	mock.lockRegisterConnectorFleetshardOperatorServiceAccount.RLock()
	calls = mock.calls.RegisterConnectorFleetshardOperatorServiceAccount
	mock.lockRegisterConnectorFleetshardOperatorServiceAccount.RUnlock()
	return calls
}

// RegisterKafkaClientInSSO calls RegisterKafkaClientInSSOFunc.
func (mock *KeycloakServiceMock) RegisterKafkaClientInSSO(kafkaNamespace string, orgId string) (string, *apiErrors.ServiceError) {
	if mock.RegisterKafkaClientInSSOFunc == nil {
		panic("KeycloakServiceMock.RegisterKafkaClientInSSOFunc: method is nil but KeycloakService.RegisterKafkaClientInSSO was just called")
	}
	callInfo := struct {
		KafkaNamespace string
		OrgId          string
	}{
		KafkaNamespace: kafkaNamespace,
		OrgId:          orgId,
	}
	mock.lockRegisterKafkaClientInSSO.Lock()
	mock.calls.RegisterKafkaClientInSSO = append(mock.calls.RegisterKafkaClientInSSO, callInfo)
	mock.lockRegisterKafkaClientInSSO.Unlock()
	return mock.RegisterKafkaClientInSSOFunc(kafkaNamespace, orgId)
}

// RegisterKafkaClientInSSOCalls gets all the calls that were made to RegisterKafkaClientInSSO.
// Check the length with:
//     len(mockedKeycloakService.RegisterKafkaClientInSSOCalls())
func (mock *KeycloakServiceMock) RegisterKafkaClientInSSOCalls() []struct {
	KafkaNamespace string
	OrgId          string
} {
	var calls []struct {
		KafkaNamespace string
		OrgId          string
	}
	mock.lockRegisterKafkaClientInSSO.RLock()
	calls = mock.calls.RegisterKafkaClientInSSO
	mock.lockRegisterKafkaClientInSSO.RUnlock()
	return calls
}

// RegisterKasFleetshardOperatorServiceAccount calls RegisterKasFleetshardOperatorServiceAccountFunc.
func (mock *KeycloakServiceMock) RegisterKasFleetshardOperatorServiceAccount(agentClusterId string, roleName string) (*api.ServiceAccount, *apiErrors.ServiceError) {
	if mock.RegisterKasFleetshardOperatorServiceAccountFunc == nil {
		panic("KeycloakServiceMock.RegisterKasFleetshardOperatorServiceAccountFunc: method is nil but KeycloakService.RegisterKasFleetshardOperatorServiceAccount was just called")
	}
	callInfo := struct {
		AgentClusterId string
		RoleName       string
	}{
		AgentClusterId: agentClusterId,
		RoleName:       roleName,
	}
	mock.lockRegisterKasFleetshardOperatorServiceAccount.Lock()
	mock.calls.RegisterKasFleetshardOperatorServiceAccount = append(mock.calls.RegisterKasFleetshardOperatorServiceAccount, callInfo)
	mock.lockRegisterKasFleetshardOperatorServiceAccount.Unlock()
	return mock.RegisterKasFleetshardOperatorServiceAccountFunc(agentClusterId, roleName)
}

// RegisterKasFleetshardOperatorServiceAccountCalls gets all the calls that were made to RegisterKasFleetshardOperatorServiceAccount.
// Check the length with:
//     len(mockedKeycloakService.RegisterKasFleetshardOperatorServiceAccountCalls())
func (mock *KeycloakServiceMock) RegisterKasFleetshardOperatorServiceAccountCalls() []struct {
	AgentClusterId string
	RoleName       string
} {
	var calls []struct {
		AgentClusterId string
		RoleName       string
	}
	mock.lockRegisterKasFleetshardOperatorServiceAccount.RLock()
	calls = mock.calls.RegisterKasFleetshardOperatorServiceAccount
	mock.lockRegisterKasFleetshardOperatorServiceAccount.RUnlock()
	return calls
}

// ResetServiceAccountCredentials calls ResetServiceAccountCredentialsFunc.
func (mock *KeycloakServiceMock) ResetServiceAccountCredentials(ctx context.Context, clientId string) (*api.ServiceAccount, *apiErrors.ServiceError) {
	if mock.ResetServiceAccountCredentialsFunc == nil {
		panic("KeycloakServiceMock.ResetServiceAccountCredentialsFunc: method is nil but KeycloakService.ResetServiceAccountCredentials was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ClientId string
	}{
		Ctx:      ctx,
		ClientId: clientId,
	}
	mock.lockResetServiceAccountCredentials.Lock()
	mock.calls.ResetServiceAccountCredentials = append(mock.calls.ResetServiceAccountCredentials, callInfo)
	mock.lockResetServiceAccountCredentials.Unlock()
	return mock.ResetServiceAccountCredentialsFunc(ctx, clientId)
}

// ResetServiceAccountCredentialsCalls gets all the calls that were made to ResetServiceAccountCredentials.
// Check the length with:
//     len(mockedKeycloakService.ResetServiceAccountCredentialsCalls())
func (mock *KeycloakServiceMock) ResetServiceAccountCredentialsCalls() []struct {
	Ctx      context.Context
	ClientId string
} {
	var calls []struct {
		Ctx      context.Context
		ClientId string
	}
	mock.lockResetServiceAccountCredentials.RLock()
	calls = mock.calls.ResetServiceAccountCredentials
	mock.lockResetServiceAccountCredentials.RUnlock()
	return calls
}
