// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"github.com/Nerzal/gocloak/v7"
	"gitlab.cee.redhat.com/service/managed-services-api/pkg/config"
	"gitlab.cee.redhat.com/service/managed-services-api/pkg/errors"
	"sync"
)

var (
	lockKeycloakServiceMockClientConfig               sync.RWMutex
	lockKeycloakServiceMockCreateClient               sync.RWMutex
	lockKeycloakServiceMockDeRegisterKafkaClientInSSO sync.RWMutex
	lockKeycloakServiceMockDeleteClient               sync.RWMutex
	lockKeycloakServiceMockGetClient                  sync.RWMutex
	lockKeycloakServiceMockGetClientSecret            sync.RWMutex
	lockKeycloakServiceMockGetConfig                  sync.RWMutex
	lockKeycloakServiceMockGetToken                   sync.RWMutex
	lockKeycloakServiceMockRegisterKafkaClientInSSO   sync.RWMutex
)

// Ensure, that KeycloakServiceMock does implement KeycloakService.
// If this is not the case, regenerate this file with moq.
var _ KeycloakService = &KeycloakServiceMock{}

// KeycloakServiceMock is a mock implementation of KeycloakService.
//
//     func TestSomethingThatUsesKeycloakService(t *testing.T) {
//
//         // make and configure a mocked KeycloakService
//         mockedKeycloakService := &KeycloakServiceMock{
//             ClientConfigFunc: func(client ClientRepresentation) gocloak.Client {
// 	               panic("mock out the ClientConfig method")
//             },
//             CreateClientFunc: func(client gocloak.Client, accessToken string) (string, *errors.ServiceError) {
// 	               panic("mock out the CreateClient method")
//             },
//             DeRegisterKafkaClientInSSOFunc: func(kafkaNamespace string) *errors.ServiceError {
// 	               panic("mock out the DeRegisterKafkaClientInSSO method")
//             },
//             DeleteClientFunc: func(id string, accessToken string) *errors.ServiceError {
// 	               panic("mock out the DeleteClient method")
//             },
//             GetClientFunc: func(clientId string, accessToken string) ([]*gocloak.Client, *errors.ServiceError) {
// 	               panic("mock out the GetClient method")
//             },
//             GetClientSecretFunc: func(id string, accessToken string) (string, *errors.ServiceError) {
// 	               panic("mock out the GetClientSecret method")
//             },
//             GetConfigFunc: func() *config.KeycloakConfig {
// 	               panic("mock out the GetConfig method")
//             },
//             GetTokenFunc: func() (string, error) {
// 	               panic("mock out the GetToken method")
//             },
//             RegisterKafkaClientInSSOFunc: func(kafkaNamespace string) (string, *errors.ServiceError) {
// 	               panic("mock out the RegisterKafkaClientInSSO method")
//             },
//         }
//
//         // use mockedKeycloakService in code that requires KeycloakService
//         // and then make assertions.
//
//     }
type KeycloakServiceMock struct {
	// ClientConfigFunc mocks the ClientConfig method.
	ClientConfigFunc func(client ClientRepresentation) gocloak.Client

	// CreateClientFunc mocks the CreateClient method.
	CreateClientFunc func(client gocloak.Client, accessToken string) (string, *errors.ServiceError)

	// DeRegisterKafkaClientInSSOFunc mocks the DeRegisterKafkaClientInSSO method.
	DeRegisterKafkaClientInSSOFunc func(kafkaNamespace string) *errors.ServiceError

	// DeleteClientFunc mocks the DeleteClient method.
	DeleteClientFunc func(id string, accessToken string) *errors.ServiceError

	// GetClientFunc mocks the GetClient method.
	GetClientFunc func(clientId string, accessToken string) ([]*gocloak.Client, *errors.ServiceError)

	// GetClientSecretFunc mocks the GetClientSecret method.
	GetClientSecretFunc func(id string, accessToken string) (string, *errors.ServiceError)

	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func() *config.KeycloakConfig

	// GetTokenFunc mocks the GetToken method.
	GetTokenFunc func() (string, error)

	// RegisterKafkaClientInSSOFunc mocks the RegisterKafkaClientInSSO method.
	RegisterKafkaClientInSSOFunc func(kafkaNamespace string) (string, *errors.ServiceError)

	// calls tracks calls to the methods.
	calls struct {
		// ClientConfig holds details about calls to the ClientConfig method.
		ClientConfig []struct {
			// Client is the client argument value.
			Client ClientRepresentation
		}
		// CreateClient holds details about calls to the CreateClient method.
		CreateClient []struct {
			// Client is the client argument value.
			Client gocloak.Client
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// DeRegisterKafkaClientInSSO holds details about calls to the DeRegisterKafkaClientInSSO method.
		DeRegisterKafkaClientInSSO []struct {
			// KafkaNamespace is the kafkaNamespace argument value.
			KafkaNamespace string
		}
		// DeleteClient holds details about calls to the DeleteClient method.
		DeleteClient []struct {
			// ID is the id argument value.
			ID string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// GetClient holds details about calls to the GetClient method.
		GetClient []struct {
			// ClientId is the clientId argument value.
			ClientId string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// GetClientSecret holds details about calls to the GetClientSecret method.
		GetClientSecret []struct {
			// ID is the id argument value.
			ID string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
		}
		// GetToken holds details about calls to the GetToken method.
		GetToken []struct {
		}
		// RegisterKafkaClientInSSO holds details about calls to the RegisterKafkaClientInSSO method.
		RegisterKafkaClientInSSO []struct {
			// KafkaNamespace is the kafkaNamespace argument value.
			KafkaNamespace string
		}
	}
}

// ClientConfig calls ClientConfigFunc.
func (mock *KeycloakServiceMock) ClientConfig(client ClientRepresentation) gocloak.Client {
	if mock.ClientConfigFunc == nil {
		panic("KeycloakServiceMock.ClientConfigFunc: method is nil but KeycloakService.ClientConfig was just called")
	}
	callInfo := struct {
		Client ClientRepresentation
	}{
		Client: client,
	}
	lockKeycloakServiceMockClientConfig.Lock()
	mock.calls.ClientConfig = append(mock.calls.ClientConfig, callInfo)
	lockKeycloakServiceMockClientConfig.Unlock()
	return mock.ClientConfigFunc(client)
}

// ClientConfigCalls gets all the calls that were made to ClientConfig.
// Check the length with:
//     len(mockedKeycloakService.ClientConfigCalls())
func (mock *KeycloakServiceMock) ClientConfigCalls() []struct {
	Client ClientRepresentation
} {
	var calls []struct {
		Client ClientRepresentation
	}
	lockKeycloakServiceMockClientConfig.RLock()
	calls = mock.calls.ClientConfig
	lockKeycloakServiceMockClientConfig.RUnlock()
	return calls
}

// CreateClient calls CreateClientFunc.
func (mock *KeycloakServiceMock) CreateClient(client gocloak.Client, accessToken string) (string, *errors.ServiceError) {
	if mock.CreateClientFunc == nil {
		panic("KeycloakServiceMock.CreateClientFunc: method is nil but KeycloakService.CreateClient was just called")
	}
	callInfo := struct {
		Client      gocloak.Client
		AccessToken string
	}{
		Client:      client,
		AccessToken: accessToken,
	}
	lockKeycloakServiceMockCreateClient.Lock()
	mock.calls.CreateClient = append(mock.calls.CreateClient, callInfo)
	lockKeycloakServiceMockCreateClient.Unlock()
	return mock.CreateClientFunc(client, accessToken)
}

// CreateClientCalls gets all the calls that were made to CreateClient.
// Check the length with:
//     len(mockedKeycloakService.CreateClientCalls())
func (mock *KeycloakServiceMock) CreateClientCalls() []struct {
	Client      gocloak.Client
	AccessToken string
} {
	var calls []struct {
		Client      gocloak.Client
		AccessToken string
	}
	lockKeycloakServiceMockCreateClient.RLock()
	calls = mock.calls.CreateClient
	lockKeycloakServiceMockCreateClient.RUnlock()
	return calls
}

// DeRegisterKafkaClientInSSO calls DeRegisterKafkaClientInSSOFunc.
func (mock *KeycloakServiceMock) DeRegisterKafkaClientInSSO(kafkaNamespace string) *errors.ServiceError {
	if mock.DeRegisterKafkaClientInSSOFunc == nil {
		panic("KeycloakServiceMock.DeRegisterKafkaClientInSSOFunc: method is nil but KeycloakService.DeRegisterKafkaClientInSSO was just called")
	}
	callInfo := struct {
		KafkaNamespace string
	}{
		KafkaNamespace: kafkaNamespace,
	}
	lockKeycloakServiceMockDeRegisterKafkaClientInSSO.Lock()
	mock.calls.DeRegisterKafkaClientInSSO = append(mock.calls.DeRegisterKafkaClientInSSO, callInfo)
	lockKeycloakServiceMockDeRegisterKafkaClientInSSO.Unlock()
	return mock.DeRegisterKafkaClientInSSOFunc(kafkaNamespace)
}

// DeRegisterKafkaClientInSSOCalls gets all the calls that were made to DeRegisterKafkaClientInSSO.
// Check the length with:
//     len(mockedKeycloakService.DeRegisterKafkaClientInSSOCalls())
func (mock *KeycloakServiceMock) DeRegisterKafkaClientInSSOCalls() []struct {
	KafkaNamespace string
} {
	var calls []struct {
		KafkaNamespace string
	}
	lockKeycloakServiceMockDeRegisterKafkaClientInSSO.RLock()
	calls = mock.calls.DeRegisterKafkaClientInSSO
	lockKeycloakServiceMockDeRegisterKafkaClientInSSO.RUnlock()
	return calls
}

// DeleteClient calls DeleteClientFunc.
func (mock *KeycloakServiceMock) DeleteClient(id string, accessToken string) *errors.ServiceError {
	if mock.DeleteClientFunc == nil {
		panic("KeycloakServiceMock.DeleteClientFunc: method is nil but KeycloakService.DeleteClient was just called")
	}
	callInfo := struct {
		ID          string
		AccessToken string
	}{
		ID:          id,
		AccessToken: accessToken,
	}
	lockKeycloakServiceMockDeleteClient.Lock()
	mock.calls.DeleteClient = append(mock.calls.DeleteClient, callInfo)
	lockKeycloakServiceMockDeleteClient.Unlock()
	return mock.DeleteClientFunc(id, accessToken)
}

// DeleteClientCalls gets all the calls that were made to DeleteClient.
// Check the length with:
//     len(mockedKeycloakService.DeleteClientCalls())
func (mock *KeycloakServiceMock) DeleteClientCalls() []struct {
	ID          string
	AccessToken string
} {
	var calls []struct {
		ID          string
		AccessToken string
	}
	lockKeycloakServiceMockDeleteClient.RLock()
	calls = mock.calls.DeleteClient
	lockKeycloakServiceMockDeleteClient.RUnlock()
	return calls
}

// GetClient calls GetClientFunc.
func (mock *KeycloakServiceMock) GetClient(clientId string, accessToken string) ([]*gocloak.Client, *errors.ServiceError) {
	if mock.GetClientFunc == nil {
		panic("KeycloakServiceMock.GetClientFunc: method is nil but KeycloakService.GetClient was just called")
	}
	callInfo := struct {
		ClientId    string
		AccessToken string
	}{
		ClientId:    clientId,
		AccessToken: accessToken,
	}
	lockKeycloakServiceMockGetClient.Lock()
	mock.calls.GetClient = append(mock.calls.GetClient, callInfo)
	lockKeycloakServiceMockGetClient.Unlock()
	return mock.GetClientFunc(clientId, accessToken)
}

// GetClientCalls gets all the calls that were made to GetClient.
// Check the length with:
//     len(mockedKeycloakService.GetClientCalls())
func (mock *KeycloakServiceMock) GetClientCalls() []struct {
	ClientId    string
	AccessToken string
} {
	var calls []struct {
		ClientId    string
		AccessToken string
	}
	lockKeycloakServiceMockGetClient.RLock()
	calls = mock.calls.GetClient
	lockKeycloakServiceMockGetClient.RUnlock()
	return calls
}

// GetClientSecret calls GetClientSecretFunc.
func (mock *KeycloakServiceMock) GetClientSecret(id string, accessToken string) (string, *errors.ServiceError) {
	if mock.GetClientSecretFunc == nil {
		panic("KeycloakServiceMock.GetClientSecretFunc: method is nil but KeycloakService.GetClientSecret was just called")
	}
	callInfo := struct {
		ID          string
		AccessToken string
	}{
		ID:          id,
		AccessToken: accessToken,
	}
	lockKeycloakServiceMockGetClientSecret.Lock()
	mock.calls.GetClientSecret = append(mock.calls.GetClientSecret, callInfo)
	lockKeycloakServiceMockGetClientSecret.Unlock()
	return mock.GetClientSecretFunc(id, accessToken)
}

// GetClientSecretCalls gets all the calls that were made to GetClientSecret.
// Check the length with:
//     len(mockedKeycloakService.GetClientSecretCalls())
func (mock *KeycloakServiceMock) GetClientSecretCalls() []struct {
	ID          string
	AccessToken string
} {
	var calls []struct {
		ID          string
		AccessToken string
	}
	lockKeycloakServiceMockGetClientSecret.RLock()
	calls = mock.calls.GetClientSecret
	lockKeycloakServiceMockGetClientSecret.RUnlock()
	return calls
}

// GetConfig calls GetConfigFunc.
func (mock *KeycloakServiceMock) GetConfig() *config.KeycloakConfig {
	if mock.GetConfigFunc == nil {
		panic("KeycloakServiceMock.GetConfigFunc: method is nil but KeycloakService.GetConfig was just called")
	}
	callInfo := struct {
	}{}
	lockKeycloakServiceMockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	lockKeycloakServiceMockGetConfig.Unlock()
	return mock.GetConfigFunc()
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//     len(mockedKeycloakService.GetConfigCalls())
func (mock *KeycloakServiceMock) GetConfigCalls() []struct {
} {
	var calls []struct {
	}
	lockKeycloakServiceMockGetConfig.RLock()
	calls = mock.calls.GetConfig
	lockKeycloakServiceMockGetConfig.RUnlock()
	return calls
}

// GetToken calls GetTokenFunc.
func (mock *KeycloakServiceMock) GetToken() (string, error) {
	if mock.GetTokenFunc == nil {
		panic("KeycloakServiceMock.GetTokenFunc: method is nil but KeycloakService.GetToken was just called")
	}
	callInfo := struct {
	}{}
	lockKeycloakServiceMockGetToken.Lock()
	mock.calls.GetToken = append(mock.calls.GetToken, callInfo)
	lockKeycloakServiceMockGetToken.Unlock()
	return mock.GetTokenFunc()
}

// GetTokenCalls gets all the calls that were made to GetToken.
// Check the length with:
//     len(mockedKeycloakService.GetTokenCalls())
func (mock *KeycloakServiceMock) GetTokenCalls() []struct {
} {
	var calls []struct {
	}
	lockKeycloakServiceMockGetToken.RLock()
	calls = mock.calls.GetToken
	lockKeycloakServiceMockGetToken.RUnlock()
	return calls
}

// RegisterKafkaClientInSSO calls RegisterKafkaClientInSSOFunc.
func (mock *KeycloakServiceMock) RegisterKafkaClientInSSO(kafkaNamespace string) (string, *errors.ServiceError) {
	if mock.RegisterKafkaClientInSSOFunc == nil {
		panic("KeycloakServiceMock.RegisterKafkaClientInSSOFunc: method is nil but KeycloakService.RegisterKafkaClientInSSO was just called")
	}
	callInfo := struct {
		KafkaNamespace string
	}{
		KafkaNamespace: kafkaNamespace,
	}
	lockKeycloakServiceMockRegisterKafkaClientInSSO.Lock()
	mock.calls.RegisterKafkaClientInSSO = append(mock.calls.RegisterKafkaClientInSSO, callInfo)
	lockKeycloakServiceMockRegisterKafkaClientInSSO.Unlock()
	return mock.RegisterKafkaClientInSSOFunc(kafkaNamespace)
}

// RegisterKafkaClientInSSOCalls gets all the calls that were made to RegisterKafkaClientInSSO.
// Check the length with:
//     len(mockedKeycloakService.RegisterKafkaClientInSSOCalls())
func (mock *KeycloakServiceMock) RegisterKafkaClientInSSOCalls() []struct {
	KafkaNamespace string
} {
	var calls []struct {
		KafkaNamespace string
	}
	lockKeycloakServiceMockRegisterKafkaClientInSSO.RLock()
	calls = mock.calls.RegisterKafkaClientInSSO
	lockKeycloakServiceMockRegisterKafkaClientInSSO.RUnlock()
	return calls
}
