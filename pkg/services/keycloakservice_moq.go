// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"github.com/Nerzal/gocloak/v7"
	"gitlab.cee.redhat.com/service/managed-services-api/pkg/config"
	"gitlab.cee.redhat.com/service/managed-services-api/pkg/errors"
	"sync"
)

var (
	lockKeycloakServiceMockDeRegisterKafkaClientInSSO        sync.RWMutex
	lockKeycloakServiceMockGetClient                         sync.RWMutex
	lockKeycloakServiceMockGetConfig                         sync.RWMutex
	lockKeycloakServiceMockGetSecretForRegisteredKafkaClient sync.RWMutex
	lockKeycloakServiceMockRegisterKafkaClientInSSO          sync.RWMutex
	lockKeycloakServiceMockclientConfig                      sync.RWMutex
	lockKeycloakServiceMockcreateClient                      sync.RWMutex
	lockKeycloakServiceMockdeleteClient                      sync.RWMutex
	lockKeycloakServiceMockgetClientSecret                   sync.RWMutex
	lockKeycloakServiceMockgetToken                          sync.RWMutex
)

// Ensure, that KeycloakServiceMock does implement KeycloakService.
// If this is not the case, regenerate this file with moq.
var _ KeycloakService = &KeycloakServiceMock{}

// KeycloakServiceMock is a mock implementation of KeycloakService.
//
//     func TestSomethingThatUsesKeycloakService(t *testing.T) {
//
//         // make and configure a mocked KeycloakService
//         mockedKeycloakService := &KeycloakServiceMock{
//             DeRegisterKafkaClientInSSOFunc: func(kafkaNamespace string) *errors.ServiceError {
// 	               panic("mock out the DeRegisterKafkaClientInSSO method")
//             },
//             GetClientFunc: func(clientId string, accessToken string) ([]*gocloak.Client, *errors.ServiceError) {
// 	               panic("mock out the getClient method")
//             },
//             GetConfigFunc: func() *config.KeycloakConfig {
// 	               panic("mock out the GetConfig method")
//             },
//             GetSecretForRegisteredKafkaClientFunc: func(kafkaClusterName string) (string, *errors.ServiceError) {
// 	               panic("mock out the GetSecretForRegisteredKafkaClient method")
//             },
//             RegisterKafkaClientInSSOFunc: func(kafkaNamespace string, orgId string) (string, *errors.ServiceError) {
// 	               panic("mock out the RegisterKafkaClientInSSO method")
//             },
//             clientConfigFunc: func(client ClientRepresentation) gocloak.Client {
// 	               panic("mock out the clientConfig method")
//             },
//             createClientFunc: func(client gocloak.Client, accessToken string) (string, *errors.ServiceError) {
// 	               panic("mock out the createClient method")
//             },
//             deleteClientFunc: func(internalClientId string, accessToken string) *errors.ServiceError {
// 	               panic("mock out the deleteClient method")
//             },
//             getClientSecretFunc: func(internalClientID string, accessToken string) (string, *errors.ServiceError) {
// 	               panic("mock out the getClientSecret method")
//             },
//             getTokenFunc: func() (string, error) {
// 	               panic("mock out the getToken method")
//             },
//         }
//
//         // use mockedKeycloakService in code that requires KeycloakService
//         // and then make assertions.
//
//     }
type KeycloakServiceMock struct {
	// DeRegisterKafkaClientInSSOFunc mocks the DeRegisterKafkaClientInSSO method.
	DeRegisterKafkaClientInSSOFunc func(kafkaNamespace string) *errors.ServiceError

	// GetClientFunc mocks the getClient method.
	GetClientFunc func(clientId string, accessToken string) ([]*gocloak.Client, *errors.ServiceError)

	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func() *config.KeycloakConfig

	// GetSecretForRegisteredKafkaClientFunc mocks the GetSecretForRegisteredKafkaClient method.
	GetSecretForRegisteredKafkaClientFunc func(kafkaClusterName string) (string, *errors.ServiceError)

	// RegisterKafkaClientInSSOFunc mocks the RegisterKafkaClientInSSO method.
	RegisterKafkaClientInSSOFunc func(kafkaNamespace string, orgId string) (string, *errors.ServiceError)

	// clientConfigFunc mocks the clientConfig method.
	clientConfigFunc func(client ClientRepresentation) gocloak.Client

	// createClientFunc mocks the createClient method.
	createClientFunc func(client gocloak.Client, accessToken string) (string, *errors.ServiceError)

	// deleteClientFunc mocks the deleteClient method.
	deleteClientFunc func(internalClientId string, accessToken string) *errors.ServiceError

	// getClientSecretFunc mocks the getClientSecret method.
	getClientSecretFunc func(internalClientID string, accessToken string) (string, *errors.ServiceError)

	// getTokenFunc mocks the getToken method.
	getTokenFunc func() (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// DeRegisterKafkaClientInSSO holds details about calls to the DeRegisterKafkaClientInSSO method.
		DeRegisterKafkaClientInSSO []struct {
			// KafkaNamespace is the kafkaNamespace argument value.
			KafkaNamespace string
		}
		// getClient holds details about calls to the getClient method.
		GetClient []struct {
			// ClientId is the clientId argument value.
			ClientId string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
		}
		// GetSecretForRegisteredKafkaClient holds details about calls to the GetSecretForRegisteredKafkaClient method.
		GetSecretForRegisteredKafkaClient []struct {
			// KafkaClusterName is the kafkaClusterName argument value.
			KafkaClusterName string
		}
		// RegisterKafkaClientInSSO holds details about calls to the RegisterKafkaClientInSSO method.
		RegisterKafkaClientInSSO []struct {
			// KafkaNamespace is the kafkaNamespace argument value.
			KafkaNamespace string
			// OrgId is the orgId argument value.
			OrgId string
		}
		// clientConfig holds details about calls to the clientConfig method.
		clientConfig []struct {
			// Client is the client argument value.
			Client ClientRepresentation
		}
		// createClient holds details about calls to the createClient method.
		createClient []struct {
			// Client is the client argument value.
			Client gocloak.Client
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// deleteClient holds details about calls to the deleteClient method.
		deleteClient []struct {
			// InternalClientId is the internalClientId argument value.
			InternalClientId string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// getClientSecret holds details about calls to the getClientSecret method.
		getClientSecret []struct {
			// InternalClientID is the internalClientID argument value.
			InternalClientID string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// getToken holds details about calls to the getToken method.
		getToken []struct {
		}
	}
}

// DeRegisterKafkaClientInSSO calls DeRegisterKafkaClientInSSOFunc.
func (mock *KeycloakServiceMock) DeRegisterKafkaClientInSSO(kafkaNamespace string) *errors.ServiceError {
	if mock.DeRegisterKafkaClientInSSOFunc == nil {
		panic("KeycloakServiceMock.DeRegisterKafkaClientInSSOFunc: method is nil but KeycloakService.DeRegisterKafkaClientInSSO was just called")
	}
	callInfo := struct {
		KafkaNamespace string
	}{
		KafkaNamespace: kafkaNamespace,
	}
	lockKeycloakServiceMockDeRegisterKafkaClientInSSO.Lock()
	mock.calls.DeRegisterKafkaClientInSSO = append(mock.calls.DeRegisterKafkaClientInSSO, callInfo)
	lockKeycloakServiceMockDeRegisterKafkaClientInSSO.Unlock()
	return mock.DeRegisterKafkaClientInSSOFunc(kafkaNamespace)
}

// DeRegisterKafkaClientInSSOCalls gets all the calls that were made to DeRegisterKafkaClientInSSO.
// Check the length with:
//     len(mockedKeycloakService.DeRegisterKafkaClientInSSOCalls())
func (mock *KeycloakServiceMock) DeRegisterKafkaClientInSSOCalls() []struct {
	KafkaNamespace string
} {
	var calls []struct {
		KafkaNamespace string
	}
	lockKeycloakServiceMockDeRegisterKafkaClientInSSO.RLock()
	calls = mock.calls.DeRegisterKafkaClientInSSO
	lockKeycloakServiceMockDeRegisterKafkaClientInSSO.RUnlock()
	return calls
}

// getClient calls GetClientFunc.
func (mock *KeycloakServiceMock) getClient(clientId string, accessToken string) ([]*gocloak.Client, *errors.ServiceError) {
	if mock.GetClientFunc == nil {
		panic("KeycloakServiceMock.GetClientFunc: method is nil but KeycloakService.getClient was just called")
	}
	callInfo := struct {
		ClientId    string
		AccessToken string
	}{
		ClientId:    clientId,
		AccessToken: accessToken,
	}
	lockKeycloakServiceMockGetClient.Lock()
	mock.calls.GetClient = append(mock.calls.GetClient, callInfo)
	lockKeycloakServiceMockGetClient.Unlock()
	return mock.GetClientFunc(clientId, accessToken)
}

// GetClientCalls gets all the calls that were made to getClient.
// Check the length with:
//     len(mockedKeycloakService.GetClientCalls())
func (mock *KeycloakServiceMock) GetClientCalls() []struct {
	ClientId    string
	AccessToken string
} {
	var calls []struct {
		ClientId    string
		AccessToken string
	}
	lockKeycloakServiceMockGetClient.RLock()
	calls = mock.calls.GetClient
	lockKeycloakServiceMockGetClient.RUnlock()
	return calls
}

// GetConfig calls GetConfigFunc.
func (mock *KeycloakServiceMock) GetConfig() *config.KeycloakConfig {
	if mock.GetConfigFunc == nil {
		panic("KeycloakServiceMock.GetConfigFunc: method is nil but KeycloakService.GetConfig was just called")
	}
	callInfo := struct {
	}{}
	lockKeycloakServiceMockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	lockKeycloakServiceMockGetConfig.Unlock()
	return mock.GetConfigFunc()
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//     len(mockedKeycloakService.GetConfigCalls())
func (mock *KeycloakServiceMock) GetConfigCalls() []struct {
} {
	var calls []struct {
	}
	lockKeycloakServiceMockGetConfig.RLock()
	calls = mock.calls.GetConfig
	lockKeycloakServiceMockGetConfig.RUnlock()
	return calls
}

// GetSecretForRegisteredKafkaClient calls GetSecretForRegisteredKafkaClientFunc.
func (mock *KeycloakServiceMock) GetSecretForRegisteredKafkaClient(kafkaClusterName string) (string, *errors.ServiceError) {
	if mock.GetSecretForRegisteredKafkaClientFunc == nil {
		panic("KeycloakServiceMock.GetSecretForRegisteredKafkaClientFunc: method is nil but KeycloakService.GetSecretForRegisteredKafkaClient was just called")
	}
	callInfo := struct {
		KafkaClusterName string
	}{
		KafkaClusterName: kafkaClusterName,
	}
	lockKeycloakServiceMockGetSecretForRegisteredKafkaClient.Lock()
	mock.calls.GetSecretForRegisteredKafkaClient = append(mock.calls.GetSecretForRegisteredKafkaClient, callInfo)
	lockKeycloakServiceMockGetSecretForRegisteredKafkaClient.Unlock()
	return mock.GetSecretForRegisteredKafkaClientFunc(kafkaClusterName)
}

// GetSecretForRegisteredKafkaClientCalls gets all the calls that were made to GetSecretForRegisteredKafkaClient.
// Check the length with:
//     len(mockedKeycloakService.GetSecretForRegisteredKafkaClientCalls())
func (mock *KeycloakServiceMock) GetSecretForRegisteredKafkaClientCalls() []struct {
	KafkaClusterName string
} {
	var calls []struct {
		KafkaClusterName string
	}
	lockKeycloakServiceMockGetSecretForRegisteredKafkaClient.RLock()
	calls = mock.calls.GetSecretForRegisteredKafkaClient
	lockKeycloakServiceMockGetSecretForRegisteredKafkaClient.RUnlock()
	return calls
}

// RegisterKafkaClientInSSO calls RegisterKafkaClientInSSOFunc.
func (mock *KeycloakServiceMock) RegisterKafkaClientInSSO(kafkaNamespace string, orgId string) (string, *errors.ServiceError) {
	if mock.RegisterKafkaClientInSSOFunc == nil {
		panic("KeycloakServiceMock.RegisterKafkaClientInSSOFunc: method is nil but KeycloakService.RegisterKafkaClientInSSO was just called")
	}
	callInfo := struct {
		KafkaNamespace string
		OrgId          string
	}{
		KafkaNamespace: kafkaNamespace,
		OrgId:          orgId,
	}
	lockKeycloakServiceMockRegisterKafkaClientInSSO.Lock()
	mock.calls.RegisterKafkaClientInSSO = append(mock.calls.RegisterKafkaClientInSSO, callInfo)
	lockKeycloakServiceMockRegisterKafkaClientInSSO.Unlock()
	return mock.RegisterKafkaClientInSSOFunc(kafkaNamespace, orgId)
}

// RegisterKafkaClientInSSOCalls gets all the calls that were made to RegisterKafkaClientInSSO.
// Check the length with:
//     len(mockedKeycloakService.RegisterKafkaClientInSSOCalls())
func (mock *KeycloakServiceMock) RegisterKafkaClientInSSOCalls() []struct {
	KafkaNamespace string
	OrgId          string
} {
	var calls []struct {
		KafkaNamespace string
		OrgId          string
	}
	lockKeycloakServiceMockRegisterKafkaClientInSSO.RLock()
	calls = mock.calls.RegisterKafkaClientInSSO
	lockKeycloakServiceMockRegisterKafkaClientInSSO.RUnlock()
	return calls
}

// clientConfig calls clientConfigFunc.
func (mock *KeycloakServiceMock) clientConfig(client ClientRepresentation) gocloak.Client {
	if mock.clientConfigFunc == nil {
		panic("KeycloakServiceMock.clientConfigFunc: method is nil but KeycloakService.clientConfig was just called")
	}
	callInfo := struct {
		Client ClientRepresentation
	}{
		Client: client,
	}
	lockKeycloakServiceMockclientConfig.Lock()
	mock.calls.clientConfig = append(mock.calls.clientConfig, callInfo)
	lockKeycloakServiceMockclientConfig.Unlock()
	return mock.clientConfigFunc(client)
}

// clientConfigCalls gets all the calls that were made to clientConfig.
// Check the length with:
//     len(mockedKeycloakService.clientConfigCalls())
func (mock *KeycloakServiceMock) clientConfigCalls() []struct {
	Client ClientRepresentation
} {
	var calls []struct {
		Client ClientRepresentation
	}
	lockKeycloakServiceMockclientConfig.RLock()
	calls = mock.calls.clientConfig
	lockKeycloakServiceMockclientConfig.RUnlock()
	return calls
}

// createClient calls createClientFunc.
func (mock *KeycloakServiceMock) createClient(client gocloak.Client, accessToken string) (string, *errors.ServiceError) {
	if mock.createClientFunc == nil {
		panic("KeycloakServiceMock.createClientFunc: method is nil but KeycloakService.createClient was just called")
	}
	callInfo := struct {
		Client      gocloak.Client
		AccessToken string
	}{
		Client:      client,
		AccessToken: accessToken,
	}
	lockKeycloakServiceMockcreateClient.Lock()
	mock.calls.createClient = append(mock.calls.createClient, callInfo)
	lockKeycloakServiceMockcreateClient.Unlock()
	return mock.createClientFunc(client, accessToken)
}

// createClientCalls gets all the calls that were made to createClient.
// Check the length with:
//     len(mockedKeycloakService.createClientCalls())
func (mock *KeycloakServiceMock) createClientCalls() []struct {
	Client      gocloak.Client
	AccessToken string
} {
	var calls []struct {
		Client      gocloak.Client
		AccessToken string
	}
	lockKeycloakServiceMockcreateClient.RLock()
	calls = mock.calls.createClient
	lockKeycloakServiceMockcreateClient.RUnlock()
	return calls
}

// deleteClient calls deleteClientFunc.
func (mock *KeycloakServiceMock) deleteClient(internalClientId string, accessToken string) *errors.ServiceError {
	if mock.deleteClientFunc == nil {
		panic("KeycloakServiceMock.deleteClientFunc: method is nil but KeycloakService.deleteClient was just called")
	}
	callInfo := struct {
		InternalClientId string
		AccessToken      string
	}{
		InternalClientId: internalClientId,
		AccessToken:      accessToken,
	}
	lockKeycloakServiceMockdeleteClient.Lock()
	mock.calls.deleteClient = append(mock.calls.deleteClient, callInfo)
	lockKeycloakServiceMockdeleteClient.Unlock()
	return mock.deleteClientFunc(internalClientId, accessToken)
}

// deleteClientCalls gets all the calls that were made to deleteClient.
// Check the length with:
//     len(mockedKeycloakService.deleteClientCalls())
func (mock *KeycloakServiceMock) deleteClientCalls() []struct {
	InternalClientId string
	AccessToken      string
} {
	var calls []struct {
		InternalClientId string
		AccessToken      string
	}
	lockKeycloakServiceMockdeleteClient.RLock()
	calls = mock.calls.deleteClient
	lockKeycloakServiceMockdeleteClient.RUnlock()
	return calls
}

// getClientSecret calls getClientSecretFunc.
func (mock *KeycloakServiceMock) getClientSecret(internalClientID string, accessToken string) (string, *errors.ServiceError) {
	if mock.getClientSecretFunc == nil {
		panic("KeycloakServiceMock.getClientSecretFunc: method is nil but KeycloakService.getClientSecret was just called")
	}
	callInfo := struct {
		InternalClientID string
		AccessToken      string
	}{
		InternalClientID: internalClientID,
		AccessToken:      accessToken,
	}
	lockKeycloakServiceMockgetClientSecret.Lock()
	mock.calls.getClientSecret = append(mock.calls.getClientSecret, callInfo)
	lockKeycloakServiceMockgetClientSecret.Unlock()
	return mock.getClientSecretFunc(internalClientID, accessToken)
}

// getClientSecretCalls gets all the calls that were made to getClientSecret.
// Check the length with:
//     len(mockedKeycloakService.getClientSecretCalls())
func (mock *KeycloakServiceMock) getClientSecretCalls() []struct {
	InternalClientID string
	AccessToken      string
} {
	var calls []struct {
		InternalClientID string
		AccessToken      string
	}
	lockKeycloakServiceMockgetClientSecret.RLock()
	calls = mock.calls.getClientSecret
	lockKeycloakServiceMockgetClientSecret.RUnlock()
	return calls
}

// getToken calls getTokenFunc.
func (mock *KeycloakServiceMock) getToken() (string, error) {
	if mock.getTokenFunc == nil {
		panic("KeycloakServiceMock.getTokenFunc: method is nil but KeycloakService.getToken was just called")
	}
	callInfo := struct {
	}{}
	lockKeycloakServiceMockgetToken.Lock()
	mock.calls.getToken = append(mock.calls.getToken, callInfo)
	lockKeycloakServiceMockgetToken.Unlock()
	return mock.getTokenFunc()
}

// getTokenCalls gets all the calls that were made to getToken.
// Check the length with:
//     len(mockedKeycloakService.getTokenCalls())
func (mock *KeycloakServiceMock) getTokenCalls() []struct {
} {
	var calls []struct {
	}
	lockKeycloakServiceMockgetToken.RLock()
	calls = mock.calls.getToken
	lockKeycloakServiceMockgetToken.RUnlock()
	return calls
}
