// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/api"
	apiErrors "github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/errors"
	cmv1 "github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
	"sync"
)

// Ensure, that ClusterServiceMock does implement ClusterService.
// If this is not the case, regenerate this file with moq.
var _ ClusterService = &ClusterServiceMock{}

// ClusterServiceMock is a mock implementation of ClusterService.
//
// 	func TestSomethingThatUsesClusterService(t *testing.T) {
//
// 		// make and configure a mocked ClusterService
// 		mockedClusterService := &ClusterServiceMock{
// 			AddIdentityProviderIDFunc: func(clusterId string, identityProviderId string) *apiErrors.ServiceError {
// 				panic("mock out the AddIdentityProviderID method")
// 			},
// 			CreateFunc: func(cluster *api.Cluster) (*cmv1.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the Create method")
// 			},
// 			DeleteByClusterIDFunc: func(clusterID string) *apiErrors.ServiceError {
// 				panic("mock out the DeleteByClusterID method")
// 			},
// 			FindClusterFunc: func(criteria FindClusterCriteria) (*api.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the FindCluster method")
// 			},
// 			FindClusterByIDFunc: func(clusterID string) (*api.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the FindClusterByID method")
// 			},
// 			FindNonEmptyClusterByIdFunc: func(clusterId string) (*api.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the FindNonEmptyClusterById method")
// 			},
// 			GetClusterDNSFunc: func(clusterID string) (string, *apiErrors.ServiceError) {
// 				panic("mock out the GetClusterDNS method")
// 			},
// 			ListByStatusFunc: func(state api.ClusterStatus) ([]api.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the ListByStatus method")
// 			},
// 			ListGroupByProviderAndRegionFunc: func(providers []string, regions []string, status []string) ([]*ResGroupCPRegion, *apiErrors.ServiceError) {
// 				panic("mock out the ListGroupByProviderAndRegion method")
// 			},
// 			RegisterClusterJobFunc: func(clusterRequest *api.Cluster) *apiErrors.ServiceError {
// 				panic("mock out the RegisterClusterJob method")
// 			},
// 			ScaleDownComputeNodesFunc: func(clusterID string, decrement int) (*cmv1.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the ScaleDownComputeNodes method")
// 			},
// 			ScaleUpComputeNodesFunc: func(clusterID string, increment int) (*cmv1.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the ScaleUpComputeNodes method")
// 			},
// 			SetComputeNodesFunc: func(clusterID string, numNodes int) (*cmv1.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the SetComputeNodes method")
// 			},
// 			UpdateStatusFunc: func(cluster api.Cluster, status api.ClusterStatus) error {
// 				panic("mock out the UpdateStatus method")
// 			},
// 		}
//
// 		// use mockedClusterService in code that requires ClusterService
// 		// and then make assertions.
//
// 	}
type ClusterServiceMock struct {
	// AddIdentityProviderIDFunc mocks the AddIdentityProviderID method.
	AddIdentityProviderIDFunc func(clusterId string, identityProviderId string) *apiErrors.ServiceError

	// CreateFunc mocks the Create method.
	CreateFunc func(cluster *api.Cluster) (*cmv1.Cluster, *apiErrors.ServiceError)

	// DeleteByClusterIDFunc mocks the DeleteByClusterID method.
	DeleteByClusterIDFunc func(clusterID string) *apiErrors.ServiceError

	// FindClusterFunc mocks the FindCluster method.
	FindClusterFunc func(criteria FindClusterCriteria) (*api.Cluster, *apiErrors.ServiceError)

	// FindClusterByIDFunc mocks the FindClusterByID method.
	FindClusterByIDFunc func(clusterID string) (*api.Cluster, *apiErrors.ServiceError)

	// FindNonEmptyClusterByIdFunc mocks the FindNonEmptyClusterById method.
	FindNonEmptyClusterByIdFunc func(clusterId string) (*api.Cluster, *apiErrors.ServiceError)

	// GetClusterDNSFunc mocks the GetClusterDNS method.
	GetClusterDNSFunc func(clusterID string) (string, *apiErrors.ServiceError)

	// ListByStatusFunc mocks the ListByStatus method.
	ListByStatusFunc func(state api.ClusterStatus) ([]api.Cluster, *apiErrors.ServiceError)

	// ListGroupByProviderAndRegionFunc mocks the ListGroupByProviderAndRegion method.
	ListGroupByProviderAndRegionFunc func(providers []string, regions []string, status []string) ([]*ResGroupCPRegion, *apiErrors.ServiceError)

	// RegisterClusterJobFunc mocks the RegisterClusterJob method.
	RegisterClusterJobFunc func(clusterRequest *api.Cluster) *apiErrors.ServiceError

	// ScaleDownComputeNodesFunc mocks the ScaleDownComputeNodes method.
	ScaleDownComputeNodesFunc func(clusterID string, decrement int) (*cmv1.Cluster, *apiErrors.ServiceError)

	// ScaleUpComputeNodesFunc mocks the ScaleUpComputeNodes method.
	ScaleUpComputeNodesFunc func(clusterID string, increment int) (*cmv1.Cluster, *apiErrors.ServiceError)

	// SetComputeNodesFunc mocks the SetComputeNodes method.
	SetComputeNodesFunc func(clusterID string, numNodes int) (*cmv1.Cluster, *apiErrors.ServiceError)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(cluster api.Cluster, status api.ClusterStatus) error

	// calls tracks calls to the methods.
	calls struct {
		// AddIdentityProviderID holds details about calls to the AddIdentityProviderID method.
		AddIdentityProviderID []struct {
			// ClusterId is the clusterId argument value.
			ClusterId string
			// IdentityProviderId is the identityProviderId argument value.
			IdentityProviderId string
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
		}
		// DeleteByClusterID holds details about calls to the DeleteByClusterID method.
		DeleteByClusterID []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// FindCluster holds details about calls to the FindCluster method.
		FindCluster []struct {
			// Criteria is the criteria argument value.
			Criteria FindClusterCriteria
		}
		// FindClusterByID holds details about calls to the FindClusterByID method.
		FindClusterByID []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// FindNonEmptyClusterById holds details about calls to the FindNonEmptyClusterById method.
		FindNonEmptyClusterById []struct {
			// ClusterId is the clusterId argument value.
			ClusterId string
		}
		// GetClusterDNS holds details about calls to the GetClusterDNS method.
		GetClusterDNS []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// ListByStatus holds details about calls to the ListByStatus method.
		ListByStatus []struct {
			// State is the state argument value.
			State api.ClusterStatus
		}
		// ListGroupByProviderAndRegion holds details about calls to the ListGroupByProviderAndRegion method.
		ListGroupByProviderAndRegion []struct {
			// Providers is the providers argument value.
			Providers []string
			// Regions is the regions argument value.
			Regions []string
			// Status is the status argument value.
			Status []string
		}
		// RegisterClusterJob holds details about calls to the RegisterClusterJob method.
		RegisterClusterJob []struct {
			// ClusterRequest is the clusterRequest argument value.
			ClusterRequest *api.Cluster
		}
		// ScaleDownComputeNodes holds details about calls to the ScaleDownComputeNodes method.
		ScaleDownComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// Decrement is the decrement argument value.
			Decrement int
		}
		// ScaleUpComputeNodes holds details about calls to the ScaleUpComputeNodes method.
		ScaleUpComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// Increment is the increment argument value.
			Increment int
		}
		// SetComputeNodes holds details about calls to the SetComputeNodes method.
		SetComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// NumNodes is the numNodes argument value.
			NumNodes int
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// Cluster is the cluster argument value.
			Cluster api.Cluster
			// Status is the status argument value.
			Status api.ClusterStatus
		}
	}
	lockAddIdentityProviderID        sync.RWMutex
	lockCreate                       sync.RWMutex
	lockDeleteByClusterID            sync.RWMutex
	lockFindCluster                  sync.RWMutex
	lockFindClusterByID              sync.RWMutex
	lockFindNonEmptyClusterById      sync.RWMutex
	lockGetClusterDNS                sync.RWMutex
	lockListByStatus                 sync.RWMutex
	lockListGroupByProviderAndRegion sync.RWMutex
	lockRegisterClusterJob           sync.RWMutex
	lockScaleDownComputeNodes        sync.RWMutex
	lockScaleUpComputeNodes          sync.RWMutex
	lockSetComputeNodes              sync.RWMutex
	lockUpdateStatus                 sync.RWMutex
}

// AddIdentityProviderID calls AddIdentityProviderIDFunc.
func (mock *ClusterServiceMock) AddIdentityProviderID(clusterId string, identityProviderId string) *apiErrors.ServiceError {
	if mock.AddIdentityProviderIDFunc == nil {
		panic("ClusterServiceMock.AddIdentityProviderIDFunc: method is nil but ClusterService.AddIdentityProviderID was just called")
	}
	callInfo := struct {
		ClusterId          string
		IdentityProviderId string
	}{
		ClusterId:          clusterId,
		IdentityProviderId: identityProviderId,
	}
	mock.lockAddIdentityProviderID.Lock()
	mock.calls.AddIdentityProviderID = append(mock.calls.AddIdentityProviderID, callInfo)
	mock.lockAddIdentityProviderID.Unlock()
	return mock.AddIdentityProviderIDFunc(clusterId, identityProviderId)
}

// AddIdentityProviderIDCalls gets all the calls that were made to AddIdentityProviderID.
// Check the length with:
//     len(mockedClusterService.AddIdentityProviderIDCalls())
func (mock *ClusterServiceMock) AddIdentityProviderIDCalls() []struct {
	ClusterId          string
	IdentityProviderId string
} {
	var calls []struct {
		ClusterId          string
		IdentityProviderId string
	}
	mock.lockAddIdentityProviderID.RLock()
	calls = mock.calls.AddIdentityProviderID
	mock.lockAddIdentityProviderID.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ClusterServiceMock) Create(cluster *api.Cluster) (*cmv1.Cluster, *apiErrors.ServiceError) {
	if mock.CreateFunc == nil {
		panic("ClusterServiceMock.CreateFunc: method is nil but ClusterService.Create was just called")
	}
	callInfo := struct {
		Cluster *api.Cluster
	}{
		Cluster: cluster,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(cluster)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterService.CreateCalls())
func (mock *ClusterServiceMock) CreateCalls() []struct {
	Cluster *api.Cluster
} {
	var calls []struct {
		Cluster *api.Cluster
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeleteByClusterID calls DeleteByClusterIDFunc.
func (mock *ClusterServiceMock) DeleteByClusterID(clusterID string) *apiErrors.ServiceError {
	if mock.DeleteByClusterIDFunc == nil {
		panic("ClusterServiceMock.DeleteByClusterIDFunc: method is nil but ClusterService.DeleteByClusterID was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockDeleteByClusterID.Lock()
	mock.calls.DeleteByClusterID = append(mock.calls.DeleteByClusterID, callInfo)
	mock.lockDeleteByClusterID.Unlock()
	return mock.DeleteByClusterIDFunc(clusterID)
}

// DeleteByClusterIDCalls gets all the calls that were made to DeleteByClusterID.
// Check the length with:
//     len(mockedClusterService.DeleteByClusterIDCalls())
func (mock *ClusterServiceMock) DeleteByClusterIDCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockDeleteByClusterID.RLock()
	calls = mock.calls.DeleteByClusterID
	mock.lockDeleteByClusterID.RUnlock()
	return calls
}

// FindCluster calls FindClusterFunc.
func (mock *ClusterServiceMock) FindCluster(criteria FindClusterCriteria) (*api.Cluster, *apiErrors.ServiceError) {
	if mock.FindClusterFunc == nil {
		panic("ClusterServiceMock.FindClusterFunc: method is nil but ClusterService.FindCluster was just called")
	}
	callInfo := struct {
		Criteria FindClusterCriteria
	}{
		Criteria: criteria,
	}
	mock.lockFindCluster.Lock()
	mock.calls.FindCluster = append(mock.calls.FindCluster, callInfo)
	mock.lockFindCluster.Unlock()
	return mock.FindClusterFunc(criteria)
}

// FindClusterCalls gets all the calls that were made to FindCluster.
// Check the length with:
//     len(mockedClusterService.FindClusterCalls())
func (mock *ClusterServiceMock) FindClusterCalls() []struct {
	Criteria FindClusterCriteria
} {
	var calls []struct {
		Criteria FindClusterCriteria
	}
	mock.lockFindCluster.RLock()
	calls = mock.calls.FindCluster
	mock.lockFindCluster.RUnlock()
	return calls
}

// FindClusterByID calls FindClusterByIDFunc.
func (mock *ClusterServiceMock) FindClusterByID(clusterID string) (*api.Cluster, *apiErrors.ServiceError) {
	if mock.FindClusterByIDFunc == nil {
		panic("ClusterServiceMock.FindClusterByIDFunc: method is nil but ClusterService.FindClusterByID was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockFindClusterByID.Lock()
	mock.calls.FindClusterByID = append(mock.calls.FindClusterByID, callInfo)
	mock.lockFindClusterByID.Unlock()
	return mock.FindClusterByIDFunc(clusterID)
}

// FindClusterByIDCalls gets all the calls that were made to FindClusterByID.
// Check the length with:
//     len(mockedClusterService.FindClusterByIDCalls())
func (mock *ClusterServiceMock) FindClusterByIDCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockFindClusterByID.RLock()
	calls = mock.calls.FindClusterByID
	mock.lockFindClusterByID.RUnlock()
	return calls
}

// FindNonEmptyClusterById calls FindNonEmptyClusterByIdFunc.
func (mock *ClusterServiceMock) FindNonEmptyClusterById(clusterId string) (*api.Cluster, *apiErrors.ServiceError) {
	if mock.FindNonEmptyClusterByIdFunc == nil {
		panic("ClusterServiceMock.FindNonEmptyClusterByIdFunc: method is nil but ClusterService.FindNonEmptyClusterById was just called")
	}
	callInfo := struct {
		ClusterId string
	}{
		ClusterId: clusterId,
	}
	mock.lockFindNonEmptyClusterById.Lock()
	mock.calls.FindNonEmptyClusterById = append(mock.calls.FindNonEmptyClusterById, callInfo)
	mock.lockFindNonEmptyClusterById.Unlock()
	return mock.FindNonEmptyClusterByIdFunc(clusterId)
}

// FindNonEmptyClusterByIdCalls gets all the calls that were made to FindNonEmptyClusterById.
// Check the length with:
//     len(mockedClusterService.FindNonEmptyClusterByIdCalls())
func (mock *ClusterServiceMock) FindNonEmptyClusterByIdCalls() []struct {
	ClusterId string
} {
	var calls []struct {
		ClusterId string
	}
	mock.lockFindNonEmptyClusterById.RLock()
	calls = mock.calls.FindNonEmptyClusterById
	mock.lockFindNonEmptyClusterById.RUnlock()
	return calls
}

// GetClusterDNS calls GetClusterDNSFunc.
func (mock *ClusterServiceMock) GetClusterDNS(clusterID string) (string, *apiErrors.ServiceError) {
	if mock.GetClusterDNSFunc == nil {
		panic("ClusterServiceMock.GetClusterDNSFunc: method is nil but ClusterService.GetClusterDNS was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetClusterDNS.Lock()
	mock.calls.GetClusterDNS = append(mock.calls.GetClusterDNS, callInfo)
	mock.lockGetClusterDNS.Unlock()
	return mock.GetClusterDNSFunc(clusterID)
}

// GetClusterDNSCalls gets all the calls that were made to GetClusterDNS.
// Check the length with:
//     len(mockedClusterService.GetClusterDNSCalls())
func (mock *ClusterServiceMock) GetClusterDNSCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetClusterDNS.RLock()
	calls = mock.calls.GetClusterDNS
	mock.lockGetClusterDNS.RUnlock()
	return calls
}

// ListByStatus calls ListByStatusFunc.
func (mock *ClusterServiceMock) ListByStatus(state api.ClusterStatus) ([]api.Cluster, *apiErrors.ServiceError) {
	if mock.ListByStatusFunc == nil {
		panic("ClusterServiceMock.ListByStatusFunc: method is nil but ClusterService.ListByStatus was just called")
	}
	callInfo := struct {
		State api.ClusterStatus
	}{
		State: state,
	}
	mock.lockListByStatus.Lock()
	mock.calls.ListByStatus = append(mock.calls.ListByStatus, callInfo)
	mock.lockListByStatus.Unlock()
	return mock.ListByStatusFunc(state)
}

// ListByStatusCalls gets all the calls that were made to ListByStatus.
// Check the length with:
//     len(mockedClusterService.ListByStatusCalls())
func (mock *ClusterServiceMock) ListByStatusCalls() []struct {
	State api.ClusterStatus
} {
	var calls []struct {
		State api.ClusterStatus
	}
	mock.lockListByStatus.RLock()
	calls = mock.calls.ListByStatus
	mock.lockListByStatus.RUnlock()
	return calls
}

// ListGroupByProviderAndRegion calls ListGroupByProviderAndRegionFunc.
func (mock *ClusterServiceMock) ListGroupByProviderAndRegion(providers []string, regions []string, status []string) ([]*ResGroupCPRegion, *apiErrors.ServiceError) {
	if mock.ListGroupByProviderAndRegionFunc == nil {
		panic("ClusterServiceMock.ListGroupByProviderAndRegionFunc: method is nil but ClusterService.ListGroupByProviderAndRegion was just called")
	}
	callInfo := struct {
		Providers []string
		Regions   []string
		Status    []string
	}{
		Providers: providers,
		Regions:   regions,
		Status:    status,
	}
	mock.lockListGroupByProviderAndRegion.Lock()
	mock.calls.ListGroupByProviderAndRegion = append(mock.calls.ListGroupByProviderAndRegion, callInfo)
	mock.lockListGroupByProviderAndRegion.Unlock()
	return mock.ListGroupByProviderAndRegionFunc(providers, regions, status)
}

// ListGroupByProviderAndRegionCalls gets all the calls that were made to ListGroupByProviderAndRegion.
// Check the length with:
//     len(mockedClusterService.ListGroupByProviderAndRegionCalls())
func (mock *ClusterServiceMock) ListGroupByProviderAndRegionCalls() []struct {
	Providers []string
	Regions   []string
	Status    []string
} {
	var calls []struct {
		Providers []string
		Regions   []string
		Status    []string
	}
	mock.lockListGroupByProviderAndRegion.RLock()
	calls = mock.calls.ListGroupByProviderAndRegion
	mock.lockListGroupByProviderAndRegion.RUnlock()
	return calls
}

// RegisterClusterJob calls RegisterClusterJobFunc.
func (mock *ClusterServiceMock) RegisterClusterJob(clusterRequest *api.Cluster) *apiErrors.ServiceError {
	if mock.RegisterClusterJobFunc == nil {
		panic("ClusterServiceMock.RegisterClusterJobFunc: method is nil but ClusterService.RegisterClusterJob was just called")
	}
	callInfo := struct {
		ClusterRequest *api.Cluster
	}{
		ClusterRequest: clusterRequest,
	}
	mock.lockRegisterClusterJob.Lock()
	mock.calls.RegisterClusterJob = append(mock.calls.RegisterClusterJob, callInfo)
	mock.lockRegisterClusterJob.Unlock()
	return mock.RegisterClusterJobFunc(clusterRequest)
}

// RegisterClusterJobCalls gets all the calls that were made to RegisterClusterJob.
// Check the length with:
//     len(mockedClusterService.RegisterClusterJobCalls())
func (mock *ClusterServiceMock) RegisterClusterJobCalls() []struct {
	ClusterRequest *api.Cluster
} {
	var calls []struct {
		ClusterRequest *api.Cluster
	}
	mock.lockRegisterClusterJob.RLock()
	calls = mock.calls.RegisterClusterJob
	mock.lockRegisterClusterJob.RUnlock()
	return calls
}

// ScaleDownComputeNodes calls ScaleDownComputeNodesFunc.
func (mock *ClusterServiceMock) ScaleDownComputeNodes(clusterID string, decrement int) (*cmv1.Cluster, *apiErrors.ServiceError) {
	if mock.ScaleDownComputeNodesFunc == nil {
		panic("ClusterServiceMock.ScaleDownComputeNodesFunc: method is nil but ClusterService.ScaleDownComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
		Decrement int
	}{
		ClusterID: clusterID,
		Decrement: decrement,
	}
	mock.lockScaleDownComputeNodes.Lock()
	mock.calls.ScaleDownComputeNodes = append(mock.calls.ScaleDownComputeNodes, callInfo)
	mock.lockScaleDownComputeNodes.Unlock()
	return mock.ScaleDownComputeNodesFunc(clusterID, decrement)
}

// ScaleDownComputeNodesCalls gets all the calls that were made to ScaleDownComputeNodes.
// Check the length with:
//     len(mockedClusterService.ScaleDownComputeNodesCalls())
func (mock *ClusterServiceMock) ScaleDownComputeNodesCalls() []struct {
	ClusterID string
	Decrement int
} {
	var calls []struct {
		ClusterID string
		Decrement int
	}
	mock.lockScaleDownComputeNodes.RLock()
	calls = mock.calls.ScaleDownComputeNodes
	mock.lockScaleDownComputeNodes.RUnlock()
	return calls
}

// ScaleUpComputeNodes calls ScaleUpComputeNodesFunc.
func (mock *ClusterServiceMock) ScaleUpComputeNodes(clusterID string, increment int) (*cmv1.Cluster, *apiErrors.ServiceError) {
	if mock.ScaleUpComputeNodesFunc == nil {
		panic("ClusterServiceMock.ScaleUpComputeNodesFunc: method is nil but ClusterService.ScaleUpComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
		Increment int
	}{
		ClusterID: clusterID,
		Increment: increment,
	}
	mock.lockScaleUpComputeNodes.Lock()
	mock.calls.ScaleUpComputeNodes = append(mock.calls.ScaleUpComputeNodes, callInfo)
	mock.lockScaleUpComputeNodes.Unlock()
	return mock.ScaleUpComputeNodesFunc(clusterID, increment)
}

// ScaleUpComputeNodesCalls gets all the calls that were made to ScaleUpComputeNodes.
// Check the length with:
//     len(mockedClusterService.ScaleUpComputeNodesCalls())
func (mock *ClusterServiceMock) ScaleUpComputeNodesCalls() []struct {
	ClusterID string
	Increment int
} {
	var calls []struct {
		ClusterID string
		Increment int
	}
	mock.lockScaleUpComputeNodes.RLock()
	calls = mock.calls.ScaleUpComputeNodes
	mock.lockScaleUpComputeNodes.RUnlock()
	return calls
}

// SetComputeNodes calls SetComputeNodesFunc.
func (mock *ClusterServiceMock) SetComputeNodes(clusterID string, numNodes int) (*cmv1.Cluster, *apiErrors.ServiceError) {
	if mock.SetComputeNodesFunc == nil {
		panic("ClusterServiceMock.SetComputeNodesFunc: method is nil but ClusterService.SetComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
		NumNodes  int
	}{
		ClusterID: clusterID,
		NumNodes:  numNodes,
	}
	mock.lockSetComputeNodes.Lock()
	mock.calls.SetComputeNodes = append(mock.calls.SetComputeNodes, callInfo)
	mock.lockSetComputeNodes.Unlock()
	return mock.SetComputeNodesFunc(clusterID, numNodes)
}

// SetComputeNodesCalls gets all the calls that were made to SetComputeNodes.
// Check the length with:
//     len(mockedClusterService.SetComputeNodesCalls())
func (mock *ClusterServiceMock) SetComputeNodesCalls() []struct {
	ClusterID string
	NumNodes  int
} {
	var calls []struct {
		ClusterID string
		NumNodes  int
	}
	mock.lockSetComputeNodes.RLock()
	calls = mock.calls.SetComputeNodes
	mock.lockSetComputeNodes.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *ClusterServiceMock) UpdateStatus(cluster api.Cluster, status api.ClusterStatus) error {
	if mock.UpdateStatusFunc == nil {
		panic("ClusterServiceMock.UpdateStatusFunc: method is nil but ClusterService.UpdateStatus was just called")
	}
	callInfo := struct {
		Cluster api.Cluster
		Status  api.ClusterStatus
	}{
		Cluster: cluster,
		Status:  status,
	}
	mock.lockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	mock.lockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(cluster, status)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedClusterService.UpdateStatusCalls())
func (mock *ClusterServiceMock) UpdateStatusCalls() []struct {
	Cluster api.Cluster
	Status  api.ClusterStatus
} {
	var calls []struct {
		Cluster api.Cluster
		Status  api.ClusterStatus
	}
	mock.lockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	mock.lockUpdateStatus.RUnlock()
	return calls
}
