// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
	"gitlab.cee.redhat.com/service/managed-services-api/pkg/api"
	"gitlab.cee.redhat.com/service/managed-services-api/pkg/errors"
	"sync"
)

var (
	lockClusterServiceMockCreate        sync.RWMutex
	lockClusterServiceMockGetClusterDNS sync.RWMutex
	lockClusterServiceMockListByStatus  sync.RWMutex
	lockClusterServiceMockUpdateStatus  sync.RWMutex
)

// Ensure, that ClusterServiceMock does implement ClusterService.
// If this is not the case, regenerate this file with moq.
var _ ClusterService = &ClusterServiceMock{}

// ClusterServiceMock is a mock implementation of ClusterService.
//
//     func TestSomethingThatUsesClusterService(t *testing.T) {
//
//         // make and configure a mocked ClusterService
//         mockedClusterService := &ClusterServiceMock{
//             CreateFunc: func(cluster *api.Cluster) (*v1.Cluster, *errors.ServiceError) {
// 	               panic("mock out the Create method")
//             },
//             GetClusterDNSFunc: func(clusterID string) (string, *errors.ServiceError) {
// 	               panic("mock out the GetClusterDNS method")
//             },
//             ListByStatusFunc: func(state api.ClusterStatus) ([]api.Cluster, *errors.ServiceError) {
// 	               panic("mock out the ListByStatus method")
//             },
//             UpdateStatusFunc: func(id string, status api.ClusterStatus) error {
// 	               panic("mock out the UpdateStatus method")
//             },
//         }
//
//         // use mockedClusterService in code that requires ClusterService
//         // and then make assertions.
//
//     }
type ClusterServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(cluster *api.Cluster) (*v1.Cluster, *errors.ServiceError)

	// GetClusterDNSFunc mocks the GetClusterDNS method.
	GetClusterDNSFunc func(clusterID string) (string, *errors.ServiceError)

	// ListByStatusFunc mocks the ListByStatus method.
	ListByStatusFunc func(state api.ClusterStatus) ([]api.Cluster, *errors.ServiceError)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(id string, status api.ClusterStatus) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
		}
		// GetClusterDNS holds details about calls to the GetClusterDNS method.
		GetClusterDNS []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// ListByStatus holds details about calls to the ListByStatus method.
		ListByStatus []struct {
			// State is the state argument value.
			State api.ClusterStatus
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// ID is the id argument value.
			ID string
			// Status is the status argument value.
			Status api.ClusterStatus
		}
	}
}

// Create calls CreateFunc.
func (mock *ClusterServiceMock) Create(cluster *api.Cluster) (*v1.Cluster, *errors.ServiceError) {
	if mock.CreateFunc == nil {
		panic("ClusterServiceMock.CreateFunc: method is nil but ClusterService.Create was just called")
	}
	callInfo := struct {
		Cluster *api.Cluster
	}{
		Cluster: cluster,
	}
	lockClusterServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockClusterServiceMockCreate.Unlock()
	return mock.CreateFunc(cluster)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterService.CreateCalls())
func (mock *ClusterServiceMock) CreateCalls() []struct {
	Cluster *api.Cluster
} {
	var calls []struct {
		Cluster *api.Cluster
	}
	lockClusterServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockClusterServiceMockCreate.RUnlock()
	return calls
}

// GetClusterDNS calls GetClusterDNSFunc.
func (mock *ClusterServiceMock) GetClusterDNS(clusterID string) (string, *errors.ServiceError) {
	if mock.GetClusterDNSFunc == nil {
		panic("ClusterServiceMock.GetClusterDNSFunc: method is nil but ClusterService.GetClusterDNS was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	lockClusterServiceMockGetClusterDNS.Lock()
	mock.calls.GetClusterDNS = append(mock.calls.GetClusterDNS, callInfo)
	lockClusterServiceMockGetClusterDNS.Unlock()
	return mock.GetClusterDNSFunc(clusterID)
}

// GetClusterDNSCalls gets all the calls that were made to GetClusterDNS.
// Check the length with:
//     len(mockedClusterService.GetClusterDNSCalls())
func (mock *ClusterServiceMock) GetClusterDNSCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	lockClusterServiceMockGetClusterDNS.RLock()
	calls = mock.calls.GetClusterDNS
	lockClusterServiceMockGetClusterDNS.RUnlock()
	return calls
}

// ListByStatus calls ListByStatusFunc.
func (mock *ClusterServiceMock) ListByStatus(state api.ClusterStatus) ([]api.Cluster, *errors.ServiceError) {
	if mock.ListByStatusFunc == nil {
		panic("ClusterServiceMock.ListByStatusFunc: method is nil but ClusterService.ListByStatus was just called")
	}
	callInfo := struct {
		State api.ClusterStatus
	}{
		State: state,
	}
	lockClusterServiceMockListByStatus.Lock()
	mock.calls.ListByStatus = append(mock.calls.ListByStatus, callInfo)
	lockClusterServiceMockListByStatus.Unlock()
	return mock.ListByStatusFunc(state)
}

// ListByStatusCalls gets all the calls that were made to ListByStatus.
// Check the length with:
//     len(mockedClusterService.ListByStatusCalls())
func (mock *ClusterServiceMock) ListByStatusCalls() []struct {
	State api.ClusterStatus
} {
	var calls []struct {
		State api.ClusterStatus
	}
	lockClusterServiceMockListByStatus.RLock()
	calls = mock.calls.ListByStatus
	lockClusterServiceMockListByStatus.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *ClusterServiceMock) UpdateStatus(id string, status api.ClusterStatus) error {
	if mock.UpdateStatusFunc == nil {
		panic("ClusterServiceMock.UpdateStatusFunc: method is nil but ClusterService.UpdateStatus was just called")
	}
	callInfo := struct {
		ID     string
		Status api.ClusterStatus
	}{
		ID:     id,
		Status: status,
	}
	lockClusterServiceMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockClusterServiceMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(id, status)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedClusterService.UpdateStatusCalls())
func (mock *ClusterServiceMock) UpdateStatusCalls() []struct {
	ID     string
	Status api.ClusterStatus
} {
	var calls []struct {
		ID     string
		Status api.ClusterStatus
	}
	lockClusterServiceMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockClusterServiceMockUpdateStatus.RUnlock()
	return calls
}
