// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/api"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/clusters/types"
	apiErrors "github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/errors"
	"sync"
)

// Ensure, that ClusterServiceMock does implement ClusterService.
// If this is not the case, regenerate this file with moq.
var _ ClusterService = &ClusterServiceMock{}

// ClusterServiceMock is a mock implementation of ClusterService.
//
// 	func TestSomethingThatUsesClusterService(t *testing.T) {
//
// 		// make and configure a mocked ClusterService
// 		mockedClusterService := &ClusterServiceMock{
// 			ApplyResourcesFunc: func(cluster *api.Cluster, resources types.ResourceSet) *apiErrors.ServiceError {
// 				panic("mock out the ApplyResources method")
// 			},
// 			CheckClusterStatusFunc: func(cluster *api.Cluster) (*api.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the CheckClusterStatus method")
// 			},
// 			ConfigureAndSaveIdentityProviderFunc: func(cluster *api.Cluster, identityProviderInfo types.IdentityProviderInfo) (*api.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the ConfigureAndSaveIdentityProvider method")
// 			},
// 			CountByStatusFunc: func(clusterStatuss []api.ClusterStatus) ([]ClusterStatusCount, *apiErrors.ServiceError) {
// 				panic("mock out the CountByStatus method")
// 			},
// 			CreateFunc: func(cluster *api.Cluster) (*api.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the Create method")
// 			},
// 			DeleteFunc: func(cluster *api.Cluster) (bool, *apiErrors.ServiceError) {
// 				panic("mock out the Delete method")
// 			},
// 			DeleteByClusterIDFunc: func(clusterID string) *apiErrors.ServiceError {
// 				panic("mock out the DeleteByClusterID method")
// 			},
// 			FindAllClustersFunc: func(criteria FindClusterCriteria) ([]*api.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the FindAllClusters method")
// 			},
// 			FindClusterFunc: func(criteria FindClusterCriteria) (*api.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the FindCluster method")
// 			},
// 			FindClusterByIDFunc: func(clusterID string) (*api.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the FindClusterByID method")
// 			},
// 			FindKafkaInstanceCountFunc: func(clusterIDs []string) ([]ResKafkaInstanceCount, *apiErrors.ServiceError) {
// 				panic("mock out the FindKafkaInstanceCount method")
// 			},
// 			FindNonEmptyClusterByIdFunc: func(clusterID string) (*api.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the FindNonEmptyClusterById method")
// 			},
// 			GetClusterDNSFunc: func(clusterID string) (string, *apiErrors.ServiceError) {
// 				panic("mock out the GetClusterDNS method")
// 			},
// 			GetComputeNodesFunc: func(clusterID string) (*types.ComputeNodesInfo, *apiErrors.ServiceError) {
// 				panic("mock out the GetComputeNodes method")
// 			},
// 			InstallAddonFunc: func(cluster *api.Cluster, addonID string) (bool, *apiErrors.ServiceError) {
// 				panic("mock out the InstallAddon method")
// 			},
// 			ListAllClusterIdsFunc: func() ([]api.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the ListAllClusterIds method")
// 			},
// 			ListByStatusFunc: func(state api.ClusterStatus) ([]api.Cluster, *apiErrors.ServiceError) {
// 				panic("mock out the ListByStatus method")
// 			},
// 			ListGroupByProviderAndRegionFunc: func(providers []string, regions []string, status []string) ([]*ResGroupCPRegion, *apiErrors.ServiceError) {
// 				panic("mock out the ListGroupByProviderAndRegion method")
// 			},
// 			RegisterClusterJobFunc: func(clusterRequest *api.Cluster) *apiErrors.ServiceError {
// 				panic("mock out the RegisterClusterJob method")
// 			},
// 			ScaleDownComputeNodesFunc: func(clusterID string, decrement int) (*types.ClusterSpec, *apiErrors.ServiceError) {
// 				panic("mock out the ScaleDownComputeNodes method")
// 			},
// 			ScaleUpComputeNodesFunc: func(clusterID string, increment int) (*types.ClusterSpec, *apiErrors.ServiceError) {
// 				panic("mock out the ScaleUpComputeNodes method")
// 			},
// 			SetComputeNodesFunc: func(clusterID string, numNodes int) (*types.ClusterSpec, *apiErrors.ServiceError) {
// 				panic("mock out the SetComputeNodes method")
// 			},
// 			UpdateFunc: func(cluster api.Cluster) *apiErrors.ServiceError {
// 				panic("mock out the Update method")
// 			},
// 			UpdateMultiClusterStatusFunc: func(clusterIds []string, status api.ClusterStatus) *apiErrors.ServiceError {
// 				panic("mock out the UpdateMultiClusterStatus method")
// 			},
// 			UpdateStatusFunc: func(cluster api.Cluster, status api.ClusterStatus) error {
// 				panic("mock out the UpdateStatus method")
// 			},
// 		}
//
// 		// use mockedClusterService in code that requires ClusterService
// 		// and then make assertions.
//
// 	}
type ClusterServiceMock struct {
	// ApplyResourcesFunc mocks the ApplyResources method.
	ApplyResourcesFunc func(cluster *api.Cluster, resources types.ResourceSet) *apiErrors.ServiceError

	// CheckClusterStatusFunc mocks the CheckClusterStatus method.
	CheckClusterStatusFunc func(cluster *api.Cluster) (*api.Cluster, *apiErrors.ServiceError)

	// ConfigureAndSaveIdentityProviderFunc mocks the ConfigureAndSaveIdentityProvider method.
	ConfigureAndSaveIdentityProviderFunc func(cluster *api.Cluster, identityProviderInfo types.IdentityProviderInfo) (*api.Cluster, *apiErrors.ServiceError)

	// CountByStatusFunc mocks the CountByStatus method.
	CountByStatusFunc func(clusterStatuss []api.ClusterStatus) ([]ClusterStatusCount, *apiErrors.ServiceError)

	// CreateFunc mocks the Create method.
	CreateFunc func(cluster *api.Cluster) (*api.Cluster, *apiErrors.ServiceError)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(cluster *api.Cluster) (bool, *apiErrors.ServiceError)

	// DeleteByClusterIDFunc mocks the DeleteByClusterID method.
	DeleteByClusterIDFunc func(clusterID string) *apiErrors.ServiceError

	// FindAllClustersFunc mocks the FindAllClusters method.
	FindAllClustersFunc func(criteria FindClusterCriteria) ([]*api.Cluster, *apiErrors.ServiceError)

	// FindClusterFunc mocks the FindCluster method.
	FindClusterFunc func(criteria FindClusterCriteria) (*api.Cluster, *apiErrors.ServiceError)

	// FindClusterByIDFunc mocks the FindClusterByID method.
	FindClusterByIDFunc func(clusterID string) (*api.Cluster, *apiErrors.ServiceError)

	// FindKafkaInstanceCountFunc mocks the FindKafkaInstanceCount method.
	FindKafkaInstanceCountFunc func(clusterIDs []string) ([]ResKafkaInstanceCount, *apiErrors.ServiceError)

	// FindNonEmptyClusterByIdFunc mocks the FindNonEmptyClusterById method.
	FindNonEmptyClusterByIdFunc func(clusterID string) (*api.Cluster, *apiErrors.ServiceError)

	// GetClusterDNSFunc mocks the GetClusterDNS method.
	GetClusterDNSFunc func(clusterID string) (string, *apiErrors.ServiceError)

	// GetComputeNodesFunc mocks the GetComputeNodes method.
	GetComputeNodesFunc func(clusterID string) (*types.ComputeNodesInfo, *apiErrors.ServiceError)

	// InstallAddonFunc mocks the InstallAddon method.
	InstallAddonFunc func(cluster *api.Cluster, addonID string) (bool, *apiErrors.ServiceError)

	// ListAllClusterIdsFunc mocks the ListAllClusterIds method.
	ListAllClusterIdsFunc func() ([]api.Cluster, *apiErrors.ServiceError)

	// ListByStatusFunc mocks the ListByStatus method.
	ListByStatusFunc func(state api.ClusterStatus) ([]api.Cluster, *apiErrors.ServiceError)

	// ListGroupByProviderAndRegionFunc mocks the ListGroupByProviderAndRegion method.
	ListGroupByProviderAndRegionFunc func(providers []string, regions []string, status []string) ([]*ResGroupCPRegion, *apiErrors.ServiceError)

	// RegisterClusterJobFunc mocks the RegisterClusterJob method.
	RegisterClusterJobFunc func(clusterRequest *api.Cluster) *apiErrors.ServiceError

	// ScaleDownComputeNodesFunc mocks the ScaleDownComputeNodes method.
	ScaleDownComputeNodesFunc func(clusterID string, decrement int) (*types.ClusterSpec, *apiErrors.ServiceError)

	// ScaleUpComputeNodesFunc mocks the ScaleUpComputeNodes method.
	ScaleUpComputeNodesFunc func(clusterID string, increment int) (*types.ClusterSpec, *apiErrors.ServiceError)

	// SetComputeNodesFunc mocks the SetComputeNodes method.
	SetComputeNodesFunc func(clusterID string, numNodes int) (*types.ClusterSpec, *apiErrors.ServiceError)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(cluster api.Cluster) *apiErrors.ServiceError

	// UpdateMultiClusterStatusFunc mocks the UpdateMultiClusterStatus method.
	UpdateMultiClusterStatusFunc func(clusterIds []string, status api.ClusterStatus) *apiErrors.ServiceError

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(cluster api.Cluster, status api.ClusterStatus) error

	// calls tracks calls to the methods.
	calls struct {
		// ApplyResources holds details about calls to the ApplyResources method.
		ApplyResources []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
			// Resources is the resources argument value.
			Resources types.ResourceSet
		}
		// CheckClusterStatus holds details about calls to the CheckClusterStatus method.
		CheckClusterStatus []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
		}
		// ConfigureAndSaveIdentityProvider holds details about calls to the ConfigureAndSaveIdentityProvider method.
		ConfigureAndSaveIdentityProvider []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
			// IdentityProviderInfo is the identityProviderInfo argument value.
			IdentityProviderInfo types.IdentityProviderInfo
		}
		// CountByStatus holds details about calls to the CountByStatus method.
		CountByStatus []struct {
			// ClusterStatuss is the clusterStatuss argument value.
			ClusterStatuss []api.ClusterStatus
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
		}
		// DeleteByClusterID holds details about calls to the DeleteByClusterID method.
		DeleteByClusterID []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// FindAllClusters holds details about calls to the FindAllClusters method.
		FindAllClusters []struct {
			// Criteria is the criteria argument value.
			Criteria FindClusterCriteria
		}
		// FindCluster holds details about calls to the FindCluster method.
		FindCluster []struct {
			// Criteria is the criteria argument value.
			Criteria FindClusterCriteria
		}
		// FindClusterByID holds details about calls to the FindClusterByID method.
		FindClusterByID []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// FindKafkaInstanceCount holds details about calls to the FindKafkaInstanceCount method.
		FindKafkaInstanceCount []struct {
			// ClusterIDs is the clusterIDs argument value.
			ClusterIDs []string
		}
		// FindNonEmptyClusterById holds details about calls to the FindNonEmptyClusterById method.
		FindNonEmptyClusterById []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetClusterDNS holds details about calls to the GetClusterDNS method.
		GetClusterDNS []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetComputeNodes holds details about calls to the GetComputeNodes method.
		GetComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// InstallAddon holds details about calls to the InstallAddon method.
		InstallAddon []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
			// AddonID is the addonID argument value.
			AddonID string
		}
		// ListAllClusterIds holds details about calls to the ListAllClusterIds method.
		ListAllClusterIds []struct {
		}
		// ListByStatus holds details about calls to the ListByStatus method.
		ListByStatus []struct {
			// State is the state argument value.
			State api.ClusterStatus
		}
		// ListGroupByProviderAndRegion holds details about calls to the ListGroupByProviderAndRegion method.
		ListGroupByProviderAndRegion []struct {
			// Providers is the providers argument value.
			Providers []string
			// Regions is the regions argument value.
			Regions []string
			// Status is the status argument value.
			Status []string
		}
		// RegisterClusterJob holds details about calls to the RegisterClusterJob method.
		RegisterClusterJob []struct {
			// ClusterRequest is the clusterRequest argument value.
			ClusterRequest *api.Cluster
		}
		// ScaleDownComputeNodes holds details about calls to the ScaleDownComputeNodes method.
		ScaleDownComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// Decrement is the decrement argument value.
			Decrement int
		}
		// ScaleUpComputeNodes holds details about calls to the ScaleUpComputeNodes method.
		ScaleUpComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// Increment is the increment argument value.
			Increment int
		}
		// SetComputeNodes holds details about calls to the SetComputeNodes method.
		SetComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// NumNodes is the numNodes argument value.
			NumNodes int
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Cluster is the cluster argument value.
			Cluster api.Cluster
		}
		// UpdateMultiClusterStatus holds details about calls to the UpdateMultiClusterStatus method.
		UpdateMultiClusterStatus []struct {
			// ClusterIds is the clusterIds argument value.
			ClusterIds []string
			// Status is the status argument value.
			Status api.ClusterStatus
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// Cluster is the cluster argument value.
			Cluster api.Cluster
			// Status is the status argument value.
			Status api.ClusterStatus
		}
	}
	lockApplyResources                   sync.RWMutex
	lockCheckClusterStatus               sync.RWMutex
	lockConfigureAndSaveIdentityProvider sync.RWMutex
	lockCountByStatus                    sync.RWMutex
	lockCreate                           sync.RWMutex
	lockDelete                           sync.RWMutex
	lockDeleteByClusterID                sync.RWMutex
	lockFindAllClusters                  sync.RWMutex
	lockFindCluster                      sync.RWMutex
	lockFindClusterByID                  sync.RWMutex
	lockFindKafkaInstanceCount           sync.RWMutex
	lockFindNonEmptyClusterById          sync.RWMutex
	lockGetClusterDNS                    sync.RWMutex
	lockGetComputeNodes                  sync.RWMutex
	lockInstallAddon                     sync.RWMutex
	lockListAllClusterIds                sync.RWMutex
	lockListByStatus                     sync.RWMutex
	lockListGroupByProviderAndRegion     sync.RWMutex
	lockRegisterClusterJob               sync.RWMutex
	lockScaleDownComputeNodes            sync.RWMutex
	lockScaleUpComputeNodes              sync.RWMutex
	lockSetComputeNodes                  sync.RWMutex
	lockUpdate                           sync.RWMutex
	lockUpdateMultiClusterStatus         sync.RWMutex
	lockUpdateStatus                     sync.RWMutex
}

// ApplyResources calls ApplyResourcesFunc.
func (mock *ClusterServiceMock) ApplyResources(cluster *api.Cluster, resources types.ResourceSet) *apiErrors.ServiceError {
	if mock.ApplyResourcesFunc == nil {
		panic("ClusterServiceMock.ApplyResourcesFunc: method is nil but ClusterService.ApplyResources was just called")
	}
	callInfo := struct {
		Cluster   *api.Cluster
		Resources types.ResourceSet
	}{
		Cluster:   cluster,
		Resources: resources,
	}
	mock.lockApplyResources.Lock()
	mock.calls.ApplyResources = append(mock.calls.ApplyResources, callInfo)
	mock.lockApplyResources.Unlock()
	return mock.ApplyResourcesFunc(cluster, resources)
}

// ApplyResourcesCalls gets all the calls that were made to ApplyResources.
// Check the length with:
//     len(mockedClusterService.ApplyResourcesCalls())
func (mock *ClusterServiceMock) ApplyResourcesCalls() []struct {
	Cluster   *api.Cluster
	Resources types.ResourceSet
} {
	var calls []struct {
		Cluster   *api.Cluster
		Resources types.ResourceSet
	}
	mock.lockApplyResources.RLock()
	calls = mock.calls.ApplyResources
	mock.lockApplyResources.RUnlock()
	return calls
}

// CheckClusterStatus calls CheckClusterStatusFunc.
func (mock *ClusterServiceMock) CheckClusterStatus(cluster *api.Cluster) (*api.Cluster, *apiErrors.ServiceError) {
	if mock.CheckClusterStatusFunc == nil {
		panic("ClusterServiceMock.CheckClusterStatusFunc: method is nil but ClusterService.CheckClusterStatus was just called")
	}
	callInfo := struct {
		Cluster *api.Cluster
	}{
		Cluster: cluster,
	}
	mock.lockCheckClusterStatus.Lock()
	mock.calls.CheckClusterStatus = append(mock.calls.CheckClusterStatus, callInfo)
	mock.lockCheckClusterStatus.Unlock()
	return mock.CheckClusterStatusFunc(cluster)
}

// CheckClusterStatusCalls gets all the calls that were made to CheckClusterStatus.
// Check the length with:
//     len(mockedClusterService.CheckClusterStatusCalls())
func (mock *ClusterServiceMock) CheckClusterStatusCalls() []struct {
	Cluster *api.Cluster
} {
	var calls []struct {
		Cluster *api.Cluster
	}
	mock.lockCheckClusterStatus.RLock()
	calls = mock.calls.CheckClusterStatus
	mock.lockCheckClusterStatus.RUnlock()
	return calls
}

// ConfigureAndSaveIdentityProvider calls ConfigureAndSaveIdentityProviderFunc.
func (mock *ClusterServiceMock) ConfigureAndSaveIdentityProvider(cluster *api.Cluster, identityProviderInfo types.IdentityProviderInfo) (*api.Cluster, *apiErrors.ServiceError) {
	if mock.ConfigureAndSaveIdentityProviderFunc == nil {
		panic("ClusterServiceMock.ConfigureAndSaveIdentityProviderFunc: method is nil but ClusterService.ConfigureAndSaveIdentityProvider was just called")
	}
	callInfo := struct {
		Cluster              *api.Cluster
		IdentityProviderInfo types.IdentityProviderInfo
	}{
		Cluster:              cluster,
		IdentityProviderInfo: identityProviderInfo,
	}
	mock.lockConfigureAndSaveIdentityProvider.Lock()
	mock.calls.ConfigureAndSaveIdentityProvider = append(mock.calls.ConfigureAndSaveIdentityProvider, callInfo)
	mock.lockConfigureAndSaveIdentityProvider.Unlock()
	return mock.ConfigureAndSaveIdentityProviderFunc(cluster, identityProviderInfo)
}

// ConfigureAndSaveIdentityProviderCalls gets all the calls that were made to ConfigureAndSaveIdentityProvider.
// Check the length with:
//     len(mockedClusterService.ConfigureAndSaveIdentityProviderCalls())
func (mock *ClusterServiceMock) ConfigureAndSaveIdentityProviderCalls() []struct {
	Cluster              *api.Cluster
	IdentityProviderInfo types.IdentityProviderInfo
} {
	var calls []struct {
		Cluster              *api.Cluster
		IdentityProviderInfo types.IdentityProviderInfo
	}
	mock.lockConfigureAndSaveIdentityProvider.RLock()
	calls = mock.calls.ConfigureAndSaveIdentityProvider
	mock.lockConfigureAndSaveIdentityProvider.RUnlock()
	return calls
}

// CountByStatus calls CountByStatusFunc.
func (mock *ClusterServiceMock) CountByStatus(clusterStatuss []api.ClusterStatus) ([]ClusterStatusCount, *apiErrors.ServiceError) {
	if mock.CountByStatusFunc == nil {
		panic("ClusterServiceMock.CountByStatusFunc: method is nil but ClusterService.CountByStatus was just called")
	}
	callInfo := struct {
		ClusterStatuss []api.ClusterStatus
	}{
		ClusterStatuss: clusterStatuss,
	}
	mock.lockCountByStatus.Lock()
	mock.calls.CountByStatus = append(mock.calls.CountByStatus, callInfo)
	mock.lockCountByStatus.Unlock()
	return mock.CountByStatusFunc(clusterStatuss)
}

// CountByStatusCalls gets all the calls that were made to CountByStatus.
// Check the length with:
//     len(mockedClusterService.CountByStatusCalls())
func (mock *ClusterServiceMock) CountByStatusCalls() []struct {
	ClusterStatuss []api.ClusterStatus
} {
	var calls []struct {
		ClusterStatuss []api.ClusterStatus
	}
	mock.lockCountByStatus.RLock()
	calls = mock.calls.CountByStatus
	mock.lockCountByStatus.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ClusterServiceMock) Create(cluster *api.Cluster) (*api.Cluster, *apiErrors.ServiceError) {
	if mock.CreateFunc == nil {
		panic("ClusterServiceMock.CreateFunc: method is nil but ClusterService.Create was just called")
	}
	callInfo := struct {
		Cluster *api.Cluster
	}{
		Cluster: cluster,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(cluster)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterService.CreateCalls())
func (mock *ClusterServiceMock) CreateCalls() []struct {
	Cluster *api.Cluster
} {
	var calls []struct {
		Cluster *api.Cluster
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ClusterServiceMock) Delete(cluster *api.Cluster) (bool, *apiErrors.ServiceError) {
	if mock.DeleteFunc == nil {
		panic("ClusterServiceMock.DeleteFunc: method is nil but ClusterService.Delete was just called")
	}
	callInfo := struct {
		Cluster *api.Cluster
	}{
		Cluster: cluster,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(cluster)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedClusterService.DeleteCalls())
func (mock *ClusterServiceMock) DeleteCalls() []struct {
	Cluster *api.Cluster
} {
	var calls []struct {
		Cluster *api.Cluster
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// DeleteByClusterID calls DeleteByClusterIDFunc.
func (mock *ClusterServiceMock) DeleteByClusterID(clusterID string) *apiErrors.ServiceError {
	if mock.DeleteByClusterIDFunc == nil {
		panic("ClusterServiceMock.DeleteByClusterIDFunc: method is nil but ClusterService.DeleteByClusterID was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockDeleteByClusterID.Lock()
	mock.calls.DeleteByClusterID = append(mock.calls.DeleteByClusterID, callInfo)
	mock.lockDeleteByClusterID.Unlock()
	return mock.DeleteByClusterIDFunc(clusterID)
}

// DeleteByClusterIDCalls gets all the calls that were made to DeleteByClusterID.
// Check the length with:
//     len(mockedClusterService.DeleteByClusterIDCalls())
func (mock *ClusterServiceMock) DeleteByClusterIDCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockDeleteByClusterID.RLock()
	calls = mock.calls.DeleteByClusterID
	mock.lockDeleteByClusterID.RUnlock()
	return calls
}

// FindAllClusters calls FindAllClustersFunc.
func (mock *ClusterServiceMock) FindAllClusters(criteria FindClusterCriteria) ([]*api.Cluster, *apiErrors.ServiceError) {
	if mock.FindAllClustersFunc == nil {
		panic("ClusterServiceMock.FindAllClustersFunc: method is nil but ClusterService.FindAllClusters was just called")
	}
	callInfo := struct {
		Criteria FindClusterCriteria
	}{
		Criteria: criteria,
	}
	mock.lockFindAllClusters.Lock()
	mock.calls.FindAllClusters = append(mock.calls.FindAllClusters, callInfo)
	mock.lockFindAllClusters.Unlock()
	return mock.FindAllClustersFunc(criteria)
}

// FindAllClustersCalls gets all the calls that were made to FindAllClusters.
// Check the length with:
//     len(mockedClusterService.FindAllClustersCalls())
func (mock *ClusterServiceMock) FindAllClustersCalls() []struct {
	Criteria FindClusterCriteria
} {
	var calls []struct {
		Criteria FindClusterCriteria
	}
	mock.lockFindAllClusters.RLock()
	calls = mock.calls.FindAllClusters
	mock.lockFindAllClusters.RUnlock()
	return calls
}

// FindCluster calls FindClusterFunc.
func (mock *ClusterServiceMock) FindCluster(criteria FindClusterCriteria) (*api.Cluster, *apiErrors.ServiceError) {
	if mock.FindClusterFunc == nil {
		panic("ClusterServiceMock.FindClusterFunc: method is nil but ClusterService.FindCluster was just called")
	}
	callInfo := struct {
		Criteria FindClusterCriteria
	}{
		Criteria: criteria,
	}
	mock.lockFindCluster.Lock()
	mock.calls.FindCluster = append(mock.calls.FindCluster, callInfo)
	mock.lockFindCluster.Unlock()
	return mock.FindClusterFunc(criteria)
}

// FindClusterCalls gets all the calls that were made to FindCluster.
// Check the length with:
//     len(mockedClusterService.FindClusterCalls())
func (mock *ClusterServiceMock) FindClusterCalls() []struct {
	Criteria FindClusterCriteria
} {
	var calls []struct {
		Criteria FindClusterCriteria
	}
	mock.lockFindCluster.RLock()
	calls = mock.calls.FindCluster
	mock.lockFindCluster.RUnlock()
	return calls
}

// FindClusterByID calls FindClusterByIDFunc.
func (mock *ClusterServiceMock) FindClusterByID(clusterID string) (*api.Cluster, *apiErrors.ServiceError) {
	if mock.FindClusterByIDFunc == nil {
		panic("ClusterServiceMock.FindClusterByIDFunc: method is nil but ClusterService.FindClusterByID was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockFindClusterByID.Lock()
	mock.calls.FindClusterByID = append(mock.calls.FindClusterByID, callInfo)
	mock.lockFindClusterByID.Unlock()
	return mock.FindClusterByIDFunc(clusterID)
}

// FindClusterByIDCalls gets all the calls that were made to FindClusterByID.
// Check the length with:
//     len(mockedClusterService.FindClusterByIDCalls())
func (mock *ClusterServiceMock) FindClusterByIDCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockFindClusterByID.RLock()
	calls = mock.calls.FindClusterByID
	mock.lockFindClusterByID.RUnlock()
	return calls
}

// FindKafkaInstanceCount calls FindKafkaInstanceCountFunc.
func (mock *ClusterServiceMock) FindKafkaInstanceCount(clusterIDs []string) ([]ResKafkaInstanceCount, *apiErrors.ServiceError) {
	if mock.FindKafkaInstanceCountFunc == nil {
		panic("ClusterServiceMock.FindKafkaInstanceCountFunc: method is nil but ClusterService.FindKafkaInstanceCount was just called")
	}
	callInfo := struct {
		ClusterIDs []string
	}{
		ClusterIDs: clusterIDs,
	}
	mock.lockFindKafkaInstanceCount.Lock()
	mock.calls.FindKafkaInstanceCount = append(mock.calls.FindKafkaInstanceCount, callInfo)
	mock.lockFindKafkaInstanceCount.Unlock()
	return mock.FindKafkaInstanceCountFunc(clusterIDs)
}

// FindKafkaInstanceCountCalls gets all the calls that were made to FindKafkaInstanceCount.
// Check the length with:
//     len(mockedClusterService.FindKafkaInstanceCountCalls())
func (mock *ClusterServiceMock) FindKafkaInstanceCountCalls() []struct {
	ClusterIDs []string
} {
	var calls []struct {
		ClusterIDs []string
	}
	mock.lockFindKafkaInstanceCount.RLock()
	calls = mock.calls.FindKafkaInstanceCount
	mock.lockFindKafkaInstanceCount.RUnlock()
	return calls
}

// FindNonEmptyClusterById calls FindNonEmptyClusterByIdFunc.
func (mock *ClusterServiceMock) FindNonEmptyClusterById(clusterID string) (*api.Cluster, *apiErrors.ServiceError) {
	if mock.FindNonEmptyClusterByIdFunc == nil {
		panic("ClusterServiceMock.FindNonEmptyClusterByIdFunc: method is nil but ClusterService.FindNonEmptyClusterById was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockFindNonEmptyClusterById.Lock()
	mock.calls.FindNonEmptyClusterById = append(mock.calls.FindNonEmptyClusterById, callInfo)
	mock.lockFindNonEmptyClusterById.Unlock()
	return mock.FindNonEmptyClusterByIdFunc(clusterID)
}

// FindNonEmptyClusterByIdCalls gets all the calls that were made to FindNonEmptyClusterById.
// Check the length with:
//     len(mockedClusterService.FindNonEmptyClusterByIdCalls())
func (mock *ClusterServiceMock) FindNonEmptyClusterByIdCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockFindNonEmptyClusterById.RLock()
	calls = mock.calls.FindNonEmptyClusterById
	mock.lockFindNonEmptyClusterById.RUnlock()
	return calls
}

// GetClusterDNS calls GetClusterDNSFunc.
func (mock *ClusterServiceMock) GetClusterDNS(clusterID string) (string, *apiErrors.ServiceError) {
	if mock.GetClusterDNSFunc == nil {
		panic("ClusterServiceMock.GetClusterDNSFunc: method is nil but ClusterService.GetClusterDNS was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetClusterDNS.Lock()
	mock.calls.GetClusterDNS = append(mock.calls.GetClusterDNS, callInfo)
	mock.lockGetClusterDNS.Unlock()
	return mock.GetClusterDNSFunc(clusterID)
}

// GetClusterDNSCalls gets all the calls that were made to GetClusterDNS.
// Check the length with:
//     len(mockedClusterService.GetClusterDNSCalls())
func (mock *ClusterServiceMock) GetClusterDNSCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetClusterDNS.RLock()
	calls = mock.calls.GetClusterDNS
	mock.lockGetClusterDNS.RUnlock()
	return calls
}

// GetComputeNodes calls GetComputeNodesFunc.
func (mock *ClusterServiceMock) GetComputeNodes(clusterID string) (*types.ComputeNodesInfo, *apiErrors.ServiceError) {
	if mock.GetComputeNodesFunc == nil {
		panic("ClusterServiceMock.GetComputeNodesFunc: method is nil but ClusterService.GetComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetComputeNodes.Lock()
	mock.calls.GetComputeNodes = append(mock.calls.GetComputeNodes, callInfo)
	mock.lockGetComputeNodes.Unlock()
	return mock.GetComputeNodesFunc(clusterID)
}

// GetComputeNodesCalls gets all the calls that were made to GetComputeNodes.
// Check the length with:
//     len(mockedClusterService.GetComputeNodesCalls())
func (mock *ClusterServiceMock) GetComputeNodesCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetComputeNodes.RLock()
	calls = mock.calls.GetComputeNodes
	mock.lockGetComputeNodes.RUnlock()
	return calls
}

// InstallAddon calls InstallAddonFunc.
func (mock *ClusterServiceMock) InstallAddon(cluster *api.Cluster, addonID string) (bool, *apiErrors.ServiceError) {
	if mock.InstallAddonFunc == nil {
		panic("ClusterServiceMock.InstallAddonFunc: method is nil but ClusterService.InstallAddon was just called")
	}
	callInfo := struct {
		Cluster *api.Cluster
		AddonID string
	}{
		Cluster: cluster,
		AddonID: addonID,
	}
	mock.lockInstallAddon.Lock()
	mock.calls.InstallAddon = append(mock.calls.InstallAddon, callInfo)
	mock.lockInstallAddon.Unlock()
	return mock.InstallAddonFunc(cluster, addonID)
}

// InstallAddonCalls gets all the calls that were made to InstallAddon.
// Check the length with:
//     len(mockedClusterService.InstallAddonCalls())
func (mock *ClusterServiceMock) InstallAddonCalls() []struct {
	Cluster *api.Cluster
	AddonID string
} {
	var calls []struct {
		Cluster *api.Cluster
		AddonID string
	}
	mock.lockInstallAddon.RLock()
	calls = mock.calls.InstallAddon
	mock.lockInstallAddon.RUnlock()
	return calls
}

// ListAllClusterIds calls ListAllClusterIdsFunc.
func (mock *ClusterServiceMock) ListAllClusterIds() ([]api.Cluster, *apiErrors.ServiceError) {
	if mock.ListAllClusterIdsFunc == nil {
		panic("ClusterServiceMock.ListAllClusterIdsFunc: method is nil but ClusterService.ListAllClusterIds was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListAllClusterIds.Lock()
	mock.calls.ListAllClusterIds = append(mock.calls.ListAllClusterIds, callInfo)
	mock.lockListAllClusterIds.Unlock()
	return mock.ListAllClusterIdsFunc()
}

// ListAllClusterIdsCalls gets all the calls that were made to ListAllClusterIds.
// Check the length with:
//     len(mockedClusterService.ListAllClusterIdsCalls())
func (mock *ClusterServiceMock) ListAllClusterIdsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListAllClusterIds.RLock()
	calls = mock.calls.ListAllClusterIds
	mock.lockListAllClusterIds.RUnlock()
	return calls
}

// ListByStatus calls ListByStatusFunc.
func (mock *ClusterServiceMock) ListByStatus(state api.ClusterStatus) ([]api.Cluster, *apiErrors.ServiceError) {
	if mock.ListByStatusFunc == nil {
		panic("ClusterServiceMock.ListByStatusFunc: method is nil but ClusterService.ListByStatus was just called")
	}
	callInfo := struct {
		State api.ClusterStatus
	}{
		State: state,
	}
	mock.lockListByStatus.Lock()
	mock.calls.ListByStatus = append(mock.calls.ListByStatus, callInfo)
	mock.lockListByStatus.Unlock()
	return mock.ListByStatusFunc(state)
}

// ListByStatusCalls gets all the calls that were made to ListByStatus.
// Check the length with:
//     len(mockedClusterService.ListByStatusCalls())
func (mock *ClusterServiceMock) ListByStatusCalls() []struct {
	State api.ClusterStatus
} {
	var calls []struct {
		State api.ClusterStatus
	}
	mock.lockListByStatus.RLock()
	calls = mock.calls.ListByStatus
	mock.lockListByStatus.RUnlock()
	return calls
}

// ListGroupByProviderAndRegion calls ListGroupByProviderAndRegionFunc.
func (mock *ClusterServiceMock) ListGroupByProviderAndRegion(providers []string, regions []string, status []string) ([]*ResGroupCPRegion, *apiErrors.ServiceError) {
	if mock.ListGroupByProviderAndRegionFunc == nil {
		panic("ClusterServiceMock.ListGroupByProviderAndRegionFunc: method is nil but ClusterService.ListGroupByProviderAndRegion was just called")
	}
	callInfo := struct {
		Providers []string
		Regions   []string
		Status    []string
	}{
		Providers: providers,
		Regions:   regions,
		Status:    status,
	}
	mock.lockListGroupByProviderAndRegion.Lock()
	mock.calls.ListGroupByProviderAndRegion = append(mock.calls.ListGroupByProviderAndRegion, callInfo)
	mock.lockListGroupByProviderAndRegion.Unlock()
	return mock.ListGroupByProviderAndRegionFunc(providers, regions, status)
}

// ListGroupByProviderAndRegionCalls gets all the calls that were made to ListGroupByProviderAndRegion.
// Check the length with:
//     len(mockedClusterService.ListGroupByProviderAndRegionCalls())
func (mock *ClusterServiceMock) ListGroupByProviderAndRegionCalls() []struct {
	Providers []string
	Regions   []string
	Status    []string
} {
	var calls []struct {
		Providers []string
		Regions   []string
		Status    []string
	}
	mock.lockListGroupByProviderAndRegion.RLock()
	calls = mock.calls.ListGroupByProviderAndRegion
	mock.lockListGroupByProviderAndRegion.RUnlock()
	return calls
}

// RegisterClusterJob calls RegisterClusterJobFunc.
func (mock *ClusterServiceMock) RegisterClusterJob(clusterRequest *api.Cluster) *apiErrors.ServiceError {
	if mock.RegisterClusterJobFunc == nil {
		panic("ClusterServiceMock.RegisterClusterJobFunc: method is nil but ClusterService.RegisterClusterJob was just called")
	}
	callInfo := struct {
		ClusterRequest *api.Cluster
	}{
		ClusterRequest: clusterRequest,
	}
	mock.lockRegisterClusterJob.Lock()
	mock.calls.RegisterClusterJob = append(mock.calls.RegisterClusterJob, callInfo)
	mock.lockRegisterClusterJob.Unlock()
	return mock.RegisterClusterJobFunc(clusterRequest)
}

// RegisterClusterJobCalls gets all the calls that were made to RegisterClusterJob.
// Check the length with:
//     len(mockedClusterService.RegisterClusterJobCalls())
func (mock *ClusterServiceMock) RegisterClusterJobCalls() []struct {
	ClusterRequest *api.Cluster
} {
	var calls []struct {
		ClusterRequest *api.Cluster
	}
	mock.lockRegisterClusterJob.RLock()
	calls = mock.calls.RegisterClusterJob
	mock.lockRegisterClusterJob.RUnlock()
	return calls
}

// ScaleDownComputeNodes calls ScaleDownComputeNodesFunc.
func (mock *ClusterServiceMock) ScaleDownComputeNodes(clusterID string, decrement int) (*types.ClusterSpec, *apiErrors.ServiceError) {
	if mock.ScaleDownComputeNodesFunc == nil {
		panic("ClusterServiceMock.ScaleDownComputeNodesFunc: method is nil but ClusterService.ScaleDownComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
		Decrement int
	}{
		ClusterID: clusterID,
		Decrement: decrement,
	}
	mock.lockScaleDownComputeNodes.Lock()
	mock.calls.ScaleDownComputeNodes = append(mock.calls.ScaleDownComputeNodes, callInfo)
	mock.lockScaleDownComputeNodes.Unlock()
	return mock.ScaleDownComputeNodesFunc(clusterID, decrement)
}

// ScaleDownComputeNodesCalls gets all the calls that were made to ScaleDownComputeNodes.
// Check the length with:
//     len(mockedClusterService.ScaleDownComputeNodesCalls())
func (mock *ClusterServiceMock) ScaleDownComputeNodesCalls() []struct {
	ClusterID string
	Decrement int
} {
	var calls []struct {
		ClusterID string
		Decrement int
	}
	mock.lockScaleDownComputeNodes.RLock()
	calls = mock.calls.ScaleDownComputeNodes
	mock.lockScaleDownComputeNodes.RUnlock()
	return calls
}

// ScaleUpComputeNodes calls ScaleUpComputeNodesFunc.
func (mock *ClusterServiceMock) ScaleUpComputeNodes(clusterID string, increment int) (*types.ClusterSpec, *apiErrors.ServiceError) {
	if mock.ScaleUpComputeNodesFunc == nil {
		panic("ClusterServiceMock.ScaleUpComputeNodesFunc: method is nil but ClusterService.ScaleUpComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
		Increment int
	}{
		ClusterID: clusterID,
		Increment: increment,
	}
	mock.lockScaleUpComputeNodes.Lock()
	mock.calls.ScaleUpComputeNodes = append(mock.calls.ScaleUpComputeNodes, callInfo)
	mock.lockScaleUpComputeNodes.Unlock()
	return mock.ScaleUpComputeNodesFunc(clusterID, increment)
}

// ScaleUpComputeNodesCalls gets all the calls that were made to ScaleUpComputeNodes.
// Check the length with:
//     len(mockedClusterService.ScaleUpComputeNodesCalls())
func (mock *ClusterServiceMock) ScaleUpComputeNodesCalls() []struct {
	ClusterID string
	Increment int
} {
	var calls []struct {
		ClusterID string
		Increment int
	}
	mock.lockScaleUpComputeNodes.RLock()
	calls = mock.calls.ScaleUpComputeNodes
	mock.lockScaleUpComputeNodes.RUnlock()
	return calls
}

// SetComputeNodes calls SetComputeNodesFunc.
func (mock *ClusterServiceMock) SetComputeNodes(clusterID string, numNodes int) (*types.ClusterSpec, *apiErrors.ServiceError) {
	if mock.SetComputeNodesFunc == nil {
		panic("ClusterServiceMock.SetComputeNodesFunc: method is nil but ClusterService.SetComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
		NumNodes  int
	}{
		ClusterID: clusterID,
		NumNodes:  numNodes,
	}
	mock.lockSetComputeNodes.Lock()
	mock.calls.SetComputeNodes = append(mock.calls.SetComputeNodes, callInfo)
	mock.lockSetComputeNodes.Unlock()
	return mock.SetComputeNodesFunc(clusterID, numNodes)
}

// SetComputeNodesCalls gets all the calls that were made to SetComputeNodes.
// Check the length with:
//     len(mockedClusterService.SetComputeNodesCalls())
func (mock *ClusterServiceMock) SetComputeNodesCalls() []struct {
	ClusterID string
	NumNodes  int
} {
	var calls []struct {
		ClusterID string
		NumNodes  int
	}
	mock.lockSetComputeNodes.RLock()
	calls = mock.calls.SetComputeNodes
	mock.lockSetComputeNodes.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ClusterServiceMock) Update(cluster api.Cluster) *apiErrors.ServiceError {
	if mock.UpdateFunc == nil {
		panic("ClusterServiceMock.UpdateFunc: method is nil but ClusterService.Update was just called")
	}
	callInfo := struct {
		Cluster api.Cluster
	}{
		Cluster: cluster,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(cluster)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedClusterService.UpdateCalls())
func (mock *ClusterServiceMock) UpdateCalls() []struct {
	Cluster api.Cluster
} {
	var calls []struct {
		Cluster api.Cluster
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// UpdateMultiClusterStatus calls UpdateMultiClusterStatusFunc.
func (mock *ClusterServiceMock) UpdateMultiClusterStatus(clusterIds []string, status api.ClusterStatus) *apiErrors.ServiceError {
	if mock.UpdateMultiClusterStatusFunc == nil {
		panic("ClusterServiceMock.UpdateMultiClusterStatusFunc: method is nil but ClusterService.UpdateMultiClusterStatus was just called")
	}
	callInfo := struct {
		ClusterIds []string
		Status     api.ClusterStatus
	}{
		ClusterIds: clusterIds,
		Status:     status,
	}
	mock.lockUpdateMultiClusterStatus.Lock()
	mock.calls.UpdateMultiClusterStatus = append(mock.calls.UpdateMultiClusterStatus, callInfo)
	mock.lockUpdateMultiClusterStatus.Unlock()
	return mock.UpdateMultiClusterStatusFunc(clusterIds, status)
}

// UpdateMultiClusterStatusCalls gets all the calls that were made to UpdateMultiClusterStatus.
// Check the length with:
//     len(mockedClusterService.UpdateMultiClusterStatusCalls())
func (mock *ClusterServiceMock) UpdateMultiClusterStatusCalls() []struct {
	ClusterIds []string
	Status     api.ClusterStatus
} {
	var calls []struct {
		ClusterIds []string
		Status     api.ClusterStatus
	}
	mock.lockUpdateMultiClusterStatus.RLock()
	calls = mock.calls.UpdateMultiClusterStatus
	mock.lockUpdateMultiClusterStatus.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *ClusterServiceMock) UpdateStatus(cluster api.Cluster, status api.ClusterStatus) error {
	if mock.UpdateStatusFunc == nil {
		panic("ClusterServiceMock.UpdateStatusFunc: method is nil but ClusterService.UpdateStatus was just called")
	}
	callInfo := struct {
		Cluster api.Cluster
		Status  api.ClusterStatus
	}{
		Cluster: cluster,
		Status:  status,
	}
	mock.lockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	mock.lockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(cluster, status)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedClusterService.UpdateStatusCalls())
func (mock *ClusterServiceMock) UpdateStatusCalls() []struct {
	Cluster api.Cluster
	Status  api.ClusterStatus
} {
	var calls []struct {
		Cluster api.Cluster
		Status  api.ClusterStatus
	}
	mock.lockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	mock.lockUpdateStatus.RUnlock()
	return calls
}
