// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
	"gitlab.cee.redhat.com/service/managed-services-api/pkg/api"
	"gitlab.cee.redhat.com/service/managed-services-api/pkg/errors"
	"sync"
)

var (
	lockClusterServiceMockCreate                       sync.RWMutex
	lockClusterServiceMockFindCluster                  sync.RWMutex
	lockClusterServiceMockFindClusterByID              sync.RWMutex
	lockClusterServiceMockGetClusterDNS                sync.RWMutex
	lockClusterServiceMockListByStatus                 sync.RWMutex
	lockClusterServiceMockListGroupByProviderAndRegion sync.RWMutex
	lockClusterServiceMockRegisterClusterJob           sync.RWMutex
	lockClusterServiceMockScaleDownComputeNodes        sync.RWMutex
	lockClusterServiceMockScaleUpComputeNodes          sync.RWMutex
	lockClusterServiceMockUpdateStatus                 sync.RWMutex
)

// Ensure, that ClusterServiceMock does implement ClusterService.
// If this is not the case, regenerate this file with moq.
var _ ClusterService = &ClusterServiceMock{}

// ClusterServiceMock is a mock implementation of ClusterService.
//
//     func TestSomethingThatUsesClusterService(t *testing.T) {
//
//         // make and configure a mocked ClusterService
//         mockedClusterService := &ClusterServiceMock{
//             CreateFunc: func(cluster *api.Cluster) (*v1.Cluster, *errors.ServiceError) {
// 	               panic("mock out the Create method")
//             },
//             FindClusterFunc: func(criteria FindClusterCriteria) (*api.Cluster, *errors.ServiceError) {
// 	               panic("mock out the FindCluster method")
//             },
//             FindClusterByIDFunc: func(clusterID string) (*api.Cluster, *errors.ServiceError) {
// 	               panic("mock out the FindClusterByID method")
//             },
//             GetClusterDNSFunc: func(clusterID string) (string, *errors.ServiceError) {
// 	               panic("mock out the GetClusterDNS method")
//             },
//             ListByStatusFunc: func(state api.ClusterStatus) ([]api.Cluster, *errors.ServiceError) {
// 	               panic("mock out the ListByStatus method")
//             },
//             ListGroupByProviderAndRegionFunc: func(providers []string, regions []string, status []string) ([]*ResGroupCPRegion, *errors.ServiceError) {
// 	               panic("mock out the ListGroupByProviderAndRegion method")
//             },
//             RegisterClusterJobFunc: func(clusterRequest *api.Cluster) *errors.ServiceError {
// 	               panic("mock out the RegisterClusterJob method")
//             },
//             ScaleDownComputeNodesFunc: func(clusterID string, decrement int) (*v1.Cluster, *errors.ServiceError) {
// 	               panic("mock out the ScaleDownComputeNodes method")
//             },
//             ScaleUpComputeNodesFunc: func(clusterID string, increment int) (*v1.Cluster, *errors.ServiceError) {
// 	               panic("mock out the ScaleUpComputeNodes method")
//             },
//             UpdateStatusFunc: func(cluster api.Cluster, status api.ClusterStatus) error {
// 	               panic("mock out the UpdateStatus method")
//             },
//         }
//
//         // use mockedClusterService in code that requires ClusterService
//         // and then make assertions.
//
//     }
type ClusterServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(cluster *api.Cluster) (*v1.Cluster, *errors.ServiceError)

	// FindClusterFunc mocks the FindCluster method.
	FindClusterFunc func(criteria FindClusterCriteria) (*api.Cluster, *errors.ServiceError)

	// FindClusterByIDFunc mocks the FindClusterByID method.
	FindClusterByIDFunc func(clusterID string) (*api.Cluster, *errors.ServiceError)

	// GetClusterDNSFunc mocks the GetClusterDNS method.
	GetClusterDNSFunc func(clusterID string) (string, *errors.ServiceError)

	// ListByStatusFunc mocks the ListByStatus method.
	ListByStatusFunc func(state api.ClusterStatus) ([]api.Cluster, *errors.ServiceError)

	// ListGroupByProviderAndRegionFunc mocks the ListGroupByProviderAndRegion method.
	ListGroupByProviderAndRegionFunc func(providers []string, regions []string, status []string) ([]*ResGroupCPRegion, *errors.ServiceError)

	// RegisterClusterJobFunc mocks the RegisterClusterJob method.
	RegisterClusterJobFunc func(clusterRequest *api.Cluster) *errors.ServiceError

	// ScaleDownComputeNodesFunc mocks the ScaleDownComputeNodes method.
	ScaleDownComputeNodesFunc func(clusterID string, decrement int) (*v1.Cluster, *errors.ServiceError)

	// ScaleUpComputeNodesFunc mocks the ScaleUpComputeNodes method.
	ScaleUpComputeNodesFunc func(clusterID string, increment int) (*v1.Cluster, *errors.ServiceError)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(cluster api.Cluster, status api.ClusterStatus) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
		}
		// FindCluster holds details about calls to the FindCluster method.
		FindCluster []struct {
			// Criteria is the criteria argument value.
			Criteria FindClusterCriteria
		}
		// FindClusterByID holds details about calls to the FindClusterByID method.
		FindClusterByID []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetClusterDNS holds details about calls to the GetClusterDNS method.
		GetClusterDNS []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// ListByStatus holds details about calls to the ListByStatus method.
		ListByStatus []struct {
			// State is the state argument value.
			State api.ClusterStatus
		}
		// ListGroupByProviderAndRegion holds details about calls to the ListGroupByProviderAndRegion method.
		ListGroupByProviderAndRegion []struct {
			// Providers is the providers argument value.
			Providers []string
			// Regions is the regions argument value.
			Regions []string
			// Status is the status argument value.
			Status []string
		}
		// RegisterClusterJob holds details about calls to the RegisterClusterJob method.
		RegisterClusterJob []struct {
			// ClusterRequest is the clusterRequest argument value.
			ClusterRequest *api.Cluster
		}
		// ScaleDownComputeNodes holds details about calls to the ScaleDownComputeNodes method.
		ScaleDownComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// Decrement is the decrement argument value.
			Decrement int
		}
		// ScaleUpComputeNodes holds details about calls to the ScaleUpComputeNodes method.
		ScaleUpComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// Increment is the increment argument value.
			Increment int
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// Cluster is the cluster argument value.
			Cluster api.Cluster
			// Status is the status argument value.
			Status api.ClusterStatus
		}
	}
}

// Create calls CreateFunc.
func (mock *ClusterServiceMock) Create(cluster *api.Cluster) (*v1.Cluster, *errors.ServiceError) {
	if mock.CreateFunc == nil {
		panic("ClusterServiceMock.CreateFunc: method is nil but ClusterService.Create was just called")
	}
	callInfo := struct {
		Cluster *api.Cluster
	}{
		Cluster: cluster,
	}
	lockClusterServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockClusterServiceMockCreate.Unlock()
	return mock.CreateFunc(cluster)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterService.CreateCalls())
func (mock *ClusterServiceMock) CreateCalls() []struct {
	Cluster *api.Cluster
} {
	var calls []struct {
		Cluster *api.Cluster
	}
	lockClusterServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockClusterServiceMockCreate.RUnlock()
	return calls
}

// FindCluster calls FindClusterFunc.
func (mock *ClusterServiceMock) FindCluster(criteria FindClusterCriteria) (*api.Cluster, *errors.ServiceError) {
	if mock.FindClusterFunc == nil {
		panic("ClusterServiceMock.FindClusterFunc: method is nil but ClusterService.FindCluster was just called")
	}
	callInfo := struct {
		Criteria FindClusterCriteria
	}{
		Criteria: criteria,
	}
	lockClusterServiceMockFindCluster.Lock()
	mock.calls.FindCluster = append(mock.calls.FindCluster, callInfo)
	lockClusterServiceMockFindCluster.Unlock()
	return mock.FindClusterFunc(criteria)
}

// FindClusterCalls gets all the calls that were made to FindCluster.
// Check the length with:
//     len(mockedClusterService.FindClusterCalls())
func (mock *ClusterServiceMock) FindClusterCalls() []struct {
	Criteria FindClusterCriteria
} {
	var calls []struct {
		Criteria FindClusterCriteria
	}
	lockClusterServiceMockFindCluster.RLock()
	calls = mock.calls.FindCluster
	lockClusterServiceMockFindCluster.RUnlock()
	return calls
}

// FindClusterByID calls FindClusterByIDFunc.
func (mock *ClusterServiceMock) FindClusterByID(clusterID string) (*api.Cluster, *errors.ServiceError) {
	if mock.FindClusterByIDFunc == nil {
		panic("ClusterServiceMock.FindClusterByIDFunc: method is nil but ClusterService.FindClusterByID was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	lockClusterServiceMockFindClusterByID.Lock()
	mock.calls.FindClusterByID = append(mock.calls.FindClusterByID, callInfo)
	lockClusterServiceMockFindClusterByID.Unlock()
	return mock.FindClusterByIDFunc(clusterID)
}

// FindClusterByIDCalls gets all the calls that were made to FindClusterByID.
// Check the length with:
//     len(mockedClusterService.FindClusterByIDCalls())
func (mock *ClusterServiceMock) FindClusterByIDCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	lockClusterServiceMockFindClusterByID.RLock()
	calls = mock.calls.FindClusterByID
	lockClusterServiceMockFindClusterByID.RUnlock()
	return calls
}

// GetClusterDNS calls GetClusterDNSFunc.
func (mock *ClusterServiceMock) GetClusterDNS(clusterID string) (string, *errors.ServiceError) {
	if mock.GetClusterDNSFunc == nil {
		panic("ClusterServiceMock.GetClusterDNSFunc: method is nil but ClusterService.GetClusterDNS was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	lockClusterServiceMockGetClusterDNS.Lock()
	mock.calls.GetClusterDNS = append(mock.calls.GetClusterDNS, callInfo)
	lockClusterServiceMockGetClusterDNS.Unlock()
	return mock.GetClusterDNSFunc(clusterID)
}

// GetClusterDNSCalls gets all the calls that were made to GetClusterDNS.
// Check the length with:
//     len(mockedClusterService.GetClusterDNSCalls())
func (mock *ClusterServiceMock) GetClusterDNSCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	lockClusterServiceMockGetClusterDNS.RLock()
	calls = mock.calls.GetClusterDNS
	lockClusterServiceMockGetClusterDNS.RUnlock()
	return calls
}

// ListByStatus calls ListByStatusFunc.
func (mock *ClusterServiceMock) ListByStatus(state api.ClusterStatus) ([]api.Cluster, *errors.ServiceError) {
	if mock.ListByStatusFunc == nil {
		panic("ClusterServiceMock.ListByStatusFunc: method is nil but ClusterService.ListByStatus was just called")
	}
	callInfo := struct {
		State api.ClusterStatus
	}{
		State: state,
	}
	lockClusterServiceMockListByStatus.Lock()
	mock.calls.ListByStatus = append(mock.calls.ListByStatus, callInfo)
	lockClusterServiceMockListByStatus.Unlock()
	return mock.ListByStatusFunc(state)
}

// ListByStatusCalls gets all the calls that were made to ListByStatus.
// Check the length with:
//     len(mockedClusterService.ListByStatusCalls())
func (mock *ClusterServiceMock) ListByStatusCalls() []struct {
	State api.ClusterStatus
} {
	var calls []struct {
		State api.ClusterStatus
	}
	lockClusterServiceMockListByStatus.RLock()
	calls = mock.calls.ListByStatus
	lockClusterServiceMockListByStatus.RUnlock()
	return calls
}

// ListGroupByProviderAndRegion calls ListGroupByProviderAndRegionFunc.
func (mock *ClusterServiceMock) ListGroupByProviderAndRegion(providers []string, regions []string, status []string) ([]*ResGroupCPRegion, *errors.ServiceError) {
	if mock.ListGroupByProviderAndRegionFunc == nil {
		panic("ClusterServiceMock.ListGroupByProviderAndRegionFunc: method is nil but ClusterService.ListGroupByProviderAndRegion was just called")
	}
	callInfo := struct {
		Providers []string
		Regions   []string
		Status    []string
	}{
		Providers: providers,
		Regions:   regions,
		Status:    status,
	}
	lockClusterServiceMockListGroupByProviderAndRegion.Lock()
	mock.calls.ListGroupByProviderAndRegion = append(mock.calls.ListGroupByProviderAndRegion, callInfo)
	lockClusterServiceMockListGroupByProviderAndRegion.Unlock()
	return mock.ListGroupByProviderAndRegionFunc(providers, regions, status)
}

// ListGroupByProviderAndRegionCalls gets all the calls that were made to ListGroupByProviderAndRegion.
// Check the length with:
//     len(mockedClusterService.ListGroupByProviderAndRegionCalls())
func (mock *ClusterServiceMock) ListGroupByProviderAndRegionCalls() []struct {
	Providers []string
	Regions   []string
	Status    []string
} {
	var calls []struct {
		Providers []string
		Regions   []string
		Status    []string
	}
	lockClusterServiceMockListGroupByProviderAndRegion.RLock()
	calls = mock.calls.ListGroupByProviderAndRegion
	lockClusterServiceMockListGroupByProviderAndRegion.RUnlock()
	return calls
}

// RegisterClusterJob calls RegisterClusterJobFunc.
func (mock *ClusterServiceMock) RegisterClusterJob(clusterRequest *api.Cluster) *errors.ServiceError {
	if mock.RegisterClusterJobFunc == nil {
		panic("ClusterServiceMock.RegisterClusterJobFunc: method is nil but ClusterService.RegisterClusterJob was just called")
	}
	callInfo := struct {
		ClusterRequest *api.Cluster
	}{
		ClusterRequest: clusterRequest,
	}
	lockClusterServiceMockRegisterClusterJob.Lock()
	mock.calls.RegisterClusterJob = append(mock.calls.RegisterClusterJob, callInfo)
	lockClusterServiceMockRegisterClusterJob.Unlock()
	return mock.RegisterClusterJobFunc(clusterRequest)
}

// RegisterClusterJobCalls gets all the calls that were made to RegisterClusterJob.
// Check the length with:
//     len(mockedClusterService.RegisterClusterJobCalls())
func (mock *ClusterServiceMock) RegisterClusterJobCalls() []struct {
	ClusterRequest *api.Cluster
} {
	var calls []struct {
		ClusterRequest *api.Cluster
	}
	lockClusterServiceMockRegisterClusterJob.RLock()
	calls = mock.calls.RegisterClusterJob
	lockClusterServiceMockRegisterClusterJob.RUnlock()
	return calls
}

// ScaleDownComputeNodes calls ScaleDownComputeNodesFunc.
func (mock *ClusterServiceMock) ScaleDownComputeNodes(clusterID string, decrement int) (*v1.Cluster, *errors.ServiceError) {
	if mock.ScaleDownComputeNodesFunc == nil {
		panic("ClusterServiceMock.ScaleDownComputeNodesFunc: method is nil but ClusterService.ScaleDownComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
		Decrement int
	}{
		ClusterID: clusterID,
		Decrement: decrement,
	}
	lockClusterServiceMockScaleDownComputeNodes.Lock()
	mock.calls.ScaleDownComputeNodes = append(mock.calls.ScaleDownComputeNodes, callInfo)
	lockClusterServiceMockScaleDownComputeNodes.Unlock()
	return mock.ScaleDownComputeNodesFunc(clusterID, decrement)
}

// ScaleDownComputeNodesCalls gets all the calls that were made to ScaleDownComputeNodes.
// Check the length with:
//     len(mockedClusterService.ScaleDownComputeNodesCalls())
func (mock *ClusterServiceMock) ScaleDownComputeNodesCalls() []struct {
	ClusterID string
	Decrement int
} {
	var calls []struct {
		ClusterID string
		Decrement int
	}
	lockClusterServiceMockScaleDownComputeNodes.RLock()
	calls = mock.calls.ScaleDownComputeNodes
	lockClusterServiceMockScaleDownComputeNodes.RUnlock()
	return calls
}

// ScaleUpComputeNodes calls ScaleUpComputeNodesFunc.
func (mock *ClusterServiceMock) ScaleUpComputeNodes(clusterID string, increment int) (*v1.Cluster, *errors.ServiceError) {
	if mock.ScaleUpComputeNodesFunc == nil {
		panic("ClusterServiceMock.ScaleUpComputeNodesFunc: method is nil but ClusterService.ScaleUpComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
		Increment int
	}{
		ClusterID: clusterID,
		Increment: increment,
	}
	lockClusterServiceMockScaleUpComputeNodes.Lock()
	mock.calls.ScaleUpComputeNodes = append(mock.calls.ScaleUpComputeNodes, callInfo)
	lockClusterServiceMockScaleUpComputeNodes.Unlock()
	return mock.ScaleUpComputeNodesFunc(clusterID, increment)
}

// ScaleUpComputeNodesCalls gets all the calls that were made to ScaleUpComputeNodes.
// Check the length with:
//     len(mockedClusterService.ScaleUpComputeNodesCalls())
func (mock *ClusterServiceMock) ScaleUpComputeNodesCalls() []struct {
	ClusterID string
	Increment int
} {
	var calls []struct {
		ClusterID string
		Increment int
	}
	lockClusterServiceMockScaleUpComputeNodes.RLock()
	calls = mock.calls.ScaleUpComputeNodes
	lockClusterServiceMockScaleUpComputeNodes.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *ClusterServiceMock) UpdateStatus(cluster api.Cluster, status api.ClusterStatus) error {
	if mock.UpdateStatusFunc == nil {
		panic("ClusterServiceMock.UpdateStatusFunc: method is nil but ClusterService.UpdateStatus was just called")
	}
	callInfo := struct {
		Cluster api.Cluster
		Status  api.ClusterStatus
	}{
		Cluster: cluster,
		Status:  status,
	}
	lockClusterServiceMockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	lockClusterServiceMockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(cluster, status)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedClusterService.UpdateStatusCalls())
func (mock *ClusterServiceMock) UpdateStatusCalls() []struct {
	Cluster api.Cluster
	Status  api.ClusterStatus
} {
	var calls []struct {
		Cluster api.Cluster
		Status  api.ClusterStatus
	}
	lockClusterServiceMockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	lockClusterServiceMockUpdateStatus.RUnlock()
	return calls
}
