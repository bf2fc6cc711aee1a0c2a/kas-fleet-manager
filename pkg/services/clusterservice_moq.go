// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"sync"

	v1 "github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
	"gitlab.cee.redhat.com/service/managed-services-api/pkg/api"
	"gitlab.cee.redhat.com/service/managed-services-api/pkg/errors"
)

// Ensure, that ClusterServiceMock does implement ClusterService.
// If this is not the case, regenerate this file with moq.
var _ ClusterService = &ClusterServiceMock{}

// ClusterServiceMock is a mock implementation of ClusterService.
//
//     func TestSomethingThatUsesClusterService(t *testing.T) {
//
//         // make and configure a mocked ClusterService
//         mockedClusterService := &ClusterServiceMock{
//             CreateFunc: func(cluster *api.Cluster) (*v1.Cluster, *errors.ServiceError) {
// 	               panic("mock out the Create method")
//             },
//             FindClusterFunc: func(criteria FindClusterCriteria) (*api.Cluster, *errors.ServiceError) {
// 	               panic("mock out the FindCluster method")
//             },
//             FindClusterByIDFunc: func(clusterID string) (api.Cluster, *errors.ServiceError) {
// 	               panic("mock out the FindClusterByID method")
//             },
//             GetClusterDNSFunc: func(clusterID string) (string, *errors.ServiceError) {
// 	               panic("mock out the GetClusterDNS method")
//             },
//             ListByStatusFunc: func(state api.ClusterStatus) ([]api.Cluster, *errors.ServiceError) {
// 	               panic("mock out the ListByStatus method")
//             },
//             ScaleDownComputeNodesFunc: func(clusterID string) (*v1.Cluster, *errors.ServiceError) {
// 	               panic("mock out the ScaleDownComputeNodes method")
//             },
//             ScaleUpComputeNodesFunc: func(clusterID string) (*v1.Cluster, *errors.ServiceError) {
// 	               panic("mock out the ScaleUpComputeNodes method")
//             },
//             UpdateStatusFunc: func(id string, status api.ClusterStatus) error {
// 	               panic("mock out the UpdateStatus method")
//             },
//         }
//
//         // use mockedClusterService in code that requires ClusterService
//         // and then make assertions.
//
//     }
type ClusterServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(cluster *api.Cluster) (*v1.Cluster, *errors.ServiceError)

	// FindClusterFunc mocks the FindCluster method.
	FindClusterFunc func(criteria FindClusterCriteria) (*api.Cluster, *errors.ServiceError)

	// FindClusterByIDFunc mocks the FindClusterByID method.
	FindClusterByIDFunc func(clusterID string) (api.Cluster, *errors.ServiceError)

	// GetClusterDNSFunc mocks the GetClusterDNS method.
	GetClusterDNSFunc func(clusterID string) (string, *errors.ServiceError)

	// ListByStatusFunc mocks the ListByStatus method.
	ListByStatusFunc func(state api.ClusterStatus) ([]api.Cluster, *errors.ServiceError)

	// ScaleDownComputeNodesFunc mocks the ScaleDownComputeNodes method.
	ScaleDownComputeNodesFunc func(clusterID string) (*v1.Cluster, *errors.ServiceError)

	// ScaleUpComputeNodesFunc mocks the ScaleUpComputeNodes method.
	ScaleUpComputeNodesFunc func(clusterID string) (*v1.Cluster, *errors.ServiceError)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(id string, status api.ClusterStatus) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Cluster is the cluster argument value.
			Cluster *api.Cluster
		}
		// FindCluster holds details about calls to the FindCluster method.
		FindCluster []struct {
			// Criteria is the criteria argument value.
			Criteria FindClusterCriteria
		}
		// FindClusterByID holds details about calls to the FindClusterByID method.
		FindClusterByID []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetClusterDNS holds details about calls to the GetClusterDNS method.
		GetClusterDNS []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// ListByStatus holds details about calls to the ListByStatus method.
		ListByStatus []struct {
			// State is the state argument value.
			State api.ClusterStatus
		}
		// ScaleDownComputeNodes holds details about calls to the ScaleDownComputeNodes method.
		ScaleDownComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// ScaleUpComputeNodes holds details about calls to the ScaleUpComputeNodes method.
		ScaleUpComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// ID is the id argument value.
			ID string
			// Status is the status argument value.
			Status api.ClusterStatus
		}
	}
	lockCreate                sync.RWMutex
	lockFindCluster           sync.RWMutex
	lockFindClusterByID       sync.RWMutex
	lockGetClusterDNS         sync.RWMutex
	lockListByStatus          sync.RWMutex
	lockScaleDownComputeNodes sync.RWMutex
	lockScaleUpComputeNodes   sync.RWMutex
	lockUpdateStatus          sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ClusterServiceMock) Create(cluster *api.Cluster) (*v1.Cluster, *errors.ServiceError) {
	if mock.CreateFunc == nil {
		panic("ClusterServiceMock.CreateFunc: method is nil but ClusterService.Create was just called")
	}
	callInfo := struct {
		Cluster *api.Cluster
	}{
		Cluster: cluster,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(cluster)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedClusterService.CreateCalls())
func (mock *ClusterServiceMock) CreateCalls() []struct {
	Cluster *api.Cluster
} {
	var calls []struct {
		Cluster *api.Cluster
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// FindCluster calls FindClusterFunc.
func (mock *ClusterServiceMock) FindCluster(criteria FindClusterCriteria) (*api.Cluster, *errors.ServiceError) {
	if mock.FindClusterFunc == nil {
		panic("ClusterServiceMock.FindClusterFunc: method is nil but ClusterService.FindCluster was just called")
	}
	callInfo := struct {
		Criteria FindClusterCriteria
	}{
		Criteria: criteria,
	}
	mock.lockFindCluster.Lock()
	mock.calls.FindCluster = append(mock.calls.FindCluster, callInfo)
	mock.lockFindCluster.Unlock()
	return mock.FindClusterFunc(criteria)
}

// FindClusterCalls gets all the calls that were made to FindCluster.
// Check the length with:
//     len(mockedClusterService.FindClusterCalls())
func (mock *ClusterServiceMock) FindClusterCalls() []struct {
	Criteria FindClusterCriteria
} {
	var calls []struct {
		Criteria FindClusterCriteria
	}
	mock.lockFindCluster.RLock()
	calls = mock.calls.FindCluster
	mock.lockFindCluster.RUnlock()
	return calls
}

// FindClusterByID calls FindClusterByIDFunc.
func (mock *ClusterServiceMock) FindClusterByID(clusterID string) (api.Cluster, *errors.ServiceError) {
	if mock.FindClusterByIDFunc == nil {
		panic("ClusterServiceMock.FindClusterByIDFunc: method is nil but ClusterService.FindClusterByID was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockFindClusterByID.Lock()
	mock.calls.FindClusterByID = append(mock.calls.FindClusterByID, callInfo)
	mock.lockFindClusterByID.Unlock()
	return mock.FindClusterByIDFunc(clusterID)
}

// FindClusterByIDCalls gets all the calls that were made to FindClusterByID.
// Check the length with:
//     len(mockedClusterService.FindClusterByIDCalls())
func (mock *ClusterServiceMock) FindClusterByIDCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockFindClusterByID.RLock()
	calls = mock.calls.FindClusterByID
	mock.lockFindClusterByID.RUnlock()
	return calls
}

// GetClusterDNS calls GetClusterDNSFunc.
func (mock *ClusterServiceMock) GetClusterDNS(clusterID string) (string, *errors.ServiceError) {
	if mock.GetClusterDNSFunc == nil {
		panic("ClusterServiceMock.GetClusterDNSFunc: method is nil but ClusterService.GetClusterDNS was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetClusterDNS.Lock()
	mock.calls.GetClusterDNS = append(mock.calls.GetClusterDNS, callInfo)
	mock.lockGetClusterDNS.Unlock()
	return mock.GetClusterDNSFunc(clusterID)
}

// GetClusterDNSCalls gets all the calls that were made to GetClusterDNS.
// Check the length with:
//     len(mockedClusterService.GetClusterDNSCalls())
func (mock *ClusterServiceMock) GetClusterDNSCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetClusterDNS.RLock()
	calls = mock.calls.GetClusterDNS
	mock.lockGetClusterDNS.RUnlock()
	return calls
}

// ListByStatus calls ListByStatusFunc.
func (mock *ClusterServiceMock) ListByStatus(state api.ClusterStatus) ([]api.Cluster, *errors.ServiceError) {
	if mock.ListByStatusFunc == nil {
		panic("ClusterServiceMock.ListByStatusFunc: method is nil but ClusterService.ListByStatus was just called")
	}
	callInfo := struct {
		State api.ClusterStatus
	}{
		State: state,
	}
	mock.lockListByStatus.Lock()
	mock.calls.ListByStatus = append(mock.calls.ListByStatus, callInfo)
	mock.lockListByStatus.Unlock()
	return mock.ListByStatusFunc(state)
}

// ListByStatusCalls gets all the calls that were made to ListByStatus.
// Check the length with:
//     len(mockedClusterService.ListByStatusCalls())
func (mock *ClusterServiceMock) ListByStatusCalls() []struct {
	State api.ClusterStatus
} {
	var calls []struct {
		State api.ClusterStatus
	}
	mock.lockListByStatus.RLock()
	calls = mock.calls.ListByStatus
	mock.lockListByStatus.RUnlock()
	return calls
}

// ScaleDownComputeNodes calls ScaleDownComputeNodesFunc.
func (mock *ClusterServiceMock) ScaleDownComputeNodes(clusterID string) (*v1.Cluster, *errors.ServiceError) {
	if mock.ScaleDownComputeNodesFunc == nil {
		panic("ClusterServiceMock.ScaleDownComputeNodesFunc: method is nil but ClusterService.ScaleDownComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockScaleDownComputeNodes.Lock()
	mock.calls.ScaleDownComputeNodes = append(mock.calls.ScaleDownComputeNodes, callInfo)
	mock.lockScaleDownComputeNodes.Unlock()
	return mock.ScaleDownComputeNodesFunc(clusterID)
}

// ScaleDownComputeNodesCalls gets all the calls that were made to ScaleDownComputeNodes.
// Check the length with:
//     len(mockedClusterService.ScaleDownComputeNodesCalls())
func (mock *ClusterServiceMock) ScaleDownComputeNodesCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockScaleDownComputeNodes.RLock()
	calls = mock.calls.ScaleDownComputeNodes
	mock.lockScaleDownComputeNodes.RUnlock()
	return calls
}

// ScaleUpComputeNodes calls ScaleUpComputeNodesFunc.
func (mock *ClusterServiceMock) ScaleUpComputeNodes(clusterID string) (*v1.Cluster, *errors.ServiceError) {
	if mock.ScaleUpComputeNodesFunc == nil {
		panic("ClusterServiceMock.ScaleUpComputeNodesFunc: method is nil but ClusterService.ScaleUpComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockScaleUpComputeNodes.Lock()
	mock.calls.ScaleUpComputeNodes = append(mock.calls.ScaleUpComputeNodes, callInfo)
	mock.lockScaleUpComputeNodes.Unlock()
	return mock.ScaleUpComputeNodesFunc(clusterID)
}

// ScaleUpComputeNodesCalls gets all the calls that were made to ScaleUpComputeNodes.
// Check the length with:
//     len(mockedClusterService.ScaleUpComputeNodesCalls())
func (mock *ClusterServiceMock) ScaleUpComputeNodesCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockScaleUpComputeNodes.RLock()
	calls = mock.calls.ScaleUpComputeNodes
	mock.lockScaleUpComputeNodes.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *ClusterServiceMock) UpdateStatus(id string, status api.ClusterStatus) error {
	if mock.UpdateStatusFunc == nil {
		panic("ClusterServiceMock.UpdateStatusFunc: method is nil but ClusterService.UpdateStatus was just called")
	}
	callInfo := struct {
		ID     string
		Status api.ClusterStatus
	}{
		ID:     id,
		Status: status,
	}
	mock.lockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	mock.lockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(id, status)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedClusterService.UpdateStatusCalls())
func (mock *ClusterServiceMock) UpdateStatusCalls() []struct {
	ID     string
	Status api.ClusterStatus
} {
	var calls []struct {
		ID     string
		Status api.ClusterStatus
	}
	mock.lockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	mock.lockUpdateStatus.RUnlock()
	return calls
}
