// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sso

import (
	"context"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/api"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/client/keycloak"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/errors"
	"sync"
)

// Ensure, that keycloakServiceInternalMock does implement keycloakServiceInternal.
// If this is not the case, regenerate this file with moq.
var _ keycloakServiceInternal = &keycloakServiceInternalMock{}

// keycloakServiceInternalMock is a mock implementation of keycloakServiceInternal.
//
//	func TestSomethingThatUseskeycloakServiceInternal(t *testing.T) {
//
//		// make and configure a mocked keycloakServiceInternal
//		mockedkeycloakServiceInternal := &keycloakServiceInternalMock{
//			CreateServiceAccountFunc: func(accessToken string, serviceAccountRequest *api.ServiceAccountRequest, ctx context.Context) (*api.ServiceAccount, *errors.ServiceError) {
//				panic("mock out the CreateServiceAccount method")
//			},
//			CreateServiceAccountInternalFunc: func(accessToken string, request CompleteServiceAccountRequest) (*api.ServiceAccount, *errors.ServiceError) {
//				panic("mock out the CreateServiceAccountInternal method")
//			},
//			DeRegisterClientInSSOFunc: func(accessToken string, kafkaNamespace string) *errors.ServiceError {
//				panic("mock out the DeRegisterClientInSSO method")
//			},
//			DeRegisterConnectorFleetshardOperatorServiceAccountFunc: func(accessToken string, agentClusterId string) *errors.ServiceError {
//				panic("mock out the DeRegisterConnectorFleetshardOperatorServiceAccount method")
//			},
//			DeRegisterKasFleetshardOperatorServiceAccountFunc: func(accessToken string, agentClusterId string) *errors.ServiceError {
//				panic("mock out the DeRegisterKasFleetshardOperatorServiceAccount method")
//			},
//			DeleteServiceAccountFunc: func(accessToken string, ctx context.Context, clientId string) *errors.ServiceError {
//				panic("mock out the DeleteServiceAccount method")
//			},
//			DeleteServiceAccountInternalFunc: func(accessToken string, clientId string) *errors.ServiceError {
//				panic("mock out the DeleteServiceAccountInternal method")
//			},
//			GetConfigFunc: func() *keycloak.KeycloakConfig {
//				panic("mock out the GetConfig method")
//			},
//			GetKafkaClientSecretFunc: func(accessToken string, clientId string) (string, *errors.ServiceError) {
//				panic("mock out the GetKafkaClientSecret method")
//			},
//			GetRealmConfigFunc: func() *keycloak.KeycloakRealmConfig {
//				panic("mock out the GetRealmConfig method")
//			},
//			GetServiceAccountByClientIdFunc: func(accessToken string, ctx context.Context, clientId string) (*api.ServiceAccount, *errors.ServiceError) {
//				panic("mock out the GetServiceAccountByClientId method")
//			},
//			GetServiceAccountByIdFunc: func(accessToken string, ctx context.Context, id string) (*api.ServiceAccount, *errors.ServiceError) {
//				panic("mock out the GetServiceAccountById method")
//			},
//			IsKafkaClientExistFunc: func(accessToken string, clientId string) *errors.ServiceError {
//				panic("mock out the IsKafkaClientExist method")
//			},
//			ListServiceAccFunc: func(accessToken string, ctx context.Context, first int, max int) ([]api.ServiceAccount, *errors.ServiceError) {
//				panic("mock out the ListServiceAcc method")
//			},
//			RegisterClientInSSOFunc: func(accessToken string, clusterId string, clusterOathCallbackURI string) (string, *errors.ServiceError) {
//				panic("mock out the RegisterClientInSSO method")
//			},
//			RegisterConnectorFleetshardOperatorServiceAccountFunc: func(accessToken string, agentClusterId string) (*api.ServiceAccount, *errors.ServiceError) {
//				panic("mock out the RegisterConnectorFleetshardOperatorServiceAccount method")
//			},
//			RegisterKasFleetshardOperatorServiceAccountFunc: func(accessToken string, agentClusterId string) (*api.ServiceAccount, *errors.ServiceError) {
//				panic("mock out the RegisterKasFleetshardOperatorServiceAccount method")
//			},
//			ResetServiceAccountCredentialsFunc: func(accessToken string, ctx context.Context, clientId string) (*api.ServiceAccount, *errors.ServiceError) {
//				panic("mock out the ResetServiceAccountCredentials method")
//			},
//		}
//
//		// use mockedkeycloakServiceInternal in code that requires keycloakServiceInternal
//		// and then make assertions.
//
//	}
type keycloakServiceInternalMock struct {
	// CreateServiceAccountFunc mocks the CreateServiceAccount method.
	CreateServiceAccountFunc func(accessToken string, serviceAccountRequest *api.ServiceAccountRequest, ctx context.Context) (*api.ServiceAccount, *errors.ServiceError)

	// CreateServiceAccountInternalFunc mocks the CreateServiceAccountInternal method.
	CreateServiceAccountInternalFunc func(accessToken string, request CompleteServiceAccountRequest) (*api.ServiceAccount, *errors.ServiceError)

	// DeRegisterClientInSSOFunc mocks the DeRegisterClientInSSO method.
	DeRegisterClientInSSOFunc func(accessToken string, kafkaNamespace string) *errors.ServiceError

	// DeRegisterConnectorFleetshardOperatorServiceAccountFunc mocks the DeRegisterConnectorFleetshardOperatorServiceAccount method.
	DeRegisterConnectorFleetshardOperatorServiceAccountFunc func(accessToken string, agentClusterId string) *errors.ServiceError

	// DeRegisterKasFleetshardOperatorServiceAccountFunc mocks the DeRegisterKasFleetshardOperatorServiceAccount method.
	DeRegisterKasFleetshardOperatorServiceAccountFunc func(accessToken string, agentClusterId string) *errors.ServiceError

	// DeleteServiceAccountFunc mocks the DeleteServiceAccount method.
	DeleteServiceAccountFunc func(accessToken string, ctx context.Context, clientId string) *errors.ServiceError

	// DeleteServiceAccountInternalFunc mocks the DeleteServiceAccountInternal method.
	DeleteServiceAccountInternalFunc func(accessToken string, clientId string) *errors.ServiceError

	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func() *keycloak.KeycloakConfig

	// GetKafkaClientSecretFunc mocks the GetKafkaClientSecret method.
	GetKafkaClientSecretFunc func(accessToken string, clientId string) (string, *errors.ServiceError)

	// GetRealmConfigFunc mocks the GetRealmConfig method.
	GetRealmConfigFunc func() *keycloak.KeycloakRealmConfig

	// GetServiceAccountByClientIdFunc mocks the GetServiceAccountByClientId method.
	GetServiceAccountByClientIdFunc func(accessToken string, ctx context.Context, clientId string) (*api.ServiceAccount, *errors.ServiceError)

	// GetServiceAccountByIdFunc mocks the GetServiceAccountById method.
	GetServiceAccountByIdFunc func(accessToken string, ctx context.Context, id string) (*api.ServiceAccount, *errors.ServiceError)

	// IsKafkaClientExistFunc mocks the IsKafkaClientExist method.
	IsKafkaClientExistFunc func(accessToken string, clientId string) *errors.ServiceError

	// ListServiceAccFunc mocks the ListServiceAcc method.
	ListServiceAccFunc func(accessToken string, ctx context.Context, first int, max int) ([]api.ServiceAccount, *errors.ServiceError)

	// RegisterClientInSSOFunc mocks the RegisterClientInSSO method.
	RegisterClientInSSOFunc func(accessToken string, clusterId string, clusterOathCallbackURI string) (string, *errors.ServiceError)

	// RegisterConnectorFleetshardOperatorServiceAccountFunc mocks the RegisterConnectorFleetshardOperatorServiceAccount method.
	RegisterConnectorFleetshardOperatorServiceAccountFunc func(accessToken string, agentClusterId string) (*api.ServiceAccount, *errors.ServiceError)

	// RegisterKasFleetshardOperatorServiceAccountFunc mocks the RegisterKasFleetshardOperatorServiceAccount method.
	RegisterKasFleetshardOperatorServiceAccountFunc func(accessToken string, agentClusterId string) (*api.ServiceAccount, *errors.ServiceError)

	// ResetServiceAccountCredentialsFunc mocks the ResetServiceAccountCredentials method.
	ResetServiceAccountCredentialsFunc func(accessToken string, ctx context.Context, clientId string) (*api.ServiceAccount, *errors.ServiceError)

	// calls tracks calls to the methods.
	calls struct {
		// CreateServiceAccount holds details about calls to the CreateServiceAccount method.
		CreateServiceAccount []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// ServiceAccountRequest is the serviceAccountRequest argument value.
			ServiceAccountRequest *api.ServiceAccountRequest
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// CreateServiceAccountInternal holds details about calls to the CreateServiceAccountInternal method.
		CreateServiceAccountInternal []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Request is the request argument value.
			Request CompleteServiceAccountRequest
		}
		// DeRegisterClientInSSO holds details about calls to the DeRegisterClientInSSO method.
		DeRegisterClientInSSO []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// KafkaNamespace is the kafkaNamespace argument value.
			KafkaNamespace string
		}
		// DeRegisterConnectorFleetshardOperatorServiceAccount holds details about calls to the DeRegisterConnectorFleetshardOperatorServiceAccount method.
		DeRegisterConnectorFleetshardOperatorServiceAccount []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// AgentClusterId is the agentClusterId argument value.
			AgentClusterId string
		}
		// DeRegisterKasFleetshardOperatorServiceAccount holds details about calls to the DeRegisterKasFleetshardOperatorServiceAccount method.
		DeRegisterKasFleetshardOperatorServiceAccount []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// AgentClusterId is the agentClusterId argument value.
			AgentClusterId string
		}
		// DeleteServiceAccount holds details about calls to the DeleteServiceAccount method.
		DeleteServiceAccount []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClientId is the clientId argument value.
			ClientId string
		}
		// DeleteServiceAccountInternal holds details about calls to the DeleteServiceAccountInternal method.
		DeleteServiceAccountInternal []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// ClientId is the clientId argument value.
			ClientId string
		}
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
		}
		// GetKafkaClientSecret holds details about calls to the GetKafkaClientSecret method.
		GetKafkaClientSecret []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// ClientId is the clientId argument value.
			ClientId string
		}
		// GetRealmConfig holds details about calls to the GetRealmConfig method.
		GetRealmConfig []struct {
		}
		// GetServiceAccountByClientId holds details about calls to the GetServiceAccountByClientId method.
		GetServiceAccountByClientId []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClientId is the clientId argument value.
			ClientId string
		}
		// GetServiceAccountById holds details about calls to the GetServiceAccountById method.
		GetServiceAccountById []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// IsKafkaClientExist holds details about calls to the IsKafkaClientExist method.
		IsKafkaClientExist []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// ClientId is the clientId argument value.
			ClientId string
		}
		// ListServiceAcc holds details about calls to the ListServiceAcc method.
		ListServiceAcc []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// First is the first argument value.
			First int
			// Max is the max argument value.
			Max int
		}
		// RegisterClientInSSO holds details about calls to the RegisterClientInSSO method.
		RegisterClientInSSO []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// ClusterId is the clusterId argument value.
			ClusterId string
			// ClusterOathCallbackURI is the clusterOathCallbackURI argument value.
			ClusterOathCallbackURI string
		}
		// RegisterConnectorFleetshardOperatorServiceAccount holds details about calls to the RegisterConnectorFleetshardOperatorServiceAccount method.
		RegisterConnectorFleetshardOperatorServiceAccount []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// AgentClusterId is the agentClusterId argument value.
			AgentClusterId string
		}
		// RegisterKasFleetshardOperatorServiceAccount holds details about calls to the RegisterKasFleetshardOperatorServiceAccount method.
		RegisterKasFleetshardOperatorServiceAccount []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// AgentClusterId is the agentClusterId argument value.
			AgentClusterId string
		}
		// ResetServiceAccountCredentials holds details about calls to the ResetServiceAccountCredentials method.
		ResetServiceAccountCredentials []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClientId is the clientId argument value.
			ClientId string
		}
	}
	lockCreateServiceAccount                                sync.RWMutex
	lockCreateServiceAccountInternal                        sync.RWMutex
	lockDeRegisterClientInSSO                               sync.RWMutex
	lockDeRegisterConnectorFleetshardOperatorServiceAccount sync.RWMutex
	lockDeRegisterKasFleetshardOperatorServiceAccount       sync.RWMutex
	lockDeleteServiceAccount                                sync.RWMutex
	lockDeleteServiceAccountInternal                        sync.RWMutex
	lockGetConfig                                           sync.RWMutex
	lockGetKafkaClientSecret                                sync.RWMutex
	lockGetRealmConfig                                      sync.RWMutex
	lockGetServiceAccountByClientId                         sync.RWMutex
	lockGetServiceAccountById                               sync.RWMutex
	lockIsKafkaClientExist                                  sync.RWMutex
	lockListServiceAcc                                      sync.RWMutex
	lockRegisterClientInSSO                                 sync.RWMutex
	lockRegisterConnectorFleetshardOperatorServiceAccount   sync.RWMutex
	lockRegisterKasFleetshardOperatorServiceAccount         sync.RWMutex
	lockResetServiceAccountCredentials                      sync.RWMutex
}

// CreateServiceAccount calls CreateServiceAccountFunc.
func (mock *keycloakServiceInternalMock) CreateServiceAccount(accessToken string, serviceAccountRequest *api.ServiceAccountRequest, ctx context.Context) (*api.ServiceAccount, *errors.ServiceError) {
	if mock.CreateServiceAccountFunc == nil {
		panic("keycloakServiceInternalMock.CreateServiceAccountFunc: method is nil but keycloakServiceInternal.CreateServiceAccount was just called")
	}
	callInfo := struct {
		AccessToken           string
		ServiceAccountRequest *api.ServiceAccountRequest
		Ctx                   context.Context
	}{
		AccessToken:           accessToken,
		ServiceAccountRequest: serviceAccountRequest,
		Ctx:                   ctx,
	}
	mock.lockCreateServiceAccount.Lock()
	mock.calls.CreateServiceAccount = append(mock.calls.CreateServiceAccount, callInfo)
	mock.lockCreateServiceAccount.Unlock()
	return mock.CreateServiceAccountFunc(accessToken, serviceAccountRequest, ctx)
}

// CreateServiceAccountCalls gets all the calls that were made to CreateServiceAccount.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.CreateServiceAccountCalls())
func (mock *keycloakServiceInternalMock) CreateServiceAccountCalls() []struct {
	AccessToken           string
	ServiceAccountRequest *api.ServiceAccountRequest
	Ctx                   context.Context
} {
	var calls []struct {
		AccessToken           string
		ServiceAccountRequest *api.ServiceAccountRequest
		Ctx                   context.Context
	}
	mock.lockCreateServiceAccount.RLock()
	calls = mock.calls.CreateServiceAccount
	mock.lockCreateServiceAccount.RUnlock()
	return calls
}

// CreateServiceAccountInternal calls CreateServiceAccountInternalFunc.
func (mock *keycloakServiceInternalMock) CreateServiceAccountInternal(accessToken string, request CompleteServiceAccountRequest) (*api.ServiceAccount, *errors.ServiceError) {
	if mock.CreateServiceAccountInternalFunc == nil {
		panic("keycloakServiceInternalMock.CreateServiceAccountInternalFunc: method is nil but keycloakServiceInternal.CreateServiceAccountInternal was just called")
	}
	callInfo := struct {
		AccessToken string
		Request     CompleteServiceAccountRequest
	}{
		AccessToken: accessToken,
		Request:     request,
	}
	mock.lockCreateServiceAccountInternal.Lock()
	mock.calls.CreateServiceAccountInternal = append(mock.calls.CreateServiceAccountInternal, callInfo)
	mock.lockCreateServiceAccountInternal.Unlock()
	return mock.CreateServiceAccountInternalFunc(accessToken, request)
}

// CreateServiceAccountInternalCalls gets all the calls that were made to CreateServiceAccountInternal.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.CreateServiceAccountInternalCalls())
func (mock *keycloakServiceInternalMock) CreateServiceAccountInternalCalls() []struct {
	AccessToken string
	Request     CompleteServiceAccountRequest
} {
	var calls []struct {
		AccessToken string
		Request     CompleteServiceAccountRequest
	}
	mock.lockCreateServiceAccountInternal.RLock()
	calls = mock.calls.CreateServiceAccountInternal
	mock.lockCreateServiceAccountInternal.RUnlock()
	return calls
}

// DeRegisterClientInSSO calls DeRegisterClientInSSOFunc.
func (mock *keycloakServiceInternalMock) DeRegisterClientInSSO(accessToken string, kafkaNamespace string) *errors.ServiceError {
	if mock.DeRegisterClientInSSOFunc == nil {
		panic("keycloakServiceInternalMock.DeRegisterClientInSSOFunc: method is nil but keycloakServiceInternal.DeRegisterClientInSSO was just called")
	}
	callInfo := struct {
		AccessToken    string
		KafkaNamespace string
	}{
		AccessToken:    accessToken,
		KafkaNamespace: kafkaNamespace,
	}
	mock.lockDeRegisterClientInSSO.Lock()
	mock.calls.DeRegisterClientInSSO = append(mock.calls.DeRegisterClientInSSO, callInfo)
	mock.lockDeRegisterClientInSSO.Unlock()
	return mock.DeRegisterClientInSSOFunc(accessToken, kafkaNamespace)
}

// DeRegisterClientInSSOCalls gets all the calls that were made to DeRegisterClientInSSO.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.DeRegisterClientInSSOCalls())
func (mock *keycloakServiceInternalMock) DeRegisterClientInSSOCalls() []struct {
	AccessToken    string
	KafkaNamespace string
} {
	var calls []struct {
		AccessToken    string
		KafkaNamespace string
	}
	mock.lockDeRegisterClientInSSO.RLock()
	calls = mock.calls.DeRegisterClientInSSO
	mock.lockDeRegisterClientInSSO.RUnlock()
	return calls
}

// DeRegisterConnectorFleetshardOperatorServiceAccount calls DeRegisterConnectorFleetshardOperatorServiceAccountFunc.
func (mock *keycloakServiceInternalMock) DeRegisterConnectorFleetshardOperatorServiceAccount(accessToken string, agentClusterId string) *errors.ServiceError {
	if mock.DeRegisterConnectorFleetshardOperatorServiceAccountFunc == nil {
		panic("keycloakServiceInternalMock.DeRegisterConnectorFleetshardOperatorServiceAccountFunc: method is nil but keycloakServiceInternal.DeRegisterConnectorFleetshardOperatorServiceAccount was just called")
	}
	callInfo := struct {
		AccessToken    string
		AgentClusterId string
	}{
		AccessToken:    accessToken,
		AgentClusterId: agentClusterId,
	}
	mock.lockDeRegisterConnectorFleetshardOperatorServiceAccount.Lock()
	mock.calls.DeRegisterConnectorFleetshardOperatorServiceAccount = append(mock.calls.DeRegisterConnectorFleetshardOperatorServiceAccount, callInfo)
	mock.lockDeRegisterConnectorFleetshardOperatorServiceAccount.Unlock()
	return mock.DeRegisterConnectorFleetshardOperatorServiceAccountFunc(accessToken, agentClusterId)
}

// DeRegisterConnectorFleetshardOperatorServiceAccountCalls gets all the calls that were made to DeRegisterConnectorFleetshardOperatorServiceAccount.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.DeRegisterConnectorFleetshardOperatorServiceAccountCalls())
func (mock *keycloakServiceInternalMock) DeRegisterConnectorFleetshardOperatorServiceAccountCalls() []struct {
	AccessToken    string
	AgentClusterId string
} {
	var calls []struct {
		AccessToken    string
		AgentClusterId string
	}
	mock.lockDeRegisterConnectorFleetshardOperatorServiceAccount.RLock()
	calls = mock.calls.DeRegisterConnectorFleetshardOperatorServiceAccount
	mock.lockDeRegisterConnectorFleetshardOperatorServiceAccount.RUnlock()
	return calls
}

// DeRegisterKasFleetshardOperatorServiceAccount calls DeRegisterKasFleetshardOperatorServiceAccountFunc.
func (mock *keycloakServiceInternalMock) DeRegisterKasFleetshardOperatorServiceAccount(accessToken string, agentClusterId string) *errors.ServiceError {
	if mock.DeRegisterKasFleetshardOperatorServiceAccountFunc == nil {
		panic("keycloakServiceInternalMock.DeRegisterKasFleetshardOperatorServiceAccountFunc: method is nil but keycloakServiceInternal.DeRegisterKasFleetshardOperatorServiceAccount was just called")
	}
	callInfo := struct {
		AccessToken    string
		AgentClusterId string
	}{
		AccessToken:    accessToken,
		AgentClusterId: agentClusterId,
	}
	mock.lockDeRegisterKasFleetshardOperatorServiceAccount.Lock()
	mock.calls.DeRegisterKasFleetshardOperatorServiceAccount = append(mock.calls.DeRegisterKasFleetshardOperatorServiceAccount, callInfo)
	mock.lockDeRegisterKasFleetshardOperatorServiceAccount.Unlock()
	return mock.DeRegisterKasFleetshardOperatorServiceAccountFunc(accessToken, agentClusterId)
}

// DeRegisterKasFleetshardOperatorServiceAccountCalls gets all the calls that were made to DeRegisterKasFleetshardOperatorServiceAccount.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.DeRegisterKasFleetshardOperatorServiceAccountCalls())
func (mock *keycloakServiceInternalMock) DeRegisterKasFleetshardOperatorServiceAccountCalls() []struct {
	AccessToken    string
	AgentClusterId string
} {
	var calls []struct {
		AccessToken    string
		AgentClusterId string
	}
	mock.lockDeRegisterKasFleetshardOperatorServiceAccount.RLock()
	calls = mock.calls.DeRegisterKasFleetshardOperatorServiceAccount
	mock.lockDeRegisterKasFleetshardOperatorServiceAccount.RUnlock()
	return calls
}

// DeleteServiceAccount calls DeleteServiceAccountFunc.
func (mock *keycloakServiceInternalMock) DeleteServiceAccount(accessToken string, ctx context.Context, clientId string) *errors.ServiceError {
	if mock.DeleteServiceAccountFunc == nil {
		panic("keycloakServiceInternalMock.DeleteServiceAccountFunc: method is nil but keycloakServiceInternal.DeleteServiceAccount was just called")
	}
	callInfo := struct {
		AccessToken string
		Ctx         context.Context
		ClientId    string
	}{
		AccessToken: accessToken,
		Ctx:         ctx,
		ClientId:    clientId,
	}
	mock.lockDeleteServiceAccount.Lock()
	mock.calls.DeleteServiceAccount = append(mock.calls.DeleteServiceAccount, callInfo)
	mock.lockDeleteServiceAccount.Unlock()
	return mock.DeleteServiceAccountFunc(accessToken, ctx, clientId)
}

// DeleteServiceAccountCalls gets all the calls that were made to DeleteServiceAccount.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.DeleteServiceAccountCalls())
func (mock *keycloakServiceInternalMock) DeleteServiceAccountCalls() []struct {
	AccessToken string
	Ctx         context.Context
	ClientId    string
} {
	var calls []struct {
		AccessToken string
		Ctx         context.Context
		ClientId    string
	}
	mock.lockDeleteServiceAccount.RLock()
	calls = mock.calls.DeleteServiceAccount
	mock.lockDeleteServiceAccount.RUnlock()
	return calls
}

// DeleteServiceAccountInternal calls DeleteServiceAccountInternalFunc.
func (mock *keycloakServiceInternalMock) DeleteServiceAccountInternal(accessToken string, clientId string) *errors.ServiceError {
	if mock.DeleteServiceAccountInternalFunc == nil {
		panic("keycloakServiceInternalMock.DeleteServiceAccountInternalFunc: method is nil but keycloakServiceInternal.DeleteServiceAccountInternal was just called")
	}
	callInfo := struct {
		AccessToken string
		ClientId    string
	}{
		AccessToken: accessToken,
		ClientId:    clientId,
	}
	mock.lockDeleteServiceAccountInternal.Lock()
	mock.calls.DeleteServiceAccountInternal = append(mock.calls.DeleteServiceAccountInternal, callInfo)
	mock.lockDeleteServiceAccountInternal.Unlock()
	return mock.DeleteServiceAccountInternalFunc(accessToken, clientId)
}

// DeleteServiceAccountInternalCalls gets all the calls that were made to DeleteServiceAccountInternal.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.DeleteServiceAccountInternalCalls())
func (mock *keycloakServiceInternalMock) DeleteServiceAccountInternalCalls() []struct {
	AccessToken string
	ClientId    string
} {
	var calls []struct {
		AccessToken string
		ClientId    string
	}
	mock.lockDeleteServiceAccountInternal.RLock()
	calls = mock.calls.DeleteServiceAccountInternal
	mock.lockDeleteServiceAccountInternal.RUnlock()
	return calls
}

// GetConfig calls GetConfigFunc.
func (mock *keycloakServiceInternalMock) GetConfig() *keycloak.KeycloakConfig {
	if mock.GetConfigFunc == nil {
		panic("keycloakServiceInternalMock.GetConfigFunc: method is nil but keycloakServiceInternal.GetConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	mock.lockGetConfig.Unlock()
	return mock.GetConfigFunc()
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.GetConfigCalls())
func (mock *keycloakServiceInternalMock) GetConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetConfig.RLock()
	calls = mock.calls.GetConfig
	mock.lockGetConfig.RUnlock()
	return calls
}

// GetKafkaClientSecret calls GetKafkaClientSecretFunc.
func (mock *keycloakServiceInternalMock) GetKafkaClientSecret(accessToken string, clientId string) (string, *errors.ServiceError) {
	if mock.GetKafkaClientSecretFunc == nil {
		panic("keycloakServiceInternalMock.GetKafkaClientSecretFunc: method is nil but keycloakServiceInternal.GetKafkaClientSecret was just called")
	}
	callInfo := struct {
		AccessToken string
		ClientId    string
	}{
		AccessToken: accessToken,
		ClientId:    clientId,
	}
	mock.lockGetKafkaClientSecret.Lock()
	mock.calls.GetKafkaClientSecret = append(mock.calls.GetKafkaClientSecret, callInfo)
	mock.lockGetKafkaClientSecret.Unlock()
	return mock.GetKafkaClientSecretFunc(accessToken, clientId)
}

// GetKafkaClientSecretCalls gets all the calls that were made to GetKafkaClientSecret.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.GetKafkaClientSecretCalls())
func (mock *keycloakServiceInternalMock) GetKafkaClientSecretCalls() []struct {
	AccessToken string
	ClientId    string
} {
	var calls []struct {
		AccessToken string
		ClientId    string
	}
	mock.lockGetKafkaClientSecret.RLock()
	calls = mock.calls.GetKafkaClientSecret
	mock.lockGetKafkaClientSecret.RUnlock()
	return calls
}

// GetRealmConfig calls GetRealmConfigFunc.
func (mock *keycloakServiceInternalMock) GetRealmConfig() *keycloak.KeycloakRealmConfig {
	if mock.GetRealmConfigFunc == nil {
		panic("keycloakServiceInternalMock.GetRealmConfigFunc: method is nil but keycloakServiceInternal.GetRealmConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetRealmConfig.Lock()
	mock.calls.GetRealmConfig = append(mock.calls.GetRealmConfig, callInfo)
	mock.lockGetRealmConfig.Unlock()
	return mock.GetRealmConfigFunc()
}

// GetRealmConfigCalls gets all the calls that were made to GetRealmConfig.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.GetRealmConfigCalls())
func (mock *keycloakServiceInternalMock) GetRealmConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetRealmConfig.RLock()
	calls = mock.calls.GetRealmConfig
	mock.lockGetRealmConfig.RUnlock()
	return calls
}

// GetServiceAccountByClientId calls GetServiceAccountByClientIdFunc.
func (mock *keycloakServiceInternalMock) GetServiceAccountByClientId(accessToken string, ctx context.Context, clientId string) (*api.ServiceAccount, *errors.ServiceError) {
	if mock.GetServiceAccountByClientIdFunc == nil {
		panic("keycloakServiceInternalMock.GetServiceAccountByClientIdFunc: method is nil but keycloakServiceInternal.GetServiceAccountByClientId was just called")
	}
	callInfo := struct {
		AccessToken string
		Ctx         context.Context
		ClientId    string
	}{
		AccessToken: accessToken,
		Ctx:         ctx,
		ClientId:    clientId,
	}
	mock.lockGetServiceAccountByClientId.Lock()
	mock.calls.GetServiceAccountByClientId = append(mock.calls.GetServiceAccountByClientId, callInfo)
	mock.lockGetServiceAccountByClientId.Unlock()
	return mock.GetServiceAccountByClientIdFunc(accessToken, ctx, clientId)
}

// GetServiceAccountByClientIdCalls gets all the calls that were made to GetServiceAccountByClientId.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.GetServiceAccountByClientIdCalls())
func (mock *keycloakServiceInternalMock) GetServiceAccountByClientIdCalls() []struct {
	AccessToken string
	Ctx         context.Context
	ClientId    string
} {
	var calls []struct {
		AccessToken string
		Ctx         context.Context
		ClientId    string
	}
	mock.lockGetServiceAccountByClientId.RLock()
	calls = mock.calls.GetServiceAccountByClientId
	mock.lockGetServiceAccountByClientId.RUnlock()
	return calls
}

// GetServiceAccountById calls GetServiceAccountByIdFunc.
func (mock *keycloakServiceInternalMock) GetServiceAccountById(accessToken string, ctx context.Context, id string) (*api.ServiceAccount, *errors.ServiceError) {
	if mock.GetServiceAccountByIdFunc == nil {
		panic("keycloakServiceInternalMock.GetServiceAccountByIdFunc: method is nil but keycloakServiceInternal.GetServiceAccountById was just called")
	}
	callInfo := struct {
		AccessToken string
		Ctx         context.Context
		ID          string
	}{
		AccessToken: accessToken,
		Ctx:         ctx,
		ID:          id,
	}
	mock.lockGetServiceAccountById.Lock()
	mock.calls.GetServiceAccountById = append(mock.calls.GetServiceAccountById, callInfo)
	mock.lockGetServiceAccountById.Unlock()
	return mock.GetServiceAccountByIdFunc(accessToken, ctx, id)
}

// GetServiceAccountByIdCalls gets all the calls that were made to GetServiceAccountById.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.GetServiceAccountByIdCalls())
func (mock *keycloakServiceInternalMock) GetServiceAccountByIdCalls() []struct {
	AccessToken string
	Ctx         context.Context
	ID          string
} {
	var calls []struct {
		AccessToken string
		Ctx         context.Context
		ID          string
	}
	mock.lockGetServiceAccountById.RLock()
	calls = mock.calls.GetServiceAccountById
	mock.lockGetServiceAccountById.RUnlock()
	return calls
}

// IsKafkaClientExist calls IsKafkaClientExistFunc.
func (mock *keycloakServiceInternalMock) IsKafkaClientExist(accessToken string, clientId string) *errors.ServiceError {
	if mock.IsKafkaClientExistFunc == nil {
		panic("keycloakServiceInternalMock.IsKafkaClientExistFunc: method is nil but keycloakServiceInternal.IsKafkaClientExist was just called")
	}
	callInfo := struct {
		AccessToken string
		ClientId    string
	}{
		AccessToken: accessToken,
		ClientId:    clientId,
	}
	mock.lockIsKafkaClientExist.Lock()
	mock.calls.IsKafkaClientExist = append(mock.calls.IsKafkaClientExist, callInfo)
	mock.lockIsKafkaClientExist.Unlock()
	return mock.IsKafkaClientExistFunc(accessToken, clientId)
}

// IsKafkaClientExistCalls gets all the calls that were made to IsKafkaClientExist.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.IsKafkaClientExistCalls())
func (mock *keycloakServiceInternalMock) IsKafkaClientExistCalls() []struct {
	AccessToken string
	ClientId    string
} {
	var calls []struct {
		AccessToken string
		ClientId    string
	}
	mock.lockIsKafkaClientExist.RLock()
	calls = mock.calls.IsKafkaClientExist
	mock.lockIsKafkaClientExist.RUnlock()
	return calls
}

// ListServiceAcc calls ListServiceAccFunc.
func (mock *keycloakServiceInternalMock) ListServiceAcc(accessToken string, ctx context.Context, first int, max int) ([]api.ServiceAccount, *errors.ServiceError) {
	if mock.ListServiceAccFunc == nil {
		panic("keycloakServiceInternalMock.ListServiceAccFunc: method is nil but keycloakServiceInternal.ListServiceAcc was just called")
	}
	callInfo := struct {
		AccessToken string
		Ctx         context.Context
		First       int
		Max         int
	}{
		AccessToken: accessToken,
		Ctx:         ctx,
		First:       first,
		Max:         max,
	}
	mock.lockListServiceAcc.Lock()
	mock.calls.ListServiceAcc = append(mock.calls.ListServiceAcc, callInfo)
	mock.lockListServiceAcc.Unlock()
	return mock.ListServiceAccFunc(accessToken, ctx, first, max)
}

// ListServiceAccCalls gets all the calls that were made to ListServiceAcc.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.ListServiceAccCalls())
func (mock *keycloakServiceInternalMock) ListServiceAccCalls() []struct {
	AccessToken string
	Ctx         context.Context
	First       int
	Max         int
} {
	var calls []struct {
		AccessToken string
		Ctx         context.Context
		First       int
		Max         int
	}
	mock.lockListServiceAcc.RLock()
	calls = mock.calls.ListServiceAcc
	mock.lockListServiceAcc.RUnlock()
	return calls
}

// RegisterClientInSSO calls RegisterClientInSSOFunc.
func (mock *keycloakServiceInternalMock) RegisterClientInSSO(accessToken string, clusterId string, clusterOathCallbackURI string) (string, *errors.ServiceError) {
	if mock.RegisterClientInSSOFunc == nil {
		panic("keycloakServiceInternalMock.RegisterClientInSSOFunc: method is nil but keycloakServiceInternal.RegisterClientInSSO was just called")
	}
	callInfo := struct {
		AccessToken            string
		ClusterId              string
		ClusterOathCallbackURI string
	}{
		AccessToken:            accessToken,
		ClusterId:              clusterId,
		ClusterOathCallbackURI: clusterOathCallbackURI,
	}
	mock.lockRegisterClientInSSO.Lock()
	mock.calls.RegisterClientInSSO = append(mock.calls.RegisterClientInSSO, callInfo)
	mock.lockRegisterClientInSSO.Unlock()
	return mock.RegisterClientInSSOFunc(accessToken, clusterId, clusterOathCallbackURI)
}

// RegisterClientInSSOCalls gets all the calls that were made to RegisterClientInSSO.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.RegisterClientInSSOCalls())
func (mock *keycloakServiceInternalMock) RegisterClientInSSOCalls() []struct {
	AccessToken            string
	ClusterId              string
	ClusterOathCallbackURI string
} {
	var calls []struct {
		AccessToken            string
		ClusterId              string
		ClusterOathCallbackURI string
	}
	mock.lockRegisterClientInSSO.RLock()
	calls = mock.calls.RegisterClientInSSO
	mock.lockRegisterClientInSSO.RUnlock()
	return calls
}

// RegisterConnectorFleetshardOperatorServiceAccount calls RegisterConnectorFleetshardOperatorServiceAccountFunc.
func (mock *keycloakServiceInternalMock) RegisterConnectorFleetshardOperatorServiceAccount(accessToken string, agentClusterId string) (*api.ServiceAccount, *errors.ServiceError) {
	if mock.RegisterConnectorFleetshardOperatorServiceAccountFunc == nil {
		panic("keycloakServiceInternalMock.RegisterConnectorFleetshardOperatorServiceAccountFunc: method is nil but keycloakServiceInternal.RegisterConnectorFleetshardOperatorServiceAccount was just called")
	}
	callInfo := struct {
		AccessToken    string
		AgentClusterId string
	}{
		AccessToken:    accessToken,
		AgentClusterId: agentClusterId,
	}
	mock.lockRegisterConnectorFleetshardOperatorServiceAccount.Lock()
	mock.calls.RegisterConnectorFleetshardOperatorServiceAccount = append(mock.calls.RegisterConnectorFleetshardOperatorServiceAccount, callInfo)
	mock.lockRegisterConnectorFleetshardOperatorServiceAccount.Unlock()
	return mock.RegisterConnectorFleetshardOperatorServiceAccountFunc(accessToken, agentClusterId)
}

// RegisterConnectorFleetshardOperatorServiceAccountCalls gets all the calls that were made to RegisterConnectorFleetshardOperatorServiceAccount.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.RegisterConnectorFleetshardOperatorServiceAccountCalls())
func (mock *keycloakServiceInternalMock) RegisterConnectorFleetshardOperatorServiceAccountCalls() []struct {
	AccessToken    string
	AgentClusterId string
} {
	var calls []struct {
		AccessToken    string
		AgentClusterId string
	}
	mock.lockRegisterConnectorFleetshardOperatorServiceAccount.RLock()
	calls = mock.calls.RegisterConnectorFleetshardOperatorServiceAccount
	mock.lockRegisterConnectorFleetshardOperatorServiceAccount.RUnlock()
	return calls
}

// RegisterKasFleetshardOperatorServiceAccount calls RegisterKasFleetshardOperatorServiceAccountFunc.
func (mock *keycloakServiceInternalMock) RegisterKasFleetshardOperatorServiceAccount(accessToken string, agentClusterId string) (*api.ServiceAccount, *errors.ServiceError) {
	if mock.RegisterKasFleetshardOperatorServiceAccountFunc == nil {
		panic("keycloakServiceInternalMock.RegisterKasFleetshardOperatorServiceAccountFunc: method is nil but keycloakServiceInternal.RegisterKasFleetshardOperatorServiceAccount was just called")
	}
	callInfo := struct {
		AccessToken    string
		AgentClusterId string
	}{
		AccessToken:    accessToken,
		AgentClusterId: agentClusterId,
	}
	mock.lockRegisterKasFleetshardOperatorServiceAccount.Lock()
	mock.calls.RegisterKasFleetshardOperatorServiceAccount = append(mock.calls.RegisterKasFleetshardOperatorServiceAccount, callInfo)
	mock.lockRegisterKasFleetshardOperatorServiceAccount.Unlock()
	return mock.RegisterKasFleetshardOperatorServiceAccountFunc(accessToken, agentClusterId)
}

// RegisterKasFleetshardOperatorServiceAccountCalls gets all the calls that were made to RegisterKasFleetshardOperatorServiceAccount.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.RegisterKasFleetshardOperatorServiceAccountCalls())
func (mock *keycloakServiceInternalMock) RegisterKasFleetshardOperatorServiceAccountCalls() []struct {
	AccessToken    string
	AgentClusterId string
} {
	var calls []struct {
		AccessToken    string
		AgentClusterId string
	}
	mock.lockRegisterKasFleetshardOperatorServiceAccount.RLock()
	calls = mock.calls.RegisterKasFleetshardOperatorServiceAccount
	mock.lockRegisterKasFleetshardOperatorServiceAccount.RUnlock()
	return calls
}

// ResetServiceAccountCredentials calls ResetServiceAccountCredentialsFunc.
func (mock *keycloakServiceInternalMock) ResetServiceAccountCredentials(accessToken string, ctx context.Context, clientId string) (*api.ServiceAccount, *errors.ServiceError) {
	if mock.ResetServiceAccountCredentialsFunc == nil {
		panic("keycloakServiceInternalMock.ResetServiceAccountCredentialsFunc: method is nil but keycloakServiceInternal.ResetServiceAccountCredentials was just called")
	}
	callInfo := struct {
		AccessToken string
		Ctx         context.Context
		ClientId    string
	}{
		AccessToken: accessToken,
		Ctx:         ctx,
		ClientId:    clientId,
	}
	mock.lockResetServiceAccountCredentials.Lock()
	mock.calls.ResetServiceAccountCredentials = append(mock.calls.ResetServiceAccountCredentials, callInfo)
	mock.lockResetServiceAccountCredentials.Unlock()
	return mock.ResetServiceAccountCredentialsFunc(accessToken, ctx, clientId)
}

// ResetServiceAccountCredentialsCalls gets all the calls that were made to ResetServiceAccountCredentials.
// Check the length with:
//
//	len(mockedkeycloakServiceInternal.ResetServiceAccountCredentialsCalls())
func (mock *keycloakServiceInternalMock) ResetServiceAccountCredentialsCalls() []struct {
	AccessToken string
	Ctx         context.Context
	ClientId    string
} {
	var calls []struct {
		AccessToken string
		Ctx         context.Context
		ClientId    string
	}
	mock.lockResetServiceAccountCredentials.RLock()
	calls = mock.calls.ResetServiceAccountCredentials
	mock.lockResetServiceAccountCredentials.RUnlock()
	return calls
}
