// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package keycloak

import (
	"github.com/Nerzal/gocloak/v8"
	"gitlab.cee.redhat.com/service/managed-services-api/pkg/config"
	"sync"
)

var (
	lockKcClientMockClientConfig               sync.RWMutex
	lockKcClientMockCreateClient               sync.RWMutex
	lockKcClientMockCreateProtocolMapperConfig sync.RWMutex
	lockKcClientMockDeleteClient               sync.RWMutex
	lockKcClientMockGetClient                  sync.RWMutex
	lockKcClientMockGetClientById              sync.RWMutex
	lockKcClientMockGetClientSecret            sync.RWMutex
	lockKcClientMockGetClientServiceAccount    sync.RWMutex
	lockKcClientMockGetClients                 sync.RWMutex
	lockKcClientMockGetConfig                  sync.RWMutex
	lockKcClientMockGetToken                   sync.RWMutex
	lockKcClientMockIsClientExist              sync.RWMutex
	lockKcClientMockIsSameOrg                  sync.RWMutex
	lockKcClientMockRegenerateClientSecret     sync.RWMutex
	lockKcClientMockUpdateServiceAccountUser   sync.RWMutex
)

// Ensure, that KcClientMock does implement KcClient.
// If this is not the case, regenerate this file with moq.
var _ KcClient = &KcClientMock{}

// KcClientMock is a mock implementation of KcClient.
//
//     func TestSomethingThatUsesKcClient(t *testing.T) {
//
//         // make and configure a mocked KcClient
//         mockedKcClient := &KcClientMock{
//             ClientConfigFunc: func(client ClientRepresentation) gocloak.Client {
// 	               panic("mock out the ClientConfig method")
//             },
//             CreateClientFunc: func(client gocloak.Client, accessToken string) (string, error) {
// 	               panic("mock out the CreateClient method")
//             },
//             CreateProtocolMapperConfigFunc: func(in1 string) []gocloak.ProtocolMapperRepresentation {
// 	               panic("mock out the CreateProtocolMapperConfig method")
//             },
//             DeleteClientFunc: func(internalClientID string, accessToken string) error {
// 	               panic("mock out the DeleteClient method")
//             },
//             GetClientFunc: func(clientId string, accessToken string) ([]*gocloak.Client, error) {
// 	               panic("mock out the GetClient method")
//             },
//             GetClientByIdFunc: func(id string, accessToken string) (*gocloak.Client, error) {
// 	               panic("mock out the GetClientById method")
//             },
//             GetClientSecretFunc: func(internalClientId string, accessToken string) (string, error) {
// 	               panic("mock out the GetClientSecret method")
//             },
//             GetClientServiceAccountFunc: func(accessToken string, internalClient string) (*gocloak.User, error) {
// 	               panic("mock out the GetClientServiceAccount method")
//             },
//             GetClientsFunc: func(accessToken string, first int, max int) ([]*gocloak.Client, error) {
// 	               panic("mock out the GetClients method")
//             },
//             GetConfigFunc: func() *config.KeycloakConfig {
// 	               panic("mock out the GetConfig method")
//             },
//             GetTokenFunc: func() (string, error) {
// 	               panic("mock out the GetToken method")
//             },
//             IsClientExistFunc: func(clientId string, accessToken string) (string, error) {
// 	               panic("mock out the IsClientExist method")
//             },
//             IsSameOrgFunc: func(client *gocloak.Client, orgId string) bool {
// 	               panic("mock out the IsSameOrg method")
//             },
//             RegenerateClientSecretFunc: func(accessToken string, id string) (*gocloak.CredentialRepresentation, error) {
// 	               panic("mock out the RegenerateClientSecret method")
//             },
//             UpdateServiceAccountUserFunc: func(accessToken string, serviceAccountUser gocloak.User) error {
// 	               panic("mock out the UpdateServiceAccountUser method")
//             },
//         }
//
//         // use mockedKcClient in code that requires KcClient
//         // and then make assertions.
//
//     }
type KcClientMock struct {
	// ClientConfigFunc mocks the ClientConfig method.
	ClientConfigFunc func(client ClientRepresentation) gocloak.Client

	// CreateClientFunc mocks the CreateClient method.
	CreateClientFunc func(client gocloak.Client, accessToken string) (string, error)

	// CreateProtocolMapperConfigFunc mocks the CreateProtocolMapperConfig method.
	CreateProtocolMapperConfigFunc func(in1 string) []gocloak.ProtocolMapperRepresentation

	// DeleteClientFunc mocks the DeleteClient method.
	DeleteClientFunc func(internalClientID string, accessToken string) error

	// GetClientFunc mocks the GetClient method.
	GetClientFunc func(clientId string, accessToken string) ([]*gocloak.Client, error)

	// GetClientByIdFunc mocks the GetClientById method.
	GetClientByIdFunc func(id string, accessToken string) (*gocloak.Client, error)

	// GetClientSecretFunc mocks the GetClientSecret method.
	GetClientSecretFunc func(internalClientId string, accessToken string) (string, error)

	// GetClientServiceAccountFunc mocks the GetClientServiceAccount method.
	GetClientServiceAccountFunc func(accessToken string, internalClient string) (*gocloak.User, error)

	// GetClientsFunc mocks the GetClients method.
	GetClientsFunc func(accessToken string, first int, max int) ([]*gocloak.Client, error)

	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func() *config.KeycloakConfig

	// GetTokenFunc mocks the GetToken method.
	GetTokenFunc func() (string, error)

	// IsClientExistFunc mocks the IsClientExist method.
	IsClientExistFunc func(clientId string, accessToken string) (string, error)

	// IsSameOrgFunc mocks the IsSameOrg method.
	IsSameOrgFunc func(client *gocloak.Client, orgId string) bool

	// RegenerateClientSecretFunc mocks the RegenerateClientSecret method.
	RegenerateClientSecretFunc func(accessToken string, id string) (*gocloak.CredentialRepresentation, error)

	// UpdateServiceAccountUserFunc mocks the UpdateServiceAccountUser method.
	UpdateServiceAccountUserFunc func(accessToken string, serviceAccountUser gocloak.User) error

	// calls tracks calls to the methods.
	calls struct {
		// ClientConfig holds details about calls to the ClientConfig method.
		ClientConfig []struct {
			// Client is the client argument value.
			Client ClientRepresentation
		}
		// CreateClient holds details about calls to the CreateClient method.
		CreateClient []struct {
			// Client is the client argument value.
			Client gocloak.Client
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// CreateProtocolMapperConfig holds details about calls to the CreateProtocolMapperConfig method.
		CreateProtocolMapperConfig []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// DeleteClient holds details about calls to the DeleteClient method.
		DeleteClient []struct {
			// InternalClientID is the internalClientID argument value.
			InternalClientID string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// GetClient holds details about calls to the GetClient method.
		GetClient []struct {
			// ClientId is the clientId argument value.
			ClientId string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// GetClientById holds details about calls to the GetClientById method.
		GetClientById []struct {
			// ID is the id argument value.
			ID string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// GetClientSecret holds details about calls to the GetClientSecret method.
		GetClientSecret []struct {
			// InternalClientId is the internalClientId argument value.
			InternalClientId string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// GetClientServiceAccount holds details about calls to the GetClientServiceAccount method.
		GetClientServiceAccount []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// InternalClient is the internalClient argument value.
			InternalClient string
		}
		// GetClients holds details about calls to the GetClients method.
		GetClients []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// First is the first argument value.
			First int
			// Max is the max argument value.
			Max int
		}
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
		}
		// GetToken holds details about calls to the GetToken method.
		GetToken []struct {
		}
		// IsClientExist holds details about calls to the IsClientExist method.
		IsClientExist []struct {
			// ClientId is the clientId argument value.
			ClientId string
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// IsSameOrg holds details about calls to the IsSameOrg method.
		IsSameOrg []struct {
			// Client is the client argument value.
			Client *gocloak.Client
			// OrgId is the orgId argument value.
			OrgId string
		}
		// RegenerateClientSecret holds details about calls to the RegenerateClientSecret method.
		RegenerateClientSecret []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// ID is the id argument value.
			ID string
		}
		// UpdateServiceAccountUser holds details about calls to the UpdateServiceAccountUser method.
		UpdateServiceAccountUser []struct {
			// AccessToken is the accessToken argument value.
			AccessToken string
			// ServiceAccountUser is the serviceAccountUser argument value.
			ServiceAccountUser gocloak.User
		}
	}
}

// ClientConfig calls ClientConfigFunc.
func (mock *KcClientMock) ClientConfig(client ClientRepresentation) gocloak.Client {
	if mock.ClientConfigFunc == nil {
		panic("KcClientMock.ClientConfigFunc: method is nil but KcClient.ClientConfig was just called")
	}
	callInfo := struct {
		Client ClientRepresentation
	}{
		Client: client,
	}
	lockKcClientMockClientConfig.Lock()
	mock.calls.ClientConfig = append(mock.calls.ClientConfig, callInfo)
	lockKcClientMockClientConfig.Unlock()
	return mock.ClientConfigFunc(client)
}

// ClientConfigCalls gets all the calls that were made to ClientConfig.
// Check the length with:
//     len(mockedKcClient.ClientConfigCalls())
func (mock *KcClientMock) ClientConfigCalls() []struct {
	Client ClientRepresentation
} {
	var calls []struct {
		Client ClientRepresentation
	}
	lockKcClientMockClientConfig.RLock()
	calls = mock.calls.ClientConfig
	lockKcClientMockClientConfig.RUnlock()
	return calls
}

// CreateClient calls CreateClientFunc.
func (mock *KcClientMock) CreateClient(client gocloak.Client, accessToken string) (string, error) {
	if mock.CreateClientFunc == nil {
		panic("KcClientMock.CreateClientFunc: method is nil but KcClient.CreateClient was just called")
	}
	callInfo := struct {
		Client      gocloak.Client
		AccessToken string
	}{
		Client:      client,
		AccessToken: accessToken,
	}
	lockKcClientMockCreateClient.Lock()
	mock.calls.CreateClient = append(mock.calls.CreateClient, callInfo)
	lockKcClientMockCreateClient.Unlock()
	return mock.CreateClientFunc(client, accessToken)
}

// CreateClientCalls gets all the calls that were made to CreateClient.
// Check the length with:
//     len(mockedKcClient.CreateClientCalls())
func (mock *KcClientMock) CreateClientCalls() []struct {
	Client      gocloak.Client
	AccessToken string
} {
	var calls []struct {
		Client      gocloak.Client
		AccessToken string
	}
	lockKcClientMockCreateClient.RLock()
	calls = mock.calls.CreateClient
	lockKcClientMockCreateClient.RUnlock()
	return calls
}

// CreateProtocolMapperConfig calls CreateProtocolMapperConfigFunc.
func (mock *KcClientMock) CreateProtocolMapperConfig(in1 string) []gocloak.ProtocolMapperRepresentation {
	if mock.CreateProtocolMapperConfigFunc == nil {
		panic("KcClientMock.CreateProtocolMapperConfigFunc: method is nil but KcClient.CreateProtocolMapperConfig was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockKcClientMockCreateProtocolMapperConfig.Lock()
	mock.calls.CreateProtocolMapperConfig = append(mock.calls.CreateProtocolMapperConfig, callInfo)
	lockKcClientMockCreateProtocolMapperConfig.Unlock()
	return mock.CreateProtocolMapperConfigFunc(in1)
}

// CreateProtocolMapperConfigCalls gets all the calls that were made to CreateProtocolMapperConfig.
// Check the length with:
//     len(mockedKcClient.CreateProtocolMapperConfigCalls())
func (mock *KcClientMock) CreateProtocolMapperConfigCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockKcClientMockCreateProtocolMapperConfig.RLock()
	calls = mock.calls.CreateProtocolMapperConfig
	lockKcClientMockCreateProtocolMapperConfig.RUnlock()
	return calls
}

// DeleteClient calls DeleteClientFunc.
func (mock *KcClientMock) DeleteClient(internalClientID string, accessToken string) error {
	if mock.DeleteClientFunc == nil {
		panic("KcClientMock.DeleteClientFunc: method is nil but KcClient.DeleteClient was just called")
	}
	callInfo := struct {
		InternalClientID string
		AccessToken      string
	}{
		InternalClientID: internalClientID,
		AccessToken:      accessToken,
	}
	lockKcClientMockDeleteClient.Lock()
	mock.calls.DeleteClient = append(mock.calls.DeleteClient, callInfo)
	lockKcClientMockDeleteClient.Unlock()
	return mock.DeleteClientFunc(internalClientID, accessToken)
}

// DeleteClientCalls gets all the calls that were made to DeleteClient.
// Check the length with:
//     len(mockedKcClient.DeleteClientCalls())
func (mock *KcClientMock) DeleteClientCalls() []struct {
	InternalClientID string
	AccessToken      string
} {
	var calls []struct {
		InternalClientID string
		AccessToken      string
	}
	lockKcClientMockDeleteClient.RLock()
	calls = mock.calls.DeleteClient
	lockKcClientMockDeleteClient.RUnlock()
	return calls
}

// GetClient calls GetClientFunc.
func (mock *KcClientMock) GetClient(clientId string, accessToken string) ([]*gocloak.Client, error) {
	if mock.GetClientFunc == nil {
		panic("KcClientMock.GetClientFunc: method is nil but KcClient.GetClient was just called")
	}
	callInfo := struct {
		ClientId    string
		AccessToken string
	}{
		ClientId:    clientId,
		AccessToken: accessToken,
	}
	lockKcClientMockGetClient.Lock()
	mock.calls.GetClient = append(mock.calls.GetClient, callInfo)
	lockKcClientMockGetClient.Unlock()
	return mock.GetClientFunc(clientId, accessToken)
}

// GetClientCalls gets all the calls that were made to GetClient.
// Check the length with:
//     len(mockedKcClient.GetClientCalls())
func (mock *KcClientMock) GetClientCalls() []struct {
	ClientId    string
	AccessToken string
} {
	var calls []struct {
		ClientId    string
		AccessToken string
	}
	lockKcClientMockGetClient.RLock()
	calls = mock.calls.GetClient
	lockKcClientMockGetClient.RUnlock()
	return calls
}

// GetClientById calls GetClientByIdFunc.
func (mock *KcClientMock) GetClientById(id string, accessToken string) (*gocloak.Client, error) {
	if mock.GetClientByIdFunc == nil {
		panic("KcClientMock.GetClientByIdFunc: method is nil but KcClient.GetClientById was just called")
	}
	callInfo := struct {
		ID          string
		AccessToken string
	}{
		ID:          id,
		AccessToken: accessToken,
	}
	lockKcClientMockGetClientById.Lock()
	mock.calls.GetClientById = append(mock.calls.GetClientById, callInfo)
	lockKcClientMockGetClientById.Unlock()
	return mock.GetClientByIdFunc(id, accessToken)
}

// GetClientByIdCalls gets all the calls that were made to GetClientById.
// Check the length with:
//     len(mockedKcClient.GetClientByIdCalls())
func (mock *KcClientMock) GetClientByIdCalls() []struct {
	ID          string
	AccessToken string
} {
	var calls []struct {
		ID          string
		AccessToken string
	}
	lockKcClientMockGetClientById.RLock()
	calls = mock.calls.GetClientById
	lockKcClientMockGetClientById.RUnlock()
	return calls
}

// GetClientSecret calls GetClientSecretFunc.
func (mock *KcClientMock) GetClientSecret(internalClientId string, accessToken string) (string, error) {
	if mock.GetClientSecretFunc == nil {
		panic("KcClientMock.GetClientSecretFunc: method is nil but KcClient.GetClientSecret was just called")
	}
	callInfo := struct {
		InternalClientId string
		AccessToken      string
	}{
		InternalClientId: internalClientId,
		AccessToken:      accessToken,
	}
	lockKcClientMockGetClientSecret.Lock()
	mock.calls.GetClientSecret = append(mock.calls.GetClientSecret, callInfo)
	lockKcClientMockGetClientSecret.Unlock()
	return mock.GetClientSecretFunc(internalClientId, accessToken)
}

// GetClientSecretCalls gets all the calls that were made to GetClientSecret.
// Check the length with:
//     len(mockedKcClient.GetClientSecretCalls())
func (mock *KcClientMock) GetClientSecretCalls() []struct {
	InternalClientId string
	AccessToken      string
} {
	var calls []struct {
		InternalClientId string
		AccessToken      string
	}
	lockKcClientMockGetClientSecret.RLock()
	calls = mock.calls.GetClientSecret
	lockKcClientMockGetClientSecret.RUnlock()
	return calls
}

// GetClientServiceAccount calls GetClientServiceAccountFunc.
func (mock *KcClientMock) GetClientServiceAccount(accessToken string, internalClient string) (*gocloak.User, error) {
	if mock.GetClientServiceAccountFunc == nil {
		panic("KcClientMock.GetClientServiceAccountFunc: method is nil but KcClient.GetClientServiceAccount was just called")
	}
	callInfo := struct {
		AccessToken    string
		InternalClient string
	}{
		AccessToken:    accessToken,
		InternalClient: internalClient,
	}
	lockKcClientMockGetClientServiceAccount.Lock()
	mock.calls.GetClientServiceAccount = append(mock.calls.GetClientServiceAccount, callInfo)
	lockKcClientMockGetClientServiceAccount.Unlock()
	return mock.GetClientServiceAccountFunc(accessToken, internalClient)
}

// GetClientServiceAccountCalls gets all the calls that were made to GetClientServiceAccount.
// Check the length with:
//     len(mockedKcClient.GetClientServiceAccountCalls())
func (mock *KcClientMock) GetClientServiceAccountCalls() []struct {
	AccessToken    string
	InternalClient string
} {
	var calls []struct {
		AccessToken    string
		InternalClient string
	}
	lockKcClientMockGetClientServiceAccount.RLock()
	calls = mock.calls.GetClientServiceAccount
	lockKcClientMockGetClientServiceAccount.RUnlock()
	return calls
}

// GetClients calls GetClientsFunc.
func (mock *KcClientMock) GetClients(accessToken string, first int, max int) ([]*gocloak.Client, error) {
	if mock.GetClientsFunc == nil {
		panic("KcClientMock.GetClientsFunc: method is nil but KcClient.GetClients was just called")
	}
	callInfo := struct {
		AccessToken string
		First       int
		Max         int
	}{
		AccessToken: accessToken,
		First:       first,
		Max:         max,
	}
	lockKcClientMockGetClients.Lock()
	mock.calls.GetClients = append(mock.calls.GetClients, callInfo)
	lockKcClientMockGetClients.Unlock()
	return mock.GetClientsFunc(accessToken, first, max)
}

// GetClientsCalls gets all the calls that were made to GetClients.
// Check the length with:
//     len(mockedKcClient.GetClientsCalls())
func (mock *KcClientMock) GetClientsCalls() []struct {
	AccessToken string
	First       int
	Max         int
} {
	var calls []struct {
		AccessToken string
		First       int
		Max         int
	}
	lockKcClientMockGetClients.RLock()
	calls = mock.calls.GetClients
	lockKcClientMockGetClients.RUnlock()
	return calls
}

// GetConfig calls GetConfigFunc.
func (mock *KcClientMock) GetConfig() *config.KeycloakConfig {
	if mock.GetConfigFunc == nil {
		panic("KcClientMock.GetConfigFunc: method is nil but KcClient.GetConfig was just called")
	}
	callInfo := struct {
	}{}
	lockKcClientMockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	lockKcClientMockGetConfig.Unlock()
	return mock.GetConfigFunc()
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//     len(mockedKcClient.GetConfigCalls())
func (mock *KcClientMock) GetConfigCalls() []struct {
} {
	var calls []struct {
	}
	lockKcClientMockGetConfig.RLock()
	calls = mock.calls.GetConfig
	lockKcClientMockGetConfig.RUnlock()
	return calls
}

// GetToken calls GetTokenFunc.
func (mock *KcClientMock) GetToken() (string, error) {
	if mock.GetTokenFunc == nil {
		panic("KcClientMock.GetTokenFunc: method is nil but KcClient.GetToken was just called")
	}
	callInfo := struct {
	}{}
	lockKcClientMockGetToken.Lock()
	mock.calls.GetToken = append(mock.calls.GetToken, callInfo)
	lockKcClientMockGetToken.Unlock()
	return mock.GetTokenFunc()
}

// GetTokenCalls gets all the calls that were made to GetToken.
// Check the length with:
//     len(mockedKcClient.GetTokenCalls())
func (mock *KcClientMock) GetTokenCalls() []struct {
} {
	var calls []struct {
	}
	lockKcClientMockGetToken.RLock()
	calls = mock.calls.GetToken
	lockKcClientMockGetToken.RUnlock()
	return calls
}

// IsClientExist calls IsClientExistFunc.
func (mock *KcClientMock) IsClientExist(clientId string, accessToken string) (string, error) {
	if mock.IsClientExistFunc == nil {
		panic("KcClientMock.IsClientExistFunc: method is nil but KcClient.IsClientExist was just called")
	}
	callInfo := struct {
		ClientId    string
		AccessToken string
	}{
		ClientId:    clientId,
		AccessToken: accessToken,
	}
	lockKcClientMockIsClientExist.Lock()
	mock.calls.IsClientExist = append(mock.calls.IsClientExist, callInfo)
	lockKcClientMockIsClientExist.Unlock()
	return mock.IsClientExistFunc(clientId, accessToken)
}

// IsClientExistCalls gets all the calls that were made to IsClientExist.
// Check the length with:
//     len(mockedKcClient.IsClientExistCalls())
func (mock *KcClientMock) IsClientExistCalls() []struct {
	ClientId    string
	AccessToken string
} {
	var calls []struct {
		ClientId    string
		AccessToken string
	}
	lockKcClientMockIsClientExist.RLock()
	calls = mock.calls.IsClientExist
	lockKcClientMockIsClientExist.RUnlock()
	return calls
}

// IsSameOrg calls IsSameOrgFunc.
func (mock *KcClientMock) IsSameOrg(client *gocloak.Client, orgId string) bool {
	if mock.IsSameOrgFunc == nil {
		panic("KcClientMock.IsSameOrgFunc: method is nil but KcClient.IsSameOrg was just called")
	}
	callInfo := struct {
		Client *gocloak.Client
		OrgId  string
	}{
		Client: client,
		OrgId:  orgId,
	}
	lockKcClientMockIsSameOrg.Lock()
	mock.calls.IsSameOrg = append(mock.calls.IsSameOrg, callInfo)
	lockKcClientMockIsSameOrg.Unlock()
	return mock.IsSameOrgFunc(client, orgId)
}

// IsSameOrgCalls gets all the calls that were made to IsSameOrg.
// Check the length with:
//     len(mockedKcClient.IsSameOrgCalls())
func (mock *KcClientMock) IsSameOrgCalls() []struct {
	Client *gocloak.Client
	OrgId  string
} {
	var calls []struct {
		Client *gocloak.Client
		OrgId  string
	}
	lockKcClientMockIsSameOrg.RLock()
	calls = mock.calls.IsSameOrg
	lockKcClientMockIsSameOrg.RUnlock()
	return calls
}

// RegenerateClientSecret calls RegenerateClientSecretFunc.
func (mock *KcClientMock) RegenerateClientSecret(accessToken string, id string) (*gocloak.CredentialRepresentation, error) {
	if mock.RegenerateClientSecretFunc == nil {
		panic("KcClientMock.RegenerateClientSecretFunc: method is nil but KcClient.RegenerateClientSecret was just called")
	}
	callInfo := struct {
		AccessToken string
		ID          string
	}{
		AccessToken: accessToken,
		ID:          id,
	}
	lockKcClientMockRegenerateClientSecret.Lock()
	mock.calls.RegenerateClientSecret = append(mock.calls.RegenerateClientSecret, callInfo)
	lockKcClientMockRegenerateClientSecret.Unlock()
	return mock.RegenerateClientSecretFunc(accessToken, id)
}

// RegenerateClientSecretCalls gets all the calls that were made to RegenerateClientSecret.
// Check the length with:
//     len(mockedKcClient.RegenerateClientSecretCalls())
func (mock *KcClientMock) RegenerateClientSecretCalls() []struct {
	AccessToken string
	ID          string
} {
	var calls []struct {
		AccessToken string
		ID          string
	}
	lockKcClientMockRegenerateClientSecret.RLock()
	calls = mock.calls.RegenerateClientSecret
	lockKcClientMockRegenerateClientSecret.RUnlock()
	return calls
}

// UpdateServiceAccountUser calls UpdateServiceAccountUserFunc.
func (mock *KcClientMock) UpdateServiceAccountUser(accessToken string, serviceAccountUser gocloak.User) error {
	if mock.UpdateServiceAccountUserFunc == nil {
		panic("KcClientMock.UpdateServiceAccountUserFunc: method is nil but KcClient.UpdateServiceAccountUser was just called")
	}
	callInfo := struct {
		AccessToken        string
		ServiceAccountUser gocloak.User
	}{
		AccessToken:        accessToken,
		ServiceAccountUser: serviceAccountUser,
	}
	lockKcClientMockUpdateServiceAccountUser.Lock()
	mock.calls.UpdateServiceAccountUser = append(mock.calls.UpdateServiceAccountUser, callInfo)
	lockKcClientMockUpdateServiceAccountUser.Unlock()
	return mock.UpdateServiceAccountUserFunc(accessToken, serviceAccountUser)
}

// UpdateServiceAccountUserCalls gets all the calls that were made to UpdateServiceAccountUser.
// Check the length with:
//     len(mockedKcClient.UpdateServiceAccountUserCalls())
func (mock *KcClientMock) UpdateServiceAccountUserCalls() []struct {
	AccessToken        string
	ServiceAccountUser gocloak.User
} {
	var calls []struct {
		AccessToken        string
		ServiceAccountUser gocloak.User
	}
	lockKcClientMockUpdateServiceAccountUser.RLock()
	calls = mock.calls.UpdateServiceAccountUser
	lockKcClientMockUpdateServiceAccountUser.RUnlock()
	return calls
}
