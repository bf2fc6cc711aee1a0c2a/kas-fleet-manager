// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package keycloak

import (
	"context"
	"github.com/Nerzal/gocloak/v8"
	"github.com/dgrijalva/jwt-go/v4"
	"github.com/go-resty/resty/v2"
	"sync"
)

// Ensure, that GoCloakMock does implement gocloak.GoCloak.
// If this is not the case, regenerate this file with moq.
var _ gocloak.GoCloak = &GoCloakMock{}

// GoCloakMock is a mock implementation of gocloak.GoCloak.
//
// 	func TestSomethingThatUsesGoCloak(t *testing.T) {
//
// 		// make and configure a mocked gocloak.GoCloak
// 		mockedGoCloak := &GoCloakMock{
// 			AddClientRoleCompositeFunc: func(ctx context.Context, token string, realm string, roleID string, roles []gocloak.Role) error {
// 				panic("mock out the AddClientRoleComposite method")
// 			},
// 			AddClientRoleToGroupFunc: func(ctx context.Context, token string, realm string, clientID string, groupID string, roles []gocloak.Role) error {
// 				panic("mock out the AddClientRoleToGroup method")
// 			},
// 			AddClientRoleToUserFunc: func(ctx context.Context, token string, realm string, clientID string, userID string, roles []gocloak.Role) error {
// 				panic("mock out the AddClientRoleToUser method")
// 			},
// 			AddDefaultGroupFunc: func(ctx context.Context, accessToken string, realm string, groupID string) error {
// 				panic("mock out the AddDefaultGroup method")
// 			},
// 			AddDefaultScopeToClientFunc: func(ctx context.Context, token string, realm string, clientID string, scopeID string) error {
// 				panic("mock out the AddDefaultScopeToClient method")
// 			},
// 			AddOptionalScopeToClientFunc: func(ctx context.Context, token string, realm string, clientID string, scopeID string) error {
// 				panic("mock out the AddOptionalScopeToClient method")
// 			},
// 			AddRealmRoleCompositeFunc: func(ctx context.Context, token string, realm string, roleName string, roles []gocloak.Role) error {
// 				panic("mock out the AddRealmRoleComposite method")
// 			},
// 			AddRealmRoleToGroupFunc: func(ctx context.Context, token string, realm string, groupID string, roles []gocloak.Role) error {
// 				panic("mock out the AddRealmRoleToGroup method")
// 			},
// 			AddRealmRoleToUserFunc: func(ctx context.Context, token string, realm string, userID string, roles []gocloak.Role) error {
// 				panic("mock out the AddRealmRoleToUser method")
// 			},
// 			AddUserToGroupFunc: func(ctx context.Context, token string, realm string, userID string, groupID string) error {
// 				panic("mock out the AddUserToGroup method")
// 			},
// 			ClearKeysCacheFunc: func(ctx context.Context, token string, realm string) error {
// 				panic("mock out the ClearKeysCache method")
// 			},
// 			ClearRealmCacheFunc: func(ctx context.Context, token string, realm string) error {
// 				panic("mock out the ClearRealmCache method")
// 			},
// 			ClearUserCacheFunc: func(ctx context.Context, token string, realm string) error {
// 				panic("mock out the ClearUserCache method")
// 			},
// 			CreateChildGroupFunc: func(ctx context.Context, token string, realm string, groupID string, group gocloak.Group) (string, error) {
// 				panic("mock out the CreateChildGroup method")
// 			},
// 			CreateClientFunc: func(ctx context.Context, accessToken string, realm string, clientID gocloak.Client) (string, error) {
// 				panic("mock out the CreateClient method")
// 			},
// 			CreateClientProtocolMapperFunc: func(ctx context.Context, token string, realm string, clientID string, mapper gocloak.ProtocolMapperRepresentation) (string, error) {
// 				panic("mock out the CreateClientProtocolMapper method")
// 			},
// 			CreateClientRoleFunc: func(ctx context.Context, accessToken string, realm string, clientID string, role gocloak.Role) (string, error) {
// 				panic("mock out the CreateClientRole method")
// 			},
// 			CreateClientScopeFunc: func(ctx context.Context, accessToken string, realm string, scope gocloak.ClientScope) (string, error) {
// 				panic("mock out the CreateClientScope method")
// 			},
// 			CreateClientScopeMappingsClientRolesFunc: func(ctx context.Context, token string, realm string, clientID string, clientsID string, roles []gocloak.Role) error {
// 				panic("mock out the CreateClientScopeMappingsClientRoles method")
// 			},
// 			CreateClientScopeMappingsRealmRolesFunc: func(ctx context.Context, token string, realm string, clientID string, roles []gocloak.Role) error {
// 				panic("mock out the CreateClientScopeMappingsRealmRoles method")
// 			},
// 			CreateComponentFunc: func(ctx context.Context, accessToken string, realm string, component gocloak.Component) (string, error) {
// 				panic("mock out the CreateComponent method")
// 			},
// 			CreateGroupFunc: func(ctx context.Context, accessToken string, realm string, group gocloak.Group) (string, error) {
// 				panic("mock out the CreateGroup method")
// 			},
// 			CreateIdentityProviderFunc: func(ctx context.Context, token string, realm string, providerRep gocloak.IdentityProviderRepresentation) (string, error) {
// 				panic("mock out the CreateIdentityProvider method")
// 			},
// 			CreateIdentityProviderMapperFunc: func(ctx context.Context, token string, realm string, alias string, mapper gocloak.IdentityProviderMapper) error {
// 				panic("mock out the CreateIdentityProviderMapper method")
// 			},
// 			CreatePermissionFunc: func(ctx context.Context, token string, realm string, clientID string, permission gocloak.PermissionRepresentation) (*gocloak.PermissionRepresentation, error) {
// 				panic("mock out the CreatePermission method")
// 			},
// 			CreatePermissionTicketFunc: func(ctx context.Context, token string, realm string, permissions []gocloak.CreatePermissionTicketParams) (*gocloak.PermissionTicketResponseRepresentation, error) {
// 				panic("mock out the CreatePermissionTicket method")
// 			},
// 			CreatePolicyFunc: func(ctx context.Context, token string, realm string, clientID string, policy gocloak.PolicyRepresentation) (*gocloak.PolicyRepresentation, error) {
// 				panic("mock out the CreatePolicy method")
// 			},
// 			CreateRealmFunc: func(ctx context.Context, token string, realm gocloak.RealmRepresentation) (string, error) {
// 				panic("mock out the CreateRealm method")
// 			},
// 			CreateRealmRoleFunc: func(ctx context.Context, token string, realm string, role gocloak.Role) (string, error) {
// 				panic("mock out the CreateRealmRole method")
// 			},
// 			CreateResourceFunc: func(ctx context.Context, token string, realm string, clientID string, resource gocloak.ResourceRepresentation) (*gocloak.ResourceRepresentation, error) {
// 				panic("mock out the CreateResource method")
// 			},
// 			CreateResourceClientFunc: func(ctx context.Context, token string, realm string, resource gocloak.ResourceRepresentation) (*gocloak.ResourceRepresentation, error) {
// 				panic("mock out the CreateResourceClient method")
// 			},
// 			CreateResourcePolicyFunc: func(ctx context.Context, token string, realm string, resourceID string, policy gocloak.ResourcePolicyRepresentation) (*gocloak.ResourcePolicyRepresentation, error) {
// 				panic("mock out the CreateResourcePolicy method")
// 			},
// 			CreateScopeFunc: func(ctx context.Context, token string, realm string, clientID string, scope gocloak.ScopeRepresentation) (*gocloak.ScopeRepresentation, error) {
// 				panic("mock out the CreateScope method")
// 			},
// 			CreateUserFunc: func(ctx context.Context, token string, realm string, user gocloak.User) (string, error) {
// 				panic("mock out the CreateUser method")
// 			},
// 			CreateUserFederatedIdentityFunc: func(ctx context.Context, token string, realm string, userID string, providerID string, federatedIdentityRep gocloak.FederatedIdentityRepresentation) error {
// 				panic("mock out the CreateUserFederatedIdentity method")
// 			},
// 			DecodeAccessTokenFunc: func(ctx context.Context, accessToken string, realm string, expectedAudience string) (*jwt.Token, *jwt.MapClaims, error) {
// 				panic("mock out the DecodeAccessToken method")
// 			},
// 			DecodeAccessTokenCustomClaimsFunc: func(ctx context.Context, accessToken string, realm string, expectedAudience string, claims jwt.Claims) (*jwt.Token, error) {
// 				panic("mock out the DecodeAccessTokenCustomClaims method")
// 			},
// 			DeleteClientFunc: func(ctx context.Context, accessToken string, realm string, clientID string) error {
// 				panic("mock out the DeleteClient method")
// 			},
// 			DeleteClientProtocolMapperFunc: func(ctx context.Context, token string, realm string, clientID string, mapperID string) error {
// 				panic("mock out the DeleteClientProtocolMapper method")
// 			},
// 			DeleteClientRoleFunc: func(ctx context.Context, accessToken string, realm string, clientID string, roleName string) error {
// 				panic("mock out the DeleteClientRole method")
// 			},
// 			DeleteClientRoleCompositeFunc: func(ctx context.Context, token string, realm string, roleID string, roles []gocloak.Role) error {
// 				panic("mock out the DeleteClientRoleComposite method")
// 			},
// 			DeleteClientRoleFromGroupFunc: func(ctx context.Context, token string, realm string, clientID string, groupID string, roles []gocloak.Role) error {
// 				panic("mock out the DeleteClientRoleFromGroup method")
// 			},
// 			DeleteClientRoleFromUserFunc: func(ctx context.Context, token string, realm string, clientID string, userID string, roles []gocloak.Role) error {
// 				panic("mock out the DeleteClientRoleFromUser method")
// 			},
// 			DeleteClientScopeFunc: func(ctx context.Context, accessToken string, realm string, scopeID string) error {
// 				panic("mock out the DeleteClientScope method")
// 			},
// 			DeleteClientScopeMappingsClientRolesFunc: func(ctx context.Context, token string, realm string, clientID string, clientsID string, roles []gocloak.Role) error {
// 				panic("mock out the DeleteClientScopeMappingsClientRoles method")
// 			},
// 			DeleteClientScopeMappingsRealmRolesFunc: func(ctx context.Context, token string, realm string, clientID string, roles []gocloak.Role) error {
// 				panic("mock out the DeleteClientScopeMappingsRealmRoles method")
// 			},
// 			DeleteComponentFunc: func(ctx context.Context, accessToken string, realm string, componentID string) error {
// 				panic("mock out the DeleteComponent method")
// 			},
// 			DeleteCredentialsFunc: func(ctx context.Context, token string, realm string, UserID string, CredentialID string) error {
// 				panic("mock out the DeleteCredentials method")
// 			},
// 			DeleteGroupFunc: func(ctx context.Context, accessToken string, realm string, groupID string) error {
// 				panic("mock out the DeleteGroup method")
// 			},
// 			DeleteIdentityProviderFunc: func(ctx context.Context, token string, realm string, alias string) error {
// 				panic("mock out the DeleteIdentityProvider method")
// 			},
// 			DeleteIdentityProviderMapperFunc: func(ctx context.Context, token string, realm string, alias string, mapperID string) error {
// 				panic("mock out the DeleteIdentityProviderMapper method")
// 			},
// 			DeletePermissionFunc: func(ctx context.Context, token string, realm string, clientID string, permissionID string) error {
// 				panic("mock out the DeletePermission method")
// 			},
// 			DeletePolicyFunc: func(ctx context.Context, token string, realm string, clientID string, policyID string) error {
// 				panic("mock out the DeletePolicy method")
// 			},
// 			DeleteRealmFunc: func(ctx context.Context, token string, realm string) error {
// 				panic("mock out the DeleteRealm method")
// 			},
// 			DeleteRealmRoleFunc: func(ctx context.Context, token string, realm string, roleName string) error {
// 				panic("mock out the DeleteRealmRole method")
// 			},
// 			DeleteRealmRoleCompositeFunc: func(ctx context.Context, token string, realm string, roleName string, roles []gocloak.Role) error {
// 				panic("mock out the DeleteRealmRoleComposite method")
// 			},
// 			DeleteRealmRoleFromGroupFunc: func(ctx context.Context, token string, realm string, groupID string, roles []gocloak.Role) error {
// 				panic("mock out the DeleteRealmRoleFromGroup method")
// 			},
// 			DeleteRealmRoleFromUserFunc: func(ctx context.Context, token string, realm string, userID string, roles []gocloak.Role) error {
// 				panic("mock out the DeleteRealmRoleFromUser method")
// 			},
// 			DeleteResourceFunc: func(ctx context.Context, token string, realm string, clientID string, resourceID string) error {
// 				panic("mock out the DeleteResource method")
// 			},
// 			DeleteResourceClientFunc: func(ctx context.Context, token string, realm string, resourceID string) error {
// 				panic("mock out the DeleteResourceClient method")
// 			},
// 			DeleteResourcePolicyFunc: func(ctx context.Context, token string, realm string, permissionID string) error {
// 				panic("mock out the DeleteResourcePolicy method")
// 			},
// 			DeleteScopeFunc: func(ctx context.Context, token string, realm string, clientID string, scopeID string) error {
// 				panic("mock out the DeleteScope method")
// 			},
// 			DeleteUserFunc: func(ctx context.Context, accessToken string, realm string, userID string) error {
// 				panic("mock out the DeleteUser method")
// 			},
// 			DeleteUserFederatedIdentityFunc: func(ctx context.Context, token string, realm string, userID string, providerID string) error {
// 				panic("mock out the DeleteUserFederatedIdentity method")
// 			},
// 			DeleteUserFromGroupFunc: func(ctx context.Context, token string, realm string, userID string, groupID string) error {
// 				panic("mock out the DeleteUserFromGroup method")
// 			},
// 			DeleteUserPermissionFunc: func(ctx context.Context, token string, realm string, ticketID string) error {
// 				panic("mock out the DeleteUserPermission method")
// 			},
// 			DisableAllCredentialsByTypeFunc: func(ctx context.Context, token string, realm string, userID string, types []string) error {
// 				panic("mock out the DisableAllCredentialsByType method")
// 			},
// 			ExecuteActionsEmailFunc: func(ctx context.Context, token string, realm string, params gocloak.ExecuteActionsEmail) error {
// 				panic("mock out the ExecuteActionsEmail method")
// 			},
// 			ExportIDPPublicBrokerConfigFunc: func(ctx context.Context, token string, realm string, alias string) (*string, error) {
// 				panic("mock out the ExportIDPPublicBrokerConfig method")
// 			},
// 			GetAvailableClientRolesByGroupIDFunc: func(ctx context.Context, token string, realm string, clientID string, groupID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetAvailableClientRolesByGroupID method")
// 			},
// 			GetAvailableClientRolesByUserIDFunc: func(ctx context.Context, token string, realm string, clientID string, userID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetAvailableClientRolesByUserID method")
// 			},
// 			GetAvailableRealmRolesByGroupIDFunc: func(ctx context.Context, token string, realm string, groupID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetAvailableRealmRolesByGroupID method")
// 			},
// 			GetAvailableRealmRolesByUserIDFunc: func(ctx context.Context, token string, realm string, userID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetAvailableRealmRolesByUserID method")
// 			},
// 			GetCertsFunc: func(ctx context.Context, realm string) (*gocloak.CertResponse, error) {
// 				panic("mock out the GetCerts method")
// 			},
// 			GetClientFunc: func(ctx context.Context, accessToken string, realm string, clientID string) (*gocloak.Client, error) {
// 				panic("mock out the GetClient method")
// 			},
// 			GetClientOfflineSessionsFunc: func(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.UserSessionRepresentation, error) {
// 				panic("mock out the GetClientOfflineSessions method")
// 			},
// 			GetClientRoleFunc: func(ctx context.Context, token string, realm string, clientID string, roleName string) (*gocloak.Role, error) {
// 				panic("mock out the GetClientRole method")
// 			},
// 			GetClientRoleByIDFunc: func(ctx context.Context, accessToken string, realm string, roleID string) (*gocloak.Role, error) {
// 				panic("mock out the GetClientRoleByID method")
// 			},
// 			GetClientRolesFunc: func(ctx context.Context, accessToken string, realm string, clientID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetClientRoles method")
// 			},
// 			GetClientRolesByGroupIDFunc: func(ctx context.Context, token string, realm string, clientID string, groupID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetClientRolesByGroupID method")
// 			},
// 			GetClientRolesByUserIDFunc: func(ctx context.Context, token string, realm string, clientID string, userID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetClientRolesByUserID method")
// 			},
// 			GetClientScopeFunc: func(ctx context.Context, token string, realm string, scopeID string) (*gocloak.ClientScope, error) {
// 				panic("mock out the GetClientScope method")
// 			},
// 			GetClientScopeMappingsFunc: func(ctx context.Context, token string, realm string, clientID string) (*gocloak.MappingsRepresentation, error) {
// 				panic("mock out the GetClientScopeMappings method")
// 			},
// 			GetClientScopeMappingsClientRolesFunc: func(ctx context.Context, token string, realm string, clientID string, clientsID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetClientScopeMappingsClientRoles method")
// 			},
// 			GetClientScopeMappingsClientRolesAvailableFunc: func(ctx context.Context, token string, realm string, clientID string, clientsID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetClientScopeMappingsClientRolesAvailable method")
// 			},
// 			GetClientScopeMappingsRealmRolesFunc: func(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetClientScopeMappingsRealmRoles method")
// 			},
// 			GetClientScopeMappingsRealmRolesAvailableFunc: func(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetClientScopeMappingsRealmRolesAvailable method")
// 			},
// 			GetClientScopesFunc: func(ctx context.Context, token string, realm string) ([]*gocloak.ClientScope, error) {
// 				panic("mock out the GetClientScopes method")
// 			},
// 			GetClientSecretFunc: func(ctx context.Context, token string, realm string, clientID string) (*gocloak.CredentialRepresentation, error) {
// 				panic("mock out the GetClientSecret method")
// 			},
// 			GetClientServiceAccountFunc: func(ctx context.Context, token string, realm string, clientID string) (*gocloak.User, error) {
// 				panic("mock out the GetClientServiceAccount method")
// 			},
// 			GetClientUserSessionsFunc: func(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.UserSessionRepresentation, error) {
// 				panic("mock out the GetClientUserSessions method")
// 			},
// 			GetClientsFunc: func(ctx context.Context, accessToken string, realm string, params gocloak.GetClientsParams) ([]*gocloak.Client, error) {
// 				panic("mock out the GetClients method")
// 			},
// 			GetClientsDefaultScopesFunc: func(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.ClientScope, error) {
// 				panic("mock out the GetClientsDefaultScopes method")
// 			},
// 			GetClientsOptionalScopesFunc: func(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.ClientScope, error) {
// 				panic("mock out the GetClientsOptionalScopes method")
// 			},
// 			GetComponentsFunc: func(ctx context.Context, accessToken string, realm string) ([]*gocloak.Component, error) {
// 				panic("mock out the GetComponents method")
// 			},
// 			GetCompositeClientRolesByGroupIDFunc: func(ctx context.Context, token string, realm string, clientID string, groupID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetCompositeClientRolesByGroupID method")
// 			},
// 			GetCompositeClientRolesByRoleIDFunc: func(ctx context.Context, token string, realm string, clientID string, roleID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetCompositeClientRolesByRoleID method")
// 			},
// 			GetCompositeClientRolesByUserIDFunc: func(ctx context.Context, token string, realm string, clientID string, userID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetCompositeClientRolesByUserID method")
// 			},
// 			GetCompositeRealmRolesByGroupIDFunc: func(ctx context.Context, token string, realm string, groupID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetCompositeRealmRolesByGroupID method")
// 			},
// 			GetCompositeRealmRolesByRoleIDFunc: func(ctx context.Context, token string, realm string, roleID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetCompositeRealmRolesByRoleID method")
// 			},
// 			GetCompositeRealmRolesByUserIDFunc: func(ctx context.Context, token string, realm string, userID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetCompositeRealmRolesByUserID method")
// 			},
// 			GetConfiguredUserStorageCredentialTypesFunc: func(ctx context.Context, token string, realm string, userID string) ([]string, error) {
// 				panic("mock out the GetConfiguredUserStorageCredentialTypes method")
// 			},
// 			GetCredentialRegistratorsFunc: func(ctx context.Context, token string, realm string) ([]string, error) {
// 				panic("mock out the GetCredentialRegistrators method")
// 			},
// 			GetCredentialsFunc: func(ctx context.Context, token string, realm string, UserID string) ([]*gocloak.CredentialRepresentation, error) {
// 				panic("mock out the GetCredentials method")
// 			},
// 			GetDefaultDefaultClientScopesFunc: func(ctx context.Context, token string, realm string) ([]*gocloak.ClientScope, error) {
// 				panic("mock out the GetDefaultDefaultClientScopes method")
// 			},
// 			GetDefaultGroupsFunc: func(ctx context.Context, accessToken string, realm string) ([]*gocloak.Group, error) {
// 				panic("mock out the GetDefaultGroups method")
// 			},
// 			GetDefaultOptionalClientScopesFunc: func(ctx context.Context, token string, realm string) ([]*gocloak.ClientScope, error) {
// 				panic("mock out the GetDefaultOptionalClientScopes method")
// 			},
// 			GetDependentPermissionsFunc: func(ctx context.Context, token string, realm string, clientID string, policyID string) ([]*gocloak.PermissionRepresentation, error) {
// 				panic("mock out the GetDependentPermissions method")
// 			},
// 			GetGroupFunc: func(ctx context.Context, accessToken string, realm string, groupID string) (*gocloak.Group, error) {
// 				panic("mock out the GetGroup method")
// 			},
// 			GetGroupMembersFunc: func(ctx context.Context, accessToken string, realm string, groupID string, params gocloak.GetGroupsParams) ([]*gocloak.User, error) {
// 				panic("mock out the GetGroupMembers method")
// 			},
// 			GetGroupsFunc: func(ctx context.Context, accessToken string, realm string, params gocloak.GetGroupsParams) ([]*gocloak.Group, error) {
// 				panic("mock out the GetGroups method")
// 			},
// 			GetGroupsCountFunc: func(ctx context.Context, token string, realm string, params gocloak.GetGroupsParams) (int, error) {
// 				panic("mock out the GetGroupsCount method")
// 			},
// 			GetIdentityProviderFunc: func(ctx context.Context, token string, realm string, alias string) (*gocloak.IdentityProviderRepresentation, error) {
// 				panic("mock out the GetIdentityProvider method")
// 			},
// 			GetIdentityProviderMappersFunc: func(ctx context.Context, token string, realm string, alias string) ([]*gocloak.IdentityProviderMapper, error) {
// 				panic("mock out the GetIdentityProviderMappers method")
// 			},
// 			GetIdentityProvidersFunc: func(ctx context.Context, token string, realm string) ([]*gocloak.IdentityProviderRepresentation, error) {
// 				panic("mock out the GetIdentityProviders method")
// 			},
// 			GetIssuerFunc: func(ctx context.Context, realm string) (*gocloak.IssuerResponse, error) {
// 				panic("mock out the GetIssuer method")
// 			},
// 			GetKeyStoreConfigFunc: func(ctx context.Context, accessToken string, realm string) (*gocloak.KeyStoreConfig, error) {
// 				panic("mock out the GetKeyStoreConfig method")
// 			},
// 			GetPermissionFunc: func(ctx context.Context, token string, realm string, clientID string, permissionID string) (*gocloak.PermissionRepresentation, error) {
// 				panic("mock out the GetPermission method")
// 			},
// 			GetPermissionResourcesFunc: func(ctx context.Context, token string, realm string, clientID string, permissionID string) ([]*gocloak.PermissionResource, error) {
// 				panic("mock out the GetPermissionResources method")
// 			},
// 			GetPermissionScopesFunc: func(ctx context.Context, token string, realm string, clientID string, permissionID string) ([]*gocloak.PermissionScope, error) {
// 				panic("mock out the GetPermissionScopes method")
// 			},
// 			GetPermissionsFunc: func(ctx context.Context, token string, realm string, clientID string, params gocloak.GetPermissionParams) ([]*gocloak.PermissionRepresentation, error) {
// 				panic("mock out the GetPermissions method")
// 			},
// 			GetPoliciesFunc: func(ctx context.Context, token string, realm string, clientID string, params gocloak.GetPolicyParams) ([]*gocloak.PolicyRepresentation, error) {
// 				panic("mock out the GetPolicies method")
// 			},
// 			GetPolicyFunc: func(ctx context.Context, token string, realm string, clientID string, policyID string) (*gocloak.PolicyRepresentation, error) {
// 				panic("mock out the GetPolicy method")
// 			},
// 			GetRawUserInfoFunc: func(ctx context.Context, accessToken string, realm string) (map[string]interface{}, error) {
// 				panic("mock out the GetRawUserInfo method")
// 			},
// 			GetRealmFunc: func(ctx context.Context, token string, realm string) (*gocloak.RealmRepresentation, error) {
// 				panic("mock out the GetRealm method")
// 			},
// 			GetRealmRoleFunc: func(ctx context.Context, token string, realm string, roleName string) (*gocloak.Role, error) {
// 				panic("mock out the GetRealmRole method")
// 			},
// 			GetRealmRolesFunc: func(ctx context.Context, accessToken string, realm string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetRealmRoles method")
// 			},
// 			GetRealmRolesByGroupIDFunc: func(ctx context.Context, accessToken string, realm string, groupID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetRealmRolesByGroupID method")
// 			},
// 			GetRealmRolesByUserIDFunc: func(ctx context.Context, accessToken string, realm string, userID string) ([]*gocloak.Role, error) {
// 				panic("mock out the GetRealmRolesByUserID method")
// 			},
// 			GetRealmsFunc: func(ctx context.Context, token string) ([]*gocloak.RealmRepresentation, error) {
// 				panic("mock out the GetRealms method")
// 			},
// 			GetRequestingPartyPermissionDecisionFunc: func(ctx context.Context, token string, realm string, options gocloak.RequestingPartyTokenOptions) (*gocloak.RequestingPartyPermissionDecision, error) {
// 				panic("mock out the GetRequestingPartyPermissionDecision method")
// 			},
// 			GetRequestingPartyPermissionsFunc: func(ctx context.Context, token string, realm string, options gocloak.RequestingPartyTokenOptions) (*[]gocloak.RequestingPartyPermission, error) {
// 				panic("mock out the GetRequestingPartyPermissions method")
// 			},
// 			GetRequestingPartyTokenFunc: func(ctx context.Context, token string, realm string, options gocloak.RequestingPartyTokenOptions) (*gocloak.JWT, error) {
// 				panic("mock out the GetRequestingPartyToken method")
// 			},
// 			GetResourceFunc: func(ctx context.Context, token string, realm string, clientID string, resourceID string) (*gocloak.ResourceRepresentation, error) {
// 				panic("mock out the GetResource method")
// 			},
// 			GetResourceClientFunc: func(ctx context.Context, token string, realm string, resourceID string) (*gocloak.ResourceRepresentation, error) {
// 				panic("mock out the GetResourceClient method")
// 			},
// 			GetResourcePoliciesFunc: func(ctx context.Context, token string, realm string, params gocloak.GetResourcePoliciesParams) ([]*gocloak.ResourcePolicyRepresentation, error) {
// 				panic("mock out the GetResourcePolicies method")
// 			},
// 			GetResourcePolicyFunc: func(ctx context.Context, token string, realm string, permissionID string) (*gocloak.ResourcePolicyRepresentation, error) {
// 				panic("mock out the GetResourcePolicy method")
// 			},
// 			GetResourcesFunc: func(ctx context.Context, token string, realm string, clientID string, params gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error) {
// 				panic("mock out the GetResources method")
// 			},
// 			GetResourcesClientFunc: func(ctx context.Context, token string, realm string, params gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error) {
// 				panic("mock out the GetResourcesClient method")
// 			},
// 			GetRoleMappingByGroupIDFunc: func(ctx context.Context, accessToken string, realm string, groupID string) (*gocloak.MappingsRepresentation, error) {
// 				panic("mock out the GetRoleMappingByGroupID method")
// 			},
// 			GetRoleMappingByUserIDFunc: func(ctx context.Context, accessToken string, realm string, userID string) (*gocloak.MappingsRepresentation, error) {
// 				panic("mock out the GetRoleMappingByUserID method")
// 			},
// 			GetScopeFunc: func(ctx context.Context, token string, realm string, clientID string, scopeID string) (*gocloak.ScopeRepresentation, error) {
// 				panic("mock out the GetScope method")
// 			},
// 			GetScopesFunc: func(ctx context.Context, token string, realm string, clientID string, params gocloak.GetScopeParams) ([]*gocloak.ScopeRepresentation, error) {
// 				panic("mock out the GetScopes method")
// 			},
// 			GetServerInfoFunc: func(ctx context.Context, accessToken string) (*gocloak.ServerInfoRepesentation, error) {
// 				panic("mock out the GetServerInfo method")
// 			},
// 			GetTokenFunc: func(ctx context.Context, realm string, options gocloak.TokenOptions) (*gocloak.JWT, error) {
// 				panic("mock out the GetToken method")
// 			},
// 			GetUserByIDFunc: func(ctx context.Context, accessToken string, realm string, userID string) (*gocloak.User, error) {
// 				panic("mock out the GetUserByID method")
// 			},
// 			GetUserCountFunc: func(ctx context.Context, accessToken string, realm string, params gocloak.GetUsersParams) (int, error) {
// 				panic("mock out the GetUserCount method")
// 			},
// 			GetUserFederatedIdentitiesFunc: func(ctx context.Context, token string, realm string, userID string) ([]*gocloak.FederatedIdentityRepresentation, error) {
// 				panic("mock out the GetUserFederatedIdentities method")
// 			},
// 			GetUserGroupsFunc: func(ctx context.Context, accessToken string, realm string, userID string, params gocloak.GetGroupsParams) ([]*gocloak.Group, error) {
// 				panic("mock out the GetUserGroups method")
// 			},
// 			GetUserInfoFunc: func(ctx context.Context, accessToken string, realm string) (*gocloak.UserInfo, error) {
// 				panic("mock out the GetUserInfo method")
// 			},
// 			GetUserOfflineSessionsForClientFunc: func(ctx context.Context, token string, realm string, userID string, clientID string) ([]*gocloak.UserSessionRepresentation, error) {
// 				panic("mock out the GetUserOfflineSessionsForClient method")
// 			},
// 			GetUserPermissionsFunc: func(ctx context.Context, token string, realm string, params gocloak.GetUserPermissionParams) ([]*gocloak.PermissionGrantResponseRepresentation, error) {
// 				panic("mock out the GetUserPermissions method")
// 			},
// 			GetUserSessionsFunc: func(ctx context.Context, token string, realm string, userID string) ([]*gocloak.UserSessionRepresentation, error) {
// 				panic("mock out the GetUserSessions method")
// 			},
// 			GetUsersFunc: func(ctx context.Context, accessToken string, realm string, params gocloak.GetUsersParams) ([]*gocloak.User, error) {
// 				panic("mock out the GetUsers method")
// 			},
// 			GetUsersByClientRoleNameFunc: func(ctx context.Context, token string, realm string, clientID string, roleName string, params gocloak.GetUsersByRoleParams) ([]*gocloak.User, error) {
// 				panic("mock out the GetUsersByClientRoleName method")
// 			},
// 			GetUsersByRoleNameFunc: func(ctx context.Context, token string, realm string, roleName string) ([]*gocloak.User, error) {
// 				panic("mock out the GetUsersByRoleName method")
// 			},
// 			GrantUserPermissionFunc: func(ctx context.Context, token string, realm string, permission gocloak.PermissionGrantParams) (*gocloak.PermissionGrantResponseRepresentation, error) {
// 				panic("mock out the GrantUserPermission method")
// 			},
// 			ImportIdentityProviderConfigFunc: func(ctx context.Context, token string, realm string, fromURL string, providerID string) (map[string]string, error) {
// 				panic("mock out the ImportIdentityProviderConfig method")
// 			},
// 			LoginFunc: func(ctx context.Context, clientID string, clientSecret string, realm string, username string, password string) (*gocloak.JWT, error) {
// 				panic("mock out the Login method")
// 			},
// 			LoginAdminFunc: func(ctx context.Context, username string, password string, realm string) (*gocloak.JWT, error) {
// 				panic("mock out the LoginAdmin method")
// 			},
// 			LoginClientFunc: func(ctx context.Context, clientID string, clientSecret string, realm string) (*gocloak.JWT, error) {
// 				panic("mock out the LoginClient method")
// 			},
// 			LoginClientSignedJWTFunc: func(ctx context.Context, clientID string, realm string, key interface{}, signedMethod jwt.SigningMethod, expiresAt *jwt.Time) (*gocloak.JWT, error) {
// 				panic("mock out the LoginClientSignedJWT method")
// 			},
// 			LoginOtpFunc: func(ctx context.Context, clientID string, clientSecret string, realm string, username string, password string, totp string) (*gocloak.JWT, error) {
// 				panic("mock out the LoginOtp method")
// 			},
// 			LogoutFunc: func(ctx context.Context, clientID string, clientSecret string, realm string, refreshToken string) error {
// 				panic("mock out the Logout method")
// 			},
// 			LogoutAllSessionsFunc: func(ctx context.Context, accessToken string, realm string, userID string) error {
// 				panic("mock out the LogoutAllSessions method")
// 			},
// 			LogoutPublicClientFunc: func(ctx context.Context, clientID string, realm string, accessToken string, refreshToken string) error {
// 				panic("mock out the LogoutPublicClient method")
// 			},
// 			LogoutUserSessionFunc: func(ctx context.Context, accessToken string, realm string, session string) error {
// 				panic("mock out the LogoutUserSession method")
// 			},
// 			MoveCredentialBehindFunc: func(ctx context.Context, token string, realm string, userID string, credentialID string, newPreviousCredentialID string) error {
// 				panic("mock out the MoveCredentialBehind method")
// 			},
// 			MoveCredentialToFirstFunc: func(ctx context.Context, token string, realm string, userID string, credentialID string) error {
// 				panic("mock out the MoveCredentialToFirst method")
// 			},
// 			RefreshTokenFunc: func(ctx context.Context, refreshToken string, clientID string, clientSecret string, realm string) (*gocloak.JWT, error) {
// 				panic("mock out the RefreshToken method")
// 			},
// 			RegenerateClientSecretFunc: func(ctx context.Context, token string, realm string, clientID string) (*gocloak.CredentialRepresentation, error) {
// 				panic("mock out the RegenerateClientSecret method")
// 			},
// 			RemoveDefaultGroupFunc: func(ctx context.Context, accessToken string, realm string, groupID string) error {
// 				panic("mock out the RemoveDefaultGroup method")
// 			},
// 			RemoveDefaultScopeFromClientFunc: func(ctx context.Context, token string, realm string, clientID string, scopeID string) error {
// 				panic("mock out the RemoveDefaultScopeFromClient method")
// 			},
// 			RemoveOptionalScopeFromClientFunc: func(ctx context.Context, token string, realm string, clientID string, scopeID string) error {
// 				panic("mock out the RemoveOptionalScopeFromClient method")
// 			},
// 			RestyClientFunc: func() *resty.Client {
// 				panic("mock out the RestyClient method")
// 			},
// 			RetrospectTokenFunc: func(ctx context.Context, accessToken string, clientID string, clientSecret string, realm string) (*gocloak.RetrospecTokenResult, error) {
// 				panic("mock out the RetrospectToken method")
// 			},
// 			SetPasswordFunc: func(ctx context.Context, token string, userID string, realm string, password string, temporary bool) error {
// 				panic("mock out the SetPassword method")
// 			},
// 			SetRestyClientFunc: func(restyClient *resty.Client)  {
// 				panic("mock out the SetRestyClient method")
// 			},
// 			UpdateClientFunc: func(ctx context.Context, accessToken string, realm string, updatedClient gocloak.Client) error {
// 				panic("mock out the UpdateClient method")
// 			},
// 			UpdateClientProtocolMapperFunc: func(ctx context.Context, token string, realm string, clientID string, mapperID string, mapper gocloak.ProtocolMapperRepresentation) error {
// 				panic("mock out the UpdateClientProtocolMapper method")
// 			},
// 			UpdateClientScopeFunc: func(ctx context.Context, accessToken string, realm string, scope gocloak.ClientScope) error {
// 				panic("mock out the UpdateClientScope method")
// 			},
// 			UpdateCredentialUserLabelFunc: func(ctx context.Context, token string, realm string, userID string, credentialID string, userLabel string) error {
// 				panic("mock out the UpdateCredentialUserLabel method")
// 			},
// 			UpdateGroupFunc: func(ctx context.Context, accessToken string, realm string, updatedGroup gocloak.Group) error {
// 				panic("mock out the UpdateGroup method")
// 			},
// 			UpdateIdentityProviderFunc: func(ctx context.Context, token string, realm string, alias string, providerRep gocloak.IdentityProviderRepresentation) error {
// 				panic("mock out the UpdateIdentityProvider method")
// 			},
// 			UpdatePermissionFunc: func(ctx context.Context, token string, realm string, clientID string, permission gocloak.PermissionRepresentation) error {
// 				panic("mock out the UpdatePermission method")
// 			},
// 			UpdatePolicyFunc: func(ctx context.Context, token string, realm string, clientID string, policy gocloak.PolicyRepresentation) error {
// 				panic("mock out the UpdatePolicy method")
// 			},
// 			UpdateRealmFunc: func(ctx context.Context, token string, realm gocloak.RealmRepresentation) error {
// 				panic("mock out the UpdateRealm method")
// 			},
// 			UpdateRealmRoleFunc: func(ctx context.Context, token string, realm string, roleName string, role gocloak.Role) error {
// 				panic("mock out the UpdateRealmRole method")
// 			},
// 			UpdateResourceFunc: func(ctx context.Context, token string, realm string, clientID string, resource gocloak.ResourceRepresentation) error {
// 				panic("mock out the UpdateResource method")
// 			},
// 			UpdateResourceClientFunc: func(ctx context.Context, token string, realm string, resource gocloak.ResourceRepresentation) error {
// 				panic("mock out the UpdateResourceClient method")
// 			},
// 			UpdateResourcePolicyFunc: func(ctx context.Context, token string, realm string, permissionID string, policy gocloak.ResourcePolicyRepresentation) error {
// 				panic("mock out the UpdateResourcePolicy method")
// 			},
// 			UpdateRoleFunc: func(ctx context.Context, accessToken string, realm string, clientID string, role gocloak.Role) error {
// 				panic("mock out the UpdateRole method")
// 			},
// 			UpdateScopeFunc: func(ctx context.Context, token string, realm string, clientID string, resource gocloak.ScopeRepresentation) error {
// 				panic("mock out the UpdateScope method")
// 			},
// 			UpdateUserFunc: func(ctx context.Context, accessToken string, realm string, user gocloak.User) error {
// 				panic("mock out the UpdateUser method")
// 			},
// 			UpdateUserPermissionFunc: func(ctx context.Context, token string, realm string, permission gocloak.PermissionGrantParams) (*gocloak.PermissionGrantResponseRepresentation, error) {
// 				panic("mock out the UpdateUserPermission method")
// 			},
// 		}
//
// 		// use mockedGoCloak in code that requires gocloak.GoCloak
// 		// and then make assertions.
//
// 	}
type GoCloakMock struct {
	// AddClientRoleCompositeFunc mocks the AddClientRoleComposite method.
	AddClientRoleCompositeFunc func(ctx context.Context, token string, realm string, roleID string, roles []gocloak.Role) error

	// AddClientRoleToGroupFunc mocks the AddClientRoleToGroup method.
	AddClientRoleToGroupFunc func(ctx context.Context, token string, realm string, clientID string, groupID string, roles []gocloak.Role) error

	// AddClientRoleToUserFunc mocks the AddClientRoleToUser method.
	AddClientRoleToUserFunc func(ctx context.Context, token string, realm string, clientID string, userID string, roles []gocloak.Role) error

	// AddDefaultGroupFunc mocks the AddDefaultGroup method.
	AddDefaultGroupFunc func(ctx context.Context, accessToken string, realm string, groupID string) error

	// AddDefaultScopeToClientFunc mocks the AddDefaultScopeToClient method.
	AddDefaultScopeToClientFunc func(ctx context.Context, token string, realm string, clientID string, scopeID string) error

	// AddOptionalScopeToClientFunc mocks the AddOptionalScopeToClient method.
	AddOptionalScopeToClientFunc func(ctx context.Context, token string, realm string, clientID string, scopeID string) error

	// AddRealmRoleCompositeFunc mocks the AddRealmRoleComposite method.
	AddRealmRoleCompositeFunc func(ctx context.Context, token string, realm string, roleName string, roles []gocloak.Role) error

	// AddRealmRoleToGroupFunc mocks the AddRealmRoleToGroup method.
	AddRealmRoleToGroupFunc func(ctx context.Context, token string, realm string, groupID string, roles []gocloak.Role) error

	// AddRealmRoleToUserFunc mocks the AddRealmRoleToUser method.
	AddRealmRoleToUserFunc func(ctx context.Context, token string, realm string, userID string, roles []gocloak.Role) error

	// AddUserToGroupFunc mocks the AddUserToGroup method.
	AddUserToGroupFunc func(ctx context.Context, token string, realm string, userID string, groupID string) error

	// ClearKeysCacheFunc mocks the ClearKeysCache method.
	ClearKeysCacheFunc func(ctx context.Context, token string, realm string) error

	// ClearRealmCacheFunc mocks the ClearRealmCache method.
	ClearRealmCacheFunc func(ctx context.Context, token string, realm string) error

	// ClearUserCacheFunc mocks the ClearUserCache method.
	ClearUserCacheFunc func(ctx context.Context, token string, realm string) error

	// CreateChildGroupFunc mocks the CreateChildGroup method.
	CreateChildGroupFunc func(ctx context.Context, token string, realm string, groupID string, group gocloak.Group) (string, error)

	// CreateClientFunc mocks the CreateClient method.
	CreateClientFunc func(ctx context.Context, accessToken string, realm string, clientID gocloak.Client) (string, error)

	// CreateClientProtocolMapperFunc mocks the CreateClientProtocolMapper method.
	CreateClientProtocolMapperFunc func(ctx context.Context, token string, realm string, clientID string, mapper gocloak.ProtocolMapperRepresentation) (string, error)

	// CreateClientRoleFunc mocks the CreateClientRole method.
	CreateClientRoleFunc func(ctx context.Context, accessToken string, realm string, clientID string, role gocloak.Role) (string, error)

	// CreateClientScopeFunc mocks the CreateClientScope method.
	CreateClientScopeFunc func(ctx context.Context, accessToken string, realm string, scope gocloak.ClientScope) (string, error)

	// CreateClientScopeMappingsClientRolesFunc mocks the CreateClientScopeMappingsClientRoles method.
	CreateClientScopeMappingsClientRolesFunc func(ctx context.Context, token string, realm string, clientID string, clientsID string, roles []gocloak.Role) error

	// CreateClientScopeMappingsRealmRolesFunc mocks the CreateClientScopeMappingsRealmRoles method.
	CreateClientScopeMappingsRealmRolesFunc func(ctx context.Context, token string, realm string, clientID string, roles []gocloak.Role) error

	// CreateComponentFunc mocks the CreateComponent method.
	CreateComponentFunc func(ctx context.Context, accessToken string, realm string, component gocloak.Component) (string, error)

	// CreateGroupFunc mocks the CreateGroup method.
	CreateGroupFunc func(ctx context.Context, accessToken string, realm string, group gocloak.Group) (string, error)

	// CreateIdentityProviderFunc mocks the CreateIdentityProvider method.
	CreateIdentityProviderFunc func(ctx context.Context, token string, realm string, providerRep gocloak.IdentityProviderRepresentation) (string, error)

	// CreateIdentityProviderMapperFunc mocks the CreateIdentityProviderMapper method.
	CreateIdentityProviderMapperFunc func(ctx context.Context, token string, realm string, alias string, mapper gocloak.IdentityProviderMapper) error

	// CreatePermissionFunc mocks the CreatePermission method.
	CreatePermissionFunc func(ctx context.Context, token string, realm string, clientID string, permission gocloak.PermissionRepresentation) (*gocloak.PermissionRepresentation, error)

	// CreatePermissionTicketFunc mocks the CreatePermissionTicket method.
	CreatePermissionTicketFunc func(ctx context.Context, token string, realm string, permissions []gocloak.CreatePermissionTicketParams) (*gocloak.PermissionTicketResponseRepresentation, error)

	// CreatePolicyFunc mocks the CreatePolicy method.
	CreatePolicyFunc func(ctx context.Context, token string, realm string, clientID string, policy gocloak.PolicyRepresentation) (*gocloak.PolicyRepresentation, error)

	// CreateRealmFunc mocks the CreateRealm method.
	CreateRealmFunc func(ctx context.Context, token string, realm gocloak.RealmRepresentation) (string, error)

	// CreateRealmRoleFunc mocks the CreateRealmRole method.
	CreateRealmRoleFunc func(ctx context.Context, token string, realm string, role gocloak.Role) (string, error)

	// CreateResourceFunc mocks the CreateResource method.
	CreateResourceFunc func(ctx context.Context, token string, realm string, clientID string, resource gocloak.ResourceRepresentation) (*gocloak.ResourceRepresentation, error)

	// CreateResourceClientFunc mocks the CreateResourceClient method.
	CreateResourceClientFunc func(ctx context.Context, token string, realm string, resource gocloak.ResourceRepresentation) (*gocloak.ResourceRepresentation, error)

	// CreateResourcePolicyFunc mocks the CreateResourcePolicy method.
	CreateResourcePolicyFunc func(ctx context.Context, token string, realm string, resourceID string, policy gocloak.ResourcePolicyRepresentation) (*gocloak.ResourcePolicyRepresentation, error)

	// CreateScopeFunc mocks the CreateScope method.
	CreateScopeFunc func(ctx context.Context, token string, realm string, clientID string, scope gocloak.ScopeRepresentation) (*gocloak.ScopeRepresentation, error)

	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, token string, realm string, user gocloak.User) (string, error)

	// CreateUserFederatedIdentityFunc mocks the CreateUserFederatedIdentity method.
	CreateUserFederatedIdentityFunc func(ctx context.Context, token string, realm string, userID string, providerID string, federatedIdentityRep gocloak.FederatedIdentityRepresentation) error

	// DecodeAccessTokenFunc mocks the DecodeAccessToken method.
	DecodeAccessTokenFunc func(ctx context.Context, accessToken string, realm string, expectedAudience string) (*jwt.Token, *jwt.MapClaims, error)

	// DecodeAccessTokenCustomClaimsFunc mocks the DecodeAccessTokenCustomClaims method.
	DecodeAccessTokenCustomClaimsFunc func(ctx context.Context, accessToken string, realm string, expectedAudience string, claims jwt.Claims) (*jwt.Token, error)

	// DeleteClientFunc mocks the DeleteClient method.
	DeleteClientFunc func(ctx context.Context, accessToken string, realm string, clientID string) error

	// DeleteClientProtocolMapperFunc mocks the DeleteClientProtocolMapper method.
	DeleteClientProtocolMapperFunc func(ctx context.Context, token string, realm string, clientID string, mapperID string) error

	// DeleteClientRoleFunc mocks the DeleteClientRole method.
	DeleteClientRoleFunc func(ctx context.Context, accessToken string, realm string, clientID string, roleName string) error

	// DeleteClientRoleCompositeFunc mocks the DeleteClientRoleComposite method.
	DeleteClientRoleCompositeFunc func(ctx context.Context, token string, realm string, roleID string, roles []gocloak.Role) error

	// DeleteClientRoleFromGroupFunc mocks the DeleteClientRoleFromGroup method.
	DeleteClientRoleFromGroupFunc func(ctx context.Context, token string, realm string, clientID string, groupID string, roles []gocloak.Role) error

	// DeleteClientRoleFromUserFunc mocks the DeleteClientRoleFromUser method.
	DeleteClientRoleFromUserFunc func(ctx context.Context, token string, realm string, clientID string, userID string, roles []gocloak.Role) error

	// DeleteClientScopeFunc mocks the DeleteClientScope method.
	DeleteClientScopeFunc func(ctx context.Context, accessToken string, realm string, scopeID string) error

	// DeleteClientScopeMappingsClientRolesFunc mocks the DeleteClientScopeMappingsClientRoles method.
	DeleteClientScopeMappingsClientRolesFunc func(ctx context.Context, token string, realm string, clientID string, clientsID string, roles []gocloak.Role) error

	// DeleteClientScopeMappingsRealmRolesFunc mocks the DeleteClientScopeMappingsRealmRoles method.
	DeleteClientScopeMappingsRealmRolesFunc func(ctx context.Context, token string, realm string, clientID string, roles []gocloak.Role) error

	// DeleteComponentFunc mocks the DeleteComponent method.
	DeleteComponentFunc func(ctx context.Context, accessToken string, realm string, componentID string) error

	// DeleteCredentialsFunc mocks the DeleteCredentials method.
	DeleteCredentialsFunc func(ctx context.Context, token string, realm string, UserID string, CredentialID string) error

	// DeleteGroupFunc mocks the DeleteGroup method.
	DeleteGroupFunc func(ctx context.Context, accessToken string, realm string, groupID string) error

	// DeleteIdentityProviderFunc mocks the DeleteIdentityProvider method.
	DeleteIdentityProviderFunc func(ctx context.Context, token string, realm string, alias string) error

	// DeleteIdentityProviderMapperFunc mocks the DeleteIdentityProviderMapper method.
	DeleteIdentityProviderMapperFunc func(ctx context.Context, token string, realm string, alias string, mapperID string) error

	// DeletePermissionFunc mocks the DeletePermission method.
	DeletePermissionFunc func(ctx context.Context, token string, realm string, clientID string, permissionID string) error

	// DeletePolicyFunc mocks the DeletePolicy method.
	DeletePolicyFunc func(ctx context.Context, token string, realm string, clientID string, policyID string) error

	// DeleteRealmFunc mocks the DeleteRealm method.
	DeleteRealmFunc func(ctx context.Context, token string, realm string) error

	// DeleteRealmRoleFunc mocks the DeleteRealmRole method.
	DeleteRealmRoleFunc func(ctx context.Context, token string, realm string, roleName string) error

	// DeleteRealmRoleCompositeFunc mocks the DeleteRealmRoleComposite method.
	DeleteRealmRoleCompositeFunc func(ctx context.Context, token string, realm string, roleName string, roles []gocloak.Role) error

	// DeleteRealmRoleFromGroupFunc mocks the DeleteRealmRoleFromGroup method.
	DeleteRealmRoleFromGroupFunc func(ctx context.Context, token string, realm string, groupID string, roles []gocloak.Role) error

	// DeleteRealmRoleFromUserFunc mocks the DeleteRealmRoleFromUser method.
	DeleteRealmRoleFromUserFunc func(ctx context.Context, token string, realm string, userID string, roles []gocloak.Role) error

	// DeleteResourceFunc mocks the DeleteResource method.
	DeleteResourceFunc func(ctx context.Context, token string, realm string, clientID string, resourceID string) error

	// DeleteResourceClientFunc mocks the DeleteResourceClient method.
	DeleteResourceClientFunc func(ctx context.Context, token string, realm string, resourceID string) error

	// DeleteResourcePolicyFunc mocks the DeleteResourcePolicy method.
	DeleteResourcePolicyFunc func(ctx context.Context, token string, realm string, permissionID string) error

	// DeleteScopeFunc mocks the DeleteScope method.
	DeleteScopeFunc func(ctx context.Context, token string, realm string, clientID string, scopeID string) error

	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(ctx context.Context, accessToken string, realm string, userID string) error

	// DeleteUserFederatedIdentityFunc mocks the DeleteUserFederatedIdentity method.
	DeleteUserFederatedIdentityFunc func(ctx context.Context, token string, realm string, userID string, providerID string) error

	// DeleteUserFromGroupFunc mocks the DeleteUserFromGroup method.
	DeleteUserFromGroupFunc func(ctx context.Context, token string, realm string, userID string, groupID string) error

	// DeleteUserPermissionFunc mocks the DeleteUserPermission method.
	DeleteUserPermissionFunc func(ctx context.Context, token string, realm string, ticketID string) error

	// DisableAllCredentialsByTypeFunc mocks the DisableAllCredentialsByType method.
	DisableAllCredentialsByTypeFunc func(ctx context.Context, token string, realm string, userID string, types []string) error

	// ExecuteActionsEmailFunc mocks the ExecuteActionsEmail method.
	ExecuteActionsEmailFunc func(ctx context.Context, token string, realm string, params gocloak.ExecuteActionsEmail) error

	// ExportIDPPublicBrokerConfigFunc mocks the ExportIDPPublicBrokerConfig method.
	ExportIDPPublicBrokerConfigFunc func(ctx context.Context, token string, realm string, alias string) (*string, error)

	// GetAvailableClientRolesByGroupIDFunc mocks the GetAvailableClientRolesByGroupID method.
	GetAvailableClientRolesByGroupIDFunc func(ctx context.Context, token string, realm string, clientID string, groupID string) ([]*gocloak.Role, error)

	// GetAvailableClientRolesByUserIDFunc mocks the GetAvailableClientRolesByUserID method.
	GetAvailableClientRolesByUserIDFunc func(ctx context.Context, token string, realm string, clientID string, userID string) ([]*gocloak.Role, error)

	// GetAvailableRealmRolesByGroupIDFunc mocks the GetAvailableRealmRolesByGroupID method.
	GetAvailableRealmRolesByGroupIDFunc func(ctx context.Context, token string, realm string, groupID string) ([]*gocloak.Role, error)

	// GetAvailableRealmRolesByUserIDFunc mocks the GetAvailableRealmRolesByUserID method.
	GetAvailableRealmRolesByUserIDFunc func(ctx context.Context, token string, realm string, userID string) ([]*gocloak.Role, error)

	// GetCertsFunc mocks the GetCerts method.
	GetCertsFunc func(ctx context.Context, realm string) (*gocloak.CertResponse, error)

	// GetClientFunc mocks the GetClient method.
	GetClientFunc func(ctx context.Context, accessToken string, realm string, clientID string) (*gocloak.Client, error)

	// GetClientOfflineSessionsFunc mocks the GetClientOfflineSessions method.
	GetClientOfflineSessionsFunc func(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.UserSessionRepresentation, error)

	// GetClientRoleFunc mocks the GetClientRole method.
	GetClientRoleFunc func(ctx context.Context, token string, realm string, clientID string, roleName string) (*gocloak.Role, error)

	// GetClientRoleByIDFunc mocks the GetClientRoleByID method.
	GetClientRoleByIDFunc func(ctx context.Context, accessToken string, realm string, roleID string) (*gocloak.Role, error)

	// GetClientRolesFunc mocks the GetClientRoles method.
	GetClientRolesFunc func(ctx context.Context, accessToken string, realm string, clientID string) ([]*gocloak.Role, error)

	// GetClientRolesByGroupIDFunc mocks the GetClientRolesByGroupID method.
	GetClientRolesByGroupIDFunc func(ctx context.Context, token string, realm string, clientID string, groupID string) ([]*gocloak.Role, error)

	// GetClientRolesByUserIDFunc mocks the GetClientRolesByUserID method.
	GetClientRolesByUserIDFunc func(ctx context.Context, token string, realm string, clientID string, userID string) ([]*gocloak.Role, error)

	// GetClientScopeFunc mocks the GetClientScope method.
	GetClientScopeFunc func(ctx context.Context, token string, realm string, scopeID string) (*gocloak.ClientScope, error)

	// GetClientScopeMappingsFunc mocks the GetClientScopeMappings method.
	GetClientScopeMappingsFunc func(ctx context.Context, token string, realm string, clientID string) (*gocloak.MappingsRepresentation, error)

	// GetClientScopeMappingsClientRolesFunc mocks the GetClientScopeMappingsClientRoles method.
	GetClientScopeMappingsClientRolesFunc func(ctx context.Context, token string, realm string, clientID string, clientsID string) ([]*gocloak.Role, error)

	// GetClientScopeMappingsClientRolesAvailableFunc mocks the GetClientScopeMappingsClientRolesAvailable method.
	GetClientScopeMappingsClientRolesAvailableFunc func(ctx context.Context, token string, realm string, clientID string, clientsID string) ([]*gocloak.Role, error)

	// GetClientScopeMappingsRealmRolesFunc mocks the GetClientScopeMappingsRealmRoles method.
	GetClientScopeMappingsRealmRolesFunc func(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.Role, error)

	// GetClientScopeMappingsRealmRolesAvailableFunc mocks the GetClientScopeMappingsRealmRolesAvailable method.
	GetClientScopeMappingsRealmRolesAvailableFunc func(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.Role, error)

	// GetClientScopesFunc mocks the GetClientScopes method.
	GetClientScopesFunc func(ctx context.Context, token string, realm string) ([]*gocloak.ClientScope, error)

	// GetClientSecretFunc mocks the GetClientSecret method.
	GetClientSecretFunc func(ctx context.Context, token string, realm string, clientID string) (*gocloak.CredentialRepresentation, error)

	// GetClientServiceAccountFunc mocks the GetClientServiceAccount method.
	GetClientServiceAccountFunc func(ctx context.Context, token string, realm string, clientID string) (*gocloak.User, error)

	// GetClientUserSessionsFunc mocks the GetClientUserSessions method.
	GetClientUserSessionsFunc func(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.UserSessionRepresentation, error)

	// GetClientsFunc mocks the GetClients method.
	GetClientsFunc func(ctx context.Context, accessToken string, realm string, params gocloak.GetClientsParams) ([]*gocloak.Client, error)

	// GetClientsDefaultScopesFunc mocks the GetClientsDefaultScopes method.
	GetClientsDefaultScopesFunc func(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.ClientScope, error)

	// GetClientsOptionalScopesFunc mocks the GetClientsOptionalScopes method.
	GetClientsOptionalScopesFunc func(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.ClientScope, error)

	// GetComponentsFunc mocks the GetComponents method.
	GetComponentsFunc func(ctx context.Context, accessToken string, realm string) ([]*gocloak.Component, error)

	// GetCompositeClientRolesByGroupIDFunc mocks the GetCompositeClientRolesByGroupID method.
	GetCompositeClientRolesByGroupIDFunc func(ctx context.Context, token string, realm string, clientID string, groupID string) ([]*gocloak.Role, error)

	// GetCompositeClientRolesByRoleIDFunc mocks the GetCompositeClientRolesByRoleID method.
	GetCompositeClientRolesByRoleIDFunc func(ctx context.Context, token string, realm string, clientID string, roleID string) ([]*gocloak.Role, error)

	// GetCompositeClientRolesByUserIDFunc mocks the GetCompositeClientRolesByUserID method.
	GetCompositeClientRolesByUserIDFunc func(ctx context.Context, token string, realm string, clientID string, userID string) ([]*gocloak.Role, error)

	// GetCompositeRealmRolesByGroupIDFunc mocks the GetCompositeRealmRolesByGroupID method.
	GetCompositeRealmRolesByGroupIDFunc func(ctx context.Context, token string, realm string, groupID string) ([]*gocloak.Role, error)

	// GetCompositeRealmRolesByRoleIDFunc mocks the GetCompositeRealmRolesByRoleID method.
	GetCompositeRealmRolesByRoleIDFunc func(ctx context.Context, token string, realm string, roleID string) ([]*gocloak.Role, error)

	// GetCompositeRealmRolesByUserIDFunc mocks the GetCompositeRealmRolesByUserID method.
	GetCompositeRealmRolesByUserIDFunc func(ctx context.Context, token string, realm string, userID string) ([]*gocloak.Role, error)

	// GetConfiguredUserStorageCredentialTypesFunc mocks the GetConfiguredUserStorageCredentialTypes method.
	GetConfiguredUserStorageCredentialTypesFunc func(ctx context.Context, token string, realm string, userID string) ([]string, error)

	// GetCredentialRegistratorsFunc mocks the GetCredentialRegistrators method.
	GetCredentialRegistratorsFunc func(ctx context.Context, token string, realm string) ([]string, error)

	// GetCredentialsFunc mocks the GetCredentials method.
	GetCredentialsFunc func(ctx context.Context, token string, realm string, UserID string) ([]*gocloak.CredentialRepresentation, error)

	// GetDefaultDefaultClientScopesFunc mocks the GetDefaultDefaultClientScopes method.
	GetDefaultDefaultClientScopesFunc func(ctx context.Context, token string, realm string) ([]*gocloak.ClientScope, error)

	// GetDefaultGroupsFunc mocks the GetDefaultGroups method.
	GetDefaultGroupsFunc func(ctx context.Context, accessToken string, realm string) ([]*gocloak.Group, error)

	// GetDefaultOptionalClientScopesFunc mocks the GetDefaultOptionalClientScopes method.
	GetDefaultOptionalClientScopesFunc func(ctx context.Context, token string, realm string) ([]*gocloak.ClientScope, error)

	// GetDependentPermissionsFunc mocks the GetDependentPermissions method.
	GetDependentPermissionsFunc func(ctx context.Context, token string, realm string, clientID string, policyID string) ([]*gocloak.PermissionRepresentation, error)

	// GetGroupFunc mocks the GetGroup method.
	GetGroupFunc func(ctx context.Context, accessToken string, realm string, groupID string) (*gocloak.Group, error)

	// GetGroupMembersFunc mocks the GetGroupMembers method.
	GetGroupMembersFunc func(ctx context.Context, accessToken string, realm string, groupID string, params gocloak.GetGroupsParams) ([]*gocloak.User, error)

	// GetGroupsFunc mocks the GetGroups method.
	GetGroupsFunc func(ctx context.Context, accessToken string, realm string, params gocloak.GetGroupsParams) ([]*gocloak.Group, error)

	// GetGroupsCountFunc mocks the GetGroupsCount method.
	GetGroupsCountFunc func(ctx context.Context, token string, realm string, params gocloak.GetGroupsParams) (int, error)

	// GetIdentityProviderFunc mocks the GetIdentityProvider method.
	GetIdentityProviderFunc func(ctx context.Context, token string, realm string, alias string) (*gocloak.IdentityProviderRepresentation, error)

	// GetIdentityProviderMappersFunc mocks the GetIdentityProviderMappers method.
	GetIdentityProviderMappersFunc func(ctx context.Context, token string, realm string, alias string) ([]*gocloak.IdentityProviderMapper, error)

	// GetIdentityProvidersFunc mocks the GetIdentityProviders method.
	GetIdentityProvidersFunc func(ctx context.Context, token string, realm string) ([]*gocloak.IdentityProviderRepresentation, error)

	// GetIssuerFunc mocks the GetIssuer method.
	GetIssuerFunc func(ctx context.Context, realm string) (*gocloak.IssuerResponse, error)

	// GetKeyStoreConfigFunc mocks the GetKeyStoreConfig method.
	GetKeyStoreConfigFunc func(ctx context.Context, accessToken string, realm string) (*gocloak.KeyStoreConfig, error)

	// GetPermissionFunc mocks the GetPermission method.
	GetPermissionFunc func(ctx context.Context, token string, realm string, clientID string, permissionID string) (*gocloak.PermissionRepresentation, error)

	// GetPermissionResourcesFunc mocks the GetPermissionResources method.
	GetPermissionResourcesFunc func(ctx context.Context, token string, realm string, clientID string, permissionID string) ([]*gocloak.PermissionResource, error)

	// GetPermissionScopesFunc mocks the GetPermissionScopes method.
	GetPermissionScopesFunc func(ctx context.Context, token string, realm string, clientID string, permissionID string) ([]*gocloak.PermissionScope, error)

	// GetPermissionsFunc mocks the GetPermissions method.
	GetPermissionsFunc func(ctx context.Context, token string, realm string, clientID string, params gocloak.GetPermissionParams) ([]*gocloak.PermissionRepresentation, error)

	// GetPoliciesFunc mocks the GetPolicies method.
	GetPoliciesFunc func(ctx context.Context, token string, realm string, clientID string, params gocloak.GetPolicyParams) ([]*gocloak.PolicyRepresentation, error)

	// GetPolicyFunc mocks the GetPolicy method.
	GetPolicyFunc func(ctx context.Context, token string, realm string, clientID string, policyID string) (*gocloak.PolicyRepresentation, error)

	// GetRawUserInfoFunc mocks the GetRawUserInfo method.
	GetRawUserInfoFunc func(ctx context.Context, accessToken string, realm string) (map[string]interface{}, error)

	// GetRealmFunc mocks the GetRealm method.
	GetRealmFunc func(ctx context.Context, token string, realm string) (*gocloak.RealmRepresentation, error)

	// GetRealmRoleFunc mocks the GetRealmRole method.
	GetRealmRoleFunc func(ctx context.Context, token string, realm string, roleName string) (*gocloak.Role, error)

	// GetRealmRolesFunc mocks the GetRealmRoles method.
	GetRealmRolesFunc func(ctx context.Context, accessToken string, realm string) ([]*gocloak.Role, error)

	// GetRealmRolesByGroupIDFunc mocks the GetRealmRolesByGroupID method.
	GetRealmRolesByGroupIDFunc func(ctx context.Context, accessToken string, realm string, groupID string) ([]*gocloak.Role, error)

	// GetRealmRolesByUserIDFunc mocks the GetRealmRolesByUserID method.
	GetRealmRolesByUserIDFunc func(ctx context.Context, accessToken string, realm string, userID string) ([]*gocloak.Role, error)

	// GetRealmsFunc mocks the GetRealms method.
	GetRealmsFunc func(ctx context.Context, token string) ([]*gocloak.RealmRepresentation, error)

	// GetRequestingPartyPermissionDecisionFunc mocks the GetRequestingPartyPermissionDecision method.
	GetRequestingPartyPermissionDecisionFunc func(ctx context.Context, token string, realm string, options gocloak.RequestingPartyTokenOptions) (*gocloak.RequestingPartyPermissionDecision, error)

	// GetRequestingPartyPermissionsFunc mocks the GetRequestingPartyPermissions method.
	GetRequestingPartyPermissionsFunc func(ctx context.Context, token string, realm string, options gocloak.RequestingPartyTokenOptions) (*[]gocloak.RequestingPartyPermission, error)

	// GetRequestingPartyTokenFunc mocks the GetRequestingPartyToken method.
	GetRequestingPartyTokenFunc func(ctx context.Context, token string, realm string, options gocloak.RequestingPartyTokenOptions) (*gocloak.JWT, error)

	// GetResourceFunc mocks the GetResource method.
	GetResourceFunc func(ctx context.Context, token string, realm string, clientID string, resourceID string) (*gocloak.ResourceRepresentation, error)

	// GetResourceClientFunc mocks the GetResourceClient method.
	GetResourceClientFunc func(ctx context.Context, token string, realm string, resourceID string) (*gocloak.ResourceRepresentation, error)

	// GetResourcePoliciesFunc mocks the GetResourcePolicies method.
	GetResourcePoliciesFunc func(ctx context.Context, token string, realm string, params gocloak.GetResourcePoliciesParams) ([]*gocloak.ResourcePolicyRepresentation, error)

	// GetResourcePolicyFunc mocks the GetResourcePolicy method.
	GetResourcePolicyFunc func(ctx context.Context, token string, realm string, permissionID string) (*gocloak.ResourcePolicyRepresentation, error)

	// GetResourcesFunc mocks the GetResources method.
	GetResourcesFunc func(ctx context.Context, token string, realm string, clientID string, params gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error)

	// GetResourcesClientFunc mocks the GetResourcesClient method.
	GetResourcesClientFunc func(ctx context.Context, token string, realm string, params gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error)

	// GetRoleMappingByGroupIDFunc mocks the GetRoleMappingByGroupID method.
	GetRoleMappingByGroupIDFunc func(ctx context.Context, accessToken string, realm string, groupID string) (*gocloak.MappingsRepresentation, error)

	// GetRoleMappingByUserIDFunc mocks the GetRoleMappingByUserID method.
	GetRoleMappingByUserIDFunc func(ctx context.Context, accessToken string, realm string, userID string) (*gocloak.MappingsRepresentation, error)

	// GetScopeFunc mocks the GetScope method.
	GetScopeFunc func(ctx context.Context, token string, realm string, clientID string, scopeID string) (*gocloak.ScopeRepresentation, error)

	// GetScopesFunc mocks the GetScopes method.
	GetScopesFunc func(ctx context.Context, token string, realm string, clientID string, params gocloak.GetScopeParams) ([]*gocloak.ScopeRepresentation, error)

	// GetServerInfoFunc mocks the GetServerInfo method.
	GetServerInfoFunc func(ctx context.Context, accessToken string) (*gocloak.ServerInfoRepesentation, error)

	// GetTokenFunc mocks the GetToken method.
	GetTokenFunc func(ctx context.Context, realm string, options gocloak.TokenOptions) (*gocloak.JWT, error)

	// GetUserByIDFunc mocks the GetUserByID method.
	GetUserByIDFunc func(ctx context.Context, accessToken string, realm string, userID string) (*gocloak.User, error)

	// GetUserCountFunc mocks the GetUserCount method.
	GetUserCountFunc func(ctx context.Context, accessToken string, realm string, params gocloak.GetUsersParams) (int, error)

	// GetUserFederatedIdentitiesFunc mocks the GetUserFederatedIdentities method.
	GetUserFederatedIdentitiesFunc func(ctx context.Context, token string, realm string, userID string) ([]*gocloak.FederatedIdentityRepresentation, error)

	// GetUserGroupsFunc mocks the GetUserGroups method.
	GetUserGroupsFunc func(ctx context.Context, accessToken string, realm string, userID string, params gocloak.GetGroupsParams) ([]*gocloak.Group, error)

	// GetUserInfoFunc mocks the GetUserInfo method.
	GetUserInfoFunc func(ctx context.Context, accessToken string, realm string) (*gocloak.UserInfo, error)

	// GetUserOfflineSessionsForClientFunc mocks the GetUserOfflineSessionsForClient method.
	GetUserOfflineSessionsForClientFunc func(ctx context.Context, token string, realm string, userID string, clientID string) ([]*gocloak.UserSessionRepresentation, error)

	// GetUserPermissionsFunc mocks the GetUserPermissions method.
	GetUserPermissionsFunc func(ctx context.Context, token string, realm string, params gocloak.GetUserPermissionParams) ([]*gocloak.PermissionGrantResponseRepresentation, error)

	// GetUserSessionsFunc mocks the GetUserSessions method.
	GetUserSessionsFunc func(ctx context.Context, token string, realm string, userID string) ([]*gocloak.UserSessionRepresentation, error)

	// GetUsersFunc mocks the GetUsers method.
	GetUsersFunc func(ctx context.Context, accessToken string, realm string, params gocloak.GetUsersParams) ([]*gocloak.User, error)

	// GetUsersByClientRoleNameFunc mocks the GetUsersByClientRoleName method.
	GetUsersByClientRoleNameFunc func(ctx context.Context, token string, realm string, clientID string, roleName string, params gocloak.GetUsersByRoleParams) ([]*gocloak.User, error)

	// GetUsersByRoleNameFunc mocks the GetUsersByRoleName method.
	GetUsersByRoleNameFunc func(ctx context.Context, token string, realm string, roleName string) ([]*gocloak.User, error)

	// GrantUserPermissionFunc mocks the GrantUserPermission method.
	GrantUserPermissionFunc func(ctx context.Context, token string, realm string, permission gocloak.PermissionGrantParams) (*gocloak.PermissionGrantResponseRepresentation, error)

	// ImportIdentityProviderConfigFunc mocks the ImportIdentityProviderConfig method.
	ImportIdentityProviderConfigFunc func(ctx context.Context, token string, realm string, fromURL string, providerID string) (map[string]string, error)

	// LoginFunc mocks the Login method.
	LoginFunc func(ctx context.Context, clientID string, clientSecret string, realm string, username string, password string) (*gocloak.JWT, error)

	// LoginAdminFunc mocks the LoginAdmin method.
	LoginAdminFunc func(ctx context.Context, username string, password string, realm string) (*gocloak.JWT, error)

	// LoginClientFunc mocks the LoginClient method.
	LoginClientFunc func(ctx context.Context, clientID string, clientSecret string, realm string) (*gocloak.JWT, error)

	// LoginClientSignedJWTFunc mocks the LoginClientSignedJWT method.
	LoginClientSignedJWTFunc func(ctx context.Context, clientID string, realm string, key interface{}, signedMethod jwt.SigningMethod, expiresAt *jwt.Time) (*gocloak.JWT, error)

	// LoginOtpFunc mocks the LoginOtp method.
	LoginOtpFunc func(ctx context.Context, clientID string, clientSecret string, realm string, username string, password string, totp string) (*gocloak.JWT, error)

	// LogoutFunc mocks the Logout method.
	LogoutFunc func(ctx context.Context, clientID string, clientSecret string, realm string, refreshToken string) error

	// LogoutAllSessionsFunc mocks the LogoutAllSessions method.
	LogoutAllSessionsFunc func(ctx context.Context, accessToken string, realm string, userID string) error

	// LogoutPublicClientFunc mocks the LogoutPublicClient method.
	LogoutPublicClientFunc func(ctx context.Context, clientID string, realm string, accessToken string, refreshToken string) error

	// LogoutUserSessionFunc mocks the LogoutUserSession method.
	LogoutUserSessionFunc func(ctx context.Context, accessToken string, realm string, session string) error

	// MoveCredentialBehindFunc mocks the MoveCredentialBehind method.
	MoveCredentialBehindFunc func(ctx context.Context, token string, realm string, userID string, credentialID string, newPreviousCredentialID string) error

	// MoveCredentialToFirstFunc mocks the MoveCredentialToFirst method.
	MoveCredentialToFirstFunc func(ctx context.Context, token string, realm string, userID string, credentialID string) error

	// RefreshTokenFunc mocks the RefreshToken method.
	RefreshTokenFunc func(ctx context.Context, refreshToken string, clientID string, clientSecret string, realm string) (*gocloak.JWT, error)

	// RegenerateClientSecretFunc mocks the RegenerateClientSecret method.
	RegenerateClientSecretFunc func(ctx context.Context, token string, realm string, clientID string) (*gocloak.CredentialRepresentation, error)

	// RemoveDefaultGroupFunc mocks the RemoveDefaultGroup method.
	RemoveDefaultGroupFunc func(ctx context.Context, accessToken string, realm string, groupID string) error

	// RemoveDefaultScopeFromClientFunc mocks the RemoveDefaultScopeFromClient method.
	RemoveDefaultScopeFromClientFunc func(ctx context.Context, token string, realm string, clientID string, scopeID string) error

	// RemoveOptionalScopeFromClientFunc mocks the RemoveOptionalScopeFromClient method.
	RemoveOptionalScopeFromClientFunc func(ctx context.Context, token string, realm string, clientID string, scopeID string) error

	// RestyClientFunc mocks the RestyClient method.
	RestyClientFunc func() *resty.Client

	// RetrospectTokenFunc mocks the RetrospectToken method.
	RetrospectTokenFunc func(ctx context.Context, accessToken string, clientID string, clientSecret string, realm string) (*gocloak.RetrospecTokenResult, error)

	// SetPasswordFunc mocks the SetPassword method.
	SetPasswordFunc func(ctx context.Context, token string, userID string, realm string, password string, temporary bool) error

	// SetRestyClientFunc mocks the SetRestyClient method.
	SetRestyClientFunc func(restyClient *resty.Client)

	// UpdateClientFunc mocks the UpdateClient method.
	UpdateClientFunc func(ctx context.Context, accessToken string, realm string, updatedClient gocloak.Client) error

	// UpdateClientProtocolMapperFunc mocks the UpdateClientProtocolMapper method.
	UpdateClientProtocolMapperFunc func(ctx context.Context, token string, realm string, clientID string, mapperID string, mapper gocloak.ProtocolMapperRepresentation) error

	// UpdateClientScopeFunc mocks the UpdateClientScope method.
	UpdateClientScopeFunc func(ctx context.Context, accessToken string, realm string, scope gocloak.ClientScope) error

	// UpdateCredentialUserLabelFunc mocks the UpdateCredentialUserLabel method.
	UpdateCredentialUserLabelFunc func(ctx context.Context, token string, realm string, userID string, credentialID string, userLabel string) error

	// UpdateGroupFunc mocks the UpdateGroup method.
	UpdateGroupFunc func(ctx context.Context, accessToken string, realm string, updatedGroup gocloak.Group) error

	// UpdateIdentityProviderFunc mocks the UpdateIdentityProvider method.
	UpdateIdentityProviderFunc func(ctx context.Context, token string, realm string, alias string, providerRep gocloak.IdentityProviderRepresentation) error

	// UpdatePermissionFunc mocks the UpdatePermission method.
	UpdatePermissionFunc func(ctx context.Context, token string, realm string, clientID string, permission gocloak.PermissionRepresentation) error

	// UpdatePolicyFunc mocks the UpdatePolicy method.
	UpdatePolicyFunc func(ctx context.Context, token string, realm string, clientID string, policy gocloak.PolicyRepresentation) error

	// UpdateRealmFunc mocks the UpdateRealm method.
	UpdateRealmFunc func(ctx context.Context, token string, realm gocloak.RealmRepresentation) error

	// UpdateRealmRoleFunc mocks the UpdateRealmRole method.
	UpdateRealmRoleFunc func(ctx context.Context, token string, realm string, roleName string, role gocloak.Role) error

	// UpdateResourceFunc mocks the UpdateResource method.
	UpdateResourceFunc func(ctx context.Context, token string, realm string, clientID string, resource gocloak.ResourceRepresentation) error

	// UpdateResourceClientFunc mocks the UpdateResourceClient method.
	UpdateResourceClientFunc func(ctx context.Context, token string, realm string, resource gocloak.ResourceRepresentation) error

	// UpdateResourcePolicyFunc mocks the UpdateResourcePolicy method.
	UpdateResourcePolicyFunc func(ctx context.Context, token string, realm string, permissionID string, policy gocloak.ResourcePolicyRepresentation) error

	// UpdateRoleFunc mocks the UpdateRole method.
	UpdateRoleFunc func(ctx context.Context, accessToken string, realm string, clientID string, role gocloak.Role) error

	// UpdateScopeFunc mocks the UpdateScope method.
	UpdateScopeFunc func(ctx context.Context, token string, realm string, clientID string, resource gocloak.ScopeRepresentation) error

	// UpdateUserFunc mocks the UpdateUser method.
	UpdateUserFunc func(ctx context.Context, accessToken string, realm string, user gocloak.User) error

	// UpdateUserPermissionFunc mocks the UpdateUserPermission method.
	UpdateUserPermissionFunc func(ctx context.Context, token string, realm string, permission gocloak.PermissionGrantParams) (*gocloak.PermissionGrantResponseRepresentation, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClientRoleComposite holds details about calls to the AddClientRoleComposite method.
		AddClientRoleComposite []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// RoleID is the roleID argument value.
			RoleID string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// AddClientRoleToGroup holds details about calls to the AddClientRoleToGroup method.
		AddClientRoleToGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// GroupID is the groupID argument value.
			GroupID string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// AddClientRoleToUser holds details about calls to the AddClientRoleToUser method.
		AddClientRoleToUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// UserID is the userID argument value.
			UserID string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// AddDefaultGroup holds details about calls to the AddDefaultGroup method.
		AddDefaultGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// AddDefaultScopeToClient holds details about calls to the AddDefaultScopeToClient method.
		AddDefaultScopeToClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// ScopeID is the scopeID argument value.
			ScopeID string
		}
		// AddOptionalScopeToClient holds details about calls to the AddOptionalScopeToClient method.
		AddOptionalScopeToClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// ScopeID is the scopeID argument value.
			ScopeID string
		}
		// AddRealmRoleComposite holds details about calls to the AddRealmRoleComposite method.
		AddRealmRoleComposite []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// RoleName is the roleName argument value.
			RoleName string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// AddRealmRoleToGroup holds details about calls to the AddRealmRoleToGroup method.
		AddRealmRoleToGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// GroupID is the groupID argument value.
			GroupID string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// AddRealmRoleToUser holds details about calls to the AddRealmRoleToUser method.
		AddRealmRoleToUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// AddUserToGroup holds details about calls to the AddUserToGroup method.
		AddUserToGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// ClearKeysCache holds details about calls to the ClearKeysCache method.
		ClearKeysCache []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
		}
		// ClearRealmCache holds details about calls to the ClearRealmCache method.
		ClearRealmCache []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
		}
		// ClearUserCache holds details about calls to the ClearUserCache method.
		ClearUserCache []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
		}
		// CreateChildGroup holds details about calls to the CreateChildGroup method.
		CreateChildGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// GroupID is the groupID argument value.
			GroupID string
			// Group is the group argument value.
			Group gocloak.Group
		}
		// CreateClient holds details about calls to the CreateClient method.
		CreateClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID gocloak.Client
		}
		// CreateClientProtocolMapper holds details about calls to the CreateClientProtocolMapper method.
		CreateClientProtocolMapper []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Mapper is the mapper argument value.
			Mapper gocloak.ProtocolMapperRepresentation
		}
		// CreateClientRole holds details about calls to the CreateClientRole method.
		CreateClientRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Role is the role argument value.
			Role gocloak.Role
		}
		// CreateClientScope holds details about calls to the CreateClientScope method.
		CreateClientScope []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// Scope is the scope argument value.
			Scope gocloak.ClientScope
		}
		// CreateClientScopeMappingsClientRoles holds details about calls to the CreateClientScopeMappingsClientRoles method.
		CreateClientScopeMappingsClientRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// ClientsID is the clientsID argument value.
			ClientsID string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// CreateClientScopeMappingsRealmRoles holds details about calls to the CreateClientScopeMappingsRealmRoles method.
		CreateClientScopeMappingsRealmRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// CreateComponent holds details about calls to the CreateComponent method.
		CreateComponent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// Component is the component argument value.
			Component gocloak.Component
		}
		// CreateGroup holds details about calls to the CreateGroup method.
		CreateGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// Group is the group argument value.
			Group gocloak.Group
		}
		// CreateIdentityProvider holds details about calls to the CreateIdentityProvider method.
		CreateIdentityProvider []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ProviderRep is the providerRep argument value.
			ProviderRep gocloak.IdentityProviderRepresentation
		}
		// CreateIdentityProviderMapper holds details about calls to the CreateIdentityProviderMapper method.
		CreateIdentityProviderMapper []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Alias is the alias argument value.
			Alias string
			// Mapper is the mapper argument value.
			Mapper gocloak.IdentityProviderMapper
		}
		// CreatePermission holds details about calls to the CreatePermission method.
		CreatePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Permission is the permission argument value.
			Permission gocloak.PermissionRepresentation
		}
		// CreatePermissionTicket holds details about calls to the CreatePermissionTicket method.
		CreatePermissionTicket []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Permissions is the permissions argument value.
			Permissions []gocloak.CreatePermissionTicketParams
		}
		// CreatePolicy holds details about calls to the CreatePolicy method.
		CreatePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Policy is the policy argument value.
			Policy gocloak.PolicyRepresentation
		}
		// CreateRealm holds details about calls to the CreateRealm method.
		CreateRealm []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm gocloak.RealmRepresentation
		}
		// CreateRealmRole holds details about calls to the CreateRealmRole method.
		CreateRealmRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Role is the role argument value.
			Role gocloak.Role
		}
		// CreateResource holds details about calls to the CreateResource method.
		CreateResource []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Resource is the resource argument value.
			Resource gocloak.ResourceRepresentation
		}
		// CreateResourceClient holds details about calls to the CreateResourceClient method.
		CreateResourceClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Resource is the resource argument value.
			Resource gocloak.ResourceRepresentation
		}
		// CreateResourcePolicy holds details about calls to the CreateResourcePolicy method.
		CreateResourcePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ResourceID is the resourceID argument value.
			ResourceID string
			// Policy is the policy argument value.
			Policy gocloak.ResourcePolicyRepresentation
		}
		// CreateScope holds details about calls to the CreateScope method.
		CreateScope []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Scope is the scope argument value.
			Scope gocloak.ScopeRepresentation
		}
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// User is the user argument value.
			User gocloak.User
		}
		// CreateUserFederatedIdentity holds details about calls to the CreateUserFederatedIdentity method.
		CreateUserFederatedIdentity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
			// ProviderID is the providerID argument value.
			ProviderID string
			// FederatedIdentityRep is the federatedIdentityRep argument value.
			FederatedIdentityRep gocloak.FederatedIdentityRepresentation
		}
		// DecodeAccessToken holds details about calls to the DecodeAccessToken method.
		DecodeAccessToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// ExpectedAudience is the expectedAudience argument value.
			ExpectedAudience string
		}
		// DecodeAccessTokenCustomClaims holds details about calls to the DecodeAccessTokenCustomClaims method.
		DecodeAccessTokenCustomClaims []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// ExpectedAudience is the expectedAudience argument value.
			ExpectedAudience string
			// Claims is the claims argument value.
			Claims jwt.Claims
		}
		// DeleteClient holds details about calls to the DeleteClient method.
		DeleteClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
		}
		// DeleteClientProtocolMapper holds details about calls to the DeleteClientProtocolMapper method.
		DeleteClientProtocolMapper []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// MapperID is the mapperID argument value.
			MapperID string
		}
		// DeleteClientRole holds details about calls to the DeleteClientRole method.
		DeleteClientRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// RoleName is the roleName argument value.
			RoleName string
		}
		// DeleteClientRoleComposite holds details about calls to the DeleteClientRoleComposite method.
		DeleteClientRoleComposite []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// RoleID is the roleID argument value.
			RoleID string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// DeleteClientRoleFromGroup holds details about calls to the DeleteClientRoleFromGroup method.
		DeleteClientRoleFromGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// GroupID is the groupID argument value.
			GroupID string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// DeleteClientRoleFromUser holds details about calls to the DeleteClientRoleFromUser method.
		DeleteClientRoleFromUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// UserID is the userID argument value.
			UserID string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// DeleteClientScope holds details about calls to the DeleteClientScope method.
		DeleteClientScope []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// ScopeID is the scopeID argument value.
			ScopeID string
		}
		// DeleteClientScopeMappingsClientRoles holds details about calls to the DeleteClientScopeMappingsClientRoles method.
		DeleteClientScopeMappingsClientRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// ClientsID is the clientsID argument value.
			ClientsID string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// DeleteClientScopeMappingsRealmRoles holds details about calls to the DeleteClientScopeMappingsRealmRoles method.
		DeleteClientScopeMappingsRealmRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// DeleteComponent holds details about calls to the DeleteComponent method.
		DeleteComponent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// ComponentID is the componentID argument value.
			ComponentID string
		}
		// DeleteCredentials holds details about calls to the DeleteCredentials method.
		DeleteCredentials []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the UserID argument value.
			UserID string
			// CredentialID is the CredentialID argument value.
			CredentialID string
		}
		// DeleteGroup holds details about calls to the DeleteGroup method.
		DeleteGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// DeleteIdentityProvider holds details about calls to the DeleteIdentityProvider method.
		DeleteIdentityProvider []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Alias is the alias argument value.
			Alias string
		}
		// DeleteIdentityProviderMapper holds details about calls to the DeleteIdentityProviderMapper method.
		DeleteIdentityProviderMapper []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Alias is the alias argument value.
			Alias string
			// MapperID is the mapperID argument value.
			MapperID string
		}
		// DeletePermission holds details about calls to the DeletePermission method.
		DeletePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// PermissionID is the permissionID argument value.
			PermissionID string
		}
		// DeletePolicy holds details about calls to the DeletePolicy method.
		DeletePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// PolicyID is the policyID argument value.
			PolicyID string
		}
		// DeleteRealm holds details about calls to the DeleteRealm method.
		DeleteRealm []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
		}
		// DeleteRealmRole holds details about calls to the DeleteRealmRole method.
		DeleteRealmRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// RoleName is the roleName argument value.
			RoleName string
		}
		// DeleteRealmRoleComposite holds details about calls to the DeleteRealmRoleComposite method.
		DeleteRealmRoleComposite []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// RoleName is the roleName argument value.
			RoleName string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// DeleteRealmRoleFromGroup holds details about calls to the DeleteRealmRoleFromGroup method.
		DeleteRealmRoleFromGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// GroupID is the groupID argument value.
			GroupID string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// DeleteRealmRoleFromUser holds details about calls to the DeleteRealmRoleFromUser method.
		DeleteRealmRoleFromUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
			// Roles is the roles argument value.
			Roles []gocloak.Role
		}
		// DeleteResource holds details about calls to the DeleteResource method.
		DeleteResource []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// ResourceID is the resourceID argument value.
			ResourceID string
		}
		// DeleteResourceClient holds details about calls to the DeleteResourceClient method.
		DeleteResourceClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ResourceID is the resourceID argument value.
			ResourceID string
		}
		// DeleteResourcePolicy holds details about calls to the DeleteResourcePolicy method.
		DeleteResourcePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// PermissionID is the permissionID argument value.
			PermissionID string
		}
		// DeleteScope holds details about calls to the DeleteScope method.
		DeleteScope []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// ScopeID is the scopeID argument value.
			ScopeID string
		}
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
		}
		// DeleteUserFederatedIdentity holds details about calls to the DeleteUserFederatedIdentity method.
		DeleteUserFederatedIdentity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
			// ProviderID is the providerID argument value.
			ProviderID string
		}
		// DeleteUserFromGroup holds details about calls to the DeleteUserFromGroup method.
		DeleteUserFromGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// DeleteUserPermission holds details about calls to the DeleteUserPermission method.
		DeleteUserPermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// TicketID is the ticketID argument value.
			TicketID string
		}
		// DisableAllCredentialsByType holds details about calls to the DisableAllCredentialsByType method.
		DisableAllCredentialsByType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
			// Types is the types argument value.
			Types []string
		}
		// ExecuteActionsEmail holds details about calls to the ExecuteActionsEmail method.
		ExecuteActionsEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Params is the params argument value.
			Params gocloak.ExecuteActionsEmail
		}
		// ExportIDPPublicBrokerConfig holds details about calls to the ExportIDPPublicBrokerConfig method.
		ExportIDPPublicBrokerConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Alias is the alias argument value.
			Alias string
		}
		// GetAvailableClientRolesByGroupID holds details about calls to the GetAvailableClientRolesByGroupID method.
		GetAvailableClientRolesByGroupID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// GetAvailableClientRolesByUserID holds details about calls to the GetAvailableClientRolesByUserID method.
		GetAvailableClientRolesByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// UserID is the userID argument value.
			UserID string
		}
		// GetAvailableRealmRolesByGroupID holds details about calls to the GetAvailableRealmRolesByGroupID method.
		GetAvailableRealmRolesByGroupID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// GetAvailableRealmRolesByUserID holds details about calls to the GetAvailableRealmRolesByUserID method.
		GetAvailableRealmRolesByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
		}
		// GetCerts holds details about calls to the GetCerts method.
		GetCerts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Realm is the realm argument value.
			Realm string
		}
		// GetClient holds details about calls to the GetClient method.
		GetClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
		}
		// GetClientOfflineSessions holds details about calls to the GetClientOfflineSessions method.
		GetClientOfflineSessions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
		}
		// GetClientRole holds details about calls to the GetClientRole method.
		GetClientRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// RoleName is the roleName argument value.
			RoleName string
		}
		// GetClientRoleByID holds details about calls to the GetClientRoleByID method.
		GetClientRoleByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// RoleID is the roleID argument value.
			RoleID string
		}
		// GetClientRoles holds details about calls to the GetClientRoles method.
		GetClientRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
		}
		// GetClientRolesByGroupID holds details about calls to the GetClientRolesByGroupID method.
		GetClientRolesByGroupID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// GetClientRolesByUserID holds details about calls to the GetClientRolesByUserID method.
		GetClientRolesByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// UserID is the userID argument value.
			UserID string
		}
		// GetClientScope holds details about calls to the GetClientScope method.
		GetClientScope []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ScopeID is the scopeID argument value.
			ScopeID string
		}
		// GetClientScopeMappings holds details about calls to the GetClientScopeMappings method.
		GetClientScopeMappings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
		}
		// GetClientScopeMappingsClientRoles holds details about calls to the GetClientScopeMappingsClientRoles method.
		GetClientScopeMappingsClientRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// ClientsID is the clientsID argument value.
			ClientsID string
		}
		// GetClientScopeMappingsClientRolesAvailable holds details about calls to the GetClientScopeMappingsClientRolesAvailable method.
		GetClientScopeMappingsClientRolesAvailable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// ClientsID is the clientsID argument value.
			ClientsID string
		}
		// GetClientScopeMappingsRealmRoles holds details about calls to the GetClientScopeMappingsRealmRoles method.
		GetClientScopeMappingsRealmRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
		}
		// GetClientScopeMappingsRealmRolesAvailable holds details about calls to the GetClientScopeMappingsRealmRolesAvailable method.
		GetClientScopeMappingsRealmRolesAvailable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
		}
		// GetClientScopes holds details about calls to the GetClientScopes method.
		GetClientScopes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
		}
		// GetClientSecret holds details about calls to the GetClientSecret method.
		GetClientSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
		}
		// GetClientServiceAccount holds details about calls to the GetClientServiceAccount method.
		GetClientServiceAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
		}
		// GetClientUserSessions holds details about calls to the GetClientUserSessions method.
		GetClientUserSessions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
		}
		// GetClients holds details about calls to the GetClients method.
		GetClients []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// Params is the params argument value.
			Params gocloak.GetClientsParams
		}
		// GetClientsDefaultScopes holds details about calls to the GetClientsDefaultScopes method.
		GetClientsDefaultScopes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
		}
		// GetClientsOptionalScopes holds details about calls to the GetClientsOptionalScopes method.
		GetClientsOptionalScopes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
		}
		// GetComponents holds details about calls to the GetComponents method.
		GetComponents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
		}
		// GetCompositeClientRolesByGroupID holds details about calls to the GetCompositeClientRolesByGroupID method.
		GetCompositeClientRolesByGroupID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// GetCompositeClientRolesByRoleID holds details about calls to the GetCompositeClientRolesByRoleID method.
		GetCompositeClientRolesByRoleID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// RoleID is the roleID argument value.
			RoleID string
		}
		// GetCompositeClientRolesByUserID holds details about calls to the GetCompositeClientRolesByUserID method.
		GetCompositeClientRolesByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// UserID is the userID argument value.
			UserID string
		}
		// GetCompositeRealmRolesByGroupID holds details about calls to the GetCompositeRealmRolesByGroupID method.
		GetCompositeRealmRolesByGroupID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// GetCompositeRealmRolesByRoleID holds details about calls to the GetCompositeRealmRolesByRoleID method.
		GetCompositeRealmRolesByRoleID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// RoleID is the roleID argument value.
			RoleID string
		}
		// GetCompositeRealmRolesByUserID holds details about calls to the GetCompositeRealmRolesByUserID method.
		GetCompositeRealmRolesByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
		}
		// GetConfiguredUserStorageCredentialTypes holds details about calls to the GetConfiguredUserStorageCredentialTypes method.
		GetConfiguredUserStorageCredentialTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
		}
		// GetCredentialRegistrators holds details about calls to the GetCredentialRegistrators method.
		GetCredentialRegistrators []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
		}
		// GetCredentials holds details about calls to the GetCredentials method.
		GetCredentials []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the UserID argument value.
			UserID string
		}
		// GetDefaultDefaultClientScopes holds details about calls to the GetDefaultDefaultClientScopes method.
		GetDefaultDefaultClientScopes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
		}
		// GetDefaultGroups holds details about calls to the GetDefaultGroups method.
		GetDefaultGroups []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
		}
		// GetDefaultOptionalClientScopes holds details about calls to the GetDefaultOptionalClientScopes method.
		GetDefaultOptionalClientScopes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
		}
		// GetDependentPermissions holds details about calls to the GetDependentPermissions method.
		GetDependentPermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// PolicyID is the policyID argument value.
			PolicyID string
		}
		// GetGroup holds details about calls to the GetGroup method.
		GetGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// GetGroupMembers holds details about calls to the GetGroupMembers method.
		GetGroupMembers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// GroupID is the groupID argument value.
			GroupID string
			// Params is the params argument value.
			Params gocloak.GetGroupsParams
		}
		// GetGroups holds details about calls to the GetGroups method.
		GetGroups []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// Params is the params argument value.
			Params gocloak.GetGroupsParams
		}
		// GetGroupsCount holds details about calls to the GetGroupsCount method.
		GetGroupsCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Params is the params argument value.
			Params gocloak.GetGroupsParams
		}
		// GetIdentityProvider holds details about calls to the GetIdentityProvider method.
		GetIdentityProvider []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Alias is the alias argument value.
			Alias string
		}
		// GetIdentityProviderMappers holds details about calls to the GetIdentityProviderMappers method.
		GetIdentityProviderMappers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Alias is the alias argument value.
			Alias string
		}
		// GetIdentityProviders holds details about calls to the GetIdentityProviders method.
		GetIdentityProviders []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
		}
		// GetIssuer holds details about calls to the GetIssuer method.
		GetIssuer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Realm is the realm argument value.
			Realm string
		}
		// GetKeyStoreConfig holds details about calls to the GetKeyStoreConfig method.
		GetKeyStoreConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
		}
		// GetPermission holds details about calls to the GetPermission method.
		GetPermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// PermissionID is the permissionID argument value.
			PermissionID string
		}
		// GetPermissionResources holds details about calls to the GetPermissionResources method.
		GetPermissionResources []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// PermissionID is the permissionID argument value.
			PermissionID string
		}
		// GetPermissionScopes holds details about calls to the GetPermissionScopes method.
		GetPermissionScopes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// PermissionID is the permissionID argument value.
			PermissionID string
		}
		// GetPermissions holds details about calls to the GetPermissions method.
		GetPermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Params is the params argument value.
			Params gocloak.GetPermissionParams
		}
		// GetPolicies holds details about calls to the GetPolicies method.
		GetPolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Params is the params argument value.
			Params gocloak.GetPolicyParams
		}
		// GetPolicy holds details about calls to the GetPolicy method.
		GetPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// PolicyID is the policyID argument value.
			PolicyID string
		}
		// GetRawUserInfo holds details about calls to the GetRawUserInfo method.
		GetRawUserInfo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
		}
		// GetRealm holds details about calls to the GetRealm method.
		GetRealm []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
		}
		// GetRealmRole holds details about calls to the GetRealmRole method.
		GetRealmRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// RoleName is the roleName argument value.
			RoleName string
		}
		// GetRealmRoles holds details about calls to the GetRealmRoles method.
		GetRealmRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
		}
		// GetRealmRolesByGroupID holds details about calls to the GetRealmRolesByGroupID method.
		GetRealmRolesByGroupID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// GetRealmRolesByUserID holds details about calls to the GetRealmRolesByUserID method.
		GetRealmRolesByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
		}
		// GetRealms holds details about calls to the GetRealms method.
		GetRealms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
		}
		// GetRequestingPartyPermissionDecision holds details about calls to the GetRequestingPartyPermissionDecision method.
		GetRequestingPartyPermissionDecision []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Options is the options argument value.
			Options gocloak.RequestingPartyTokenOptions
		}
		// GetRequestingPartyPermissions holds details about calls to the GetRequestingPartyPermissions method.
		GetRequestingPartyPermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Options is the options argument value.
			Options gocloak.RequestingPartyTokenOptions
		}
		// GetRequestingPartyToken holds details about calls to the GetRequestingPartyToken method.
		GetRequestingPartyToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Options is the options argument value.
			Options gocloak.RequestingPartyTokenOptions
		}
		// GetResource holds details about calls to the GetResource method.
		GetResource []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// ResourceID is the resourceID argument value.
			ResourceID string
		}
		// GetResourceClient holds details about calls to the GetResourceClient method.
		GetResourceClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ResourceID is the resourceID argument value.
			ResourceID string
		}
		// GetResourcePolicies holds details about calls to the GetResourcePolicies method.
		GetResourcePolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Params is the params argument value.
			Params gocloak.GetResourcePoliciesParams
		}
		// GetResourcePolicy holds details about calls to the GetResourcePolicy method.
		GetResourcePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// PermissionID is the permissionID argument value.
			PermissionID string
		}
		// GetResources holds details about calls to the GetResources method.
		GetResources []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Params is the params argument value.
			Params gocloak.GetResourceParams
		}
		// GetResourcesClient holds details about calls to the GetResourcesClient method.
		GetResourcesClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Params is the params argument value.
			Params gocloak.GetResourceParams
		}
		// GetRoleMappingByGroupID holds details about calls to the GetRoleMappingByGroupID method.
		GetRoleMappingByGroupID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// GetRoleMappingByUserID holds details about calls to the GetRoleMappingByUserID method.
		GetRoleMappingByUserID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
		}
		// GetScope holds details about calls to the GetScope method.
		GetScope []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// ScopeID is the scopeID argument value.
			ScopeID string
		}
		// GetScopes holds details about calls to the GetScopes method.
		GetScopes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Params is the params argument value.
			Params gocloak.GetScopeParams
		}
		// GetServerInfo holds details about calls to the GetServerInfo method.
		GetServerInfo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
		}
		// GetToken holds details about calls to the GetToken method.
		GetToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Realm is the realm argument value.
			Realm string
			// Options is the options argument value.
			Options gocloak.TokenOptions
		}
		// GetUserByID holds details about calls to the GetUserByID method.
		GetUserByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
		}
		// GetUserCount holds details about calls to the GetUserCount method.
		GetUserCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// Params is the params argument value.
			Params gocloak.GetUsersParams
		}
		// GetUserFederatedIdentities holds details about calls to the GetUserFederatedIdentities method.
		GetUserFederatedIdentities []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
		}
		// GetUserGroups holds details about calls to the GetUserGroups method.
		GetUserGroups []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
			// Params is the params argument value.
			Params gocloak.GetGroupsParams
		}
		// GetUserInfo holds details about calls to the GetUserInfo method.
		GetUserInfo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
		}
		// GetUserOfflineSessionsForClient holds details about calls to the GetUserOfflineSessionsForClient method.
		GetUserOfflineSessionsForClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
			// ClientID is the clientID argument value.
			ClientID string
		}
		// GetUserPermissions holds details about calls to the GetUserPermissions method.
		GetUserPermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Params is the params argument value.
			Params gocloak.GetUserPermissionParams
		}
		// GetUserSessions holds details about calls to the GetUserSessions method.
		GetUserSessions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
		}
		// GetUsers holds details about calls to the GetUsers method.
		GetUsers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// Params is the params argument value.
			Params gocloak.GetUsersParams
		}
		// GetUsersByClientRoleName holds details about calls to the GetUsersByClientRoleName method.
		GetUsersByClientRoleName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// RoleName is the roleName argument value.
			RoleName string
			// Params is the params argument value.
			Params gocloak.GetUsersByRoleParams
		}
		// GetUsersByRoleName holds details about calls to the GetUsersByRoleName method.
		GetUsersByRoleName []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// RoleName is the roleName argument value.
			RoleName string
		}
		// GrantUserPermission holds details about calls to the GrantUserPermission method.
		GrantUserPermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Permission is the permission argument value.
			Permission gocloak.PermissionGrantParams
		}
		// ImportIdentityProviderConfig holds details about calls to the ImportIdentityProviderConfig method.
		ImportIdentityProviderConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// FromURL is the fromURL argument value.
			FromURL string
			// ProviderID is the providerID argument value.
			ProviderID string
		}
		// Login holds details about calls to the Login method.
		Login []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClientID is the clientID argument value.
			ClientID string
			// ClientSecret is the clientSecret argument value.
			ClientSecret string
			// Realm is the realm argument value.
			Realm string
			// Username is the username argument value.
			Username string
			// Password is the password argument value.
			Password string
		}
		// LoginAdmin holds details about calls to the LoginAdmin method.
		LoginAdmin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Username is the username argument value.
			Username string
			// Password is the password argument value.
			Password string
			// Realm is the realm argument value.
			Realm string
		}
		// LoginClient holds details about calls to the LoginClient method.
		LoginClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClientID is the clientID argument value.
			ClientID string
			// ClientSecret is the clientSecret argument value.
			ClientSecret string
			// Realm is the realm argument value.
			Realm string
		}
		// LoginClientSignedJWT holds details about calls to the LoginClientSignedJWT method.
		LoginClientSignedJWT []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClientID is the clientID argument value.
			ClientID string
			// Realm is the realm argument value.
			Realm string
			// Key is the key argument value.
			Key interface{}
			// SignedMethod is the signedMethod argument value.
			SignedMethod jwt.SigningMethod
			// ExpiresAt is the expiresAt argument value.
			ExpiresAt *jwt.Time
		}
		// LoginOtp holds details about calls to the LoginOtp method.
		LoginOtp []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClientID is the clientID argument value.
			ClientID string
			// ClientSecret is the clientSecret argument value.
			ClientSecret string
			// Realm is the realm argument value.
			Realm string
			// Username is the username argument value.
			Username string
			// Password is the password argument value.
			Password string
			// Totp is the totp argument value.
			Totp string
		}
		// Logout holds details about calls to the Logout method.
		Logout []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClientID is the clientID argument value.
			ClientID string
			// ClientSecret is the clientSecret argument value.
			ClientSecret string
			// Realm is the realm argument value.
			Realm string
			// RefreshToken is the refreshToken argument value.
			RefreshToken string
		}
		// LogoutAllSessions holds details about calls to the LogoutAllSessions method.
		LogoutAllSessions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
		}
		// LogoutPublicClient holds details about calls to the LogoutPublicClient method.
		LogoutPublicClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ClientID is the clientID argument value.
			ClientID string
			// Realm is the realm argument value.
			Realm string
			// AccessToken is the accessToken argument value.
			AccessToken string
			// RefreshToken is the refreshToken argument value.
			RefreshToken string
		}
		// LogoutUserSession holds details about calls to the LogoutUserSession method.
		LogoutUserSession []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// Session is the session argument value.
			Session string
		}
		// MoveCredentialBehind holds details about calls to the MoveCredentialBehind method.
		MoveCredentialBehind []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
			// CredentialID is the credentialID argument value.
			CredentialID string
			// NewPreviousCredentialID is the newPreviousCredentialID argument value.
			NewPreviousCredentialID string
		}
		// MoveCredentialToFirst holds details about calls to the MoveCredentialToFirst method.
		MoveCredentialToFirst []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
			// CredentialID is the credentialID argument value.
			CredentialID string
		}
		// RefreshToken holds details about calls to the RefreshToken method.
		RefreshToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RefreshToken is the refreshToken argument value.
			RefreshToken string
			// ClientID is the clientID argument value.
			ClientID string
			// ClientSecret is the clientSecret argument value.
			ClientSecret string
			// Realm is the realm argument value.
			Realm string
		}
		// RegenerateClientSecret holds details about calls to the RegenerateClientSecret method.
		RegenerateClientSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
		}
		// RemoveDefaultGroup holds details about calls to the RemoveDefaultGroup method.
		RemoveDefaultGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// GroupID is the groupID argument value.
			GroupID string
		}
		// RemoveDefaultScopeFromClient holds details about calls to the RemoveDefaultScopeFromClient method.
		RemoveDefaultScopeFromClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// ScopeID is the scopeID argument value.
			ScopeID string
		}
		// RemoveOptionalScopeFromClient holds details about calls to the RemoveOptionalScopeFromClient method.
		RemoveOptionalScopeFromClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// ScopeID is the scopeID argument value.
			ScopeID string
		}
		// RestyClient holds details about calls to the RestyClient method.
		RestyClient []struct {
		}
		// RetrospectToken holds details about calls to the RetrospectToken method.
		RetrospectToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// ClientID is the clientID argument value.
			ClientID string
			// ClientSecret is the clientSecret argument value.
			ClientSecret string
			// Realm is the realm argument value.
			Realm string
		}
		// SetPassword holds details about calls to the SetPassword method.
		SetPassword []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// UserID is the userID argument value.
			UserID string
			// Realm is the realm argument value.
			Realm string
			// Password is the password argument value.
			Password string
			// Temporary is the temporary argument value.
			Temporary bool
		}
		// SetRestyClient holds details about calls to the SetRestyClient method.
		SetRestyClient []struct {
			// RestyClient is the restyClient argument value.
			RestyClient *resty.Client
		}
		// UpdateClient holds details about calls to the UpdateClient method.
		UpdateClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// UpdatedClient is the updatedClient argument value.
			UpdatedClient gocloak.Client
		}
		// UpdateClientProtocolMapper holds details about calls to the UpdateClientProtocolMapper method.
		UpdateClientProtocolMapper []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// MapperID is the mapperID argument value.
			MapperID string
			// Mapper is the mapper argument value.
			Mapper gocloak.ProtocolMapperRepresentation
		}
		// UpdateClientScope holds details about calls to the UpdateClientScope method.
		UpdateClientScope []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// Scope is the scope argument value.
			Scope gocloak.ClientScope
		}
		// UpdateCredentialUserLabel holds details about calls to the UpdateCredentialUserLabel method.
		UpdateCredentialUserLabel []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// UserID is the userID argument value.
			UserID string
			// CredentialID is the credentialID argument value.
			CredentialID string
			// UserLabel is the userLabel argument value.
			UserLabel string
		}
		// UpdateGroup holds details about calls to the UpdateGroup method.
		UpdateGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// UpdatedGroup is the updatedGroup argument value.
			UpdatedGroup gocloak.Group
		}
		// UpdateIdentityProvider holds details about calls to the UpdateIdentityProvider method.
		UpdateIdentityProvider []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Alias is the alias argument value.
			Alias string
			// ProviderRep is the providerRep argument value.
			ProviderRep gocloak.IdentityProviderRepresentation
		}
		// UpdatePermission holds details about calls to the UpdatePermission method.
		UpdatePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Permission is the permission argument value.
			Permission gocloak.PermissionRepresentation
		}
		// UpdatePolicy holds details about calls to the UpdatePolicy method.
		UpdatePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Policy is the policy argument value.
			Policy gocloak.PolicyRepresentation
		}
		// UpdateRealm holds details about calls to the UpdateRealm method.
		UpdateRealm []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm gocloak.RealmRepresentation
		}
		// UpdateRealmRole holds details about calls to the UpdateRealmRole method.
		UpdateRealmRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// RoleName is the roleName argument value.
			RoleName string
			// Role is the role argument value.
			Role gocloak.Role
		}
		// UpdateResource holds details about calls to the UpdateResource method.
		UpdateResource []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Resource is the resource argument value.
			Resource gocloak.ResourceRepresentation
		}
		// UpdateResourceClient holds details about calls to the UpdateResourceClient method.
		UpdateResourceClient []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Resource is the resource argument value.
			Resource gocloak.ResourceRepresentation
		}
		// UpdateResourcePolicy holds details about calls to the UpdateResourcePolicy method.
		UpdateResourcePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// PermissionID is the permissionID argument value.
			PermissionID string
			// Policy is the policy argument value.
			Policy gocloak.ResourcePolicyRepresentation
		}
		// UpdateRole holds details about calls to the UpdateRole method.
		UpdateRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Role is the role argument value.
			Role gocloak.Role
		}
		// UpdateScope holds details about calls to the UpdateScope method.
		UpdateScope []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// ClientID is the clientID argument value.
			ClientID string
			// Resource is the resource argument value.
			Resource gocloak.ScopeRepresentation
		}
		// UpdateUser holds details about calls to the UpdateUser method.
		UpdateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccessToken is the accessToken argument value.
			AccessToken string
			// Realm is the realm argument value.
			Realm string
			// User is the user argument value.
			User gocloak.User
		}
		// UpdateUserPermission holds details about calls to the UpdateUserPermission method.
		UpdateUserPermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
			// Realm is the realm argument value.
			Realm string
			// Permission is the permission argument value.
			Permission gocloak.PermissionGrantParams
		}
	}
	lockAddClientRoleComposite                     sync.RWMutex
	lockAddClientRoleToGroup                       sync.RWMutex
	lockAddClientRoleToUser                        sync.RWMutex
	lockAddDefaultGroup                            sync.RWMutex
	lockAddDefaultScopeToClient                    sync.RWMutex
	lockAddOptionalScopeToClient                   sync.RWMutex
	lockAddRealmRoleComposite                      sync.RWMutex
	lockAddRealmRoleToGroup                        sync.RWMutex
	lockAddRealmRoleToUser                         sync.RWMutex
	lockAddUserToGroup                             sync.RWMutex
	lockClearKeysCache                             sync.RWMutex
	lockClearRealmCache                            sync.RWMutex
	lockClearUserCache                             sync.RWMutex
	lockCreateChildGroup                           sync.RWMutex
	lockCreateClient                               sync.RWMutex
	lockCreateClientProtocolMapper                 sync.RWMutex
	lockCreateClientRole                           sync.RWMutex
	lockCreateClientScope                          sync.RWMutex
	lockCreateClientScopeMappingsClientRoles       sync.RWMutex
	lockCreateClientScopeMappingsRealmRoles        sync.RWMutex
	lockCreateComponent                            sync.RWMutex
	lockCreateGroup                                sync.RWMutex
	lockCreateIdentityProvider                     sync.RWMutex
	lockCreateIdentityProviderMapper               sync.RWMutex
	lockCreatePermission                           sync.RWMutex
	lockCreatePermissionTicket                     sync.RWMutex
	lockCreatePolicy                               sync.RWMutex
	lockCreateRealm                                sync.RWMutex
	lockCreateRealmRole                            sync.RWMutex
	lockCreateResource                             sync.RWMutex
	lockCreateResourceClient                       sync.RWMutex
	lockCreateResourcePolicy                       sync.RWMutex
	lockCreateScope                                sync.RWMutex
	lockCreateUser                                 sync.RWMutex
	lockCreateUserFederatedIdentity                sync.RWMutex
	lockDecodeAccessToken                          sync.RWMutex
	lockDecodeAccessTokenCustomClaims              sync.RWMutex
	lockDeleteClient                               sync.RWMutex
	lockDeleteClientProtocolMapper                 sync.RWMutex
	lockDeleteClientRole                           sync.RWMutex
	lockDeleteClientRoleComposite                  sync.RWMutex
	lockDeleteClientRoleFromGroup                  sync.RWMutex
	lockDeleteClientRoleFromUser                   sync.RWMutex
	lockDeleteClientScope                          sync.RWMutex
	lockDeleteClientScopeMappingsClientRoles       sync.RWMutex
	lockDeleteClientScopeMappingsRealmRoles        sync.RWMutex
	lockDeleteComponent                            sync.RWMutex
	lockDeleteCredentials                          sync.RWMutex
	lockDeleteGroup                                sync.RWMutex
	lockDeleteIdentityProvider                     sync.RWMutex
	lockDeleteIdentityProviderMapper               sync.RWMutex
	lockDeletePermission                           sync.RWMutex
	lockDeletePolicy                               sync.RWMutex
	lockDeleteRealm                                sync.RWMutex
	lockDeleteRealmRole                            sync.RWMutex
	lockDeleteRealmRoleComposite                   sync.RWMutex
	lockDeleteRealmRoleFromGroup                   sync.RWMutex
	lockDeleteRealmRoleFromUser                    sync.RWMutex
	lockDeleteResource                             sync.RWMutex
	lockDeleteResourceClient                       sync.RWMutex
	lockDeleteResourcePolicy                       sync.RWMutex
	lockDeleteScope                                sync.RWMutex
	lockDeleteUser                                 sync.RWMutex
	lockDeleteUserFederatedIdentity                sync.RWMutex
	lockDeleteUserFromGroup                        sync.RWMutex
	lockDeleteUserPermission                       sync.RWMutex
	lockDisableAllCredentialsByType                sync.RWMutex
	lockExecuteActionsEmail                        sync.RWMutex
	lockExportIDPPublicBrokerConfig                sync.RWMutex
	lockGetAvailableClientRolesByGroupID           sync.RWMutex
	lockGetAvailableClientRolesByUserID            sync.RWMutex
	lockGetAvailableRealmRolesByGroupID            sync.RWMutex
	lockGetAvailableRealmRolesByUserID             sync.RWMutex
	lockGetCerts                                   sync.RWMutex
	lockGetClient                                  sync.RWMutex
	lockGetClientOfflineSessions                   sync.RWMutex
	lockGetClientRole                              sync.RWMutex
	lockGetClientRoleByID                          sync.RWMutex
	lockGetClientRoles                             sync.RWMutex
	lockGetClientRolesByGroupID                    sync.RWMutex
	lockGetClientRolesByUserID                     sync.RWMutex
	lockGetClientScope                             sync.RWMutex
	lockGetClientScopeMappings                     sync.RWMutex
	lockGetClientScopeMappingsClientRoles          sync.RWMutex
	lockGetClientScopeMappingsClientRolesAvailable sync.RWMutex
	lockGetClientScopeMappingsRealmRoles           sync.RWMutex
	lockGetClientScopeMappingsRealmRolesAvailable  sync.RWMutex
	lockGetClientScopes                            sync.RWMutex
	lockGetClientSecret                            sync.RWMutex
	lockGetClientServiceAccount                    sync.RWMutex
	lockGetClientUserSessions                      sync.RWMutex
	lockGetClients                                 sync.RWMutex
	lockGetClientsDefaultScopes                    sync.RWMutex
	lockGetClientsOptionalScopes                   sync.RWMutex
	lockGetComponents                              sync.RWMutex
	lockGetCompositeClientRolesByGroupID           sync.RWMutex
	lockGetCompositeClientRolesByRoleID            sync.RWMutex
	lockGetCompositeClientRolesByUserID            sync.RWMutex
	lockGetCompositeRealmRolesByGroupID            sync.RWMutex
	lockGetCompositeRealmRolesByRoleID             sync.RWMutex
	lockGetCompositeRealmRolesByUserID             sync.RWMutex
	lockGetConfiguredUserStorageCredentialTypes    sync.RWMutex
	lockGetCredentialRegistrators                  sync.RWMutex
	lockGetCredentials                             sync.RWMutex
	lockGetDefaultDefaultClientScopes              sync.RWMutex
	lockGetDefaultGroups                           sync.RWMutex
	lockGetDefaultOptionalClientScopes             sync.RWMutex
	lockGetDependentPermissions                    sync.RWMutex
	lockGetGroup                                   sync.RWMutex
	lockGetGroupMembers                            sync.RWMutex
	lockGetGroups                                  sync.RWMutex
	lockGetGroupsCount                             sync.RWMutex
	lockGetIdentityProvider                        sync.RWMutex
	lockGetIdentityProviderMappers                 sync.RWMutex
	lockGetIdentityProviders                       sync.RWMutex
	lockGetIssuer                                  sync.RWMutex
	lockGetKeyStoreConfig                          sync.RWMutex
	lockGetPermission                              sync.RWMutex
	lockGetPermissionResources                     sync.RWMutex
	lockGetPermissionScopes                        sync.RWMutex
	lockGetPermissions                             sync.RWMutex
	lockGetPolicies                                sync.RWMutex
	lockGetPolicy                                  sync.RWMutex
	lockGetRawUserInfo                             sync.RWMutex
	lockGetRealm                                   sync.RWMutex
	lockGetRealmRole                               sync.RWMutex
	lockGetRealmRoles                              sync.RWMutex
	lockGetRealmRolesByGroupID                     sync.RWMutex
	lockGetRealmRolesByUserID                      sync.RWMutex
	lockGetRealms                                  sync.RWMutex
	lockGetRequestingPartyPermissionDecision       sync.RWMutex
	lockGetRequestingPartyPermissions              sync.RWMutex
	lockGetRequestingPartyToken                    sync.RWMutex
	lockGetResource                                sync.RWMutex
	lockGetResourceClient                          sync.RWMutex
	lockGetResourcePolicies                        sync.RWMutex
	lockGetResourcePolicy                          sync.RWMutex
	lockGetResources                               sync.RWMutex
	lockGetResourcesClient                         sync.RWMutex
	lockGetRoleMappingByGroupID                    sync.RWMutex
	lockGetRoleMappingByUserID                     sync.RWMutex
	lockGetScope                                   sync.RWMutex
	lockGetScopes                                  sync.RWMutex
	lockGetServerInfo                              sync.RWMutex
	lockGetToken                                   sync.RWMutex
	lockGetUserByID                                sync.RWMutex
	lockGetUserCount                               sync.RWMutex
	lockGetUserFederatedIdentities                 sync.RWMutex
	lockGetUserGroups                              sync.RWMutex
	lockGetUserInfo                                sync.RWMutex
	lockGetUserOfflineSessionsForClient            sync.RWMutex
	lockGetUserPermissions                         sync.RWMutex
	lockGetUserSessions                            sync.RWMutex
	lockGetUsers                                   sync.RWMutex
	lockGetUsersByClientRoleName                   sync.RWMutex
	lockGetUsersByRoleName                         sync.RWMutex
	lockGrantUserPermission                        sync.RWMutex
	lockImportIdentityProviderConfig               sync.RWMutex
	lockLogin                                      sync.RWMutex
	lockLoginAdmin                                 sync.RWMutex
	lockLoginClient                                sync.RWMutex
	lockLoginClientSignedJWT                       sync.RWMutex
	lockLoginOtp                                   sync.RWMutex
	lockLogout                                     sync.RWMutex
	lockLogoutAllSessions                          sync.RWMutex
	lockLogoutPublicClient                         sync.RWMutex
	lockLogoutUserSession                          sync.RWMutex
	lockMoveCredentialBehind                       sync.RWMutex
	lockMoveCredentialToFirst                      sync.RWMutex
	lockRefreshToken                               sync.RWMutex
	lockRegenerateClientSecret                     sync.RWMutex
	lockRemoveDefaultGroup                         sync.RWMutex
	lockRemoveDefaultScopeFromClient               sync.RWMutex
	lockRemoveOptionalScopeFromClient              sync.RWMutex
	lockRestyClient                                sync.RWMutex
	lockRetrospectToken                            sync.RWMutex
	lockSetPassword                                sync.RWMutex
	lockSetRestyClient                             sync.RWMutex
	lockUpdateClient                               sync.RWMutex
	lockUpdateClientProtocolMapper                 sync.RWMutex
	lockUpdateClientScope                          sync.RWMutex
	lockUpdateCredentialUserLabel                  sync.RWMutex
	lockUpdateGroup                                sync.RWMutex
	lockUpdateIdentityProvider                     sync.RWMutex
	lockUpdatePermission                           sync.RWMutex
	lockUpdatePolicy                               sync.RWMutex
	lockUpdateRealm                                sync.RWMutex
	lockUpdateRealmRole                            sync.RWMutex
	lockUpdateResource                             sync.RWMutex
	lockUpdateResourceClient                       sync.RWMutex
	lockUpdateResourcePolicy                       sync.RWMutex
	lockUpdateRole                                 sync.RWMutex
	lockUpdateScope                                sync.RWMutex
	lockUpdateUser                                 sync.RWMutex
	lockUpdateUserPermission                       sync.RWMutex
}

// AddClientRoleComposite calls AddClientRoleCompositeFunc.
func (mock *GoCloakMock) AddClientRoleComposite(ctx context.Context, token string, realm string, roleID string, roles []gocloak.Role) error {
	if mock.AddClientRoleCompositeFunc == nil {
		panic("GoCloakMock.AddClientRoleCompositeFunc: method is nil but GoCloak.AddClientRoleComposite was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		RoleID string
		Roles  []gocloak.Role
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		RoleID: roleID,
		Roles:  roles,
	}
	mock.lockAddClientRoleComposite.Lock()
	mock.calls.AddClientRoleComposite = append(mock.calls.AddClientRoleComposite, callInfo)
	mock.lockAddClientRoleComposite.Unlock()
	return mock.AddClientRoleCompositeFunc(ctx, token, realm, roleID, roles)
}

// AddClientRoleCompositeCalls gets all the calls that were made to AddClientRoleComposite.
// Check the length with:
//     len(mockedGoCloak.AddClientRoleCompositeCalls())
func (mock *GoCloakMock) AddClientRoleCompositeCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	RoleID string
	Roles  []gocloak.Role
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		RoleID string
		Roles  []gocloak.Role
	}
	mock.lockAddClientRoleComposite.RLock()
	calls = mock.calls.AddClientRoleComposite
	mock.lockAddClientRoleComposite.RUnlock()
	return calls
}

// AddClientRoleToGroup calls AddClientRoleToGroupFunc.
func (mock *GoCloakMock) AddClientRoleToGroup(ctx context.Context, token string, realm string, clientID string, groupID string, roles []gocloak.Role) error {
	if mock.AddClientRoleToGroupFunc == nil {
		panic("GoCloakMock.AddClientRoleToGroupFunc: method is nil but GoCloak.AddClientRoleToGroup was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		GroupID  string
		Roles    []gocloak.Role
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		GroupID:  groupID,
		Roles:    roles,
	}
	mock.lockAddClientRoleToGroup.Lock()
	mock.calls.AddClientRoleToGroup = append(mock.calls.AddClientRoleToGroup, callInfo)
	mock.lockAddClientRoleToGroup.Unlock()
	return mock.AddClientRoleToGroupFunc(ctx, token, realm, clientID, groupID, roles)
}

// AddClientRoleToGroupCalls gets all the calls that were made to AddClientRoleToGroup.
// Check the length with:
//     len(mockedGoCloak.AddClientRoleToGroupCalls())
func (mock *GoCloakMock) AddClientRoleToGroupCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	GroupID  string
	Roles    []gocloak.Role
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		GroupID  string
		Roles    []gocloak.Role
	}
	mock.lockAddClientRoleToGroup.RLock()
	calls = mock.calls.AddClientRoleToGroup
	mock.lockAddClientRoleToGroup.RUnlock()
	return calls
}

// AddClientRoleToUser calls AddClientRoleToUserFunc.
func (mock *GoCloakMock) AddClientRoleToUser(ctx context.Context, token string, realm string, clientID string, userID string, roles []gocloak.Role) error {
	if mock.AddClientRoleToUserFunc == nil {
		panic("GoCloakMock.AddClientRoleToUserFunc: method is nil but GoCloak.AddClientRoleToUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		UserID   string
		Roles    []gocloak.Role
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		UserID:   userID,
		Roles:    roles,
	}
	mock.lockAddClientRoleToUser.Lock()
	mock.calls.AddClientRoleToUser = append(mock.calls.AddClientRoleToUser, callInfo)
	mock.lockAddClientRoleToUser.Unlock()
	return mock.AddClientRoleToUserFunc(ctx, token, realm, clientID, userID, roles)
}

// AddClientRoleToUserCalls gets all the calls that were made to AddClientRoleToUser.
// Check the length with:
//     len(mockedGoCloak.AddClientRoleToUserCalls())
func (mock *GoCloakMock) AddClientRoleToUserCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	UserID   string
	Roles    []gocloak.Role
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		UserID   string
		Roles    []gocloak.Role
	}
	mock.lockAddClientRoleToUser.RLock()
	calls = mock.calls.AddClientRoleToUser
	mock.lockAddClientRoleToUser.RUnlock()
	return calls
}

// AddDefaultGroup calls AddDefaultGroupFunc.
func (mock *GoCloakMock) AddDefaultGroup(ctx context.Context, accessToken string, realm string, groupID string) error {
	if mock.AddDefaultGroupFunc == nil {
		panic("GoCloakMock.AddDefaultGroupFunc: method is nil but GoCloak.AddDefaultGroup was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		GroupID     string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		GroupID:     groupID,
	}
	mock.lockAddDefaultGroup.Lock()
	mock.calls.AddDefaultGroup = append(mock.calls.AddDefaultGroup, callInfo)
	mock.lockAddDefaultGroup.Unlock()
	return mock.AddDefaultGroupFunc(ctx, accessToken, realm, groupID)
}

// AddDefaultGroupCalls gets all the calls that were made to AddDefaultGroup.
// Check the length with:
//     len(mockedGoCloak.AddDefaultGroupCalls())
func (mock *GoCloakMock) AddDefaultGroupCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	GroupID     string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		GroupID     string
	}
	mock.lockAddDefaultGroup.RLock()
	calls = mock.calls.AddDefaultGroup
	mock.lockAddDefaultGroup.RUnlock()
	return calls
}

// AddDefaultScopeToClient calls AddDefaultScopeToClientFunc.
func (mock *GoCloakMock) AddDefaultScopeToClient(ctx context.Context, token string, realm string, clientID string, scopeID string) error {
	if mock.AddDefaultScopeToClientFunc == nil {
		panic("GoCloakMock.AddDefaultScopeToClientFunc: method is nil but GoCloak.AddDefaultScopeToClient was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		ScopeID  string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		ScopeID:  scopeID,
	}
	mock.lockAddDefaultScopeToClient.Lock()
	mock.calls.AddDefaultScopeToClient = append(mock.calls.AddDefaultScopeToClient, callInfo)
	mock.lockAddDefaultScopeToClient.Unlock()
	return mock.AddDefaultScopeToClientFunc(ctx, token, realm, clientID, scopeID)
}

// AddDefaultScopeToClientCalls gets all the calls that were made to AddDefaultScopeToClient.
// Check the length with:
//     len(mockedGoCloak.AddDefaultScopeToClientCalls())
func (mock *GoCloakMock) AddDefaultScopeToClientCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	ScopeID  string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		ScopeID  string
	}
	mock.lockAddDefaultScopeToClient.RLock()
	calls = mock.calls.AddDefaultScopeToClient
	mock.lockAddDefaultScopeToClient.RUnlock()
	return calls
}

// AddOptionalScopeToClient calls AddOptionalScopeToClientFunc.
func (mock *GoCloakMock) AddOptionalScopeToClient(ctx context.Context, token string, realm string, clientID string, scopeID string) error {
	if mock.AddOptionalScopeToClientFunc == nil {
		panic("GoCloakMock.AddOptionalScopeToClientFunc: method is nil but GoCloak.AddOptionalScopeToClient was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		ScopeID  string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		ScopeID:  scopeID,
	}
	mock.lockAddOptionalScopeToClient.Lock()
	mock.calls.AddOptionalScopeToClient = append(mock.calls.AddOptionalScopeToClient, callInfo)
	mock.lockAddOptionalScopeToClient.Unlock()
	return mock.AddOptionalScopeToClientFunc(ctx, token, realm, clientID, scopeID)
}

// AddOptionalScopeToClientCalls gets all the calls that were made to AddOptionalScopeToClient.
// Check the length with:
//     len(mockedGoCloak.AddOptionalScopeToClientCalls())
func (mock *GoCloakMock) AddOptionalScopeToClientCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	ScopeID  string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		ScopeID  string
	}
	mock.lockAddOptionalScopeToClient.RLock()
	calls = mock.calls.AddOptionalScopeToClient
	mock.lockAddOptionalScopeToClient.RUnlock()
	return calls
}

// AddRealmRoleComposite calls AddRealmRoleCompositeFunc.
func (mock *GoCloakMock) AddRealmRoleComposite(ctx context.Context, token string, realm string, roleName string, roles []gocloak.Role) error {
	if mock.AddRealmRoleCompositeFunc == nil {
		panic("GoCloakMock.AddRealmRoleCompositeFunc: method is nil but GoCloak.AddRealmRoleComposite was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		RoleName string
		Roles    []gocloak.Role
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		RoleName: roleName,
		Roles:    roles,
	}
	mock.lockAddRealmRoleComposite.Lock()
	mock.calls.AddRealmRoleComposite = append(mock.calls.AddRealmRoleComposite, callInfo)
	mock.lockAddRealmRoleComposite.Unlock()
	return mock.AddRealmRoleCompositeFunc(ctx, token, realm, roleName, roles)
}

// AddRealmRoleCompositeCalls gets all the calls that were made to AddRealmRoleComposite.
// Check the length with:
//     len(mockedGoCloak.AddRealmRoleCompositeCalls())
func (mock *GoCloakMock) AddRealmRoleCompositeCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	RoleName string
	Roles    []gocloak.Role
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		RoleName string
		Roles    []gocloak.Role
	}
	mock.lockAddRealmRoleComposite.RLock()
	calls = mock.calls.AddRealmRoleComposite
	mock.lockAddRealmRoleComposite.RUnlock()
	return calls
}

// AddRealmRoleToGroup calls AddRealmRoleToGroupFunc.
func (mock *GoCloakMock) AddRealmRoleToGroup(ctx context.Context, token string, realm string, groupID string, roles []gocloak.Role) error {
	if mock.AddRealmRoleToGroupFunc == nil {
		panic("GoCloakMock.AddRealmRoleToGroupFunc: method is nil but GoCloak.AddRealmRoleToGroup was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Token   string
		Realm   string
		GroupID string
		Roles   []gocloak.Role
	}{
		Ctx:     ctx,
		Token:   token,
		Realm:   realm,
		GroupID: groupID,
		Roles:   roles,
	}
	mock.lockAddRealmRoleToGroup.Lock()
	mock.calls.AddRealmRoleToGroup = append(mock.calls.AddRealmRoleToGroup, callInfo)
	mock.lockAddRealmRoleToGroup.Unlock()
	return mock.AddRealmRoleToGroupFunc(ctx, token, realm, groupID, roles)
}

// AddRealmRoleToGroupCalls gets all the calls that were made to AddRealmRoleToGroup.
// Check the length with:
//     len(mockedGoCloak.AddRealmRoleToGroupCalls())
func (mock *GoCloakMock) AddRealmRoleToGroupCalls() []struct {
	Ctx     context.Context
	Token   string
	Realm   string
	GroupID string
	Roles   []gocloak.Role
} {
	var calls []struct {
		Ctx     context.Context
		Token   string
		Realm   string
		GroupID string
		Roles   []gocloak.Role
	}
	mock.lockAddRealmRoleToGroup.RLock()
	calls = mock.calls.AddRealmRoleToGroup
	mock.lockAddRealmRoleToGroup.RUnlock()
	return calls
}

// AddRealmRoleToUser calls AddRealmRoleToUserFunc.
func (mock *GoCloakMock) AddRealmRoleToUser(ctx context.Context, token string, realm string, userID string, roles []gocloak.Role) error {
	if mock.AddRealmRoleToUserFunc == nil {
		panic("GoCloakMock.AddRealmRoleToUserFunc: method is nil but GoCloak.AddRealmRoleToUser was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
		Roles  []gocloak.Role
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		UserID: userID,
		Roles:  roles,
	}
	mock.lockAddRealmRoleToUser.Lock()
	mock.calls.AddRealmRoleToUser = append(mock.calls.AddRealmRoleToUser, callInfo)
	mock.lockAddRealmRoleToUser.Unlock()
	return mock.AddRealmRoleToUserFunc(ctx, token, realm, userID, roles)
}

// AddRealmRoleToUserCalls gets all the calls that were made to AddRealmRoleToUser.
// Check the length with:
//     len(mockedGoCloak.AddRealmRoleToUserCalls())
func (mock *GoCloakMock) AddRealmRoleToUserCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	UserID string
	Roles  []gocloak.Role
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
		Roles  []gocloak.Role
	}
	mock.lockAddRealmRoleToUser.RLock()
	calls = mock.calls.AddRealmRoleToUser
	mock.lockAddRealmRoleToUser.RUnlock()
	return calls
}

// AddUserToGroup calls AddUserToGroupFunc.
func (mock *GoCloakMock) AddUserToGroup(ctx context.Context, token string, realm string, userID string, groupID string) error {
	if mock.AddUserToGroupFunc == nil {
		panic("GoCloakMock.AddUserToGroupFunc: method is nil but GoCloak.AddUserToGroup was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Token   string
		Realm   string
		UserID  string
		GroupID string
	}{
		Ctx:     ctx,
		Token:   token,
		Realm:   realm,
		UserID:  userID,
		GroupID: groupID,
	}
	mock.lockAddUserToGroup.Lock()
	mock.calls.AddUserToGroup = append(mock.calls.AddUserToGroup, callInfo)
	mock.lockAddUserToGroup.Unlock()
	return mock.AddUserToGroupFunc(ctx, token, realm, userID, groupID)
}

// AddUserToGroupCalls gets all the calls that were made to AddUserToGroup.
// Check the length with:
//     len(mockedGoCloak.AddUserToGroupCalls())
func (mock *GoCloakMock) AddUserToGroupCalls() []struct {
	Ctx     context.Context
	Token   string
	Realm   string
	UserID  string
	GroupID string
} {
	var calls []struct {
		Ctx     context.Context
		Token   string
		Realm   string
		UserID  string
		GroupID string
	}
	mock.lockAddUserToGroup.RLock()
	calls = mock.calls.AddUserToGroup
	mock.lockAddUserToGroup.RUnlock()
	return calls
}

// ClearKeysCache calls ClearKeysCacheFunc.
func (mock *GoCloakMock) ClearKeysCache(ctx context.Context, token string, realm string) error {
	if mock.ClearKeysCacheFunc == nil {
		panic("GoCloakMock.ClearKeysCacheFunc: method is nil but GoCloak.ClearKeysCache was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
	}
	mock.lockClearKeysCache.Lock()
	mock.calls.ClearKeysCache = append(mock.calls.ClearKeysCache, callInfo)
	mock.lockClearKeysCache.Unlock()
	return mock.ClearKeysCacheFunc(ctx, token, realm)
}

// ClearKeysCacheCalls gets all the calls that were made to ClearKeysCache.
// Check the length with:
//     len(mockedGoCloak.ClearKeysCacheCalls())
func (mock *GoCloakMock) ClearKeysCacheCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
	}
	mock.lockClearKeysCache.RLock()
	calls = mock.calls.ClearKeysCache
	mock.lockClearKeysCache.RUnlock()
	return calls
}

// ClearRealmCache calls ClearRealmCacheFunc.
func (mock *GoCloakMock) ClearRealmCache(ctx context.Context, token string, realm string) error {
	if mock.ClearRealmCacheFunc == nil {
		panic("GoCloakMock.ClearRealmCacheFunc: method is nil but GoCloak.ClearRealmCache was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
	}
	mock.lockClearRealmCache.Lock()
	mock.calls.ClearRealmCache = append(mock.calls.ClearRealmCache, callInfo)
	mock.lockClearRealmCache.Unlock()
	return mock.ClearRealmCacheFunc(ctx, token, realm)
}

// ClearRealmCacheCalls gets all the calls that were made to ClearRealmCache.
// Check the length with:
//     len(mockedGoCloak.ClearRealmCacheCalls())
func (mock *GoCloakMock) ClearRealmCacheCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
	}
	mock.lockClearRealmCache.RLock()
	calls = mock.calls.ClearRealmCache
	mock.lockClearRealmCache.RUnlock()
	return calls
}

// ClearUserCache calls ClearUserCacheFunc.
func (mock *GoCloakMock) ClearUserCache(ctx context.Context, token string, realm string) error {
	if mock.ClearUserCacheFunc == nil {
		panic("GoCloakMock.ClearUserCacheFunc: method is nil but GoCloak.ClearUserCache was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
	}
	mock.lockClearUserCache.Lock()
	mock.calls.ClearUserCache = append(mock.calls.ClearUserCache, callInfo)
	mock.lockClearUserCache.Unlock()
	return mock.ClearUserCacheFunc(ctx, token, realm)
}

// ClearUserCacheCalls gets all the calls that were made to ClearUserCache.
// Check the length with:
//     len(mockedGoCloak.ClearUserCacheCalls())
func (mock *GoCloakMock) ClearUserCacheCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
	}
	mock.lockClearUserCache.RLock()
	calls = mock.calls.ClearUserCache
	mock.lockClearUserCache.RUnlock()
	return calls
}

// CreateChildGroup calls CreateChildGroupFunc.
func (mock *GoCloakMock) CreateChildGroup(ctx context.Context, token string, realm string, groupID string, group gocloak.Group) (string, error) {
	if mock.CreateChildGroupFunc == nil {
		panic("GoCloakMock.CreateChildGroupFunc: method is nil but GoCloak.CreateChildGroup was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Token   string
		Realm   string
		GroupID string
		Group   gocloak.Group
	}{
		Ctx:     ctx,
		Token:   token,
		Realm:   realm,
		GroupID: groupID,
		Group:   group,
	}
	mock.lockCreateChildGroup.Lock()
	mock.calls.CreateChildGroup = append(mock.calls.CreateChildGroup, callInfo)
	mock.lockCreateChildGroup.Unlock()
	return mock.CreateChildGroupFunc(ctx, token, realm, groupID, group)
}

// CreateChildGroupCalls gets all the calls that were made to CreateChildGroup.
// Check the length with:
//     len(mockedGoCloak.CreateChildGroupCalls())
func (mock *GoCloakMock) CreateChildGroupCalls() []struct {
	Ctx     context.Context
	Token   string
	Realm   string
	GroupID string
	Group   gocloak.Group
} {
	var calls []struct {
		Ctx     context.Context
		Token   string
		Realm   string
		GroupID string
		Group   gocloak.Group
	}
	mock.lockCreateChildGroup.RLock()
	calls = mock.calls.CreateChildGroup
	mock.lockCreateChildGroup.RUnlock()
	return calls
}

// CreateClient calls CreateClientFunc.
func (mock *GoCloakMock) CreateClient(ctx context.Context, accessToken string, realm string, clientID gocloak.Client) (string, error) {
	if mock.CreateClientFunc == nil {
		panic("GoCloakMock.CreateClientFunc: method is nil but GoCloak.CreateClient was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ClientID    gocloak.Client
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		ClientID:    clientID,
	}
	mock.lockCreateClient.Lock()
	mock.calls.CreateClient = append(mock.calls.CreateClient, callInfo)
	mock.lockCreateClient.Unlock()
	return mock.CreateClientFunc(ctx, accessToken, realm, clientID)
}

// CreateClientCalls gets all the calls that were made to CreateClient.
// Check the length with:
//     len(mockedGoCloak.CreateClientCalls())
func (mock *GoCloakMock) CreateClientCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	ClientID    gocloak.Client
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ClientID    gocloak.Client
	}
	mock.lockCreateClient.RLock()
	calls = mock.calls.CreateClient
	mock.lockCreateClient.RUnlock()
	return calls
}

// CreateClientProtocolMapper calls CreateClientProtocolMapperFunc.
func (mock *GoCloakMock) CreateClientProtocolMapper(ctx context.Context, token string, realm string, clientID string, mapper gocloak.ProtocolMapperRepresentation) (string, error) {
	if mock.CreateClientProtocolMapperFunc == nil {
		panic("GoCloakMock.CreateClientProtocolMapperFunc: method is nil but GoCloak.CreateClientProtocolMapper was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Mapper   gocloak.ProtocolMapperRepresentation
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		Mapper:   mapper,
	}
	mock.lockCreateClientProtocolMapper.Lock()
	mock.calls.CreateClientProtocolMapper = append(mock.calls.CreateClientProtocolMapper, callInfo)
	mock.lockCreateClientProtocolMapper.Unlock()
	return mock.CreateClientProtocolMapperFunc(ctx, token, realm, clientID, mapper)
}

// CreateClientProtocolMapperCalls gets all the calls that were made to CreateClientProtocolMapper.
// Check the length with:
//     len(mockedGoCloak.CreateClientProtocolMapperCalls())
func (mock *GoCloakMock) CreateClientProtocolMapperCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	Mapper   gocloak.ProtocolMapperRepresentation
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Mapper   gocloak.ProtocolMapperRepresentation
	}
	mock.lockCreateClientProtocolMapper.RLock()
	calls = mock.calls.CreateClientProtocolMapper
	mock.lockCreateClientProtocolMapper.RUnlock()
	return calls
}

// CreateClientRole calls CreateClientRoleFunc.
func (mock *GoCloakMock) CreateClientRole(ctx context.Context, accessToken string, realm string, clientID string, role gocloak.Role) (string, error) {
	if mock.CreateClientRoleFunc == nil {
		panic("GoCloakMock.CreateClientRoleFunc: method is nil but GoCloak.CreateClientRole was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ClientID    string
		Role        gocloak.Role
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		ClientID:    clientID,
		Role:        role,
	}
	mock.lockCreateClientRole.Lock()
	mock.calls.CreateClientRole = append(mock.calls.CreateClientRole, callInfo)
	mock.lockCreateClientRole.Unlock()
	return mock.CreateClientRoleFunc(ctx, accessToken, realm, clientID, role)
}

// CreateClientRoleCalls gets all the calls that were made to CreateClientRole.
// Check the length with:
//     len(mockedGoCloak.CreateClientRoleCalls())
func (mock *GoCloakMock) CreateClientRoleCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	ClientID    string
	Role        gocloak.Role
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ClientID    string
		Role        gocloak.Role
	}
	mock.lockCreateClientRole.RLock()
	calls = mock.calls.CreateClientRole
	mock.lockCreateClientRole.RUnlock()
	return calls
}

// CreateClientScope calls CreateClientScopeFunc.
func (mock *GoCloakMock) CreateClientScope(ctx context.Context, accessToken string, realm string, scope gocloak.ClientScope) (string, error) {
	if mock.CreateClientScopeFunc == nil {
		panic("GoCloakMock.CreateClientScopeFunc: method is nil but GoCloak.CreateClientScope was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Scope       gocloak.ClientScope
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		Scope:       scope,
	}
	mock.lockCreateClientScope.Lock()
	mock.calls.CreateClientScope = append(mock.calls.CreateClientScope, callInfo)
	mock.lockCreateClientScope.Unlock()
	return mock.CreateClientScopeFunc(ctx, accessToken, realm, scope)
}

// CreateClientScopeCalls gets all the calls that were made to CreateClientScope.
// Check the length with:
//     len(mockedGoCloak.CreateClientScopeCalls())
func (mock *GoCloakMock) CreateClientScopeCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	Scope       gocloak.ClientScope
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Scope       gocloak.ClientScope
	}
	mock.lockCreateClientScope.RLock()
	calls = mock.calls.CreateClientScope
	mock.lockCreateClientScope.RUnlock()
	return calls
}

// CreateClientScopeMappingsClientRoles calls CreateClientScopeMappingsClientRolesFunc.
func (mock *GoCloakMock) CreateClientScopeMappingsClientRoles(ctx context.Context, token string, realm string, clientID string, clientsID string, roles []gocloak.Role) error {
	if mock.CreateClientScopeMappingsClientRolesFunc == nil {
		panic("GoCloakMock.CreateClientScopeMappingsClientRolesFunc: method is nil but GoCloak.CreateClientScopeMappingsClientRoles was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Token     string
		Realm     string
		ClientID  string
		ClientsID string
		Roles     []gocloak.Role
	}{
		Ctx:       ctx,
		Token:     token,
		Realm:     realm,
		ClientID:  clientID,
		ClientsID: clientsID,
		Roles:     roles,
	}
	mock.lockCreateClientScopeMappingsClientRoles.Lock()
	mock.calls.CreateClientScopeMappingsClientRoles = append(mock.calls.CreateClientScopeMappingsClientRoles, callInfo)
	mock.lockCreateClientScopeMappingsClientRoles.Unlock()
	return mock.CreateClientScopeMappingsClientRolesFunc(ctx, token, realm, clientID, clientsID, roles)
}

// CreateClientScopeMappingsClientRolesCalls gets all the calls that were made to CreateClientScopeMappingsClientRoles.
// Check the length with:
//     len(mockedGoCloak.CreateClientScopeMappingsClientRolesCalls())
func (mock *GoCloakMock) CreateClientScopeMappingsClientRolesCalls() []struct {
	Ctx       context.Context
	Token     string
	Realm     string
	ClientID  string
	ClientsID string
	Roles     []gocloak.Role
} {
	var calls []struct {
		Ctx       context.Context
		Token     string
		Realm     string
		ClientID  string
		ClientsID string
		Roles     []gocloak.Role
	}
	mock.lockCreateClientScopeMappingsClientRoles.RLock()
	calls = mock.calls.CreateClientScopeMappingsClientRoles
	mock.lockCreateClientScopeMappingsClientRoles.RUnlock()
	return calls
}

// CreateClientScopeMappingsRealmRoles calls CreateClientScopeMappingsRealmRolesFunc.
func (mock *GoCloakMock) CreateClientScopeMappingsRealmRoles(ctx context.Context, token string, realm string, clientID string, roles []gocloak.Role) error {
	if mock.CreateClientScopeMappingsRealmRolesFunc == nil {
		panic("GoCloakMock.CreateClientScopeMappingsRealmRolesFunc: method is nil but GoCloak.CreateClientScopeMappingsRealmRoles was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Roles    []gocloak.Role
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		Roles:    roles,
	}
	mock.lockCreateClientScopeMappingsRealmRoles.Lock()
	mock.calls.CreateClientScopeMappingsRealmRoles = append(mock.calls.CreateClientScopeMappingsRealmRoles, callInfo)
	mock.lockCreateClientScopeMappingsRealmRoles.Unlock()
	return mock.CreateClientScopeMappingsRealmRolesFunc(ctx, token, realm, clientID, roles)
}

// CreateClientScopeMappingsRealmRolesCalls gets all the calls that were made to CreateClientScopeMappingsRealmRoles.
// Check the length with:
//     len(mockedGoCloak.CreateClientScopeMappingsRealmRolesCalls())
func (mock *GoCloakMock) CreateClientScopeMappingsRealmRolesCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	Roles    []gocloak.Role
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Roles    []gocloak.Role
	}
	mock.lockCreateClientScopeMappingsRealmRoles.RLock()
	calls = mock.calls.CreateClientScopeMappingsRealmRoles
	mock.lockCreateClientScopeMappingsRealmRoles.RUnlock()
	return calls
}

// CreateComponent calls CreateComponentFunc.
func (mock *GoCloakMock) CreateComponent(ctx context.Context, accessToken string, realm string, component gocloak.Component) (string, error) {
	if mock.CreateComponentFunc == nil {
		panic("GoCloakMock.CreateComponentFunc: method is nil but GoCloak.CreateComponent was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Component   gocloak.Component
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		Component:   component,
	}
	mock.lockCreateComponent.Lock()
	mock.calls.CreateComponent = append(mock.calls.CreateComponent, callInfo)
	mock.lockCreateComponent.Unlock()
	return mock.CreateComponentFunc(ctx, accessToken, realm, component)
}

// CreateComponentCalls gets all the calls that were made to CreateComponent.
// Check the length with:
//     len(mockedGoCloak.CreateComponentCalls())
func (mock *GoCloakMock) CreateComponentCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	Component   gocloak.Component
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Component   gocloak.Component
	}
	mock.lockCreateComponent.RLock()
	calls = mock.calls.CreateComponent
	mock.lockCreateComponent.RUnlock()
	return calls
}

// CreateGroup calls CreateGroupFunc.
func (mock *GoCloakMock) CreateGroup(ctx context.Context, accessToken string, realm string, group gocloak.Group) (string, error) {
	if mock.CreateGroupFunc == nil {
		panic("GoCloakMock.CreateGroupFunc: method is nil but GoCloak.CreateGroup was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Group       gocloak.Group
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		Group:       group,
	}
	mock.lockCreateGroup.Lock()
	mock.calls.CreateGroup = append(mock.calls.CreateGroup, callInfo)
	mock.lockCreateGroup.Unlock()
	return mock.CreateGroupFunc(ctx, accessToken, realm, group)
}

// CreateGroupCalls gets all the calls that were made to CreateGroup.
// Check the length with:
//     len(mockedGoCloak.CreateGroupCalls())
func (mock *GoCloakMock) CreateGroupCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	Group       gocloak.Group
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Group       gocloak.Group
	}
	mock.lockCreateGroup.RLock()
	calls = mock.calls.CreateGroup
	mock.lockCreateGroup.RUnlock()
	return calls
}

// CreateIdentityProvider calls CreateIdentityProviderFunc.
func (mock *GoCloakMock) CreateIdentityProvider(ctx context.Context, token string, realm string, providerRep gocloak.IdentityProviderRepresentation) (string, error) {
	if mock.CreateIdentityProviderFunc == nil {
		panic("GoCloakMock.CreateIdentityProviderFunc: method is nil but GoCloak.CreateIdentityProvider was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Token       string
		Realm       string
		ProviderRep gocloak.IdentityProviderRepresentation
	}{
		Ctx:         ctx,
		Token:       token,
		Realm:       realm,
		ProviderRep: providerRep,
	}
	mock.lockCreateIdentityProvider.Lock()
	mock.calls.CreateIdentityProvider = append(mock.calls.CreateIdentityProvider, callInfo)
	mock.lockCreateIdentityProvider.Unlock()
	return mock.CreateIdentityProviderFunc(ctx, token, realm, providerRep)
}

// CreateIdentityProviderCalls gets all the calls that were made to CreateIdentityProvider.
// Check the length with:
//     len(mockedGoCloak.CreateIdentityProviderCalls())
func (mock *GoCloakMock) CreateIdentityProviderCalls() []struct {
	Ctx         context.Context
	Token       string
	Realm       string
	ProviderRep gocloak.IdentityProviderRepresentation
} {
	var calls []struct {
		Ctx         context.Context
		Token       string
		Realm       string
		ProviderRep gocloak.IdentityProviderRepresentation
	}
	mock.lockCreateIdentityProvider.RLock()
	calls = mock.calls.CreateIdentityProvider
	mock.lockCreateIdentityProvider.RUnlock()
	return calls
}

// CreateIdentityProviderMapper calls CreateIdentityProviderMapperFunc.
func (mock *GoCloakMock) CreateIdentityProviderMapper(ctx context.Context, token string, realm string, alias string, mapper gocloak.IdentityProviderMapper) error {
	if mock.CreateIdentityProviderMapperFunc == nil {
		panic("GoCloakMock.CreateIdentityProviderMapperFunc: method is nil but GoCloak.CreateIdentityProviderMapper was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		Alias  string
		Mapper gocloak.IdentityProviderMapper
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		Alias:  alias,
		Mapper: mapper,
	}
	mock.lockCreateIdentityProviderMapper.Lock()
	mock.calls.CreateIdentityProviderMapper = append(mock.calls.CreateIdentityProviderMapper, callInfo)
	mock.lockCreateIdentityProviderMapper.Unlock()
	return mock.CreateIdentityProviderMapperFunc(ctx, token, realm, alias, mapper)
}

// CreateIdentityProviderMapperCalls gets all the calls that were made to CreateIdentityProviderMapper.
// Check the length with:
//     len(mockedGoCloak.CreateIdentityProviderMapperCalls())
func (mock *GoCloakMock) CreateIdentityProviderMapperCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	Alias  string
	Mapper gocloak.IdentityProviderMapper
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		Alias  string
		Mapper gocloak.IdentityProviderMapper
	}
	mock.lockCreateIdentityProviderMapper.RLock()
	calls = mock.calls.CreateIdentityProviderMapper
	mock.lockCreateIdentityProviderMapper.RUnlock()
	return calls
}

// CreatePermission calls CreatePermissionFunc.
func (mock *GoCloakMock) CreatePermission(ctx context.Context, token string, realm string, clientID string, permission gocloak.PermissionRepresentation) (*gocloak.PermissionRepresentation, error) {
	if mock.CreatePermissionFunc == nil {
		panic("GoCloakMock.CreatePermissionFunc: method is nil but GoCloak.CreatePermission was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Token      string
		Realm      string
		ClientID   string
		Permission gocloak.PermissionRepresentation
	}{
		Ctx:        ctx,
		Token:      token,
		Realm:      realm,
		ClientID:   clientID,
		Permission: permission,
	}
	mock.lockCreatePermission.Lock()
	mock.calls.CreatePermission = append(mock.calls.CreatePermission, callInfo)
	mock.lockCreatePermission.Unlock()
	return mock.CreatePermissionFunc(ctx, token, realm, clientID, permission)
}

// CreatePermissionCalls gets all the calls that were made to CreatePermission.
// Check the length with:
//     len(mockedGoCloak.CreatePermissionCalls())
func (mock *GoCloakMock) CreatePermissionCalls() []struct {
	Ctx        context.Context
	Token      string
	Realm      string
	ClientID   string
	Permission gocloak.PermissionRepresentation
} {
	var calls []struct {
		Ctx        context.Context
		Token      string
		Realm      string
		ClientID   string
		Permission gocloak.PermissionRepresentation
	}
	mock.lockCreatePermission.RLock()
	calls = mock.calls.CreatePermission
	mock.lockCreatePermission.RUnlock()
	return calls
}

// CreatePermissionTicket calls CreatePermissionTicketFunc.
func (mock *GoCloakMock) CreatePermissionTicket(ctx context.Context, token string, realm string, permissions []gocloak.CreatePermissionTicketParams) (*gocloak.PermissionTicketResponseRepresentation, error) {
	if mock.CreatePermissionTicketFunc == nil {
		panic("GoCloakMock.CreatePermissionTicketFunc: method is nil but GoCloak.CreatePermissionTicket was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Token       string
		Realm       string
		Permissions []gocloak.CreatePermissionTicketParams
	}{
		Ctx:         ctx,
		Token:       token,
		Realm:       realm,
		Permissions: permissions,
	}
	mock.lockCreatePermissionTicket.Lock()
	mock.calls.CreatePermissionTicket = append(mock.calls.CreatePermissionTicket, callInfo)
	mock.lockCreatePermissionTicket.Unlock()
	return mock.CreatePermissionTicketFunc(ctx, token, realm, permissions)
}

// CreatePermissionTicketCalls gets all the calls that were made to CreatePermissionTicket.
// Check the length with:
//     len(mockedGoCloak.CreatePermissionTicketCalls())
func (mock *GoCloakMock) CreatePermissionTicketCalls() []struct {
	Ctx         context.Context
	Token       string
	Realm       string
	Permissions []gocloak.CreatePermissionTicketParams
} {
	var calls []struct {
		Ctx         context.Context
		Token       string
		Realm       string
		Permissions []gocloak.CreatePermissionTicketParams
	}
	mock.lockCreatePermissionTicket.RLock()
	calls = mock.calls.CreatePermissionTicket
	mock.lockCreatePermissionTicket.RUnlock()
	return calls
}

// CreatePolicy calls CreatePolicyFunc.
func (mock *GoCloakMock) CreatePolicy(ctx context.Context, token string, realm string, clientID string, policy gocloak.PolicyRepresentation) (*gocloak.PolicyRepresentation, error) {
	if mock.CreatePolicyFunc == nil {
		panic("GoCloakMock.CreatePolicyFunc: method is nil but GoCloak.CreatePolicy was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Policy   gocloak.PolicyRepresentation
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		Policy:   policy,
	}
	mock.lockCreatePolicy.Lock()
	mock.calls.CreatePolicy = append(mock.calls.CreatePolicy, callInfo)
	mock.lockCreatePolicy.Unlock()
	return mock.CreatePolicyFunc(ctx, token, realm, clientID, policy)
}

// CreatePolicyCalls gets all the calls that were made to CreatePolicy.
// Check the length with:
//     len(mockedGoCloak.CreatePolicyCalls())
func (mock *GoCloakMock) CreatePolicyCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	Policy   gocloak.PolicyRepresentation
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Policy   gocloak.PolicyRepresentation
	}
	mock.lockCreatePolicy.RLock()
	calls = mock.calls.CreatePolicy
	mock.lockCreatePolicy.RUnlock()
	return calls
}

// CreateRealm calls CreateRealmFunc.
func (mock *GoCloakMock) CreateRealm(ctx context.Context, token string, realm gocloak.RealmRepresentation) (string, error) {
	if mock.CreateRealmFunc == nil {
		panic("GoCloakMock.CreateRealmFunc: method is nil but GoCloak.CreateRealm was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm gocloak.RealmRepresentation
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
	}
	mock.lockCreateRealm.Lock()
	mock.calls.CreateRealm = append(mock.calls.CreateRealm, callInfo)
	mock.lockCreateRealm.Unlock()
	return mock.CreateRealmFunc(ctx, token, realm)
}

// CreateRealmCalls gets all the calls that were made to CreateRealm.
// Check the length with:
//     len(mockedGoCloak.CreateRealmCalls())
func (mock *GoCloakMock) CreateRealmCalls() []struct {
	Ctx   context.Context
	Token string
	Realm gocloak.RealmRepresentation
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm gocloak.RealmRepresentation
	}
	mock.lockCreateRealm.RLock()
	calls = mock.calls.CreateRealm
	mock.lockCreateRealm.RUnlock()
	return calls
}

// CreateRealmRole calls CreateRealmRoleFunc.
func (mock *GoCloakMock) CreateRealmRole(ctx context.Context, token string, realm string, role gocloak.Role) (string, error) {
	if mock.CreateRealmRoleFunc == nil {
		panic("GoCloakMock.CreateRealmRoleFunc: method is nil but GoCloak.CreateRealmRole was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
		Role  gocloak.Role
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
		Role:  role,
	}
	mock.lockCreateRealmRole.Lock()
	mock.calls.CreateRealmRole = append(mock.calls.CreateRealmRole, callInfo)
	mock.lockCreateRealmRole.Unlock()
	return mock.CreateRealmRoleFunc(ctx, token, realm, role)
}

// CreateRealmRoleCalls gets all the calls that were made to CreateRealmRole.
// Check the length with:
//     len(mockedGoCloak.CreateRealmRoleCalls())
func (mock *GoCloakMock) CreateRealmRoleCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
	Role  gocloak.Role
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
		Role  gocloak.Role
	}
	mock.lockCreateRealmRole.RLock()
	calls = mock.calls.CreateRealmRole
	mock.lockCreateRealmRole.RUnlock()
	return calls
}

// CreateResource calls CreateResourceFunc.
func (mock *GoCloakMock) CreateResource(ctx context.Context, token string, realm string, clientID string, resource gocloak.ResourceRepresentation) (*gocloak.ResourceRepresentation, error) {
	if mock.CreateResourceFunc == nil {
		panic("GoCloakMock.CreateResourceFunc: method is nil but GoCloak.CreateResource was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Resource gocloak.ResourceRepresentation
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		Resource: resource,
	}
	mock.lockCreateResource.Lock()
	mock.calls.CreateResource = append(mock.calls.CreateResource, callInfo)
	mock.lockCreateResource.Unlock()
	return mock.CreateResourceFunc(ctx, token, realm, clientID, resource)
}

// CreateResourceCalls gets all the calls that were made to CreateResource.
// Check the length with:
//     len(mockedGoCloak.CreateResourceCalls())
func (mock *GoCloakMock) CreateResourceCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	Resource gocloak.ResourceRepresentation
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Resource gocloak.ResourceRepresentation
	}
	mock.lockCreateResource.RLock()
	calls = mock.calls.CreateResource
	mock.lockCreateResource.RUnlock()
	return calls
}

// CreateResourceClient calls CreateResourceClientFunc.
func (mock *GoCloakMock) CreateResourceClient(ctx context.Context, token string, realm string, resource gocloak.ResourceRepresentation) (*gocloak.ResourceRepresentation, error) {
	if mock.CreateResourceClientFunc == nil {
		panic("GoCloakMock.CreateResourceClientFunc: method is nil but GoCloak.CreateResourceClient was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		Resource gocloak.ResourceRepresentation
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		Resource: resource,
	}
	mock.lockCreateResourceClient.Lock()
	mock.calls.CreateResourceClient = append(mock.calls.CreateResourceClient, callInfo)
	mock.lockCreateResourceClient.Unlock()
	return mock.CreateResourceClientFunc(ctx, token, realm, resource)
}

// CreateResourceClientCalls gets all the calls that were made to CreateResourceClient.
// Check the length with:
//     len(mockedGoCloak.CreateResourceClientCalls())
func (mock *GoCloakMock) CreateResourceClientCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	Resource gocloak.ResourceRepresentation
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		Resource gocloak.ResourceRepresentation
	}
	mock.lockCreateResourceClient.RLock()
	calls = mock.calls.CreateResourceClient
	mock.lockCreateResourceClient.RUnlock()
	return calls
}

// CreateResourcePolicy calls CreateResourcePolicyFunc.
func (mock *GoCloakMock) CreateResourcePolicy(ctx context.Context, token string, realm string, resourceID string, policy gocloak.ResourcePolicyRepresentation) (*gocloak.ResourcePolicyRepresentation, error) {
	if mock.CreateResourcePolicyFunc == nil {
		panic("GoCloakMock.CreateResourcePolicyFunc: method is nil but GoCloak.CreateResourcePolicy was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Token      string
		Realm      string
		ResourceID string
		Policy     gocloak.ResourcePolicyRepresentation
	}{
		Ctx:        ctx,
		Token:      token,
		Realm:      realm,
		ResourceID: resourceID,
		Policy:     policy,
	}
	mock.lockCreateResourcePolicy.Lock()
	mock.calls.CreateResourcePolicy = append(mock.calls.CreateResourcePolicy, callInfo)
	mock.lockCreateResourcePolicy.Unlock()
	return mock.CreateResourcePolicyFunc(ctx, token, realm, resourceID, policy)
}

// CreateResourcePolicyCalls gets all the calls that were made to CreateResourcePolicy.
// Check the length with:
//     len(mockedGoCloak.CreateResourcePolicyCalls())
func (mock *GoCloakMock) CreateResourcePolicyCalls() []struct {
	Ctx        context.Context
	Token      string
	Realm      string
	ResourceID string
	Policy     gocloak.ResourcePolicyRepresentation
} {
	var calls []struct {
		Ctx        context.Context
		Token      string
		Realm      string
		ResourceID string
		Policy     gocloak.ResourcePolicyRepresentation
	}
	mock.lockCreateResourcePolicy.RLock()
	calls = mock.calls.CreateResourcePolicy
	mock.lockCreateResourcePolicy.RUnlock()
	return calls
}

// CreateScope calls CreateScopeFunc.
func (mock *GoCloakMock) CreateScope(ctx context.Context, token string, realm string, clientID string, scope gocloak.ScopeRepresentation) (*gocloak.ScopeRepresentation, error) {
	if mock.CreateScopeFunc == nil {
		panic("GoCloakMock.CreateScopeFunc: method is nil but GoCloak.CreateScope was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Scope    gocloak.ScopeRepresentation
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		Scope:    scope,
	}
	mock.lockCreateScope.Lock()
	mock.calls.CreateScope = append(mock.calls.CreateScope, callInfo)
	mock.lockCreateScope.Unlock()
	return mock.CreateScopeFunc(ctx, token, realm, clientID, scope)
}

// CreateScopeCalls gets all the calls that were made to CreateScope.
// Check the length with:
//     len(mockedGoCloak.CreateScopeCalls())
func (mock *GoCloakMock) CreateScopeCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	Scope    gocloak.ScopeRepresentation
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Scope    gocloak.ScopeRepresentation
	}
	mock.lockCreateScope.RLock()
	calls = mock.calls.CreateScope
	mock.lockCreateScope.RUnlock()
	return calls
}

// CreateUser calls CreateUserFunc.
func (mock *GoCloakMock) CreateUser(ctx context.Context, token string, realm string, user gocloak.User) (string, error) {
	if mock.CreateUserFunc == nil {
		panic("GoCloakMock.CreateUserFunc: method is nil but GoCloak.CreateUser was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
		User  gocloak.User
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
		User:  user,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, token, realm, user)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//     len(mockedGoCloak.CreateUserCalls())
func (mock *GoCloakMock) CreateUserCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
	User  gocloak.User
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
		User  gocloak.User
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// CreateUserFederatedIdentity calls CreateUserFederatedIdentityFunc.
func (mock *GoCloakMock) CreateUserFederatedIdentity(ctx context.Context, token string, realm string, userID string, providerID string, federatedIdentityRep gocloak.FederatedIdentityRepresentation) error {
	if mock.CreateUserFederatedIdentityFunc == nil {
		panic("GoCloakMock.CreateUserFederatedIdentityFunc: method is nil but GoCloak.CreateUserFederatedIdentity was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		Token                string
		Realm                string
		UserID               string
		ProviderID           string
		FederatedIdentityRep gocloak.FederatedIdentityRepresentation
	}{
		Ctx:                  ctx,
		Token:                token,
		Realm:                realm,
		UserID:               userID,
		ProviderID:           providerID,
		FederatedIdentityRep: federatedIdentityRep,
	}
	mock.lockCreateUserFederatedIdentity.Lock()
	mock.calls.CreateUserFederatedIdentity = append(mock.calls.CreateUserFederatedIdentity, callInfo)
	mock.lockCreateUserFederatedIdentity.Unlock()
	return mock.CreateUserFederatedIdentityFunc(ctx, token, realm, userID, providerID, federatedIdentityRep)
}

// CreateUserFederatedIdentityCalls gets all the calls that were made to CreateUserFederatedIdentity.
// Check the length with:
//     len(mockedGoCloak.CreateUserFederatedIdentityCalls())
func (mock *GoCloakMock) CreateUserFederatedIdentityCalls() []struct {
	Ctx                  context.Context
	Token                string
	Realm                string
	UserID               string
	ProviderID           string
	FederatedIdentityRep gocloak.FederatedIdentityRepresentation
} {
	var calls []struct {
		Ctx                  context.Context
		Token                string
		Realm                string
		UserID               string
		ProviderID           string
		FederatedIdentityRep gocloak.FederatedIdentityRepresentation
	}
	mock.lockCreateUserFederatedIdentity.RLock()
	calls = mock.calls.CreateUserFederatedIdentity
	mock.lockCreateUserFederatedIdentity.RUnlock()
	return calls
}

// DecodeAccessToken calls DecodeAccessTokenFunc.
func (mock *GoCloakMock) DecodeAccessToken(ctx context.Context, accessToken string, realm string, expectedAudience string) (*jwt.Token, *jwt.MapClaims, error) {
	if mock.DecodeAccessTokenFunc == nil {
		panic("GoCloakMock.DecodeAccessTokenFunc: method is nil but GoCloak.DecodeAccessToken was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AccessToken      string
		Realm            string
		ExpectedAudience string
	}{
		Ctx:              ctx,
		AccessToken:      accessToken,
		Realm:            realm,
		ExpectedAudience: expectedAudience,
	}
	mock.lockDecodeAccessToken.Lock()
	mock.calls.DecodeAccessToken = append(mock.calls.DecodeAccessToken, callInfo)
	mock.lockDecodeAccessToken.Unlock()
	return mock.DecodeAccessTokenFunc(ctx, accessToken, realm, expectedAudience)
}

// DecodeAccessTokenCalls gets all the calls that were made to DecodeAccessToken.
// Check the length with:
//     len(mockedGoCloak.DecodeAccessTokenCalls())
func (mock *GoCloakMock) DecodeAccessTokenCalls() []struct {
	Ctx              context.Context
	AccessToken      string
	Realm            string
	ExpectedAudience string
} {
	var calls []struct {
		Ctx              context.Context
		AccessToken      string
		Realm            string
		ExpectedAudience string
	}
	mock.lockDecodeAccessToken.RLock()
	calls = mock.calls.DecodeAccessToken
	mock.lockDecodeAccessToken.RUnlock()
	return calls
}

// DecodeAccessTokenCustomClaims calls DecodeAccessTokenCustomClaimsFunc.
func (mock *GoCloakMock) DecodeAccessTokenCustomClaims(ctx context.Context, accessToken string, realm string, expectedAudience string, claims jwt.Claims) (*jwt.Token, error) {
	if mock.DecodeAccessTokenCustomClaimsFunc == nil {
		panic("GoCloakMock.DecodeAccessTokenCustomClaimsFunc: method is nil but GoCloak.DecodeAccessTokenCustomClaims was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AccessToken      string
		Realm            string
		ExpectedAudience string
		Claims           jwt.Claims
	}{
		Ctx:              ctx,
		AccessToken:      accessToken,
		Realm:            realm,
		ExpectedAudience: expectedAudience,
		Claims:           claims,
	}
	mock.lockDecodeAccessTokenCustomClaims.Lock()
	mock.calls.DecodeAccessTokenCustomClaims = append(mock.calls.DecodeAccessTokenCustomClaims, callInfo)
	mock.lockDecodeAccessTokenCustomClaims.Unlock()
	return mock.DecodeAccessTokenCustomClaimsFunc(ctx, accessToken, realm, expectedAudience, claims)
}

// DecodeAccessTokenCustomClaimsCalls gets all the calls that were made to DecodeAccessTokenCustomClaims.
// Check the length with:
//     len(mockedGoCloak.DecodeAccessTokenCustomClaimsCalls())
func (mock *GoCloakMock) DecodeAccessTokenCustomClaimsCalls() []struct {
	Ctx              context.Context
	AccessToken      string
	Realm            string
	ExpectedAudience string
	Claims           jwt.Claims
} {
	var calls []struct {
		Ctx              context.Context
		AccessToken      string
		Realm            string
		ExpectedAudience string
		Claims           jwt.Claims
	}
	mock.lockDecodeAccessTokenCustomClaims.RLock()
	calls = mock.calls.DecodeAccessTokenCustomClaims
	mock.lockDecodeAccessTokenCustomClaims.RUnlock()
	return calls
}

// DeleteClient calls DeleteClientFunc.
func (mock *GoCloakMock) DeleteClient(ctx context.Context, accessToken string, realm string, clientID string) error {
	if mock.DeleteClientFunc == nil {
		panic("GoCloakMock.DeleteClientFunc: method is nil but GoCloak.DeleteClient was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ClientID    string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		ClientID:    clientID,
	}
	mock.lockDeleteClient.Lock()
	mock.calls.DeleteClient = append(mock.calls.DeleteClient, callInfo)
	mock.lockDeleteClient.Unlock()
	return mock.DeleteClientFunc(ctx, accessToken, realm, clientID)
}

// DeleteClientCalls gets all the calls that were made to DeleteClient.
// Check the length with:
//     len(mockedGoCloak.DeleteClientCalls())
func (mock *GoCloakMock) DeleteClientCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	ClientID    string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ClientID    string
	}
	mock.lockDeleteClient.RLock()
	calls = mock.calls.DeleteClient
	mock.lockDeleteClient.RUnlock()
	return calls
}

// DeleteClientProtocolMapper calls DeleteClientProtocolMapperFunc.
func (mock *GoCloakMock) DeleteClientProtocolMapper(ctx context.Context, token string, realm string, clientID string, mapperID string) error {
	if mock.DeleteClientProtocolMapperFunc == nil {
		panic("GoCloakMock.DeleteClientProtocolMapperFunc: method is nil but GoCloak.DeleteClientProtocolMapper was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		MapperID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		MapperID: mapperID,
	}
	mock.lockDeleteClientProtocolMapper.Lock()
	mock.calls.DeleteClientProtocolMapper = append(mock.calls.DeleteClientProtocolMapper, callInfo)
	mock.lockDeleteClientProtocolMapper.Unlock()
	return mock.DeleteClientProtocolMapperFunc(ctx, token, realm, clientID, mapperID)
}

// DeleteClientProtocolMapperCalls gets all the calls that were made to DeleteClientProtocolMapper.
// Check the length with:
//     len(mockedGoCloak.DeleteClientProtocolMapperCalls())
func (mock *GoCloakMock) DeleteClientProtocolMapperCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	MapperID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		MapperID string
	}
	mock.lockDeleteClientProtocolMapper.RLock()
	calls = mock.calls.DeleteClientProtocolMapper
	mock.lockDeleteClientProtocolMapper.RUnlock()
	return calls
}

// DeleteClientRole calls DeleteClientRoleFunc.
func (mock *GoCloakMock) DeleteClientRole(ctx context.Context, accessToken string, realm string, clientID string, roleName string) error {
	if mock.DeleteClientRoleFunc == nil {
		panic("GoCloakMock.DeleteClientRoleFunc: method is nil but GoCloak.DeleteClientRole was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ClientID    string
		RoleName    string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		ClientID:    clientID,
		RoleName:    roleName,
	}
	mock.lockDeleteClientRole.Lock()
	mock.calls.DeleteClientRole = append(mock.calls.DeleteClientRole, callInfo)
	mock.lockDeleteClientRole.Unlock()
	return mock.DeleteClientRoleFunc(ctx, accessToken, realm, clientID, roleName)
}

// DeleteClientRoleCalls gets all the calls that were made to DeleteClientRole.
// Check the length with:
//     len(mockedGoCloak.DeleteClientRoleCalls())
func (mock *GoCloakMock) DeleteClientRoleCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	ClientID    string
	RoleName    string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ClientID    string
		RoleName    string
	}
	mock.lockDeleteClientRole.RLock()
	calls = mock.calls.DeleteClientRole
	mock.lockDeleteClientRole.RUnlock()
	return calls
}

// DeleteClientRoleComposite calls DeleteClientRoleCompositeFunc.
func (mock *GoCloakMock) DeleteClientRoleComposite(ctx context.Context, token string, realm string, roleID string, roles []gocloak.Role) error {
	if mock.DeleteClientRoleCompositeFunc == nil {
		panic("GoCloakMock.DeleteClientRoleCompositeFunc: method is nil but GoCloak.DeleteClientRoleComposite was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		RoleID string
		Roles  []gocloak.Role
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		RoleID: roleID,
		Roles:  roles,
	}
	mock.lockDeleteClientRoleComposite.Lock()
	mock.calls.DeleteClientRoleComposite = append(mock.calls.DeleteClientRoleComposite, callInfo)
	mock.lockDeleteClientRoleComposite.Unlock()
	return mock.DeleteClientRoleCompositeFunc(ctx, token, realm, roleID, roles)
}

// DeleteClientRoleCompositeCalls gets all the calls that were made to DeleteClientRoleComposite.
// Check the length with:
//     len(mockedGoCloak.DeleteClientRoleCompositeCalls())
func (mock *GoCloakMock) DeleteClientRoleCompositeCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	RoleID string
	Roles  []gocloak.Role
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		RoleID string
		Roles  []gocloak.Role
	}
	mock.lockDeleteClientRoleComposite.RLock()
	calls = mock.calls.DeleteClientRoleComposite
	mock.lockDeleteClientRoleComposite.RUnlock()
	return calls
}

// DeleteClientRoleFromGroup calls DeleteClientRoleFromGroupFunc.
func (mock *GoCloakMock) DeleteClientRoleFromGroup(ctx context.Context, token string, realm string, clientID string, groupID string, roles []gocloak.Role) error {
	if mock.DeleteClientRoleFromGroupFunc == nil {
		panic("GoCloakMock.DeleteClientRoleFromGroupFunc: method is nil but GoCloak.DeleteClientRoleFromGroup was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		GroupID  string
		Roles    []gocloak.Role
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		GroupID:  groupID,
		Roles:    roles,
	}
	mock.lockDeleteClientRoleFromGroup.Lock()
	mock.calls.DeleteClientRoleFromGroup = append(mock.calls.DeleteClientRoleFromGroup, callInfo)
	mock.lockDeleteClientRoleFromGroup.Unlock()
	return mock.DeleteClientRoleFromGroupFunc(ctx, token, realm, clientID, groupID, roles)
}

// DeleteClientRoleFromGroupCalls gets all the calls that were made to DeleteClientRoleFromGroup.
// Check the length with:
//     len(mockedGoCloak.DeleteClientRoleFromGroupCalls())
func (mock *GoCloakMock) DeleteClientRoleFromGroupCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	GroupID  string
	Roles    []gocloak.Role
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		GroupID  string
		Roles    []gocloak.Role
	}
	mock.lockDeleteClientRoleFromGroup.RLock()
	calls = mock.calls.DeleteClientRoleFromGroup
	mock.lockDeleteClientRoleFromGroup.RUnlock()
	return calls
}

// DeleteClientRoleFromUser calls DeleteClientRoleFromUserFunc.
func (mock *GoCloakMock) DeleteClientRoleFromUser(ctx context.Context, token string, realm string, clientID string, userID string, roles []gocloak.Role) error {
	if mock.DeleteClientRoleFromUserFunc == nil {
		panic("GoCloakMock.DeleteClientRoleFromUserFunc: method is nil but GoCloak.DeleteClientRoleFromUser was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		UserID   string
		Roles    []gocloak.Role
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		UserID:   userID,
		Roles:    roles,
	}
	mock.lockDeleteClientRoleFromUser.Lock()
	mock.calls.DeleteClientRoleFromUser = append(mock.calls.DeleteClientRoleFromUser, callInfo)
	mock.lockDeleteClientRoleFromUser.Unlock()
	return mock.DeleteClientRoleFromUserFunc(ctx, token, realm, clientID, userID, roles)
}

// DeleteClientRoleFromUserCalls gets all the calls that were made to DeleteClientRoleFromUser.
// Check the length with:
//     len(mockedGoCloak.DeleteClientRoleFromUserCalls())
func (mock *GoCloakMock) DeleteClientRoleFromUserCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	UserID   string
	Roles    []gocloak.Role
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		UserID   string
		Roles    []gocloak.Role
	}
	mock.lockDeleteClientRoleFromUser.RLock()
	calls = mock.calls.DeleteClientRoleFromUser
	mock.lockDeleteClientRoleFromUser.RUnlock()
	return calls
}

// DeleteClientScope calls DeleteClientScopeFunc.
func (mock *GoCloakMock) DeleteClientScope(ctx context.Context, accessToken string, realm string, scopeID string) error {
	if mock.DeleteClientScopeFunc == nil {
		panic("GoCloakMock.DeleteClientScopeFunc: method is nil but GoCloak.DeleteClientScope was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ScopeID     string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		ScopeID:     scopeID,
	}
	mock.lockDeleteClientScope.Lock()
	mock.calls.DeleteClientScope = append(mock.calls.DeleteClientScope, callInfo)
	mock.lockDeleteClientScope.Unlock()
	return mock.DeleteClientScopeFunc(ctx, accessToken, realm, scopeID)
}

// DeleteClientScopeCalls gets all the calls that were made to DeleteClientScope.
// Check the length with:
//     len(mockedGoCloak.DeleteClientScopeCalls())
func (mock *GoCloakMock) DeleteClientScopeCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	ScopeID     string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ScopeID     string
	}
	mock.lockDeleteClientScope.RLock()
	calls = mock.calls.DeleteClientScope
	mock.lockDeleteClientScope.RUnlock()
	return calls
}

// DeleteClientScopeMappingsClientRoles calls DeleteClientScopeMappingsClientRolesFunc.
func (mock *GoCloakMock) DeleteClientScopeMappingsClientRoles(ctx context.Context, token string, realm string, clientID string, clientsID string, roles []gocloak.Role) error {
	if mock.DeleteClientScopeMappingsClientRolesFunc == nil {
		panic("GoCloakMock.DeleteClientScopeMappingsClientRolesFunc: method is nil but GoCloak.DeleteClientScopeMappingsClientRoles was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Token     string
		Realm     string
		ClientID  string
		ClientsID string
		Roles     []gocloak.Role
	}{
		Ctx:       ctx,
		Token:     token,
		Realm:     realm,
		ClientID:  clientID,
		ClientsID: clientsID,
		Roles:     roles,
	}
	mock.lockDeleteClientScopeMappingsClientRoles.Lock()
	mock.calls.DeleteClientScopeMappingsClientRoles = append(mock.calls.DeleteClientScopeMappingsClientRoles, callInfo)
	mock.lockDeleteClientScopeMappingsClientRoles.Unlock()
	return mock.DeleteClientScopeMappingsClientRolesFunc(ctx, token, realm, clientID, clientsID, roles)
}

// DeleteClientScopeMappingsClientRolesCalls gets all the calls that were made to DeleteClientScopeMappingsClientRoles.
// Check the length with:
//     len(mockedGoCloak.DeleteClientScopeMappingsClientRolesCalls())
func (mock *GoCloakMock) DeleteClientScopeMappingsClientRolesCalls() []struct {
	Ctx       context.Context
	Token     string
	Realm     string
	ClientID  string
	ClientsID string
	Roles     []gocloak.Role
} {
	var calls []struct {
		Ctx       context.Context
		Token     string
		Realm     string
		ClientID  string
		ClientsID string
		Roles     []gocloak.Role
	}
	mock.lockDeleteClientScopeMappingsClientRoles.RLock()
	calls = mock.calls.DeleteClientScopeMappingsClientRoles
	mock.lockDeleteClientScopeMappingsClientRoles.RUnlock()
	return calls
}

// DeleteClientScopeMappingsRealmRoles calls DeleteClientScopeMappingsRealmRolesFunc.
func (mock *GoCloakMock) DeleteClientScopeMappingsRealmRoles(ctx context.Context, token string, realm string, clientID string, roles []gocloak.Role) error {
	if mock.DeleteClientScopeMappingsRealmRolesFunc == nil {
		panic("GoCloakMock.DeleteClientScopeMappingsRealmRolesFunc: method is nil but GoCloak.DeleteClientScopeMappingsRealmRoles was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Roles    []gocloak.Role
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		Roles:    roles,
	}
	mock.lockDeleteClientScopeMappingsRealmRoles.Lock()
	mock.calls.DeleteClientScopeMappingsRealmRoles = append(mock.calls.DeleteClientScopeMappingsRealmRoles, callInfo)
	mock.lockDeleteClientScopeMappingsRealmRoles.Unlock()
	return mock.DeleteClientScopeMappingsRealmRolesFunc(ctx, token, realm, clientID, roles)
}

// DeleteClientScopeMappingsRealmRolesCalls gets all the calls that were made to DeleteClientScopeMappingsRealmRoles.
// Check the length with:
//     len(mockedGoCloak.DeleteClientScopeMappingsRealmRolesCalls())
func (mock *GoCloakMock) DeleteClientScopeMappingsRealmRolesCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	Roles    []gocloak.Role
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Roles    []gocloak.Role
	}
	mock.lockDeleteClientScopeMappingsRealmRoles.RLock()
	calls = mock.calls.DeleteClientScopeMappingsRealmRoles
	mock.lockDeleteClientScopeMappingsRealmRoles.RUnlock()
	return calls
}

// DeleteComponent calls DeleteComponentFunc.
func (mock *GoCloakMock) DeleteComponent(ctx context.Context, accessToken string, realm string, componentID string) error {
	if mock.DeleteComponentFunc == nil {
		panic("GoCloakMock.DeleteComponentFunc: method is nil but GoCloak.DeleteComponent was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ComponentID string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		ComponentID: componentID,
	}
	mock.lockDeleteComponent.Lock()
	mock.calls.DeleteComponent = append(mock.calls.DeleteComponent, callInfo)
	mock.lockDeleteComponent.Unlock()
	return mock.DeleteComponentFunc(ctx, accessToken, realm, componentID)
}

// DeleteComponentCalls gets all the calls that were made to DeleteComponent.
// Check the length with:
//     len(mockedGoCloak.DeleteComponentCalls())
func (mock *GoCloakMock) DeleteComponentCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	ComponentID string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ComponentID string
	}
	mock.lockDeleteComponent.RLock()
	calls = mock.calls.DeleteComponent
	mock.lockDeleteComponent.RUnlock()
	return calls
}

// DeleteCredentials calls DeleteCredentialsFunc.
func (mock *GoCloakMock) DeleteCredentials(ctx context.Context, token string, realm string, UserID string, CredentialID string) error {
	if mock.DeleteCredentialsFunc == nil {
		panic("GoCloakMock.DeleteCredentialsFunc: method is nil but GoCloak.DeleteCredentials was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Token        string
		Realm        string
		UserID       string
		CredentialID string
	}{
		Ctx:          ctx,
		Token:        token,
		Realm:        realm,
		UserID:       UserID,
		CredentialID: CredentialID,
	}
	mock.lockDeleteCredentials.Lock()
	mock.calls.DeleteCredentials = append(mock.calls.DeleteCredentials, callInfo)
	mock.lockDeleteCredentials.Unlock()
	return mock.DeleteCredentialsFunc(ctx, token, realm, UserID, CredentialID)
}

// DeleteCredentialsCalls gets all the calls that were made to DeleteCredentials.
// Check the length with:
//     len(mockedGoCloak.DeleteCredentialsCalls())
func (mock *GoCloakMock) DeleteCredentialsCalls() []struct {
	Ctx          context.Context
	Token        string
	Realm        string
	UserID       string
	CredentialID string
} {
	var calls []struct {
		Ctx          context.Context
		Token        string
		Realm        string
		UserID       string
		CredentialID string
	}
	mock.lockDeleteCredentials.RLock()
	calls = mock.calls.DeleteCredentials
	mock.lockDeleteCredentials.RUnlock()
	return calls
}

// DeleteGroup calls DeleteGroupFunc.
func (mock *GoCloakMock) DeleteGroup(ctx context.Context, accessToken string, realm string, groupID string) error {
	if mock.DeleteGroupFunc == nil {
		panic("GoCloakMock.DeleteGroupFunc: method is nil but GoCloak.DeleteGroup was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		GroupID     string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		GroupID:     groupID,
	}
	mock.lockDeleteGroup.Lock()
	mock.calls.DeleteGroup = append(mock.calls.DeleteGroup, callInfo)
	mock.lockDeleteGroup.Unlock()
	return mock.DeleteGroupFunc(ctx, accessToken, realm, groupID)
}

// DeleteGroupCalls gets all the calls that were made to DeleteGroup.
// Check the length with:
//     len(mockedGoCloak.DeleteGroupCalls())
func (mock *GoCloakMock) DeleteGroupCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	GroupID     string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		GroupID     string
	}
	mock.lockDeleteGroup.RLock()
	calls = mock.calls.DeleteGroup
	mock.lockDeleteGroup.RUnlock()
	return calls
}

// DeleteIdentityProvider calls DeleteIdentityProviderFunc.
func (mock *GoCloakMock) DeleteIdentityProvider(ctx context.Context, token string, realm string, alias string) error {
	if mock.DeleteIdentityProviderFunc == nil {
		panic("GoCloakMock.DeleteIdentityProviderFunc: method is nil but GoCloak.DeleteIdentityProvider was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
		Alias string
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
		Alias: alias,
	}
	mock.lockDeleteIdentityProvider.Lock()
	mock.calls.DeleteIdentityProvider = append(mock.calls.DeleteIdentityProvider, callInfo)
	mock.lockDeleteIdentityProvider.Unlock()
	return mock.DeleteIdentityProviderFunc(ctx, token, realm, alias)
}

// DeleteIdentityProviderCalls gets all the calls that were made to DeleteIdentityProvider.
// Check the length with:
//     len(mockedGoCloak.DeleteIdentityProviderCalls())
func (mock *GoCloakMock) DeleteIdentityProviderCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
	Alias string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
		Alias string
	}
	mock.lockDeleteIdentityProvider.RLock()
	calls = mock.calls.DeleteIdentityProvider
	mock.lockDeleteIdentityProvider.RUnlock()
	return calls
}

// DeleteIdentityProviderMapper calls DeleteIdentityProviderMapperFunc.
func (mock *GoCloakMock) DeleteIdentityProviderMapper(ctx context.Context, token string, realm string, alias string, mapperID string) error {
	if mock.DeleteIdentityProviderMapperFunc == nil {
		panic("GoCloakMock.DeleteIdentityProviderMapperFunc: method is nil but GoCloak.DeleteIdentityProviderMapper was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		Alias    string
		MapperID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		Alias:    alias,
		MapperID: mapperID,
	}
	mock.lockDeleteIdentityProviderMapper.Lock()
	mock.calls.DeleteIdentityProviderMapper = append(mock.calls.DeleteIdentityProviderMapper, callInfo)
	mock.lockDeleteIdentityProviderMapper.Unlock()
	return mock.DeleteIdentityProviderMapperFunc(ctx, token, realm, alias, mapperID)
}

// DeleteIdentityProviderMapperCalls gets all the calls that were made to DeleteIdentityProviderMapper.
// Check the length with:
//     len(mockedGoCloak.DeleteIdentityProviderMapperCalls())
func (mock *GoCloakMock) DeleteIdentityProviderMapperCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	Alias    string
	MapperID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		Alias    string
		MapperID string
	}
	mock.lockDeleteIdentityProviderMapper.RLock()
	calls = mock.calls.DeleteIdentityProviderMapper
	mock.lockDeleteIdentityProviderMapper.RUnlock()
	return calls
}

// DeletePermission calls DeletePermissionFunc.
func (mock *GoCloakMock) DeletePermission(ctx context.Context, token string, realm string, clientID string, permissionID string) error {
	if mock.DeletePermissionFunc == nil {
		panic("GoCloakMock.DeletePermissionFunc: method is nil but GoCloak.DeletePermission was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Token        string
		Realm        string
		ClientID     string
		PermissionID string
	}{
		Ctx:          ctx,
		Token:        token,
		Realm:        realm,
		ClientID:     clientID,
		PermissionID: permissionID,
	}
	mock.lockDeletePermission.Lock()
	mock.calls.DeletePermission = append(mock.calls.DeletePermission, callInfo)
	mock.lockDeletePermission.Unlock()
	return mock.DeletePermissionFunc(ctx, token, realm, clientID, permissionID)
}

// DeletePermissionCalls gets all the calls that were made to DeletePermission.
// Check the length with:
//     len(mockedGoCloak.DeletePermissionCalls())
func (mock *GoCloakMock) DeletePermissionCalls() []struct {
	Ctx          context.Context
	Token        string
	Realm        string
	ClientID     string
	PermissionID string
} {
	var calls []struct {
		Ctx          context.Context
		Token        string
		Realm        string
		ClientID     string
		PermissionID string
	}
	mock.lockDeletePermission.RLock()
	calls = mock.calls.DeletePermission
	mock.lockDeletePermission.RUnlock()
	return calls
}

// DeletePolicy calls DeletePolicyFunc.
func (mock *GoCloakMock) DeletePolicy(ctx context.Context, token string, realm string, clientID string, policyID string) error {
	if mock.DeletePolicyFunc == nil {
		panic("GoCloakMock.DeletePolicyFunc: method is nil but GoCloak.DeletePolicy was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		PolicyID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		PolicyID: policyID,
	}
	mock.lockDeletePolicy.Lock()
	mock.calls.DeletePolicy = append(mock.calls.DeletePolicy, callInfo)
	mock.lockDeletePolicy.Unlock()
	return mock.DeletePolicyFunc(ctx, token, realm, clientID, policyID)
}

// DeletePolicyCalls gets all the calls that were made to DeletePolicy.
// Check the length with:
//     len(mockedGoCloak.DeletePolicyCalls())
func (mock *GoCloakMock) DeletePolicyCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	PolicyID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		PolicyID string
	}
	mock.lockDeletePolicy.RLock()
	calls = mock.calls.DeletePolicy
	mock.lockDeletePolicy.RUnlock()
	return calls
}

// DeleteRealm calls DeleteRealmFunc.
func (mock *GoCloakMock) DeleteRealm(ctx context.Context, token string, realm string) error {
	if mock.DeleteRealmFunc == nil {
		panic("GoCloakMock.DeleteRealmFunc: method is nil but GoCloak.DeleteRealm was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
	}
	mock.lockDeleteRealm.Lock()
	mock.calls.DeleteRealm = append(mock.calls.DeleteRealm, callInfo)
	mock.lockDeleteRealm.Unlock()
	return mock.DeleteRealmFunc(ctx, token, realm)
}

// DeleteRealmCalls gets all the calls that were made to DeleteRealm.
// Check the length with:
//     len(mockedGoCloak.DeleteRealmCalls())
func (mock *GoCloakMock) DeleteRealmCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
	}
	mock.lockDeleteRealm.RLock()
	calls = mock.calls.DeleteRealm
	mock.lockDeleteRealm.RUnlock()
	return calls
}

// DeleteRealmRole calls DeleteRealmRoleFunc.
func (mock *GoCloakMock) DeleteRealmRole(ctx context.Context, token string, realm string, roleName string) error {
	if mock.DeleteRealmRoleFunc == nil {
		panic("GoCloakMock.DeleteRealmRoleFunc: method is nil but GoCloak.DeleteRealmRole was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		RoleName string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		RoleName: roleName,
	}
	mock.lockDeleteRealmRole.Lock()
	mock.calls.DeleteRealmRole = append(mock.calls.DeleteRealmRole, callInfo)
	mock.lockDeleteRealmRole.Unlock()
	return mock.DeleteRealmRoleFunc(ctx, token, realm, roleName)
}

// DeleteRealmRoleCalls gets all the calls that were made to DeleteRealmRole.
// Check the length with:
//     len(mockedGoCloak.DeleteRealmRoleCalls())
func (mock *GoCloakMock) DeleteRealmRoleCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	RoleName string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		RoleName string
	}
	mock.lockDeleteRealmRole.RLock()
	calls = mock.calls.DeleteRealmRole
	mock.lockDeleteRealmRole.RUnlock()
	return calls
}

// DeleteRealmRoleComposite calls DeleteRealmRoleCompositeFunc.
func (mock *GoCloakMock) DeleteRealmRoleComposite(ctx context.Context, token string, realm string, roleName string, roles []gocloak.Role) error {
	if mock.DeleteRealmRoleCompositeFunc == nil {
		panic("GoCloakMock.DeleteRealmRoleCompositeFunc: method is nil but GoCloak.DeleteRealmRoleComposite was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		RoleName string
		Roles    []gocloak.Role
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		RoleName: roleName,
		Roles:    roles,
	}
	mock.lockDeleteRealmRoleComposite.Lock()
	mock.calls.DeleteRealmRoleComposite = append(mock.calls.DeleteRealmRoleComposite, callInfo)
	mock.lockDeleteRealmRoleComposite.Unlock()
	return mock.DeleteRealmRoleCompositeFunc(ctx, token, realm, roleName, roles)
}

// DeleteRealmRoleCompositeCalls gets all the calls that were made to DeleteRealmRoleComposite.
// Check the length with:
//     len(mockedGoCloak.DeleteRealmRoleCompositeCalls())
func (mock *GoCloakMock) DeleteRealmRoleCompositeCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	RoleName string
	Roles    []gocloak.Role
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		RoleName string
		Roles    []gocloak.Role
	}
	mock.lockDeleteRealmRoleComposite.RLock()
	calls = mock.calls.DeleteRealmRoleComposite
	mock.lockDeleteRealmRoleComposite.RUnlock()
	return calls
}

// DeleteRealmRoleFromGroup calls DeleteRealmRoleFromGroupFunc.
func (mock *GoCloakMock) DeleteRealmRoleFromGroup(ctx context.Context, token string, realm string, groupID string, roles []gocloak.Role) error {
	if mock.DeleteRealmRoleFromGroupFunc == nil {
		panic("GoCloakMock.DeleteRealmRoleFromGroupFunc: method is nil but GoCloak.DeleteRealmRoleFromGroup was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Token   string
		Realm   string
		GroupID string
		Roles   []gocloak.Role
	}{
		Ctx:     ctx,
		Token:   token,
		Realm:   realm,
		GroupID: groupID,
		Roles:   roles,
	}
	mock.lockDeleteRealmRoleFromGroup.Lock()
	mock.calls.DeleteRealmRoleFromGroup = append(mock.calls.DeleteRealmRoleFromGroup, callInfo)
	mock.lockDeleteRealmRoleFromGroup.Unlock()
	return mock.DeleteRealmRoleFromGroupFunc(ctx, token, realm, groupID, roles)
}

// DeleteRealmRoleFromGroupCalls gets all the calls that were made to DeleteRealmRoleFromGroup.
// Check the length with:
//     len(mockedGoCloak.DeleteRealmRoleFromGroupCalls())
func (mock *GoCloakMock) DeleteRealmRoleFromGroupCalls() []struct {
	Ctx     context.Context
	Token   string
	Realm   string
	GroupID string
	Roles   []gocloak.Role
} {
	var calls []struct {
		Ctx     context.Context
		Token   string
		Realm   string
		GroupID string
		Roles   []gocloak.Role
	}
	mock.lockDeleteRealmRoleFromGroup.RLock()
	calls = mock.calls.DeleteRealmRoleFromGroup
	mock.lockDeleteRealmRoleFromGroup.RUnlock()
	return calls
}

// DeleteRealmRoleFromUser calls DeleteRealmRoleFromUserFunc.
func (mock *GoCloakMock) DeleteRealmRoleFromUser(ctx context.Context, token string, realm string, userID string, roles []gocloak.Role) error {
	if mock.DeleteRealmRoleFromUserFunc == nil {
		panic("GoCloakMock.DeleteRealmRoleFromUserFunc: method is nil but GoCloak.DeleteRealmRoleFromUser was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
		Roles  []gocloak.Role
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		UserID: userID,
		Roles:  roles,
	}
	mock.lockDeleteRealmRoleFromUser.Lock()
	mock.calls.DeleteRealmRoleFromUser = append(mock.calls.DeleteRealmRoleFromUser, callInfo)
	mock.lockDeleteRealmRoleFromUser.Unlock()
	return mock.DeleteRealmRoleFromUserFunc(ctx, token, realm, userID, roles)
}

// DeleteRealmRoleFromUserCalls gets all the calls that were made to DeleteRealmRoleFromUser.
// Check the length with:
//     len(mockedGoCloak.DeleteRealmRoleFromUserCalls())
func (mock *GoCloakMock) DeleteRealmRoleFromUserCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	UserID string
	Roles  []gocloak.Role
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
		Roles  []gocloak.Role
	}
	mock.lockDeleteRealmRoleFromUser.RLock()
	calls = mock.calls.DeleteRealmRoleFromUser
	mock.lockDeleteRealmRoleFromUser.RUnlock()
	return calls
}

// DeleteResource calls DeleteResourceFunc.
func (mock *GoCloakMock) DeleteResource(ctx context.Context, token string, realm string, clientID string, resourceID string) error {
	if mock.DeleteResourceFunc == nil {
		panic("GoCloakMock.DeleteResourceFunc: method is nil but GoCloak.DeleteResource was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Token      string
		Realm      string
		ClientID   string
		ResourceID string
	}{
		Ctx:        ctx,
		Token:      token,
		Realm:      realm,
		ClientID:   clientID,
		ResourceID: resourceID,
	}
	mock.lockDeleteResource.Lock()
	mock.calls.DeleteResource = append(mock.calls.DeleteResource, callInfo)
	mock.lockDeleteResource.Unlock()
	return mock.DeleteResourceFunc(ctx, token, realm, clientID, resourceID)
}

// DeleteResourceCalls gets all the calls that were made to DeleteResource.
// Check the length with:
//     len(mockedGoCloak.DeleteResourceCalls())
func (mock *GoCloakMock) DeleteResourceCalls() []struct {
	Ctx        context.Context
	Token      string
	Realm      string
	ClientID   string
	ResourceID string
} {
	var calls []struct {
		Ctx        context.Context
		Token      string
		Realm      string
		ClientID   string
		ResourceID string
	}
	mock.lockDeleteResource.RLock()
	calls = mock.calls.DeleteResource
	mock.lockDeleteResource.RUnlock()
	return calls
}

// DeleteResourceClient calls DeleteResourceClientFunc.
func (mock *GoCloakMock) DeleteResourceClient(ctx context.Context, token string, realm string, resourceID string) error {
	if mock.DeleteResourceClientFunc == nil {
		panic("GoCloakMock.DeleteResourceClientFunc: method is nil but GoCloak.DeleteResourceClient was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Token      string
		Realm      string
		ResourceID string
	}{
		Ctx:        ctx,
		Token:      token,
		Realm:      realm,
		ResourceID: resourceID,
	}
	mock.lockDeleteResourceClient.Lock()
	mock.calls.DeleteResourceClient = append(mock.calls.DeleteResourceClient, callInfo)
	mock.lockDeleteResourceClient.Unlock()
	return mock.DeleteResourceClientFunc(ctx, token, realm, resourceID)
}

// DeleteResourceClientCalls gets all the calls that were made to DeleteResourceClient.
// Check the length with:
//     len(mockedGoCloak.DeleteResourceClientCalls())
func (mock *GoCloakMock) DeleteResourceClientCalls() []struct {
	Ctx        context.Context
	Token      string
	Realm      string
	ResourceID string
} {
	var calls []struct {
		Ctx        context.Context
		Token      string
		Realm      string
		ResourceID string
	}
	mock.lockDeleteResourceClient.RLock()
	calls = mock.calls.DeleteResourceClient
	mock.lockDeleteResourceClient.RUnlock()
	return calls
}

// DeleteResourcePolicy calls DeleteResourcePolicyFunc.
func (mock *GoCloakMock) DeleteResourcePolicy(ctx context.Context, token string, realm string, permissionID string) error {
	if mock.DeleteResourcePolicyFunc == nil {
		panic("GoCloakMock.DeleteResourcePolicyFunc: method is nil but GoCloak.DeleteResourcePolicy was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Token        string
		Realm        string
		PermissionID string
	}{
		Ctx:          ctx,
		Token:        token,
		Realm:        realm,
		PermissionID: permissionID,
	}
	mock.lockDeleteResourcePolicy.Lock()
	mock.calls.DeleteResourcePolicy = append(mock.calls.DeleteResourcePolicy, callInfo)
	mock.lockDeleteResourcePolicy.Unlock()
	return mock.DeleteResourcePolicyFunc(ctx, token, realm, permissionID)
}

// DeleteResourcePolicyCalls gets all the calls that were made to DeleteResourcePolicy.
// Check the length with:
//     len(mockedGoCloak.DeleteResourcePolicyCalls())
func (mock *GoCloakMock) DeleteResourcePolicyCalls() []struct {
	Ctx          context.Context
	Token        string
	Realm        string
	PermissionID string
} {
	var calls []struct {
		Ctx          context.Context
		Token        string
		Realm        string
		PermissionID string
	}
	mock.lockDeleteResourcePolicy.RLock()
	calls = mock.calls.DeleteResourcePolicy
	mock.lockDeleteResourcePolicy.RUnlock()
	return calls
}

// DeleteScope calls DeleteScopeFunc.
func (mock *GoCloakMock) DeleteScope(ctx context.Context, token string, realm string, clientID string, scopeID string) error {
	if mock.DeleteScopeFunc == nil {
		panic("GoCloakMock.DeleteScopeFunc: method is nil but GoCloak.DeleteScope was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		ScopeID  string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		ScopeID:  scopeID,
	}
	mock.lockDeleteScope.Lock()
	mock.calls.DeleteScope = append(mock.calls.DeleteScope, callInfo)
	mock.lockDeleteScope.Unlock()
	return mock.DeleteScopeFunc(ctx, token, realm, clientID, scopeID)
}

// DeleteScopeCalls gets all the calls that were made to DeleteScope.
// Check the length with:
//     len(mockedGoCloak.DeleteScopeCalls())
func (mock *GoCloakMock) DeleteScopeCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	ScopeID  string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		ScopeID  string
	}
	mock.lockDeleteScope.RLock()
	calls = mock.calls.DeleteScope
	mock.lockDeleteScope.RUnlock()
	return calls
}

// DeleteUser calls DeleteUserFunc.
func (mock *GoCloakMock) DeleteUser(ctx context.Context, accessToken string, realm string, userID string) error {
	if mock.DeleteUserFunc == nil {
		panic("GoCloakMock.DeleteUserFunc: method is nil but GoCloak.DeleteUser was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		UserID      string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		UserID:      userID,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(ctx, accessToken, realm, userID)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//     len(mockedGoCloak.DeleteUserCalls())
func (mock *GoCloakMock) DeleteUserCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	UserID      string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		UserID      string
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}

// DeleteUserFederatedIdentity calls DeleteUserFederatedIdentityFunc.
func (mock *GoCloakMock) DeleteUserFederatedIdentity(ctx context.Context, token string, realm string, userID string, providerID string) error {
	if mock.DeleteUserFederatedIdentityFunc == nil {
		panic("GoCloakMock.DeleteUserFederatedIdentityFunc: method is nil but GoCloak.DeleteUserFederatedIdentity was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Token      string
		Realm      string
		UserID     string
		ProviderID string
	}{
		Ctx:        ctx,
		Token:      token,
		Realm:      realm,
		UserID:     userID,
		ProviderID: providerID,
	}
	mock.lockDeleteUserFederatedIdentity.Lock()
	mock.calls.DeleteUserFederatedIdentity = append(mock.calls.DeleteUserFederatedIdentity, callInfo)
	mock.lockDeleteUserFederatedIdentity.Unlock()
	return mock.DeleteUserFederatedIdentityFunc(ctx, token, realm, userID, providerID)
}

// DeleteUserFederatedIdentityCalls gets all the calls that were made to DeleteUserFederatedIdentity.
// Check the length with:
//     len(mockedGoCloak.DeleteUserFederatedIdentityCalls())
func (mock *GoCloakMock) DeleteUserFederatedIdentityCalls() []struct {
	Ctx        context.Context
	Token      string
	Realm      string
	UserID     string
	ProviderID string
} {
	var calls []struct {
		Ctx        context.Context
		Token      string
		Realm      string
		UserID     string
		ProviderID string
	}
	mock.lockDeleteUserFederatedIdentity.RLock()
	calls = mock.calls.DeleteUserFederatedIdentity
	mock.lockDeleteUserFederatedIdentity.RUnlock()
	return calls
}

// DeleteUserFromGroup calls DeleteUserFromGroupFunc.
func (mock *GoCloakMock) DeleteUserFromGroup(ctx context.Context, token string, realm string, userID string, groupID string) error {
	if mock.DeleteUserFromGroupFunc == nil {
		panic("GoCloakMock.DeleteUserFromGroupFunc: method is nil but GoCloak.DeleteUserFromGroup was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Token   string
		Realm   string
		UserID  string
		GroupID string
	}{
		Ctx:     ctx,
		Token:   token,
		Realm:   realm,
		UserID:  userID,
		GroupID: groupID,
	}
	mock.lockDeleteUserFromGroup.Lock()
	mock.calls.DeleteUserFromGroup = append(mock.calls.DeleteUserFromGroup, callInfo)
	mock.lockDeleteUserFromGroup.Unlock()
	return mock.DeleteUserFromGroupFunc(ctx, token, realm, userID, groupID)
}

// DeleteUserFromGroupCalls gets all the calls that were made to DeleteUserFromGroup.
// Check the length with:
//     len(mockedGoCloak.DeleteUserFromGroupCalls())
func (mock *GoCloakMock) DeleteUserFromGroupCalls() []struct {
	Ctx     context.Context
	Token   string
	Realm   string
	UserID  string
	GroupID string
} {
	var calls []struct {
		Ctx     context.Context
		Token   string
		Realm   string
		UserID  string
		GroupID string
	}
	mock.lockDeleteUserFromGroup.RLock()
	calls = mock.calls.DeleteUserFromGroup
	mock.lockDeleteUserFromGroup.RUnlock()
	return calls
}

// DeleteUserPermission calls DeleteUserPermissionFunc.
func (mock *GoCloakMock) DeleteUserPermission(ctx context.Context, token string, realm string, ticketID string) error {
	if mock.DeleteUserPermissionFunc == nil {
		panic("GoCloakMock.DeleteUserPermissionFunc: method is nil but GoCloak.DeleteUserPermission was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		TicketID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		TicketID: ticketID,
	}
	mock.lockDeleteUserPermission.Lock()
	mock.calls.DeleteUserPermission = append(mock.calls.DeleteUserPermission, callInfo)
	mock.lockDeleteUserPermission.Unlock()
	return mock.DeleteUserPermissionFunc(ctx, token, realm, ticketID)
}

// DeleteUserPermissionCalls gets all the calls that were made to DeleteUserPermission.
// Check the length with:
//     len(mockedGoCloak.DeleteUserPermissionCalls())
func (mock *GoCloakMock) DeleteUserPermissionCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	TicketID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		TicketID string
	}
	mock.lockDeleteUserPermission.RLock()
	calls = mock.calls.DeleteUserPermission
	mock.lockDeleteUserPermission.RUnlock()
	return calls
}

// DisableAllCredentialsByType calls DisableAllCredentialsByTypeFunc.
func (mock *GoCloakMock) DisableAllCredentialsByType(ctx context.Context, token string, realm string, userID string, types []string) error {
	if mock.DisableAllCredentialsByTypeFunc == nil {
		panic("GoCloakMock.DisableAllCredentialsByTypeFunc: method is nil but GoCloak.DisableAllCredentialsByType was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
		Types  []string
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		UserID: userID,
		Types:  types,
	}
	mock.lockDisableAllCredentialsByType.Lock()
	mock.calls.DisableAllCredentialsByType = append(mock.calls.DisableAllCredentialsByType, callInfo)
	mock.lockDisableAllCredentialsByType.Unlock()
	return mock.DisableAllCredentialsByTypeFunc(ctx, token, realm, userID, types)
}

// DisableAllCredentialsByTypeCalls gets all the calls that were made to DisableAllCredentialsByType.
// Check the length with:
//     len(mockedGoCloak.DisableAllCredentialsByTypeCalls())
func (mock *GoCloakMock) DisableAllCredentialsByTypeCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	UserID string
	Types  []string
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
		Types  []string
	}
	mock.lockDisableAllCredentialsByType.RLock()
	calls = mock.calls.DisableAllCredentialsByType
	mock.lockDisableAllCredentialsByType.RUnlock()
	return calls
}

// ExecuteActionsEmail calls ExecuteActionsEmailFunc.
func (mock *GoCloakMock) ExecuteActionsEmail(ctx context.Context, token string, realm string, params gocloak.ExecuteActionsEmail) error {
	if mock.ExecuteActionsEmailFunc == nil {
		panic("GoCloakMock.ExecuteActionsEmailFunc: method is nil but GoCloak.ExecuteActionsEmail was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		Params gocloak.ExecuteActionsEmail
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		Params: params,
	}
	mock.lockExecuteActionsEmail.Lock()
	mock.calls.ExecuteActionsEmail = append(mock.calls.ExecuteActionsEmail, callInfo)
	mock.lockExecuteActionsEmail.Unlock()
	return mock.ExecuteActionsEmailFunc(ctx, token, realm, params)
}

// ExecuteActionsEmailCalls gets all the calls that were made to ExecuteActionsEmail.
// Check the length with:
//     len(mockedGoCloak.ExecuteActionsEmailCalls())
func (mock *GoCloakMock) ExecuteActionsEmailCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	Params gocloak.ExecuteActionsEmail
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		Params gocloak.ExecuteActionsEmail
	}
	mock.lockExecuteActionsEmail.RLock()
	calls = mock.calls.ExecuteActionsEmail
	mock.lockExecuteActionsEmail.RUnlock()
	return calls
}

// ExportIDPPublicBrokerConfig calls ExportIDPPublicBrokerConfigFunc.
func (mock *GoCloakMock) ExportIDPPublicBrokerConfig(ctx context.Context, token string, realm string, alias string) (*string, error) {
	if mock.ExportIDPPublicBrokerConfigFunc == nil {
		panic("GoCloakMock.ExportIDPPublicBrokerConfigFunc: method is nil but GoCloak.ExportIDPPublicBrokerConfig was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
		Alias string
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
		Alias: alias,
	}
	mock.lockExportIDPPublicBrokerConfig.Lock()
	mock.calls.ExportIDPPublicBrokerConfig = append(mock.calls.ExportIDPPublicBrokerConfig, callInfo)
	mock.lockExportIDPPublicBrokerConfig.Unlock()
	return mock.ExportIDPPublicBrokerConfigFunc(ctx, token, realm, alias)
}

// ExportIDPPublicBrokerConfigCalls gets all the calls that were made to ExportIDPPublicBrokerConfig.
// Check the length with:
//     len(mockedGoCloak.ExportIDPPublicBrokerConfigCalls())
func (mock *GoCloakMock) ExportIDPPublicBrokerConfigCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
	Alias string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
		Alias string
	}
	mock.lockExportIDPPublicBrokerConfig.RLock()
	calls = mock.calls.ExportIDPPublicBrokerConfig
	mock.lockExportIDPPublicBrokerConfig.RUnlock()
	return calls
}

// GetAvailableClientRolesByGroupID calls GetAvailableClientRolesByGroupIDFunc.
func (mock *GoCloakMock) GetAvailableClientRolesByGroupID(ctx context.Context, token string, realm string, clientID string, groupID string) ([]*gocloak.Role, error) {
	if mock.GetAvailableClientRolesByGroupIDFunc == nil {
		panic("GoCloakMock.GetAvailableClientRolesByGroupIDFunc: method is nil but GoCloak.GetAvailableClientRolesByGroupID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		GroupID  string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		GroupID:  groupID,
	}
	mock.lockGetAvailableClientRolesByGroupID.Lock()
	mock.calls.GetAvailableClientRolesByGroupID = append(mock.calls.GetAvailableClientRolesByGroupID, callInfo)
	mock.lockGetAvailableClientRolesByGroupID.Unlock()
	return mock.GetAvailableClientRolesByGroupIDFunc(ctx, token, realm, clientID, groupID)
}

// GetAvailableClientRolesByGroupIDCalls gets all the calls that were made to GetAvailableClientRolesByGroupID.
// Check the length with:
//     len(mockedGoCloak.GetAvailableClientRolesByGroupIDCalls())
func (mock *GoCloakMock) GetAvailableClientRolesByGroupIDCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	GroupID  string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		GroupID  string
	}
	mock.lockGetAvailableClientRolesByGroupID.RLock()
	calls = mock.calls.GetAvailableClientRolesByGroupID
	mock.lockGetAvailableClientRolesByGroupID.RUnlock()
	return calls
}

// GetAvailableClientRolesByUserID calls GetAvailableClientRolesByUserIDFunc.
func (mock *GoCloakMock) GetAvailableClientRolesByUserID(ctx context.Context, token string, realm string, clientID string, userID string) ([]*gocloak.Role, error) {
	if mock.GetAvailableClientRolesByUserIDFunc == nil {
		panic("GoCloakMock.GetAvailableClientRolesByUserIDFunc: method is nil but GoCloak.GetAvailableClientRolesByUserID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		UserID   string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		UserID:   userID,
	}
	mock.lockGetAvailableClientRolesByUserID.Lock()
	mock.calls.GetAvailableClientRolesByUserID = append(mock.calls.GetAvailableClientRolesByUserID, callInfo)
	mock.lockGetAvailableClientRolesByUserID.Unlock()
	return mock.GetAvailableClientRolesByUserIDFunc(ctx, token, realm, clientID, userID)
}

// GetAvailableClientRolesByUserIDCalls gets all the calls that were made to GetAvailableClientRolesByUserID.
// Check the length with:
//     len(mockedGoCloak.GetAvailableClientRolesByUserIDCalls())
func (mock *GoCloakMock) GetAvailableClientRolesByUserIDCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	UserID   string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		UserID   string
	}
	mock.lockGetAvailableClientRolesByUserID.RLock()
	calls = mock.calls.GetAvailableClientRolesByUserID
	mock.lockGetAvailableClientRolesByUserID.RUnlock()
	return calls
}

// GetAvailableRealmRolesByGroupID calls GetAvailableRealmRolesByGroupIDFunc.
func (mock *GoCloakMock) GetAvailableRealmRolesByGroupID(ctx context.Context, token string, realm string, groupID string) ([]*gocloak.Role, error) {
	if mock.GetAvailableRealmRolesByGroupIDFunc == nil {
		panic("GoCloakMock.GetAvailableRealmRolesByGroupIDFunc: method is nil but GoCloak.GetAvailableRealmRolesByGroupID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Token   string
		Realm   string
		GroupID string
	}{
		Ctx:     ctx,
		Token:   token,
		Realm:   realm,
		GroupID: groupID,
	}
	mock.lockGetAvailableRealmRolesByGroupID.Lock()
	mock.calls.GetAvailableRealmRolesByGroupID = append(mock.calls.GetAvailableRealmRolesByGroupID, callInfo)
	mock.lockGetAvailableRealmRolesByGroupID.Unlock()
	return mock.GetAvailableRealmRolesByGroupIDFunc(ctx, token, realm, groupID)
}

// GetAvailableRealmRolesByGroupIDCalls gets all the calls that were made to GetAvailableRealmRolesByGroupID.
// Check the length with:
//     len(mockedGoCloak.GetAvailableRealmRolesByGroupIDCalls())
func (mock *GoCloakMock) GetAvailableRealmRolesByGroupIDCalls() []struct {
	Ctx     context.Context
	Token   string
	Realm   string
	GroupID string
} {
	var calls []struct {
		Ctx     context.Context
		Token   string
		Realm   string
		GroupID string
	}
	mock.lockGetAvailableRealmRolesByGroupID.RLock()
	calls = mock.calls.GetAvailableRealmRolesByGroupID
	mock.lockGetAvailableRealmRolesByGroupID.RUnlock()
	return calls
}

// GetAvailableRealmRolesByUserID calls GetAvailableRealmRolesByUserIDFunc.
func (mock *GoCloakMock) GetAvailableRealmRolesByUserID(ctx context.Context, token string, realm string, userID string) ([]*gocloak.Role, error) {
	if mock.GetAvailableRealmRolesByUserIDFunc == nil {
		panic("GoCloakMock.GetAvailableRealmRolesByUserIDFunc: method is nil but GoCloak.GetAvailableRealmRolesByUserID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		UserID: userID,
	}
	mock.lockGetAvailableRealmRolesByUserID.Lock()
	mock.calls.GetAvailableRealmRolesByUserID = append(mock.calls.GetAvailableRealmRolesByUserID, callInfo)
	mock.lockGetAvailableRealmRolesByUserID.Unlock()
	return mock.GetAvailableRealmRolesByUserIDFunc(ctx, token, realm, userID)
}

// GetAvailableRealmRolesByUserIDCalls gets all the calls that were made to GetAvailableRealmRolesByUserID.
// Check the length with:
//     len(mockedGoCloak.GetAvailableRealmRolesByUserIDCalls())
func (mock *GoCloakMock) GetAvailableRealmRolesByUserIDCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
	}
	mock.lockGetAvailableRealmRolesByUserID.RLock()
	calls = mock.calls.GetAvailableRealmRolesByUserID
	mock.lockGetAvailableRealmRolesByUserID.RUnlock()
	return calls
}

// GetCerts calls GetCertsFunc.
func (mock *GoCloakMock) GetCerts(ctx context.Context, realm string) (*gocloak.CertResponse, error) {
	if mock.GetCertsFunc == nil {
		panic("GoCloakMock.GetCertsFunc: method is nil but GoCloak.GetCerts was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Realm string
	}{
		Ctx:   ctx,
		Realm: realm,
	}
	mock.lockGetCerts.Lock()
	mock.calls.GetCerts = append(mock.calls.GetCerts, callInfo)
	mock.lockGetCerts.Unlock()
	return mock.GetCertsFunc(ctx, realm)
}

// GetCertsCalls gets all the calls that were made to GetCerts.
// Check the length with:
//     len(mockedGoCloak.GetCertsCalls())
func (mock *GoCloakMock) GetCertsCalls() []struct {
	Ctx   context.Context
	Realm string
} {
	var calls []struct {
		Ctx   context.Context
		Realm string
	}
	mock.lockGetCerts.RLock()
	calls = mock.calls.GetCerts
	mock.lockGetCerts.RUnlock()
	return calls
}

// GetClient calls GetClientFunc.
func (mock *GoCloakMock) GetClient(ctx context.Context, accessToken string, realm string, clientID string) (*gocloak.Client, error) {
	if mock.GetClientFunc == nil {
		panic("GoCloakMock.GetClientFunc: method is nil but GoCloak.GetClient was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ClientID    string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		ClientID:    clientID,
	}
	mock.lockGetClient.Lock()
	mock.calls.GetClient = append(mock.calls.GetClient, callInfo)
	mock.lockGetClient.Unlock()
	return mock.GetClientFunc(ctx, accessToken, realm, clientID)
}

// GetClientCalls gets all the calls that were made to GetClient.
// Check the length with:
//     len(mockedGoCloak.GetClientCalls())
func (mock *GoCloakMock) GetClientCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	ClientID    string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ClientID    string
	}
	mock.lockGetClient.RLock()
	calls = mock.calls.GetClient
	mock.lockGetClient.RUnlock()
	return calls
}

// GetClientOfflineSessions calls GetClientOfflineSessionsFunc.
func (mock *GoCloakMock) GetClientOfflineSessions(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.UserSessionRepresentation, error) {
	if mock.GetClientOfflineSessionsFunc == nil {
		panic("GoCloakMock.GetClientOfflineSessionsFunc: method is nil but GoCloak.GetClientOfflineSessions was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
	}
	mock.lockGetClientOfflineSessions.Lock()
	mock.calls.GetClientOfflineSessions = append(mock.calls.GetClientOfflineSessions, callInfo)
	mock.lockGetClientOfflineSessions.Unlock()
	return mock.GetClientOfflineSessionsFunc(ctx, token, realm, clientID)
}

// GetClientOfflineSessionsCalls gets all the calls that were made to GetClientOfflineSessions.
// Check the length with:
//     len(mockedGoCloak.GetClientOfflineSessionsCalls())
func (mock *GoCloakMock) GetClientOfflineSessionsCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}
	mock.lockGetClientOfflineSessions.RLock()
	calls = mock.calls.GetClientOfflineSessions
	mock.lockGetClientOfflineSessions.RUnlock()
	return calls
}

// GetClientRole calls GetClientRoleFunc.
func (mock *GoCloakMock) GetClientRole(ctx context.Context, token string, realm string, clientID string, roleName string) (*gocloak.Role, error) {
	if mock.GetClientRoleFunc == nil {
		panic("GoCloakMock.GetClientRoleFunc: method is nil but GoCloak.GetClientRole was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		RoleName string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		RoleName: roleName,
	}
	mock.lockGetClientRole.Lock()
	mock.calls.GetClientRole = append(mock.calls.GetClientRole, callInfo)
	mock.lockGetClientRole.Unlock()
	return mock.GetClientRoleFunc(ctx, token, realm, clientID, roleName)
}

// GetClientRoleCalls gets all the calls that were made to GetClientRole.
// Check the length with:
//     len(mockedGoCloak.GetClientRoleCalls())
func (mock *GoCloakMock) GetClientRoleCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	RoleName string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		RoleName string
	}
	mock.lockGetClientRole.RLock()
	calls = mock.calls.GetClientRole
	mock.lockGetClientRole.RUnlock()
	return calls
}

// GetClientRoleByID calls GetClientRoleByIDFunc.
func (mock *GoCloakMock) GetClientRoleByID(ctx context.Context, accessToken string, realm string, roleID string) (*gocloak.Role, error) {
	if mock.GetClientRoleByIDFunc == nil {
		panic("GoCloakMock.GetClientRoleByIDFunc: method is nil but GoCloak.GetClientRoleByID was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		RoleID      string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		RoleID:      roleID,
	}
	mock.lockGetClientRoleByID.Lock()
	mock.calls.GetClientRoleByID = append(mock.calls.GetClientRoleByID, callInfo)
	mock.lockGetClientRoleByID.Unlock()
	return mock.GetClientRoleByIDFunc(ctx, accessToken, realm, roleID)
}

// GetClientRoleByIDCalls gets all the calls that were made to GetClientRoleByID.
// Check the length with:
//     len(mockedGoCloak.GetClientRoleByIDCalls())
func (mock *GoCloakMock) GetClientRoleByIDCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	RoleID      string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		RoleID      string
	}
	mock.lockGetClientRoleByID.RLock()
	calls = mock.calls.GetClientRoleByID
	mock.lockGetClientRoleByID.RUnlock()
	return calls
}

// GetClientRoles calls GetClientRolesFunc.
func (mock *GoCloakMock) GetClientRoles(ctx context.Context, accessToken string, realm string, clientID string) ([]*gocloak.Role, error) {
	if mock.GetClientRolesFunc == nil {
		panic("GoCloakMock.GetClientRolesFunc: method is nil but GoCloak.GetClientRoles was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ClientID    string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		ClientID:    clientID,
	}
	mock.lockGetClientRoles.Lock()
	mock.calls.GetClientRoles = append(mock.calls.GetClientRoles, callInfo)
	mock.lockGetClientRoles.Unlock()
	return mock.GetClientRolesFunc(ctx, accessToken, realm, clientID)
}

// GetClientRolesCalls gets all the calls that were made to GetClientRoles.
// Check the length with:
//     len(mockedGoCloak.GetClientRolesCalls())
func (mock *GoCloakMock) GetClientRolesCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	ClientID    string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ClientID    string
	}
	mock.lockGetClientRoles.RLock()
	calls = mock.calls.GetClientRoles
	mock.lockGetClientRoles.RUnlock()
	return calls
}

// GetClientRolesByGroupID calls GetClientRolesByGroupIDFunc.
func (mock *GoCloakMock) GetClientRolesByGroupID(ctx context.Context, token string, realm string, clientID string, groupID string) ([]*gocloak.Role, error) {
	if mock.GetClientRolesByGroupIDFunc == nil {
		panic("GoCloakMock.GetClientRolesByGroupIDFunc: method is nil but GoCloak.GetClientRolesByGroupID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		GroupID  string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		GroupID:  groupID,
	}
	mock.lockGetClientRolesByGroupID.Lock()
	mock.calls.GetClientRolesByGroupID = append(mock.calls.GetClientRolesByGroupID, callInfo)
	mock.lockGetClientRolesByGroupID.Unlock()
	return mock.GetClientRolesByGroupIDFunc(ctx, token, realm, clientID, groupID)
}

// GetClientRolesByGroupIDCalls gets all the calls that were made to GetClientRolesByGroupID.
// Check the length with:
//     len(mockedGoCloak.GetClientRolesByGroupIDCalls())
func (mock *GoCloakMock) GetClientRolesByGroupIDCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	GroupID  string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		GroupID  string
	}
	mock.lockGetClientRolesByGroupID.RLock()
	calls = mock.calls.GetClientRolesByGroupID
	mock.lockGetClientRolesByGroupID.RUnlock()
	return calls
}

// GetClientRolesByUserID calls GetClientRolesByUserIDFunc.
func (mock *GoCloakMock) GetClientRolesByUserID(ctx context.Context, token string, realm string, clientID string, userID string) ([]*gocloak.Role, error) {
	if mock.GetClientRolesByUserIDFunc == nil {
		panic("GoCloakMock.GetClientRolesByUserIDFunc: method is nil but GoCloak.GetClientRolesByUserID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		UserID   string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		UserID:   userID,
	}
	mock.lockGetClientRolesByUserID.Lock()
	mock.calls.GetClientRolesByUserID = append(mock.calls.GetClientRolesByUserID, callInfo)
	mock.lockGetClientRolesByUserID.Unlock()
	return mock.GetClientRolesByUserIDFunc(ctx, token, realm, clientID, userID)
}

// GetClientRolesByUserIDCalls gets all the calls that were made to GetClientRolesByUserID.
// Check the length with:
//     len(mockedGoCloak.GetClientRolesByUserIDCalls())
func (mock *GoCloakMock) GetClientRolesByUserIDCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	UserID   string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		UserID   string
	}
	mock.lockGetClientRolesByUserID.RLock()
	calls = mock.calls.GetClientRolesByUserID
	mock.lockGetClientRolesByUserID.RUnlock()
	return calls
}

// GetClientScope calls GetClientScopeFunc.
func (mock *GoCloakMock) GetClientScope(ctx context.Context, token string, realm string, scopeID string) (*gocloak.ClientScope, error) {
	if mock.GetClientScopeFunc == nil {
		panic("GoCloakMock.GetClientScopeFunc: method is nil but GoCloak.GetClientScope was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Token   string
		Realm   string
		ScopeID string
	}{
		Ctx:     ctx,
		Token:   token,
		Realm:   realm,
		ScopeID: scopeID,
	}
	mock.lockGetClientScope.Lock()
	mock.calls.GetClientScope = append(mock.calls.GetClientScope, callInfo)
	mock.lockGetClientScope.Unlock()
	return mock.GetClientScopeFunc(ctx, token, realm, scopeID)
}

// GetClientScopeCalls gets all the calls that were made to GetClientScope.
// Check the length with:
//     len(mockedGoCloak.GetClientScopeCalls())
func (mock *GoCloakMock) GetClientScopeCalls() []struct {
	Ctx     context.Context
	Token   string
	Realm   string
	ScopeID string
} {
	var calls []struct {
		Ctx     context.Context
		Token   string
		Realm   string
		ScopeID string
	}
	mock.lockGetClientScope.RLock()
	calls = mock.calls.GetClientScope
	mock.lockGetClientScope.RUnlock()
	return calls
}

// GetClientScopeMappings calls GetClientScopeMappingsFunc.
func (mock *GoCloakMock) GetClientScopeMappings(ctx context.Context, token string, realm string, clientID string) (*gocloak.MappingsRepresentation, error) {
	if mock.GetClientScopeMappingsFunc == nil {
		panic("GoCloakMock.GetClientScopeMappingsFunc: method is nil but GoCloak.GetClientScopeMappings was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
	}
	mock.lockGetClientScopeMappings.Lock()
	mock.calls.GetClientScopeMappings = append(mock.calls.GetClientScopeMappings, callInfo)
	mock.lockGetClientScopeMappings.Unlock()
	return mock.GetClientScopeMappingsFunc(ctx, token, realm, clientID)
}

// GetClientScopeMappingsCalls gets all the calls that were made to GetClientScopeMappings.
// Check the length with:
//     len(mockedGoCloak.GetClientScopeMappingsCalls())
func (mock *GoCloakMock) GetClientScopeMappingsCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}
	mock.lockGetClientScopeMappings.RLock()
	calls = mock.calls.GetClientScopeMappings
	mock.lockGetClientScopeMappings.RUnlock()
	return calls
}

// GetClientScopeMappingsClientRoles calls GetClientScopeMappingsClientRolesFunc.
func (mock *GoCloakMock) GetClientScopeMappingsClientRoles(ctx context.Context, token string, realm string, clientID string, clientsID string) ([]*gocloak.Role, error) {
	if mock.GetClientScopeMappingsClientRolesFunc == nil {
		panic("GoCloakMock.GetClientScopeMappingsClientRolesFunc: method is nil but GoCloak.GetClientScopeMappingsClientRoles was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Token     string
		Realm     string
		ClientID  string
		ClientsID string
	}{
		Ctx:       ctx,
		Token:     token,
		Realm:     realm,
		ClientID:  clientID,
		ClientsID: clientsID,
	}
	mock.lockGetClientScopeMappingsClientRoles.Lock()
	mock.calls.GetClientScopeMappingsClientRoles = append(mock.calls.GetClientScopeMappingsClientRoles, callInfo)
	mock.lockGetClientScopeMappingsClientRoles.Unlock()
	return mock.GetClientScopeMappingsClientRolesFunc(ctx, token, realm, clientID, clientsID)
}

// GetClientScopeMappingsClientRolesCalls gets all the calls that were made to GetClientScopeMappingsClientRoles.
// Check the length with:
//     len(mockedGoCloak.GetClientScopeMappingsClientRolesCalls())
func (mock *GoCloakMock) GetClientScopeMappingsClientRolesCalls() []struct {
	Ctx       context.Context
	Token     string
	Realm     string
	ClientID  string
	ClientsID string
} {
	var calls []struct {
		Ctx       context.Context
		Token     string
		Realm     string
		ClientID  string
		ClientsID string
	}
	mock.lockGetClientScopeMappingsClientRoles.RLock()
	calls = mock.calls.GetClientScopeMappingsClientRoles
	mock.lockGetClientScopeMappingsClientRoles.RUnlock()
	return calls
}

// GetClientScopeMappingsClientRolesAvailable calls GetClientScopeMappingsClientRolesAvailableFunc.
func (mock *GoCloakMock) GetClientScopeMappingsClientRolesAvailable(ctx context.Context, token string, realm string, clientID string, clientsID string) ([]*gocloak.Role, error) {
	if mock.GetClientScopeMappingsClientRolesAvailableFunc == nil {
		panic("GoCloakMock.GetClientScopeMappingsClientRolesAvailableFunc: method is nil but GoCloak.GetClientScopeMappingsClientRolesAvailable was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Token     string
		Realm     string
		ClientID  string
		ClientsID string
	}{
		Ctx:       ctx,
		Token:     token,
		Realm:     realm,
		ClientID:  clientID,
		ClientsID: clientsID,
	}
	mock.lockGetClientScopeMappingsClientRolesAvailable.Lock()
	mock.calls.GetClientScopeMappingsClientRolesAvailable = append(mock.calls.GetClientScopeMappingsClientRolesAvailable, callInfo)
	mock.lockGetClientScopeMappingsClientRolesAvailable.Unlock()
	return mock.GetClientScopeMappingsClientRolesAvailableFunc(ctx, token, realm, clientID, clientsID)
}

// GetClientScopeMappingsClientRolesAvailableCalls gets all the calls that were made to GetClientScopeMappingsClientRolesAvailable.
// Check the length with:
//     len(mockedGoCloak.GetClientScopeMappingsClientRolesAvailableCalls())
func (mock *GoCloakMock) GetClientScopeMappingsClientRolesAvailableCalls() []struct {
	Ctx       context.Context
	Token     string
	Realm     string
	ClientID  string
	ClientsID string
} {
	var calls []struct {
		Ctx       context.Context
		Token     string
		Realm     string
		ClientID  string
		ClientsID string
	}
	mock.lockGetClientScopeMappingsClientRolesAvailable.RLock()
	calls = mock.calls.GetClientScopeMappingsClientRolesAvailable
	mock.lockGetClientScopeMappingsClientRolesAvailable.RUnlock()
	return calls
}

// GetClientScopeMappingsRealmRoles calls GetClientScopeMappingsRealmRolesFunc.
func (mock *GoCloakMock) GetClientScopeMappingsRealmRoles(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.Role, error) {
	if mock.GetClientScopeMappingsRealmRolesFunc == nil {
		panic("GoCloakMock.GetClientScopeMappingsRealmRolesFunc: method is nil but GoCloak.GetClientScopeMappingsRealmRoles was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
	}
	mock.lockGetClientScopeMappingsRealmRoles.Lock()
	mock.calls.GetClientScopeMappingsRealmRoles = append(mock.calls.GetClientScopeMappingsRealmRoles, callInfo)
	mock.lockGetClientScopeMappingsRealmRoles.Unlock()
	return mock.GetClientScopeMappingsRealmRolesFunc(ctx, token, realm, clientID)
}

// GetClientScopeMappingsRealmRolesCalls gets all the calls that were made to GetClientScopeMappingsRealmRoles.
// Check the length with:
//     len(mockedGoCloak.GetClientScopeMappingsRealmRolesCalls())
func (mock *GoCloakMock) GetClientScopeMappingsRealmRolesCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}
	mock.lockGetClientScopeMappingsRealmRoles.RLock()
	calls = mock.calls.GetClientScopeMappingsRealmRoles
	mock.lockGetClientScopeMappingsRealmRoles.RUnlock()
	return calls
}

// GetClientScopeMappingsRealmRolesAvailable calls GetClientScopeMappingsRealmRolesAvailableFunc.
func (mock *GoCloakMock) GetClientScopeMappingsRealmRolesAvailable(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.Role, error) {
	if mock.GetClientScopeMappingsRealmRolesAvailableFunc == nil {
		panic("GoCloakMock.GetClientScopeMappingsRealmRolesAvailableFunc: method is nil but GoCloak.GetClientScopeMappingsRealmRolesAvailable was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
	}
	mock.lockGetClientScopeMappingsRealmRolesAvailable.Lock()
	mock.calls.GetClientScopeMappingsRealmRolesAvailable = append(mock.calls.GetClientScopeMappingsRealmRolesAvailable, callInfo)
	mock.lockGetClientScopeMappingsRealmRolesAvailable.Unlock()
	return mock.GetClientScopeMappingsRealmRolesAvailableFunc(ctx, token, realm, clientID)
}

// GetClientScopeMappingsRealmRolesAvailableCalls gets all the calls that were made to GetClientScopeMappingsRealmRolesAvailable.
// Check the length with:
//     len(mockedGoCloak.GetClientScopeMappingsRealmRolesAvailableCalls())
func (mock *GoCloakMock) GetClientScopeMappingsRealmRolesAvailableCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}
	mock.lockGetClientScopeMappingsRealmRolesAvailable.RLock()
	calls = mock.calls.GetClientScopeMappingsRealmRolesAvailable
	mock.lockGetClientScopeMappingsRealmRolesAvailable.RUnlock()
	return calls
}

// GetClientScopes calls GetClientScopesFunc.
func (mock *GoCloakMock) GetClientScopes(ctx context.Context, token string, realm string) ([]*gocloak.ClientScope, error) {
	if mock.GetClientScopesFunc == nil {
		panic("GoCloakMock.GetClientScopesFunc: method is nil but GoCloak.GetClientScopes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
	}
	mock.lockGetClientScopes.Lock()
	mock.calls.GetClientScopes = append(mock.calls.GetClientScopes, callInfo)
	mock.lockGetClientScopes.Unlock()
	return mock.GetClientScopesFunc(ctx, token, realm)
}

// GetClientScopesCalls gets all the calls that were made to GetClientScopes.
// Check the length with:
//     len(mockedGoCloak.GetClientScopesCalls())
func (mock *GoCloakMock) GetClientScopesCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
	}
	mock.lockGetClientScopes.RLock()
	calls = mock.calls.GetClientScopes
	mock.lockGetClientScopes.RUnlock()
	return calls
}

// GetClientSecret calls GetClientSecretFunc.
func (mock *GoCloakMock) GetClientSecret(ctx context.Context, token string, realm string, clientID string) (*gocloak.CredentialRepresentation, error) {
	if mock.GetClientSecretFunc == nil {
		panic("GoCloakMock.GetClientSecretFunc: method is nil but GoCloak.GetClientSecret was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
	}
	mock.lockGetClientSecret.Lock()
	mock.calls.GetClientSecret = append(mock.calls.GetClientSecret, callInfo)
	mock.lockGetClientSecret.Unlock()
	return mock.GetClientSecretFunc(ctx, token, realm, clientID)
}

// GetClientSecretCalls gets all the calls that were made to GetClientSecret.
// Check the length with:
//     len(mockedGoCloak.GetClientSecretCalls())
func (mock *GoCloakMock) GetClientSecretCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}
	mock.lockGetClientSecret.RLock()
	calls = mock.calls.GetClientSecret
	mock.lockGetClientSecret.RUnlock()
	return calls
}

// GetClientServiceAccount calls GetClientServiceAccountFunc.
func (mock *GoCloakMock) GetClientServiceAccount(ctx context.Context, token string, realm string, clientID string) (*gocloak.User, error) {
	if mock.GetClientServiceAccountFunc == nil {
		panic("GoCloakMock.GetClientServiceAccountFunc: method is nil but GoCloak.GetClientServiceAccount was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
	}
	mock.lockGetClientServiceAccount.Lock()
	mock.calls.GetClientServiceAccount = append(mock.calls.GetClientServiceAccount, callInfo)
	mock.lockGetClientServiceAccount.Unlock()
	return mock.GetClientServiceAccountFunc(ctx, token, realm, clientID)
}

// GetClientServiceAccountCalls gets all the calls that were made to GetClientServiceAccount.
// Check the length with:
//     len(mockedGoCloak.GetClientServiceAccountCalls())
func (mock *GoCloakMock) GetClientServiceAccountCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}
	mock.lockGetClientServiceAccount.RLock()
	calls = mock.calls.GetClientServiceAccount
	mock.lockGetClientServiceAccount.RUnlock()
	return calls
}

// GetClientUserSessions calls GetClientUserSessionsFunc.
func (mock *GoCloakMock) GetClientUserSessions(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.UserSessionRepresentation, error) {
	if mock.GetClientUserSessionsFunc == nil {
		panic("GoCloakMock.GetClientUserSessionsFunc: method is nil but GoCloak.GetClientUserSessions was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
	}
	mock.lockGetClientUserSessions.Lock()
	mock.calls.GetClientUserSessions = append(mock.calls.GetClientUserSessions, callInfo)
	mock.lockGetClientUserSessions.Unlock()
	return mock.GetClientUserSessionsFunc(ctx, token, realm, clientID)
}

// GetClientUserSessionsCalls gets all the calls that were made to GetClientUserSessions.
// Check the length with:
//     len(mockedGoCloak.GetClientUserSessionsCalls())
func (mock *GoCloakMock) GetClientUserSessionsCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}
	mock.lockGetClientUserSessions.RLock()
	calls = mock.calls.GetClientUserSessions
	mock.lockGetClientUserSessions.RUnlock()
	return calls
}

// GetClients calls GetClientsFunc.
func (mock *GoCloakMock) GetClients(ctx context.Context, accessToken string, realm string, params gocloak.GetClientsParams) ([]*gocloak.Client, error) {
	if mock.GetClientsFunc == nil {
		panic("GoCloakMock.GetClientsFunc: method is nil but GoCloak.GetClients was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Params      gocloak.GetClientsParams
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		Params:      params,
	}
	mock.lockGetClients.Lock()
	mock.calls.GetClients = append(mock.calls.GetClients, callInfo)
	mock.lockGetClients.Unlock()
	return mock.GetClientsFunc(ctx, accessToken, realm, params)
}

// GetClientsCalls gets all the calls that were made to GetClients.
// Check the length with:
//     len(mockedGoCloak.GetClientsCalls())
func (mock *GoCloakMock) GetClientsCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	Params      gocloak.GetClientsParams
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Params      gocloak.GetClientsParams
	}
	mock.lockGetClients.RLock()
	calls = mock.calls.GetClients
	mock.lockGetClients.RUnlock()
	return calls
}

// GetClientsDefaultScopes calls GetClientsDefaultScopesFunc.
func (mock *GoCloakMock) GetClientsDefaultScopes(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.ClientScope, error) {
	if mock.GetClientsDefaultScopesFunc == nil {
		panic("GoCloakMock.GetClientsDefaultScopesFunc: method is nil but GoCloak.GetClientsDefaultScopes was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
	}
	mock.lockGetClientsDefaultScopes.Lock()
	mock.calls.GetClientsDefaultScopes = append(mock.calls.GetClientsDefaultScopes, callInfo)
	mock.lockGetClientsDefaultScopes.Unlock()
	return mock.GetClientsDefaultScopesFunc(ctx, token, realm, clientID)
}

// GetClientsDefaultScopesCalls gets all the calls that were made to GetClientsDefaultScopes.
// Check the length with:
//     len(mockedGoCloak.GetClientsDefaultScopesCalls())
func (mock *GoCloakMock) GetClientsDefaultScopesCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}
	mock.lockGetClientsDefaultScopes.RLock()
	calls = mock.calls.GetClientsDefaultScopes
	mock.lockGetClientsDefaultScopes.RUnlock()
	return calls
}

// GetClientsOptionalScopes calls GetClientsOptionalScopesFunc.
func (mock *GoCloakMock) GetClientsOptionalScopes(ctx context.Context, token string, realm string, clientID string) ([]*gocloak.ClientScope, error) {
	if mock.GetClientsOptionalScopesFunc == nil {
		panic("GoCloakMock.GetClientsOptionalScopesFunc: method is nil but GoCloak.GetClientsOptionalScopes was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
	}
	mock.lockGetClientsOptionalScopes.Lock()
	mock.calls.GetClientsOptionalScopes = append(mock.calls.GetClientsOptionalScopes, callInfo)
	mock.lockGetClientsOptionalScopes.Unlock()
	return mock.GetClientsOptionalScopesFunc(ctx, token, realm, clientID)
}

// GetClientsOptionalScopesCalls gets all the calls that were made to GetClientsOptionalScopes.
// Check the length with:
//     len(mockedGoCloak.GetClientsOptionalScopesCalls())
func (mock *GoCloakMock) GetClientsOptionalScopesCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}
	mock.lockGetClientsOptionalScopes.RLock()
	calls = mock.calls.GetClientsOptionalScopes
	mock.lockGetClientsOptionalScopes.RUnlock()
	return calls
}

// GetComponents calls GetComponentsFunc.
func (mock *GoCloakMock) GetComponents(ctx context.Context, accessToken string, realm string) ([]*gocloak.Component, error) {
	if mock.GetComponentsFunc == nil {
		panic("GoCloakMock.GetComponentsFunc: method is nil but GoCloak.GetComponents was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
	}
	mock.lockGetComponents.Lock()
	mock.calls.GetComponents = append(mock.calls.GetComponents, callInfo)
	mock.lockGetComponents.Unlock()
	return mock.GetComponentsFunc(ctx, accessToken, realm)
}

// GetComponentsCalls gets all the calls that were made to GetComponents.
// Check the length with:
//     len(mockedGoCloak.GetComponentsCalls())
func (mock *GoCloakMock) GetComponentsCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}
	mock.lockGetComponents.RLock()
	calls = mock.calls.GetComponents
	mock.lockGetComponents.RUnlock()
	return calls
}

// GetCompositeClientRolesByGroupID calls GetCompositeClientRolesByGroupIDFunc.
func (mock *GoCloakMock) GetCompositeClientRolesByGroupID(ctx context.Context, token string, realm string, clientID string, groupID string) ([]*gocloak.Role, error) {
	if mock.GetCompositeClientRolesByGroupIDFunc == nil {
		panic("GoCloakMock.GetCompositeClientRolesByGroupIDFunc: method is nil but GoCloak.GetCompositeClientRolesByGroupID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		GroupID  string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		GroupID:  groupID,
	}
	mock.lockGetCompositeClientRolesByGroupID.Lock()
	mock.calls.GetCompositeClientRolesByGroupID = append(mock.calls.GetCompositeClientRolesByGroupID, callInfo)
	mock.lockGetCompositeClientRolesByGroupID.Unlock()
	return mock.GetCompositeClientRolesByGroupIDFunc(ctx, token, realm, clientID, groupID)
}

// GetCompositeClientRolesByGroupIDCalls gets all the calls that were made to GetCompositeClientRolesByGroupID.
// Check the length with:
//     len(mockedGoCloak.GetCompositeClientRolesByGroupIDCalls())
func (mock *GoCloakMock) GetCompositeClientRolesByGroupIDCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	GroupID  string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		GroupID  string
	}
	mock.lockGetCompositeClientRolesByGroupID.RLock()
	calls = mock.calls.GetCompositeClientRolesByGroupID
	mock.lockGetCompositeClientRolesByGroupID.RUnlock()
	return calls
}

// GetCompositeClientRolesByRoleID calls GetCompositeClientRolesByRoleIDFunc.
func (mock *GoCloakMock) GetCompositeClientRolesByRoleID(ctx context.Context, token string, realm string, clientID string, roleID string) ([]*gocloak.Role, error) {
	if mock.GetCompositeClientRolesByRoleIDFunc == nil {
		panic("GoCloakMock.GetCompositeClientRolesByRoleIDFunc: method is nil but GoCloak.GetCompositeClientRolesByRoleID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		RoleID   string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		RoleID:   roleID,
	}
	mock.lockGetCompositeClientRolesByRoleID.Lock()
	mock.calls.GetCompositeClientRolesByRoleID = append(mock.calls.GetCompositeClientRolesByRoleID, callInfo)
	mock.lockGetCompositeClientRolesByRoleID.Unlock()
	return mock.GetCompositeClientRolesByRoleIDFunc(ctx, token, realm, clientID, roleID)
}

// GetCompositeClientRolesByRoleIDCalls gets all the calls that were made to GetCompositeClientRolesByRoleID.
// Check the length with:
//     len(mockedGoCloak.GetCompositeClientRolesByRoleIDCalls())
func (mock *GoCloakMock) GetCompositeClientRolesByRoleIDCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	RoleID   string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		RoleID   string
	}
	mock.lockGetCompositeClientRolesByRoleID.RLock()
	calls = mock.calls.GetCompositeClientRolesByRoleID
	mock.lockGetCompositeClientRolesByRoleID.RUnlock()
	return calls
}

// GetCompositeClientRolesByUserID calls GetCompositeClientRolesByUserIDFunc.
func (mock *GoCloakMock) GetCompositeClientRolesByUserID(ctx context.Context, token string, realm string, clientID string, userID string) ([]*gocloak.Role, error) {
	if mock.GetCompositeClientRolesByUserIDFunc == nil {
		panic("GoCloakMock.GetCompositeClientRolesByUserIDFunc: method is nil but GoCloak.GetCompositeClientRolesByUserID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		UserID   string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		UserID:   userID,
	}
	mock.lockGetCompositeClientRolesByUserID.Lock()
	mock.calls.GetCompositeClientRolesByUserID = append(mock.calls.GetCompositeClientRolesByUserID, callInfo)
	mock.lockGetCompositeClientRolesByUserID.Unlock()
	return mock.GetCompositeClientRolesByUserIDFunc(ctx, token, realm, clientID, userID)
}

// GetCompositeClientRolesByUserIDCalls gets all the calls that were made to GetCompositeClientRolesByUserID.
// Check the length with:
//     len(mockedGoCloak.GetCompositeClientRolesByUserIDCalls())
func (mock *GoCloakMock) GetCompositeClientRolesByUserIDCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	UserID   string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		UserID   string
	}
	mock.lockGetCompositeClientRolesByUserID.RLock()
	calls = mock.calls.GetCompositeClientRolesByUserID
	mock.lockGetCompositeClientRolesByUserID.RUnlock()
	return calls
}

// GetCompositeRealmRolesByGroupID calls GetCompositeRealmRolesByGroupIDFunc.
func (mock *GoCloakMock) GetCompositeRealmRolesByGroupID(ctx context.Context, token string, realm string, groupID string) ([]*gocloak.Role, error) {
	if mock.GetCompositeRealmRolesByGroupIDFunc == nil {
		panic("GoCloakMock.GetCompositeRealmRolesByGroupIDFunc: method is nil but GoCloak.GetCompositeRealmRolesByGroupID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Token   string
		Realm   string
		GroupID string
	}{
		Ctx:     ctx,
		Token:   token,
		Realm:   realm,
		GroupID: groupID,
	}
	mock.lockGetCompositeRealmRolesByGroupID.Lock()
	mock.calls.GetCompositeRealmRolesByGroupID = append(mock.calls.GetCompositeRealmRolesByGroupID, callInfo)
	mock.lockGetCompositeRealmRolesByGroupID.Unlock()
	return mock.GetCompositeRealmRolesByGroupIDFunc(ctx, token, realm, groupID)
}

// GetCompositeRealmRolesByGroupIDCalls gets all the calls that were made to GetCompositeRealmRolesByGroupID.
// Check the length with:
//     len(mockedGoCloak.GetCompositeRealmRolesByGroupIDCalls())
func (mock *GoCloakMock) GetCompositeRealmRolesByGroupIDCalls() []struct {
	Ctx     context.Context
	Token   string
	Realm   string
	GroupID string
} {
	var calls []struct {
		Ctx     context.Context
		Token   string
		Realm   string
		GroupID string
	}
	mock.lockGetCompositeRealmRolesByGroupID.RLock()
	calls = mock.calls.GetCompositeRealmRolesByGroupID
	mock.lockGetCompositeRealmRolesByGroupID.RUnlock()
	return calls
}

// GetCompositeRealmRolesByRoleID calls GetCompositeRealmRolesByRoleIDFunc.
func (mock *GoCloakMock) GetCompositeRealmRolesByRoleID(ctx context.Context, token string, realm string, roleID string) ([]*gocloak.Role, error) {
	if mock.GetCompositeRealmRolesByRoleIDFunc == nil {
		panic("GoCloakMock.GetCompositeRealmRolesByRoleIDFunc: method is nil but GoCloak.GetCompositeRealmRolesByRoleID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		RoleID string
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		RoleID: roleID,
	}
	mock.lockGetCompositeRealmRolesByRoleID.Lock()
	mock.calls.GetCompositeRealmRolesByRoleID = append(mock.calls.GetCompositeRealmRolesByRoleID, callInfo)
	mock.lockGetCompositeRealmRolesByRoleID.Unlock()
	return mock.GetCompositeRealmRolesByRoleIDFunc(ctx, token, realm, roleID)
}

// GetCompositeRealmRolesByRoleIDCalls gets all the calls that were made to GetCompositeRealmRolesByRoleID.
// Check the length with:
//     len(mockedGoCloak.GetCompositeRealmRolesByRoleIDCalls())
func (mock *GoCloakMock) GetCompositeRealmRolesByRoleIDCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	RoleID string
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		RoleID string
	}
	mock.lockGetCompositeRealmRolesByRoleID.RLock()
	calls = mock.calls.GetCompositeRealmRolesByRoleID
	mock.lockGetCompositeRealmRolesByRoleID.RUnlock()
	return calls
}

// GetCompositeRealmRolesByUserID calls GetCompositeRealmRolesByUserIDFunc.
func (mock *GoCloakMock) GetCompositeRealmRolesByUserID(ctx context.Context, token string, realm string, userID string) ([]*gocloak.Role, error) {
	if mock.GetCompositeRealmRolesByUserIDFunc == nil {
		panic("GoCloakMock.GetCompositeRealmRolesByUserIDFunc: method is nil but GoCloak.GetCompositeRealmRolesByUserID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		UserID: userID,
	}
	mock.lockGetCompositeRealmRolesByUserID.Lock()
	mock.calls.GetCompositeRealmRolesByUserID = append(mock.calls.GetCompositeRealmRolesByUserID, callInfo)
	mock.lockGetCompositeRealmRolesByUserID.Unlock()
	return mock.GetCompositeRealmRolesByUserIDFunc(ctx, token, realm, userID)
}

// GetCompositeRealmRolesByUserIDCalls gets all the calls that were made to GetCompositeRealmRolesByUserID.
// Check the length with:
//     len(mockedGoCloak.GetCompositeRealmRolesByUserIDCalls())
func (mock *GoCloakMock) GetCompositeRealmRolesByUserIDCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
	}
	mock.lockGetCompositeRealmRolesByUserID.RLock()
	calls = mock.calls.GetCompositeRealmRolesByUserID
	mock.lockGetCompositeRealmRolesByUserID.RUnlock()
	return calls
}

// GetConfiguredUserStorageCredentialTypes calls GetConfiguredUserStorageCredentialTypesFunc.
func (mock *GoCloakMock) GetConfiguredUserStorageCredentialTypes(ctx context.Context, token string, realm string, userID string) ([]string, error) {
	if mock.GetConfiguredUserStorageCredentialTypesFunc == nil {
		panic("GoCloakMock.GetConfiguredUserStorageCredentialTypesFunc: method is nil but GoCloak.GetConfiguredUserStorageCredentialTypes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		UserID: userID,
	}
	mock.lockGetConfiguredUserStorageCredentialTypes.Lock()
	mock.calls.GetConfiguredUserStorageCredentialTypes = append(mock.calls.GetConfiguredUserStorageCredentialTypes, callInfo)
	mock.lockGetConfiguredUserStorageCredentialTypes.Unlock()
	return mock.GetConfiguredUserStorageCredentialTypesFunc(ctx, token, realm, userID)
}

// GetConfiguredUserStorageCredentialTypesCalls gets all the calls that were made to GetConfiguredUserStorageCredentialTypes.
// Check the length with:
//     len(mockedGoCloak.GetConfiguredUserStorageCredentialTypesCalls())
func (mock *GoCloakMock) GetConfiguredUserStorageCredentialTypesCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
	}
	mock.lockGetConfiguredUserStorageCredentialTypes.RLock()
	calls = mock.calls.GetConfiguredUserStorageCredentialTypes
	mock.lockGetConfiguredUserStorageCredentialTypes.RUnlock()
	return calls
}

// GetCredentialRegistrators calls GetCredentialRegistratorsFunc.
func (mock *GoCloakMock) GetCredentialRegistrators(ctx context.Context, token string, realm string) ([]string, error) {
	if mock.GetCredentialRegistratorsFunc == nil {
		panic("GoCloakMock.GetCredentialRegistratorsFunc: method is nil but GoCloak.GetCredentialRegistrators was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
	}
	mock.lockGetCredentialRegistrators.Lock()
	mock.calls.GetCredentialRegistrators = append(mock.calls.GetCredentialRegistrators, callInfo)
	mock.lockGetCredentialRegistrators.Unlock()
	return mock.GetCredentialRegistratorsFunc(ctx, token, realm)
}

// GetCredentialRegistratorsCalls gets all the calls that were made to GetCredentialRegistrators.
// Check the length with:
//     len(mockedGoCloak.GetCredentialRegistratorsCalls())
func (mock *GoCloakMock) GetCredentialRegistratorsCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
	}
	mock.lockGetCredentialRegistrators.RLock()
	calls = mock.calls.GetCredentialRegistrators
	mock.lockGetCredentialRegistrators.RUnlock()
	return calls
}

// GetCredentials calls GetCredentialsFunc.
func (mock *GoCloakMock) GetCredentials(ctx context.Context, token string, realm string, UserID string) ([]*gocloak.CredentialRepresentation, error) {
	if mock.GetCredentialsFunc == nil {
		panic("GoCloakMock.GetCredentialsFunc: method is nil but GoCloak.GetCredentials was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		UserID: UserID,
	}
	mock.lockGetCredentials.Lock()
	mock.calls.GetCredentials = append(mock.calls.GetCredentials, callInfo)
	mock.lockGetCredentials.Unlock()
	return mock.GetCredentialsFunc(ctx, token, realm, UserID)
}

// GetCredentialsCalls gets all the calls that were made to GetCredentials.
// Check the length with:
//     len(mockedGoCloak.GetCredentialsCalls())
func (mock *GoCloakMock) GetCredentialsCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
	}
	mock.lockGetCredentials.RLock()
	calls = mock.calls.GetCredentials
	mock.lockGetCredentials.RUnlock()
	return calls
}

// GetDefaultDefaultClientScopes calls GetDefaultDefaultClientScopesFunc.
func (mock *GoCloakMock) GetDefaultDefaultClientScopes(ctx context.Context, token string, realm string) ([]*gocloak.ClientScope, error) {
	if mock.GetDefaultDefaultClientScopesFunc == nil {
		panic("GoCloakMock.GetDefaultDefaultClientScopesFunc: method is nil but GoCloak.GetDefaultDefaultClientScopes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
	}
	mock.lockGetDefaultDefaultClientScopes.Lock()
	mock.calls.GetDefaultDefaultClientScopes = append(mock.calls.GetDefaultDefaultClientScopes, callInfo)
	mock.lockGetDefaultDefaultClientScopes.Unlock()
	return mock.GetDefaultDefaultClientScopesFunc(ctx, token, realm)
}

// GetDefaultDefaultClientScopesCalls gets all the calls that were made to GetDefaultDefaultClientScopes.
// Check the length with:
//     len(mockedGoCloak.GetDefaultDefaultClientScopesCalls())
func (mock *GoCloakMock) GetDefaultDefaultClientScopesCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
	}
	mock.lockGetDefaultDefaultClientScopes.RLock()
	calls = mock.calls.GetDefaultDefaultClientScopes
	mock.lockGetDefaultDefaultClientScopes.RUnlock()
	return calls
}

// GetDefaultGroups calls GetDefaultGroupsFunc.
func (mock *GoCloakMock) GetDefaultGroups(ctx context.Context, accessToken string, realm string) ([]*gocloak.Group, error) {
	if mock.GetDefaultGroupsFunc == nil {
		panic("GoCloakMock.GetDefaultGroupsFunc: method is nil but GoCloak.GetDefaultGroups was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
	}
	mock.lockGetDefaultGroups.Lock()
	mock.calls.GetDefaultGroups = append(mock.calls.GetDefaultGroups, callInfo)
	mock.lockGetDefaultGroups.Unlock()
	return mock.GetDefaultGroupsFunc(ctx, accessToken, realm)
}

// GetDefaultGroupsCalls gets all the calls that were made to GetDefaultGroups.
// Check the length with:
//     len(mockedGoCloak.GetDefaultGroupsCalls())
func (mock *GoCloakMock) GetDefaultGroupsCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}
	mock.lockGetDefaultGroups.RLock()
	calls = mock.calls.GetDefaultGroups
	mock.lockGetDefaultGroups.RUnlock()
	return calls
}

// GetDefaultOptionalClientScopes calls GetDefaultOptionalClientScopesFunc.
func (mock *GoCloakMock) GetDefaultOptionalClientScopes(ctx context.Context, token string, realm string) ([]*gocloak.ClientScope, error) {
	if mock.GetDefaultOptionalClientScopesFunc == nil {
		panic("GoCloakMock.GetDefaultOptionalClientScopesFunc: method is nil but GoCloak.GetDefaultOptionalClientScopes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
	}
	mock.lockGetDefaultOptionalClientScopes.Lock()
	mock.calls.GetDefaultOptionalClientScopes = append(mock.calls.GetDefaultOptionalClientScopes, callInfo)
	mock.lockGetDefaultOptionalClientScopes.Unlock()
	return mock.GetDefaultOptionalClientScopesFunc(ctx, token, realm)
}

// GetDefaultOptionalClientScopesCalls gets all the calls that were made to GetDefaultOptionalClientScopes.
// Check the length with:
//     len(mockedGoCloak.GetDefaultOptionalClientScopesCalls())
func (mock *GoCloakMock) GetDefaultOptionalClientScopesCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
	}
	mock.lockGetDefaultOptionalClientScopes.RLock()
	calls = mock.calls.GetDefaultOptionalClientScopes
	mock.lockGetDefaultOptionalClientScopes.RUnlock()
	return calls
}

// GetDependentPermissions calls GetDependentPermissionsFunc.
func (mock *GoCloakMock) GetDependentPermissions(ctx context.Context, token string, realm string, clientID string, policyID string) ([]*gocloak.PermissionRepresentation, error) {
	if mock.GetDependentPermissionsFunc == nil {
		panic("GoCloakMock.GetDependentPermissionsFunc: method is nil but GoCloak.GetDependentPermissions was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		PolicyID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		PolicyID: policyID,
	}
	mock.lockGetDependentPermissions.Lock()
	mock.calls.GetDependentPermissions = append(mock.calls.GetDependentPermissions, callInfo)
	mock.lockGetDependentPermissions.Unlock()
	return mock.GetDependentPermissionsFunc(ctx, token, realm, clientID, policyID)
}

// GetDependentPermissionsCalls gets all the calls that were made to GetDependentPermissions.
// Check the length with:
//     len(mockedGoCloak.GetDependentPermissionsCalls())
func (mock *GoCloakMock) GetDependentPermissionsCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	PolicyID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		PolicyID string
	}
	mock.lockGetDependentPermissions.RLock()
	calls = mock.calls.GetDependentPermissions
	mock.lockGetDependentPermissions.RUnlock()
	return calls
}

// GetGroup calls GetGroupFunc.
func (mock *GoCloakMock) GetGroup(ctx context.Context, accessToken string, realm string, groupID string) (*gocloak.Group, error) {
	if mock.GetGroupFunc == nil {
		panic("GoCloakMock.GetGroupFunc: method is nil but GoCloak.GetGroup was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		GroupID     string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		GroupID:     groupID,
	}
	mock.lockGetGroup.Lock()
	mock.calls.GetGroup = append(mock.calls.GetGroup, callInfo)
	mock.lockGetGroup.Unlock()
	return mock.GetGroupFunc(ctx, accessToken, realm, groupID)
}

// GetGroupCalls gets all the calls that were made to GetGroup.
// Check the length with:
//     len(mockedGoCloak.GetGroupCalls())
func (mock *GoCloakMock) GetGroupCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	GroupID     string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		GroupID     string
	}
	mock.lockGetGroup.RLock()
	calls = mock.calls.GetGroup
	mock.lockGetGroup.RUnlock()
	return calls
}

// GetGroupMembers calls GetGroupMembersFunc.
func (mock *GoCloakMock) GetGroupMembers(ctx context.Context, accessToken string, realm string, groupID string, params gocloak.GetGroupsParams) ([]*gocloak.User, error) {
	if mock.GetGroupMembersFunc == nil {
		panic("GoCloakMock.GetGroupMembersFunc: method is nil but GoCloak.GetGroupMembers was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		GroupID     string
		Params      gocloak.GetGroupsParams
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		GroupID:     groupID,
		Params:      params,
	}
	mock.lockGetGroupMembers.Lock()
	mock.calls.GetGroupMembers = append(mock.calls.GetGroupMembers, callInfo)
	mock.lockGetGroupMembers.Unlock()
	return mock.GetGroupMembersFunc(ctx, accessToken, realm, groupID, params)
}

// GetGroupMembersCalls gets all the calls that were made to GetGroupMembers.
// Check the length with:
//     len(mockedGoCloak.GetGroupMembersCalls())
func (mock *GoCloakMock) GetGroupMembersCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	GroupID     string
	Params      gocloak.GetGroupsParams
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		GroupID     string
		Params      gocloak.GetGroupsParams
	}
	mock.lockGetGroupMembers.RLock()
	calls = mock.calls.GetGroupMembers
	mock.lockGetGroupMembers.RUnlock()
	return calls
}

// GetGroups calls GetGroupsFunc.
func (mock *GoCloakMock) GetGroups(ctx context.Context, accessToken string, realm string, params gocloak.GetGroupsParams) ([]*gocloak.Group, error) {
	if mock.GetGroupsFunc == nil {
		panic("GoCloakMock.GetGroupsFunc: method is nil but GoCloak.GetGroups was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Params      gocloak.GetGroupsParams
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		Params:      params,
	}
	mock.lockGetGroups.Lock()
	mock.calls.GetGroups = append(mock.calls.GetGroups, callInfo)
	mock.lockGetGroups.Unlock()
	return mock.GetGroupsFunc(ctx, accessToken, realm, params)
}

// GetGroupsCalls gets all the calls that were made to GetGroups.
// Check the length with:
//     len(mockedGoCloak.GetGroupsCalls())
func (mock *GoCloakMock) GetGroupsCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	Params      gocloak.GetGroupsParams
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Params      gocloak.GetGroupsParams
	}
	mock.lockGetGroups.RLock()
	calls = mock.calls.GetGroups
	mock.lockGetGroups.RUnlock()
	return calls
}

// GetGroupsCount calls GetGroupsCountFunc.
func (mock *GoCloakMock) GetGroupsCount(ctx context.Context, token string, realm string, params gocloak.GetGroupsParams) (int, error) {
	if mock.GetGroupsCountFunc == nil {
		panic("GoCloakMock.GetGroupsCountFunc: method is nil but GoCloak.GetGroupsCount was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		Params gocloak.GetGroupsParams
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		Params: params,
	}
	mock.lockGetGroupsCount.Lock()
	mock.calls.GetGroupsCount = append(mock.calls.GetGroupsCount, callInfo)
	mock.lockGetGroupsCount.Unlock()
	return mock.GetGroupsCountFunc(ctx, token, realm, params)
}

// GetGroupsCountCalls gets all the calls that were made to GetGroupsCount.
// Check the length with:
//     len(mockedGoCloak.GetGroupsCountCalls())
func (mock *GoCloakMock) GetGroupsCountCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	Params gocloak.GetGroupsParams
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		Params gocloak.GetGroupsParams
	}
	mock.lockGetGroupsCount.RLock()
	calls = mock.calls.GetGroupsCount
	mock.lockGetGroupsCount.RUnlock()
	return calls
}

// GetIdentityProvider calls GetIdentityProviderFunc.
func (mock *GoCloakMock) GetIdentityProvider(ctx context.Context, token string, realm string, alias string) (*gocloak.IdentityProviderRepresentation, error) {
	if mock.GetIdentityProviderFunc == nil {
		panic("GoCloakMock.GetIdentityProviderFunc: method is nil but GoCloak.GetIdentityProvider was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
		Alias string
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
		Alias: alias,
	}
	mock.lockGetIdentityProvider.Lock()
	mock.calls.GetIdentityProvider = append(mock.calls.GetIdentityProvider, callInfo)
	mock.lockGetIdentityProvider.Unlock()
	return mock.GetIdentityProviderFunc(ctx, token, realm, alias)
}

// GetIdentityProviderCalls gets all the calls that were made to GetIdentityProvider.
// Check the length with:
//     len(mockedGoCloak.GetIdentityProviderCalls())
func (mock *GoCloakMock) GetIdentityProviderCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
	Alias string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
		Alias string
	}
	mock.lockGetIdentityProvider.RLock()
	calls = mock.calls.GetIdentityProvider
	mock.lockGetIdentityProvider.RUnlock()
	return calls
}

// GetIdentityProviderMappers calls GetIdentityProviderMappersFunc.
func (mock *GoCloakMock) GetIdentityProviderMappers(ctx context.Context, token string, realm string, alias string) ([]*gocloak.IdentityProviderMapper, error) {
	if mock.GetIdentityProviderMappersFunc == nil {
		panic("GoCloakMock.GetIdentityProviderMappersFunc: method is nil but GoCloak.GetIdentityProviderMappers was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
		Alias string
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
		Alias: alias,
	}
	mock.lockGetIdentityProviderMappers.Lock()
	mock.calls.GetIdentityProviderMappers = append(mock.calls.GetIdentityProviderMappers, callInfo)
	mock.lockGetIdentityProviderMappers.Unlock()
	return mock.GetIdentityProviderMappersFunc(ctx, token, realm, alias)
}

// GetIdentityProviderMappersCalls gets all the calls that were made to GetIdentityProviderMappers.
// Check the length with:
//     len(mockedGoCloak.GetIdentityProviderMappersCalls())
func (mock *GoCloakMock) GetIdentityProviderMappersCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
	Alias string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
		Alias string
	}
	mock.lockGetIdentityProviderMappers.RLock()
	calls = mock.calls.GetIdentityProviderMappers
	mock.lockGetIdentityProviderMappers.RUnlock()
	return calls
}

// GetIdentityProviders calls GetIdentityProvidersFunc.
func (mock *GoCloakMock) GetIdentityProviders(ctx context.Context, token string, realm string) ([]*gocloak.IdentityProviderRepresentation, error) {
	if mock.GetIdentityProvidersFunc == nil {
		panic("GoCloakMock.GetIdentityProvidersFunc: method is nil but GoCloak.GetIdentityProviders was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
	}
	mock.lockGetIdentityProviders.Lock()
	mock.calls.GetIdentityProviders = append(mock.calls.GetIdentityProviders, callInfo)
	mock.lockGetIdentityProviders.Unlock()
	return mock.GetIdentityProvidersFunc(ctx, token, realm)
}

// GetIdentityProvidersCalls gets all the calls that were made to GetIdentityProviders.
// Check the length with:
//     len(mockedGoCloak.GetIdentityProvidersCalls())
func (mock *GoCloakMock) GetIdentityProvidersCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
	}
	mock.lockGetIdentityProviders.RLock()
	calls = mock.calls.GetIdentityProviders
	mock.lockGetIdentityProviders.RUnlock()
	return calls
}

// GetIssuer calls GetIssuerFunc.
func (mock *GoCloakMock) GetIssuer(ctx context.Context, realm string) (*gocloak.IssuerResponse, error) {
	if mock.GetIssuerFunc == nil {
		panic("GoCloakMock.GetIssuerFunc: method is nil but GoCloak.GetIssuer was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Realm string
	}{
		Ctx:   ctx,
		Realm: realm,
	}
	mock.lockGetIssuer.Lock()
	mock.calls.GetIssuer = append(mock.calls.GetIssuer, callInfo)
	mock.lockGetIssuer.Unlock()
	return mock.GetIssuerFunc(ctx, realm)
}

// GetIssuerCalls gets all the calls that were made to GetIssuer.
// Check the length with:
//     len(mockedGoCloak.GetIssuerCalls())
func (mock *GoCloakMock) GetIssuerCalls() []struct {
	Ctx   context.Context
	Realm string
} {
	var calls []struct {
		Ctx   context.Context
		Realm string
	}
	mock.lockGetIssuer.RLock()
	calls = mock.calls.GetIssuer
	mock.lockGetIssuer.RUnlock()
	return calls
}

// GetKeyStoreConfig calls GetKeyStoreConfigFunc.
func (mock *GoCloakMock) GetKeyStoreConfig(ctx context.Context, accessToken string, realm string) (*gocloak.KeyStoreConfig, error) {
	if mock.GetKeyStoreConfigFunc == nil {
		panic("GoCloakMock.GetKeyStoreConfigFunc: method is nil but GoCloak.GetKeyStoreConfig was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
	}
	mock.lockGetKeyStoreConfig.Lock()
	mock.calls.GetKeyStoreConfig = append(mock.calls.GetKeyStoreConfig, callInfo)
	mock.lockGetKeyStoreConfig.Unlock()
	return mock.GetKeyStoreConfigFunc(ctx, accessToken, realm)
}

// GetKeyStoreConfigCalls gets all the calls that were made to GetKeyStoreConfig.
// Check the length with:
//     len(mockedGoCloak.GetKeyStoreConfigCalls())
func (mock *GoCloakMock) GetKeyStoreConfigCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}
	mock.lockGetKeyStoreConfig.RLock()
	calls = mock.calls.GetKeyStoreConfig
	mock.lockGetKeyStoreConfig.RUnlock()
	return calls
}

// GetPermission calls GetPermissionFunc.
func (mock *GoCloakMock) GetPermission(ctx context.Context, token string, realm string, clientID string, permissionID string) (*gocloak.PermissionRepresentation, error) {
	if mock.GetPermissionFunc == nil {
		panic("GoCloakMock.GetPermissionFunc: method is nil but GoCloak.GetPermission was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Token        string
		Realm        string
		ClientID     string
		PermissionID string
	}{
		Ctx:          ctx,
		Token:        token,
		Realm:        realm,
		ClientID:     clientID,
		PermissionID: permissionID,
	}
	mock.lockGetPermission.Lock()
	mock.calls.GetPermission = append(mock.calls.GetPermission, callInfo)
	mock.lockGetPermission.Unlock()
	return mock.GetPermissionFunc(ctx, token, realm, clientID, permissionID)
}

// GetPermissionCalls gets all the calls that were made to GetPermission.
// Check the length with:
//     len(mockedGoCloak.GetPermissionCalls())
func (mock *GoCloakMock) GetPermissionCalls() []struct {
	Ctx          context.Context
	Token        string
	Realm        string
	ClientID     string
	PermissionID string
} {
	var calls []struct {
		Ctx          context.Context
		Token        string
		Realm        string
		ClientID     string
		PermissionID string
	}
	mock.lockGetPermission.RLock()
	calls = mock.calls.GetPermission
	mock.lockGetPermission.RUnlock()
	return calls
}

// GetPermissionResources calls GetPermissionResourcesFunc.
func (mock *GoCloakMock) GetPermissionResources(ctx context.Context, token string, realm string, clientID string, permissionID string) ([]*gocloak.PermissionResource, error) {
	if mock.GetPermissionResourcesFunc == nil {
		panic("GoCloakMock.GetPermissionResourcesFunc: method is nil but GoCloak.GetPermissionResources was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Token        string
		Realm        string
		ClientID     string
		PermissionID string
	}{
		Ctx:          ctx,
		Token:        token,
		Realm:        realm,
		ClientID:     clientID,
		PermissionID: permissionID,
	}
	mock.lockGetPermissionResources.Lock()
	mock.calls.GetPermissionResources = append(mock.calls.GetPermissionResources, callInfo)
	mock.lockGetPermissionResources.Unlock()
	return mock.GetPermissionResourcesFunc(ctx, token, realm, clientID, permissionID)
}

// GetPermissionResourcesCalls gets all the calls that were made to GetPermissionResources.
// Check the length with:
//     len(mockedGoCloak.GetPermissionResourcesCalls())
func (mock *GoCloakMock) GetPermissionResourcesCalls() []struct {
	Ctx          context.Context
	Token        string
	Realm        string
	ClientID     string
	PermissionID string
} {
	var calls []struct {
		Ctx          context.Context
		Token        string
		Realm        string
		ClientID     string
		PermissionID string
	}
	mock.lockGetPermissionResources.RLock()
	calls = mock.calls.GetPermissionResources
	mock.lockGetPermissionResources.RUnlock()
	return calls
}

// GetPermissionScopes calls GetPermissionScopesFunc.
func (mock *GoCloakMock) GetPermissionScopes(ctx context.Context, token string, realm string, clientID string, permissionID string) ([]*gocloak.PermissionScope, error) {
	if mock.GetPermissionScopesFunc == nil {
		panic("GoCloakMock.GetPermissionScopesFunc: method is nil but GoCloak.GetPermissionScopes was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Token        string
		Realm        string
		ClientID     string
		PermissionID string
	}{
		Ctx:          ctx,
		Token:        token,
		Realm:        realm,
		ClientID:     clientID,
		PermissionID: permissionID,
	}
	mock.lockGetPermissionScopes.Lock()
	mock.calls.GetPermissionScopes = append(mock.calls.GetPermissionScopes, callInfo)
	mock.lockGetPermissionScopes.Unlock()
	return mock.GetPermissionScopesFunc(ctx, token, realm, clientID, permissionID)
}

// GetPermissionScopesCalls gets all the calls that were made to GetPermissionScopes.
// Check the length with:
//     len(mockedGoCloak.GetPermissionScopesCalls())
func (mock *GoCloakMock) GetPermissionScopesCalls() []struct {
	Ctx          context.Context
	Token        string
	Realm        string
	ClientID     string
	PermissionID string
} {
	var calls []struct {
		Ctx          context.Context
		Token        string
		Realm        string
		ClientID     string
		PermissionID string
	}
	mock.lockGetPermissionScopes.RLock()
	calls = mock.calls.GetPermissionScopes
	mock.lockGetPermissionScopes.RUnlock()
	return calls
}

// GetPermissions calls GetPermissionsFunc.
func (mock *GoCloakMock) GetPermissions(ctx context.Context, token string, realm string, clientID string, params gocloak.GetPermissionParams) ([]*gocloak.PermissionRepresentation, error) {
	if mock.GetPermissionsFunc == nil {
		panic("GoCloakMock.GetPermissionsFunc: method is nil but GoCloak.GetPermissions was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Params   gocloak.GetPermissionParams
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		Params:   params,
	}
	mock.lockGetPermissions.Lock()
	mock.calls.GetPermissions = append(mock.calls.GetPermissions, callInfo)
	mock.lockGetPermissions.Unlock()
	return mock.GetPermissionsFunc(ctx, token, realm, clientID, params)
}

// GetPermissionsCalls gets all the calls that were made to GetPermissions.
// Check the length with:
//     len(mockedGoCloak.GetPermissionsCalls())
func (mock *GoCloakMock) GetPermissionsCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	Params   gocloak.GetPermissionParams
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Params   gocloak.GetPermissionParams
	}
	mock.lockGetPermissions.RLock()
	calls = mock.calls.GetPermissions
	mock.lockGetPermissions.RUnlock()
	return calls
}

// GetPolicies calls GetPoliciesFunc.
func (mock *GoCloakMock) GetPolicies(ctx context.Context, token string, realm string, clientID string, params gocloak.GetPolicyParams) ([]*gocloak.PolicyRepresentation, error) {
	if mock.GetPoliciesFunc == nil {
		panic("GoCloakMock.GetPoliciesFunc: method is nil but GoCloak.GetPolicies was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Params   gocloak.GetPolicyParams
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		Params:   params,
	}
	mock.lockGetPolicies.Lock()
	mock.calls.GetPolicies = append(mock.calls.GetPolicies, callInfo)
	mock.lockGetPolicies.Unlock()
	return mock.GetPoliciesFunc(ctx, token, realm, clientID, params)
}

// GetPoliciesCalls gets all the calls that were made to GetPolicies.
// Check the length with:
//     len(mockedGoCloak.GetPoliciesCalls())
func (mock *GoCloakMock) GetPoliciesCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	Params   gocloak.GetPolicyParams
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Params   gocloak.GetPolicyParams
	}
	mock.lockGetPolicies.RLock()
	calls = mock.calls.GetPolicies
	mock.lockGetPolicies.RUnlock()
	return calls
}

// GetPolicy calls GetPolicyFunc.
func (mock *GoCloakMock) GetPolicy(ctx context.Context, token string, realm string, clientID string, policyID string) (*gocloak.PolicyRepresentation, error) {
	if mock.GetPolicyFunc == nil {
		panic("GoCloakMock.GetPolicyFunc: method is nil but GoCloak.GetPolicy was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		PolicyID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		PolicyID: policyID,
	}
	mock.lockGetPolicy.Lock()
	mock.calls.GetPolicy = append(mock.calls.GetPolicy, callInfo)
	mock.lockGetPolicy.Unlock()
	return mock.GetPolicyFunc(ctx, token, realm, clientID, policyID)
}

// GetPolicyCalls gets all the calls that were made to GetPolicy.
// Check the length with:
//     len(mockedGoCloak.GetPolicyCalls())
func (mock *GoCloakMock) GetPolicyCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	PolicyID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		PolicyID string
	}
	mock.lockGetPolicy.RLock()
	calls = mock.calls.GetPolicy
	mock.lockGetPolicy.RUnlock()
	return calls
}

// GetRawUserInfo calls GetRawUserInfoFunc.
func (mock *GoCloakMock) GetRawUserInfo(ctx context.Context, accessToken string, realm string) (map[string]interface{}, error) {
	if mock.GetRawUserInfoFunc == nil {
		panic("GoCloakMock.GetRawUserInfoFunc: method is nil but GoCloak.GetRawUserInfo was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
	}
	mock.lockGetRawUserInfo.Lock()
	mock.calls.GetRawUserInfo = append(mock.calls.GetRawUserInfo, callInfo)
	mock.lockGetRawUserInfo.Unlock()
	return mock.GetRawUserInfoFunc(ctx, accessToken, realm)
}

// GetRawUserInfoCalls gets all the calls that were made to GetRawUserInfo.
// Check the length with:
//     len(mockedGoCloak.GetRawUserInfoCalls())
func (mock *GoCloakMock) GetRawUserInfoCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}
	mock.lockGetRawUserInfo.RLock()
	calls = mock.calls.GetRawUserInfo
	mock.lockGetRawUserInfo.RUnlock()
	return calls
}

// GetRealm calls GetRealmFunc.
func (mock *GoCloakMock) GetRealm(ctx context.Context, token string, realm string) (*gocloak.RealmRepresentation, error) {
	if mock.GetRealmFunc == nil {
		panic("GoCloakMock.GetRealmFunc: method is nil but GoCloak.GetRealm was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm string
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
	}
	mock.lockGetRealm.Lock()
	mock.calls.GetRealm = append(mock.calls.GetRealm, callInfo)
	mock.lockGetRealm.Unlock()
	return mock.GetRealmFunc(ctx, token, realm)
}

// GetRealmCalls gets all the calls that were made to GetRealm.
// Check the length with:
//     len(mockedGoCloak.GetRealmCalls())
func (mock *GoCloakMock) GetRealmCalls() []struct {
	Ctx   context.Context
	Token string
	Realm string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm string
	}
	mock.lockGetRealm.RLock()
	calls = mock.calls.GetRealm
	mock.lockGetRealm.RUnlock()
	return calls
}

// GetRealmRole calls GetRealmRoleFunc.
func (mock *GoCloakMock) GetRealmRole(ctx context.Context, token string, realm string, roleName string) (*gocloak.Role, error) {
	if mock.GetRealmRoleFunc == nil {
		panic("GoCloakMock.GetRealmRoleFunc: method is nil but GoCloak.GetRealmRole was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		RoleName string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		RoleName: roleName,
	}
	mock.lockGetRealmRole.Lock()
	mock.calls.GetRealmRole = append(mock.calls.GetRealmRole, callInfo)
	mock.lockGetRealmRole.Unlock()
	return mock.GetRealmRoleFunc(ctx, token, realm, roleName)
}

// GetRealmRoleCalls gets all the calls that were made to GetRealmRole.
// Check the length with:
//     len(mockedGoCloak.GetRealmRoleCalls())
func (mock *GoCloakMock) GetRealmRoleCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	RoleName string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		RoleName string
	}
	mock.lockGetRealmRole.RLock()
	calls = mock.calls.GetRealmRole
	mock.lockGetRealmRole.RUnlock()
	return calls
}

// GetRealmRoles calls GetRealmRolesFunc.
func (mock *GoCloakMock) GetRealmRoles(ctx context.Context, accessToken string, realm string) ([]*gocloak.Role, error) {
	if mock.GetRealmRolesFunc == nil {
		panic("GoCloakMock.GetRealmRolesFunc: method is nil but GoCloak.GetRealmRoles was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
	}
	mock.lockGetRealmRoles.Lock()
	mock.calls.GetRealmRoles = append(mock.calls.GetRealmRoles, callInfo)
	mock.lockGetRealmRoles.Unlock()
	return mock.GetRealmRolesFunc(ctx, accessToken, realm)
}

// GetRealmRolesCalls gets all the calls that were made to GetRealmRoles.
// Check the length with:
//     len(mockedGoCloak.GetRealmRolesCalls())
func (mock *GoCloakMock) GetRealmRolesCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}
	mock.lockGetRealmRoles.RLock()
	calls = mock.calls.GetRealmRoles
	mock.lockGetRealmRoles.RUnlock()
	return calls
}

// GetRealmRolesByGroupID calls GetRealmRolesByGroupIDFunc.
func (mock *GoCloakMock) GetRealmRolesByGroupID(ctx context.Context, accessToken string, realm string, groupID string) ([]*gocloak.Role, error) {
	if mock.GetRealmRolesByGroupIDFunc == nil {
		panic("GoCloakMock.GetRealmRolesByGroupIDFunc: method is nil but GoCloak.GetRealmRolesByGroupID was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		GroupID     string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		GroupID:     groupID,
	}
	mock.lockGetRealmRolesByGroupID.Lock()
	mock.calls.GetRealmRolesByGroupID = append(mock.calls.GetRealmRolesByGroupID, callInfo)
	mock.lockGetRealmRolesByGroupID.Unlock()
	return mock.GetRealmRolesByGroupIDFunc(ctx, accessToken, realm, groupID)
}

// GetRealmRolesByGroupIDCalls gets all the calls that were made to GetRealmRolesByGroupID.
// Check the length with:
//     len(mockedGoCloak.GetRealmRolesByGroupIDCalls())
func (mock *GoCloakMock) GetRealmRolesByGroupIDCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	GroupID     string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		GroupID     string
	}
	mock.lockGetRealmRolesByGroupID.RLock()
	calls = mock.calls.GetRealmRolesByGroupID
	mock.lockGetRealmRolesByGroupID.RUnlock()
	return calls
}

// GetRealmRolesByUserID calls GetRealmRolesByUserIDFunc.
func (mock *GoCloakMock) GetRealmRolesByUserID(ctx context.Context, accessToken string, realm string, userID string) ([]*gocloak.Role, error) {
	if mock.GetRealmRolesByUserIDFunc == nil {
		panic("GoCloakMock.GetRealmRolesByUserIDFunc: method is nil but GoCloak.GetRealmRolesByUserID was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		UserID      string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		UserID:      userID,
	}
	mock.lockGetRealmRolesByUserID.Lock()
	mock.calls.GetRealmRolesByUserID = append(mock.calls.GetRealmRolesByUserID, callInfo)
	mock.lockGetRealmRolesByUserID.Unlock()
	return mock.GetRealmRolesByUserIDFunc(ctx, accessToken, realm, userID)
}

// GetRealmRolesByUserIDCalls gets all the calls that were made to GetRealmRolesByUserID.
// Check the length with:
//     len(mockedGoCloak.GetRealmRolesByUserIDCalls())
func (mock *GoCloakMock) GetRealmRolesByUserIDCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	UserID      string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		UserID      string
	}
	mock.lockGetRealmRolesByUserID.RLock()
	calls = mock.calls.GetRealmRolesByUserID
	mock.lockGetRealmRolesByUserID.RUnlock()
	return calls
}

// GetRealms calls GetRealmsFunc.
func (mock *GoCloakMock) GetRealms(ctx context.Context, token string) ([]*gocloak.RealmRepresentation, error) {
	if mock.GetRealmsFunc == nil {
		panic("GoCloakMock.GetRealmsFunc: method is nil but GoCloak.GetRealms was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockGetRealms.Lock()
	mock.calls.GetRealms = append(mock.calls.GetRealms, callInfo)
	mock.lockGetRealms.Unlock()
	return mock.GetRealmsFunc(ctx, token)
}

// GetRealmsCalls gets all the calls that were made to GetRealms.
// Check the length with:
//     len(mockedGoCloak.GetRealmsCalls())
func (mock *GoCloakMock) GetRealmsCalls() []struct {
	Ctx   context.Context
	Token string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
	}
	mock.lockGetRealms.RLock()
	calls = mock.calls.GetRealms
	mock.lockGetRealms.RUnlock()
	return calls
}

// GetRequestingPartyPermissionDecision calls GetRequestingPartyPermissionDecisionFunc.
func (mock *GoCloakMock) GetRequestingPartyPermissionDecision(ctx context.Context, token string, realm string, options gocloak.RequestingPartyTokenOptions) (*gocloak.RequestingPartyPermissionDecision, error) {
	if mock.GetRequestingPartyPermissionDecisionFunc == nil {
		panic("GoCloakMock.GetRequestingPartyPermissionDecisionFunc: method is nil but GoCloak.GetRequestingPartyPermissionDecision was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Token   string
		Realm   string
		Options gocloak.RequestingPartyTokenOptions
	}{
		Ctx:     ctx,
		Token:   token,
		Realm:   realm,
		Options: options,
	}
	mock.lockGetRequestingPartyPermissionDecision.Lock()
	mock.calls.GetRequestingPartyPermissionDecision = append(mock.calls.GetRequestingPartyPermissionDecision, callInfo)
	mock.lockGetRequestingPartyPermissionDecision.Unlock()
	return mock.GetRequestingPartyPermissionDecisionFunc(ctx, token, realm, options)
}

// GetRequestingPartyPermissionDecisionCalls gets all the calls that were made to GetRequestingPartyPermissionDecision.
// Check the length with:
//     len(mockedGoCloak.GetRequestingPartyPermissionDecisionCalls())
func (mock *GoCloakMock) GetRequestingPartyPermissionDecisionCalls() []struct {
	Ctx     context.Context
	Token   string
	Realm   string
	Options gocloak.RequestingPartyTokenOptions
} {
	var calls []struct {
		Ctx     context.Context
		Token   string
		Realm   string
		Options gocloak.RequestingPartyTokenOptions
	}
	mock.lockGetRequestingPartyPermissionDecision.RLock()
	calls = mock.calls.GetRequestingPartyPermissionDecision
	mock.lockGetRequestingPartyPermissionDecision.RUnlock()
	return calls
}

// GetRequestingPartyPermissions calls GetRequestingPartyPermissionsFunc.
func (mock *GoCloakMock) GetRequestingPartyPermissions(ctx context.Context, token string, realm string, options gocloak.RequestingPartyTokenOptions) (*[]gocloak.RequestingPartyPermission, error) {
	if mock.GetRequestingPartyPermissionsFunc == nil {
		panic("GoCloakMock.GetRequestingPartyPermissionsFunc: method is nil but GoCloak.GetRequestingPartyPermissions was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Token   string
		Realm   string
		Options gocloak.RequestingPartyTokenOptions
	}{
		Ctx:     ctx,
		Token:   token,
		Realm:   realm,
		Options: options,
	}
	mock.lockGetRequestingPartyPermissions.Lock()
	mock.calls.GetRequestingPartyPermissions = append(mock.calls.GetRequestingPartyPermissions, callInfo)
	mock.lockGetRequestingPartyPermissions.Unlock()
	return mock.GetRequestingPartyPermissionsFunc(ctx, token, realm, options)
}

// GetRequestingPartyPermissionsCalls gets all the calls that were made to GetRequestingPartyPermissions.
// Check the length with:
//     len(mockedGoCloak.GetRequestingPartyPermissionsCalls())
func (mock *GoCloakMock) GetRequestingPartyPermissionsCalls() []struct {
	Ctx     context.Context
	Token   string
	Realm   string
	Options gocloak.RequestingPartyTokenOptions
} {
	var calls []struct {
		Ctx     context.Context
		Token   string
		Realm   string
		Options gocloak.RequestingPartyTokenOptions
	}
	mock.lockGetRequestingPartyPermissions.RLock()
	calls = mock.calls.GetRequestingPartyPermissions
	mock.lockGetRequestingPartyPermissions.RUnlock()
	return calls
}

// GetRequestingPartyToken calls GetRequestingPartyTokenFunc.
func (mock *GoCloakMock) GetRequestingPartyToken(ctx context.Context, token string, realm string, options gocloak.RequestingPartyTokenOptions) (*gocloak.JWT, error) {
	if mock.GetRequestingPartyTokenFunc == nil {
		panic("GoCloakMock.GetRequestingPartyTokenFunc: method is nil but GoCloak.GetRequestingPartyToken was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Token   string
		Realm   string
		Options gocloak.RequestingPartyTokenOptions
	}{
		Ctx:     ctx,
		Token:   token,
		Realm:   realm,
		Options: options,
	}
	mock.lockGetRequestingPartyToken.Lock()
	mock.calls.GetRequestingPartyToken = append(mock.calls.GetRequestingPartyToken, callInfo)
	mock.lockGetRequestingPartyToken.Unlock()
	return mock.GetRequestingPartyTokenFunc(ctx, token, realm, options)
}

// GetRequestingPartyTokenCalls gets all the calls that were made to GetRequestingPartyToken.
// Check the length with:
//     len(mockedGoCloak.GetRequestingPartyTokenCalls())
func (mock *GoCloakMock) GetRequestingPartyTokenCalls() []struct {
	Ctx     context.Context
	Token   string
	Realm   string
	Options gocloak.RequestingPartyTokenOptions
} {
	var calls []struct {
		Ctx     context.Context
		Token   string
		Realm   string
		Options gocloak.RequestingPartyTokenOptions
	}
	mock.lockGetRequestingPartyToken.RLock()
	calls = mock.calls.GetRequestingPartyToken
	mock.lockGetRequestingPartyToken.RUnlock()
	return calls
}

// GetResource calls GetResourceFunc.
func (mock *GoCloakMock) GetResource(ctx context.Context, token string, realm string, clientID string, resourceID string) (*gocloak.ResourceRepresentation, error) {
	if mock.GetResourceFunc == nil {
		panic("GoCloakMock.GetResourceFunc: method is nil but GoCloak.GetResource was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Token      string
		Realm      string
		ClientID   string
		ResourceID string
	}{
		Ctx:        ctx,
		Token:      token,
		Realm:      realm,
		ClientID:   clientID,
		ResourceID: resourceID,
	}
	mock.lockGetResource.Lock()
	mock.calls.GetResource = append(mock.calls.GetResource, callInfo)
	mock.lockGetResource.Unlock()
	return mock.GetResourceFunc(ctx, token, realm, clientID, resourceID)
}

// GetResourceCalls gets all the calls that were made to GetResource.
// Check the length with:
//     len(mockedGoCloak.GetResourceCalls())
func (mock *GoCloakMock) GetResourceCalls() []struct {
	Ctx        context.Context
	Token      string
	Realm      string
	ClientID   string
	ResourceID string
} {
	var calls []struct {
		Ctx        context.Context
		Token      string
		Realm      string
		ClientID   string
		ResourceID string
	}
	mock.lockGetResource.RLock()
	calls = mock.calls.GetResource
	mock.lockGetResource.RUnlock()
	return calls
}

// GetResourceClient calls GetResourceClientFunc.
func (mock *GoCloakMock) GetResourceClient(ctx context.Context, token string, realm string, resourceID string) (*gocloak.ResourceRepresentation, error) {
	if mock.GetResourceClientFunc == nil {
		panic("GoCloakMock.GetResourceClientFunc: method is nil but GoCloak.GetResourceClient was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Token      string
		Realm      string
		ResourceID string
	}{
		Ctx:        ctx,
		Token:      token,
		Realm:      realm,
		ResourceID: resourceID,
	}
	mock.lockGetResourceClient.Lock()
	mock.calls.GetResourceClient = append(mock.calls.GetResourceClient, callInfo)
	mock.lockGetResourceClient.Unlock()
	return mock.GetResourceClientFunc(ctx, token, realm, resourceID)
}

// GetResourceClientCalls gets all the calls that were made to GetResourceClient.
// Check the length with:
//     len(mockedGoCloak.GetResourceClientCalls())
func (mock *GoCloakMock) GetResourceClientCalls() []struct {
	Ctx        context.Context
	Token      string
	Realm      string
	ResourceID string
} {
	var calls []struct {
		Ctx        context.Context
		Token      string
		Realm      string
		ResourceID string
	}
	mock.lockGetResourceClient.RLock()
	calls = mock.calls.GetResourceClient
	mock.lockGetResourceClient.RUnlock()
	return calls
}

// GetResourcePolicies calls GetResourcePoliciesFunc.
func (mock *GoCloakMock) GetResourcePolicies(ctx context.Context, token string, realm string, params gocloak.GetResourcePoliciesParams) ([]*gocloak.ResourcePolicyRepresentation, error) {
	if mock.GetResourcePoliciesFunc == nil {
		panic("GoCloakMock.GetResourcePoliciesFunc: method is nil but GoCloak.GetResourcePolicies was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		Params gocloak.GetResourcePoliciesParams
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		Params: params,
	}
	mock.lockGetResourcePolicies.Lock()
	mock.calls.GetResourcePolicies = append(mock.calls.GetResourcePolicies, callInfo)
	mock.lockGetResourcePolicies.Unlock()
	return mock.GetResourcePoliciesFunc(ctx, token, realm, params)
}

// GetResourcePoliciesCalls gets all the calls that were made to GetResourcePolicies.
// Check the length with:
//     len(mockedGoCloak.GetResourcePoliciesCalls())
func (mock *GoCloakMock) GetResourcePoliciesCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	Params gocloak.GetResourcePoliciesParams
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		Params gocloak.GetResourcePoliciesParams
	}
	mock.lockGetResourcePolicies.RLock()
	calls = mock.calls.GetResourcePolicies
	mock.lockGetResourcePolicies.RUnlock()
	return calls
}

// GetResourcePolicy calls GetResourcePolicyFunc.
func (mock *GoCloakMock) GetResourcePolicy(ctx context.Context, token string, realm string, permissionID string) (*gocloak.ResourcePolicyRepresentation, error) {
	if mock.GetResourcePolicyFunc == nil {
		panic("GoCloakMock.GetResourcePolicyFunc: method is nil but GoCloak.GetResourcePolicy was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Token        string
		Realm        string
		PermissionID string
	}{
		Ctx:          ctx,
		Token:        token,
		Realm:        realm,
		PermissionID: permissionID,
	}
	mock.lockGetResourcePolicy.Lock()
	mock.calls.GetResourcePolicy = append(mock.calls.GetResourcePolicy, callInfo)
	mock.lockGetResourcePolicy.Unlock()
	return mock.GetResourcePolicyFunc(ctx, token, realm, permissionID)
}

// GetResourcePolicyCalls gets all the calls that were made to GetResourcePolicy.
// Check the length with:
//     len(mockedGoCloak.GetResourcePolicyCalls())
func (mock *GoCloakMock) GetResourcePolicyCalls() []struct {
	Ctx          context.Context
	Token        string
	Realm        string
	PermissionID string
} {
	var calls []struct {
		Ctx          context.Context
		Token        string
		Realm        string
		PermissionID string
	}
	mock.lockGetResourcePolicy.RLock()
	calls = mock.calls.GetResourcePolicy
	mock.lockGetResourcePolicy.RUnlock()
	return calls
}

// GetResources calls GetResourcesFunc.
func (mock *GoCloakMock) GetResources(ctx context.Context, token string, realm string, clientID string, params gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error) {
	if mock.GetResourcesFunc == nil {
		panic("GoCloakMock.GetResourcesFunc: method is nil but GoCloak.GetResources was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Params   gocloak.GetResourceParams
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		Params:   params,
	}
	mock.lockGetResources.Lock()
	mock.calls.GetResources = append(mock.calls.GetResources, callInfo)
	mock.lockGetResources.Unlock()
	return mock.GetResourcesFunc(ctx, token, realm, clientID, params)
}

// GetResourcesCalls gets all the calls that were made to GetResources.
// Check the length with:
//     len(mockedGoCloak.GetResourcesCalls())
func (mock *GoCloakMock) GetResourcesCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	Params   gocloak.GetResourceParams
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Params   gocloak.GetResourceParams
	}
	mock.lockGetResources.RLock()
	calls = mock.calls.GetResources
	mock.lockGetResources.RUnlock()
	return calls
}

// GetResourcesClient calls GetResourcesClientFunc.
func (mock *GoCloakMock) GetResourcesClient(ctx context.Context, token string, realm string, params gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error) {
	if mock.GetResourcesClientFunc == nil {
		panic("GoCloakMock.GetResourcesClientFunc: method is nil but GoCloak.GetResourcesClient was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		Params gocloak.GetResourceParams
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		Params: params,
	}
	mock.lockGetResourcesClient.Lock()
	mock.calls.GetResourcesClient = append(mock.calls.GetResourcesClient, callInfo)
	mock.lockGetResourcesClient.Unlock()
	return mock.GetResourcesClientFunc(ctx, token, realm, params)
}

// GetResourcesClientCalls gets all the calls that were made to GetResourcesClient.
// Check the length with:
//     len(mockedGoCloak.GetResourcesClientCalls())
func (mock *GoCloakMock) GetResourcesClientCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	Params gocloak.GetResourceParams
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		Params gocloak.GetResourceParams
	}
	mock.lockGetResourcesClient.RLock()
	calls = mock.calls.GetResourcesClient
	mock.lockGetResourcesClient.RUnlock()
	return calls
}

// GetRoleMappingByGroupID calls GetRoleMappingByGroupIDFunc.
func (mock *GoCloakMock) GetRoleMappingByGroupID(ctx context.Context, accessToken string, realm string, groupID string) (*gocloak.MappingsRepresentation, error) {
	if mock.GetRoleMappingByGroupIDFunc == nil {
		panic("GoCloakMock.GetRoleMappingByGroupIDFunc: method is nil but GoCloak.GetRoleMappingByGroupID was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		GroupID     string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		GroupID:     groupID,
	}
	mock.lockGetRoleMappingByGroupID.Lock()
	mock.calls.GetRoleMappingByGroupID = append(mock.calls.GetRoleMappingByGroupID, callInfo)
	mock.lockGetRoleMappingByGroupID.Unlock()
	return mock.GetRoleMappingByGroupIDFunc(ctx, accessToken, realm, groupID)
}

// GetRoleMappingByGroupIDCalls gets all the calls that were made to GetRoleMappingByGroupID.
// Check the length with:
//     len(mockedGoCloak.GetRoleMappingByGroupIDCalls())
func (mock *GoCloakMock) GetRoleMappingByGroupIDCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	GroupID     string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		GroupID     string
	}
	mock.lockGetRoleMappingByGroupID.RLock()
	calls = mock.calls.GetRoleMappingByGroupID
	mock.lockGetRoleMappingByGroupID.RUnlock()
	return calls
}

// GetRoleMappingByUserID calls GetRoleMappingByUserIDFunc.
func (mock *GoCloakMock) GetRoleMappingByUserID(ctx context.Context, accessToken string, realm string, userID string) (*gocloak.MappingsRepresentation, error) {
	if mock.GetRoleMappingByUserIDFunc == nil {
		panic("GoCloakMock.GetRoleMappingByUserIDFunc: method is nil but GoCloak.GetRoleMappingByUserID was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		UserID      string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		UserID:      userID,
	}
	mock.lockGetRoleMappingByUserID.Lock()
	mock.calls.GetRoleMappingByUserID = append(mock.calls.GetRoleMappingByUserID, callInfo)
	mock.lockGetRoleMappingByUserID.Unlock()
	return mock.GetRoleMappingByUserIDFunc(ctx, accessToken, realm, userID)
}

// GetRoleMappingByUserIDCalls gets all the calls that were made to GetRoleMappingByUserID.
// Check the length with:
//     len(mockedGoCloak.GetRoleMappingByUserIDCalls())
func (mock *GoCloakMock) GetRoleMappingByUserIDCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	UserID      string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		UserID      string
	}
	mock.lockGetRoleMappingByUserID.RLock()
	calls = mock.calls.GetRoleMappingByUserID
	mock.lockGetRoleMappingByUserID.RUnlock()
	return calls
}

// GetScope calls GetScopeFunc.
func (mock *GoCloakMock) GetScope(ctx context.Context, token string, realm string, clientID string, scopeID string) (*gocloak.ScopeRepresentation, error) {
	if mock.GetScopeFunc == nil {
		panic("GoCloakMock.GetScopeFunc: method is nil but GoCloak.GetScope was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		ScopeID  string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		ScopeID:  scopeID,
	}
	mock.lockGetScope.Lock()
	mock.calls.GetScope = append(mock.calls.GetScope, callInfo)
	mock.lockGetScope.Unlock()
	return mock.GetScopeFunc(ctx, token, realm, clientID, scopeID)
}

// GetScopeCalls gets all the calls that were made to GetScope.
// Check the length with:
//     len(mockedGoCloak.GetScopeCalls())
func (mock *GoCloakMock) GetScopeCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	ScopeID  string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		ScopeID  string
	}
	mock.lockGetScope.RLock()
	calls = mock.calls.GetScope
	mock.lockGetScope.RUnlock()
	return calls
}

// GetScopes calls GetScopesFunc.
func (mock *GoCloakMock) GetScopes(ctx context.Context, token string, realm string, clientID string, params gocloak.GetScopeParams) ([]*gocloak.ScopeRepresentation, error) {
	if mock.GetScopesFunc == nil {
		panic("GoCloakMock.GetScopesFunc: method is nil but GoCloak.GetScopes was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Params   gocloak.GetScopeParams
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		Params:   params,
	}
	mock.lockGetScopes.Lock()
	mock.calls.GetScopes = append(mock.calls.GetScopes, callInfo)
	mock.lockGetScopes.Unlock()
	return mock.GetScopesFunc(ctx, token, realm, clientID, params)
}

// GetScopesCalls gets all the calls that were made to GetScopes.
// Check the length with:
//     len(mockedGoCloak.GetScopesCalls())
func (mock *GoCloakMock) GetScopesCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	Params   gocloak.GetScopeParams
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Params   gocloak.GetScopeParams
	}
	mock.lockGetScopes.RLock()
	calls = mock.calls.GetScopes
	mock.lockGetScopes.RUnlock()
	return calls
}

// GetServerInfo calls GetServerInfoFunc.
func (mock *GoCloakMock) GetServerInfo(ctx context.Context, accessToken string) (*gocloak.ServerInfoRepesentation, error) {
	if mock.GetServerInfoFunc == nil {
		panic("GoCloakMock.GetServerInfoFunc: method is nil but GoCloak.GetServerInfo was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
	}
	mock.lockGetServerInfo.Lock()
	mock.calls.GetServerInfo = append(mock.calls.GetServerInfo, callInfo)
	mock.lockGetServerInfo.Unlock()
	return mock.GetServerInfoFunc(ctx, accessToken)
}

// GetServerInfoCalls gets all the calls that were made to GetServerInfo.
// Check the length with:
//     len(mockedGoCloak.GetServerInfoCalls())
func (mock *GoCloakMock) GetServerInfoCalls() []struct {
	Ctx         context.Context
	AccessToken string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
	}
	mock.lockGetServerInfo.RLock()
	calls = mock.calls.GetServerInfo
	mock.lockGetServerInfo.RUnlock()
	return calls
}

// GetToken calls GetTokenFunc.
func (mock *GoCloakMock) GetToken(ctx context.Context, realm string, options gocloak.TokenOptions) (*gocloak.JWT, error) {
	if mock.GetTokenFunc == nil {
		panic("GoCloakMock.GetTokenFunc: method is nil but GoCloak.GetToken was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Realm   string
		Options gocloak.TokenOptions
	}{
		Ctx:     ctx,
		Realm:   realm,
		Options: options,
	}
	mock.lockGetToken.Lock()
	mock.calls.GetToken = append(mock.calls.GetToken, callInfo)
	mock.lockGetToken.Unlock()
	return mock.GetTokenFunc(ctx, realm, options)
}

// GetTokenCalls gets all the calls that were made to GetToken.
// Check the length with:
//     len(mockedGoCloak.GetTokenCalls())
func (mock *GoCloakMock) GetTokenCalls() []struct {
	Ctx     context.Context
	Realm   string
	Options gocloak.TokenOptions
} {
	var calls []struct {
		Ctx     context.Context
		Realm   string
		Options gocloak.TokenOptions
	}
	mock.lockGetToken.RLock()
	calls = mock.calls.GetToken
	mock.lockGetToken.RUnlock()
	return calls
}

// GetUserByID calls GetUserByIDFunc.
func (mock *GoCloakMock) GetUserByID(ctx context.Context, accessToken string, realm string, userID string) (*gocloak.User, error) {
	if mock.GetUserByIDFunc == nil {
		panic("GoCloakMock.GetUserByIDFunc: method is nil but GoCloak.GetUserByID was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		UserID      string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		UserID:      userID,
	}
	mock.lockGetUserByID.Lock()
	mock.calls.GetUserByID = append(mock.calls.GetUserByID, callInfo)
	mock.lockGetUserByID.Unlock()
	return mock.GetUserByIDFunc(ctx, accessToken, realm, userID)
}

// GetUserByIDCalls gets all the calls that were made to GetUserByID.
// Check the length with:
//     len(mockedGoCloak.GetUserByIDCalls())
func (mock *GoCloakMock) GetUserByIDCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	UserID      string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		UserID      string
	}
	mock.lockGetUserByID.RLock()
	calls = mock.calls.GetUserByID
	mock.lockGetUserByID.RUnlock()
	return calls
}

// GetUserCount calls GetUserCountFunc.
func (mock *GoCloakMock) GetUserCount(ctx context.Context, accessToken string, realm string, params gocloak.GetUsersParams) (int, error) {
	if mock.GetUserCountFunc == nil {
		panic("GoCloakMock.GetUserCountFunc: method is nil but GoCloak.GetUserCount was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Params      gocloak.GetUsersParams
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		Params:      params,
	}
	mock.lockGetUserCount.Lock()
	mock.calls.GetUserCount = append(mock.calls.GetUserCount, callInfo)
	mock.lockGetUserCount.Unlock()
	return mock.GetUserCountFunc(ctx, accessToken, realm, params)
}

// GetUserCountCalls gets all the calls that were made to GetUserCount.
// Check the length with:
//     len(mockedGoCloak.GetUserCountCalls())
func (mock *GoCloakMock) GetUserCountCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	Params      gocloak.GetUsersParams
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Params      gocloak.GetUsersParams
	}
	mock.lockGetUserCount.RLock()
	calls = mock.calls.GetUserCount
	mock.lockGetUserCount.RUnlock()
	return calls
}

// GetUserFederatedIdentities calls GetUserFederatedIdentitiesFunc.
func (mock *GoCloakMock) GetUserFederatedIdentities(ctx context.Context, token string, realm string, userID string) ([]*gocloak.FederatedIdentityRepresentation, error) {
	if mock.GetUserFederatedIdentitiesFunc == nil {
		panic("GoCloakMock.GetUserFederatedIdentitiesFunc: method is nil but GoCloak.GetUserFederatedIdentities was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		UserID: userID,
	}
	mock.lockGetUserFederatedIdentities.Lock()
	mock.calls.GetUserFederatedIdentities = append(mock.calls.GetUserFederatedIdentities, callInfo)
	mock.lockGetUserFederatedIdentities.Unlock()
	return mock.GetUserFederatedIdentitiesFunc(ctx, token, realm, userID)
}

// GetUserFederatedIdentitiesCalls gets all the calls that were made to GetUserFederatedIdentities.
// Check the length with:
//     len(mockedGoCloak.GetUserFederatedIdentitiesCalls())
func (mock *GoCloakMock) GetUserFederatedIdentitiesCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
	}
	mock.lockGetUserFederatedIdentities.RLock()
	calls = mock.calls.GetUserFederatedIdentities
	mock.lockGetUserFederatedIdentities.RUnlock()
	return calls
}

// GetUserGroups calls GetUserGroupsFunc.
func (mock *GoCloakMock) GetUserGroups(ctx context.Context, accessToken string, realm string, userID string, params gocloak.GetGroupsParams) ([]*gocloak.Group, error) {
	if mock.GetUserGroupsFunc == nil {
		panic("GoCloakMock.GetUserGroupsFunc: method is nil but GoCloak.GetUserGroups was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		UserID      string
		Params      gocloak.GetGroupsParams
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		UserID:      userID,
		Params:      params,
	}
	mock.lockGetUserGroups.Lock()
	mock.calls.GetUserGroups = append(mock.calls.GetUserGroups, callInfo)
	mock.lockGetUserGroups.Unlock()
	return mock.GetUserGroupsFunc(ctx, accessToken, realm, userID, params)
}

// GetUserGroupsCalls gets all the calls that were made to GetUserGroups.
// Check the length with:
//     len(mockedGoCloak.GetUserGroupsCalls())
func (mock *GoCloakMock) GetUserGroupsCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	UserID      string
	Params      gocloak.GetGroupsParams
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		UserID      string
		Params      gocloak.GetGroupsParams
	}
	mock.lockGetUserGroups.RLock()
	calls = mock.calls.GetUserGroups
	mock.lockGetUserGroups.RUnlock()
	return calls
}

// GetUserInfo calls GetUserInfoFunc.
func (mock *GoCloakMock) GetUserInfo(ctx context.Context, accessToken string, realm string) (*gocloak.UserInfo, error) {
	if mock.GetUserInfoFunc == nil {
		panic("GoCloakMock.GetUserInfoFunc: method is nil but GoCloak.GetUserInfo was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
	}
	mock.lockGetUserInfo.Lock()
	mock.calls.GetUserInfo = append(mock.calls.GetUserInfo, callInfo)
	mock.lockGetUserInfo.Unlock()
	return mock.GetUserInfoFunc(ctx, accessToken, realm)
}

// GetUserInfoCalls gets all the calls that were made to GetUserInfo.
// Check the length with:
//     len(mockedGoCloak.GetUserInfoCalls())
func (mock *GoCloakMock) GetUserInfoCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
	}
	mock.lockGetUserInfo.RLock()
	calls = mock.calls.GetUserInfo
	mock.lockGetUserInfo.RUnlock()
	return calls
}

// GetUserOfflineSessionsForClient calls GetUserOfflineSessionsForClientFunc.
func (mock *GoCloakMock) GetUserOfflineSessionsForClient(ctx context.Context, token string, realm string, userID string, clientID string) ([]*gocloak.UserSessionRepresentation, error) {
	if mock.GetUserOfflineSessionsForClientFunc == nil {
		panic("GoCloakMock.GetUserOfflineSessionsForClientFunc: method is nil but GoCloak.GetUserOfflineSessionsForClient was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		UserID   string
		ClientID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		UserID:   userID,
		ClientID: clientID,
	}
	mock.lockGetUserOfflineSessionsForClient.Lock()
	mock.calls.GetUserOfflineSessionsForClient = append(mock.calls.GetUserOfflineSessionsForClient, callInfo)
	mock.lockGetUserOfflineSessionsForClient.Unlock()
	return mock.GetUserOfflineSessionsForClientFunc(ctx, token, realm, userID, clientID)
}

// GetUserOfflineSessionsForClientCalls gets all the calls that were made to GetUserOfflineSessionsForClient.
// Check the length with:
//     len(mockedGoCloak.GetUserOfflineSessionsForClientCalls())
func (mock *GoCloakMock) GetUserOfflineSessionsForClientCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	UserID   string
	ClientID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		UserID   string
		ClientID string
	}
	mock.lockGetUserOfflineSessionsForClient.RLock()
	calls = mock.calls.GetUserOfflineSessionsForClient
	mock.lockGetUserOfflineSessionsForClient.RUnlock()
	return calls
}

// GetUserPermissions calls GetUserPermissionsFunc.
func (mock *GoCloakMock) GetUserPermissions(ctx context.Context, token string, realm string, params gocloak.GetUserPermissionParams) ([]*gocloak.PermissionGrantResponseRepresentation, error) {
	if mock.GetUserPermissionsFunc == nil {
		panic("GoCloakMock.GetUserPermissionsFunc: method is nil but GoCloak.GetUserPermissions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		Params gocloak.GetUserPermissionParams
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		Params: params,
	}
	mock.lockGetUserPermissions.Lock()
	mock.calls.GetUserPermissions = append(mock.calls.GetUserPermissions, callInfo)
	mock.lockGetUserPermissions.Unlock()
	return mock.GetUserPermissionsFunc(ctx, token, realm, params)
}

// GetUserPermissionsCalls gets all the calls that were made to GetUserPermissions.
// Check the length with:
//     len(mockedGoCloak.GetUserPermissionsCalls())
func (mock *GoCloakMock) GetUserPermissionsCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	Params gocloak.GetUserPermissionParams
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		Params gocloak.GetUserPermissionParams
	}
	mock.lockGetUserPermissions.RLock()
	calls = mock.calls.GetUserPermissions
	mock.lockGetUserPermissions.RUnlock()
	return calls
}

// GetUserSessions calls GetUserSessionsFunc.
func (mock *GoCloakMock) GetUserSessions(ctx context.Context, token string, realm string, userID string) ([]*gocloak.UserSessionRepresentation, error) {
	if mock.GetUserSessionsFunc == nil {
		panic("GoCloakMock.GetUserSessionsFunc: method is nil but GoCloak.GetUserSessions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
	}{
		Ctx:    ctx,
		Token:  token,
		Realm:  realm,
		UserID: userID,
	}
	mock.lockGetUserSessions.Lock()
	mock.calls.GetUserSessions = append(mock.calls.GetUserSessions, callInfo)
	mock.lockGetUserSessions.Unlock()
	return mock.GetUserSessionsFunc(ctx, token, realm, userID)
}

// GetUserSessionsCalls gets all the calls that were made to GetUserSessions.
// Check the length with:
//     len(mockedGoCloak.GetUserSessionsCalls())
func (mock *GoCloakMock) GetUserSessionsCalls() []struct {
	Ctx    context.Context
	Token  string
	Realm  string
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		Token  string
		Realm  string
		UserID string
	}
	mock.lockGetUserSessions.RLock()
	calls = mock.calls.GetUserSessions
	mock.lockGetUserSessions.RUnlock()
	return calls
}

// GetUsers calls GetUsersFunc.
func (mock *GoCloakMock) GetUsers(ctx context.Context, accessToken string, realm string, params gocloak.GetUsersParams) ([]*gocloak.User, error) {
	if mock.GetUsersFunc == nil {
		panic("GoCloakMock.GetUsersFunc: method is nil but GoCloak.GetUsers was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Params      gocloak.GetUsersParams
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		Params:      params,
	}
	mock.lockGetUsers.Lock()
	mock.calls.GetUsers = append(mock.calls.GetUsers, callInfo)
	mock.lockGetUsers.Unlock()
	return mock.GetUsersFunc(ctx, accessToken, realm, params)
}

// GetUsersCalls gets all the calls that were made to GetUsers.
// Check the length with:
//     len(mockedGoCloak.GetUsersCalls())
func (mock *GoCloakMock) GetUsersCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	Params      gocloak.GetUsersParams
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Params      gocloak.GetUsersParams
	}
	mock.lockGetUsers.RLock()
	calls = mock.calls.GetUsers
	mock.lockGetUsers.RUnlock()
	return calls
}

// GetUsersByClientRoleName calls GetUsersByClientRoleNameFunc.
func (mock *GoCloakMock) GetUsersByClientRoleName(ctx context.Context, token string, realm string, clientID string, roleName string, params gocloak.GetUsersByRoleParams) ([]*gocloak.User, error) {
	if mock.GetUsersByClientRoleNameFunc == nil {
		panic("GoCloakMock.GetUsersByClientRoleNameFunc: method is nil but GoCloak.GetUsersByClientRoleName was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		RoleName string
		Params   gocloak.GetUsersByRoleParams
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		RoleName: roleName,
		Params:   params,
	}
	mock.lockGetUsersByClientRoleName.Lock()
	mock.calls.GetUsersByClientRoleName = append(mock.calls.GetUsersByClientRoleName, callInfo)
	mock.lockGetUsersByClientRoleName.Unlock()
	return mock.GetUsersByClientRoleNameFunc(ctx, token, realm, clientID, roleName, params)
}

// GetUsersByClientRoleNameCalls gets all the calls that were made to GetUsersByClientRoleName.
// Check the length with:
//     len(mockedGoCloak.GetUsersByClientRoleNameCalls())
func (mock *GoCloakMock) GetUsersByClientRoleNameCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	RoleName string
	Params   gocloak.GetUsersByRoleParams
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		RoleName string
		Params   gocloak.GetUsersByRoleParams
	}
	mock.lockGetUsersByClientRoleName.RLock()
	calls = mock.calls.GetUsersByClientRoleName
	mock.lockGetUsersByClientRoleName.RUnlock()
	return calls
}

// GetUsersByRoleName calls GetUsersByRoleNameFunc.
func (mock *GoCloakMock) GetUsersByRoleName(ctx context.Context, token string, realm string, roleName string) ([]*gocloak.User, error) {
	if mock.GetUsersByRoleNameFunc == nil {
		panic("GoCloakMock.GetUsersByRoleNameFunc: method is nil but GoCloak.GetUsersByRoleName was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		RoleName string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		RoleName: roleName,
	}
	mock.lockGetUsersByRoleName.Lock()
	mock.calls.GetUsersByRoleName = append(mock.calls.GetUsersByRoleName, callInfo)
	mock.lockGetUsersByRoleName.Unlock()
	return mock.GetUsersByRoleNameFunc(ctx, token, realm, roleName)
}

// GetUsersByRoleNameCalls gets all the calls that were made to GetUsersByRoleName.
// Check the length with:
//     len(mockedGoCloak.GetUsersByRoleNameCalls())
func (mock *GoCloakMock) GetUsersByRoleNameCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	RoleName string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		RoleName string
	}
	mock.lockGetUsersByRoleName.RLock()
	calls = mock.calls.GetUsersByRoleName
	mock.lockGetUsersByRoleName.RUnlock()
	return calls
}

// GrantUserPermission calls GrantUserPermissionFunc.
func (mock *GoCloakMock) GrantUserPermission(ctx context.Context, token string, realm string, permission gocloak.PermissionGrantParams) (*gocloak.PermissionGrantResponseRepresentation, error) {
	if mock.GrantUserPermissionFunc == nil {
		panic("GoCloakMock.GrantUserPermissionFunc: method is nil but GoCloak.GrantUserPermission was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Token      string
		Realm      string
		Permission gocloak.PermissionGrantParams
	}{
		Ctx:        ctx,
		Token:      token,
		Realm:      realm,
		Permission: permission,
	}
	mock.lockGrantUserPermission.Lock()
	mock.calls.GrantUserPermission = append(mock.calls.GrantUserPermission, callInfo)
	mock.lockGrantUserPermission.Unlock()
	return mock.GrantUserPermissionFunc(ctx, token, realm, permission)
}

// GrantUserPermissionCalls gets all the calls that were made to GrantUserPermission.
// Check the length with:
//     len(mockedGoCloak.GrantUserPermissionCalls())
func (mock *GoCloakMock) GrantUserPermissionCalls() []struct {
	Ctx        context.Context
	Token      string
	Realm      string
	Permission gocloak.PermissionGrantParams
} {
	var calls []struct {
		Ctx        context.Context
		Token      string
		Realm      string
		Permission gocloak.PermissionGrantParams
	}
	mock.lockGrantUserPermission.RLock()
	calls = mock.calls.GrantUserPermission
	mock.lockGrantUserPermission.RUnlock()
	return calls
}

// ImportIdentityProviderConfig calls ImportIdentityProviderConfigFunc.
func (mock *GoCloakMock) ImportIdentityProviderConfig(ctx context.Context, token string, realm string, fromURL string, providerID string) (map[string]string, error) {
	if mock.ImportIdentityProviderConfigFunc == nil {
		panic("GoCloakMock.ImportIdentityProviderConfigFunc: method is nil but GoCloak.ImportIdentityProviderConfig was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Token      string
		Realm      string
		FromURL    string
		ProviderID string
	}{
		Ctx:        ctx,
		Token:      token,
		Realm:      realm,
		FromURL:    fromURL,
		ProviderID: providerID,
	}
	mock.lockImportIdentityProviderConfig.Lock()
	mock.calls.ImportIdentityProviderConfig = append(mock.calls.ImportIdentityProviderConfig, callInfo)
	mock.lockImportIdentityProviderConfig.Unlock()
	return mock.ImportIdentityProviderConfigFunc(ctx, token, realm, fromURL, providerID)
}

// ImportIdentityProviderConfigCalls gets all the calls that were made to ImportIdentityProviderConfig.
// Check the length with:
//     len(mockedGoCloak.ImportIdentityProviderConfigCalls())
func (mock *GoCloakMock) ImportIdentityProviderConfigCalls() []struct {
	Ctx        context.Context
	Token      string
	Realm      string
	FromURL    string
	ProviderID string
} {
	var calls []struct {
		Ctx        context.Context
		Token      string
		Realm      string
		FromURL    string
		ProviderID string
	}
	mock.lockImportIdentityProviderConfig.RLock()
	calls = mock.calls.ImportIdentityProviderConfig
	mock.lockImportIdentityProviderConfig.RUnlock()
	return calls
}

// Login calls LoginFunc.
func (mock *GoCloakMock) Login(ctx context.Context, clientID string, clientSecret string, realm string, username string, password string) (*gocloak.JWT, error) {
	if mock.LoginFunc == nil {
		panic("GoCloakMock.LoginFunc: method is nil but GoCloak.Login was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ClientID     string
		ClientSecret string
		Realm        string
		Username     string
		Password     string
	}{
		Ctx:          ctx,
		ClientID:     clientID,
		ClientSecret: clientSecret,
		Realm:        realm,
		Username:     username,
		Password:     password,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	return mock.LoginFunc(ctx, clientID, clientSecret, realm, username, password)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//     len(mockedGoCloak.LoginCalls())
func (mock *GoCloakMock) LoginCalls() []struct {
	Ctx          context.Context
	ClientID     string
	ClientSecret string
	Realm        string
	Username     string
	Password     string
} {
	var calls []struct {
		Ctx          context.Context
		ClientID     string
		ClientSecret string
		Realm        string
		Username     string
		Password     string
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}

// LoginAdmin calls LoginAdminFunc.
func (mock *GoCloakMock) LoginAdmin(ctx context.Context, username string, password string, realm string) (*gocloak.JWT, error) {
	if mock.LoginAdminFunc == nil {
		panic("GoCloakMock.LoginAdminFunc: method is nil but GoCloak.LoginAdmin was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Username string
		Password string
		Realm    string
	}{
		Ctx:      ctx,
		Username: username,
		Password: password,
		Realm:    realm,
	}
	mock.lockLoginAdmin.Lock()
	mock.calls.LoginAdmin = append(mock.calls.LoginAdmin, callInfo)
	mock.lockLoginAdmin.Unlock()
	return mock.LoginAdminFunc(ctx, username, password, realm)
}

// LoginAdminCalls gets all the calls that were made to LoginAdmin.
// Check the length with:
//     len(mockedGoCloak.LoginAdminCalls())
func (mock *GoCloakMock) LoginAdminCalls() []struct {
	Ctx      context.Context
	Username string
	Password string
	Realm    string
} {
	var calls []struct {
		Ctx      context.Context
		Username string
		Password string
		Realm    string
	}
	mock.lockLoginAdmin.RLock()
	calls = mock.calls.LoginAdmin
	mock.lockLoginAdmin.RUnlock()
	return calls
}

// LoginClient calls LoginClientFunc.
func (mock *GoCloakMock) LoginClient(ctx context.Context, clientID string, clientSecret string, realm string) (*gocloak.JWT, error) {
	if mock.LoginClientFunc == nil {
		panic("GoCloakMock.LoginClientFunc: method is nil but GoCloak.LoginClient was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ClientID     string
		ClientSecret string
		Realm        string
	}{
		Ctx:          ctx,
		ClientID:     clientID,
		ClientSecret: clientSecret,
		Realm:        realm,
	}
	mock.lockLoginClient.Lock()
	mock.calls.LoginClient = append(mock.calls.LoginClient, callInfo)
	mock.lockLoginClient.Unlock()
	return mock.LoginClientFunc(ctx, clientID, clientSecret, realm)
}

// LoginClientCalls gets all the calls that were made to LoginClient.
// Check the length with:
//     len(mockedGoCloak.LoginClientCalls())
func (mock *GoCloakMock) LoginClientCalls() []struct {
	Ctx          context.Context
	ClientID     string
	ClientSecret string
	Realm        string
} {
	var calls []struct {
		Ctx          context.Context
		ClientID     string
		ClientSecret string
		Realm        string
	}
	mock.lockLoginClient.RLock()
	calls = mock.calls.LoginClient
	mock.lockLoginClient.RUnlock()
	return calls
}

// LoginClientSignedJWT calls LoginClientSignedJWTFunc.
func (mock *GoCloakMock) LoginClientSignedJWT(ctx context.Context, clientID string, realm string, key interface{}, signedMethod jwt.SigningMethod, expiresAt *jwt.Time) (*gocloak.JWT, error) {
	if mock.LoginClientSignedJWTFunc == nil {
		panic("GoCloakMock.LoginClientSignedJWTFunc: method is nil but GoCloak.LoginClientSignedJWT was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ClientID     string
		Realm        string
		Key          interface{}
		SignedMethod jwt.SigningMethod
		ExpiresAt    *jwt.Time
	}{
		Ctx:          ctx,
		ClientID:     clientID,
		Realm:        realm,
		Key:          key,
		SignedMethod: signedMethod,
		ExpiresAt:    expiresAt,
	}
	mock.lockLoginClientSignedJWT.Lock()
	mock.calls.LoginClientSignedJWT = append(mock.calls.LoginClientSignedJWT, callInfo)
	mock.lockLoginClientSignedJWT.Unlock()
	return mock.LoginClientSignedJWTFunc(ctx, clientID, realm, key, signedMethod, expiresAt)
}

// LoginClientSignedJWTCalls gets all the calls that were made to LoginClientSignedJWT.
// Check the length with:
//     len(mockedGoCloak.LoginClientSignedJWTCalls())
func (mock *GoCloakMock) LoginClientSignedJWTCalls() []struct {
	Ctx          context.Context
	ClientID     string
	Realm        string
	Key          interface{}
	SignedMethod jwt.SigningMethod
	ExpiresAt    *jwt.Time
} {
	var calls []struct {
		Ctx          context.Context
		ClientID     string
		Realm        string
		Key          interface{}
		SignedMethod jwt.SigningMethod
		ExpiresAt    *jwt.Time
	}
	mock.lockLoginClientSignedJWT.RLock()
	calls = mock.calls.LoginClientSignedJWT
	mock.lockLoginClientSignedJWT.RUnlock()
	return calls
}

// LoginOtp calls LoginOtpFunc.
func (mock *GoCloakMock) LoginOtp(ctx context.Context, clientID string, clientSecret string, realm string, username string, password string, totp string) (*gocloak.JWT, error) {
	if mock.LoginOtpFunc == nil {
		panic("GoCloakMock.LoginOtpFunc: method is nil but GoCloak.LoginOtp was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ClientID     string
		ClientSecret string
		Realm        string
		Username     string
		Password     string
		Totp         string
	}{
		Ctx:          ctx,
		ClientID:     clientID,
		ClientSecret: clientSecret,
		Realm:        realm,
		Username:     username,
		Password:     password,
		Totp:         totp,
	}
	mock.lockLoginOtp.Lock()
	mock.calls.LoginOtp = append(mock.calls.LoginOtp, callInfo)
	mock.lockLoginOtp.Unlock()
	return mock.LoginOtpFunc(ctx, clientID, clientSecret, realm, username, password, totp)
}

// LoginOtpCalls gets all the calls that were made to LoginOtp.
// Check the length with:
//     len(mockedGoCloak.LoginOtpCalls())
func (mock *GoCloakMock) LoginOtpCalls() []struct {
	Ctx          context.Context
	ClientID     string
	ClientSecret string
	Realm        string
	Username     string
	Password     string
	Totp         string
} {
	var calls []struct {
		Ctx          context.Context
		ClientID     string
		ClientSecret string
		Realm        string
		Username     string
		Password     string
		Totp         string
	}
	mock.lockLoginOtp.RLock()
	calls = mock.calls.LoginOtp
	mock.lockLoginOtp.RUnlock()
	return calls
}

// Logout calls LogoutFunc.
func (mock *GoCloakMock) Logout(ctx context.Context, clientID string, clientSecret string, realm string, refreshToken string) error {
	if mock.LogoutFunc == nil {
		panic("GoCloakMock.LogoutFunc: method is nil but GoCloak.Logout was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ClientID     string
		ClientSecret string
		Realm        string
		RefreshToken string
	}{
		Ctx:          ctx,
		ClientID:     clientID,
		ClientSecret: clientSecret,
		Realm:        realm,
		RefreshToken: refreshToken,
	}
	mock.lockLogout.Lock()
	mock.calls.Logout = append(mock.calls.Logout, callInfo)
	mock.lockLogout.Unlock()
	return mock.LogoutFunc(ctx, clientID, clientSecret, realm, refreshToken)
}

// LogoutCalls gets all the calls that were made to Logout.
// Check the length with:
//     len(mockedGoCloak.LogoutCalls())
func (mock *GoCloakMock) LogoutCalls() []struct {
	Ctx          context.Context
	ClientID     string
	ClientSecret string
	Realm        string
	RefreshToken string
} {
	var calls []struct {
		Ctx          context.Context
		ClientID     string
		ClientSecret string
		Realm        string
		RefreshToken string
	}
	mock.lockLogout.RLock()
	calls = mock.calls.Logout
	mock.lockLogout.RUnlock()
	return calls
}

// LogoutAllSessions calls LogoutAllSessionsFunc.
func (mock *GoCloakMock) LogoutAllSessions(ctx context.Context, accessToken string, realm string, userID string) error {
	if mock.LogoutAllSessionsFunc == nil {
		panic("GoCloakMock.LogoutAllSessionsFunc: method is nil but GoCloak.LogoutAllSessions was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		UserID      string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		UserID:      userID,
	}
	mock.lockLogoutAllSessions.Lock()
	mock.calls.LogoutAllSessions = append(mock.calls.LogoutAllSessions, callInfo)
	mock.lockLogoutAllSessions.Unlock()
	return mock.LogoutAllSessionsFunc(ctx, accessToken, realm, userID)
}

// LogoutAllSessionsCalls gets all the calls that were made to LogoutAllSessions.
// Check the length with:
//     len(mockedGoCloak.LogoutAllSessionsCalls())
func (mock *GoCloakMock) LogoutAllSessionsCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	UserID      string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		UserID      string
	}
	mock.lockLogoutAllSessions.RLock()
	calls = mock.calls.LogoutAllSessions
	mock.lockLogoutAllSessions.RUnlock()
	return calls
}

// LogoutPublicClient calls LogoutPublicClientFunc.
func (mock *GoCloakMock) LogoutPublicClient(ctx context.Context, clientID string, realm string, accessToken string, refreshToken string) error {
	if mock.LogoutPublicClientFunc == nil {
		panic("GoCloakMock.LogoutPublicClientFunc: method is nil but GoCloak.LogoutPublicClient was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ClientID     string
		Realm        string
		AccessToken  string
		RefreshToken string
	}{
		Ctx:          ctx,
		ClientID:     clientID,
		Realm:        realm,
		AccessToken:  accessToken,
		RefreshToken: refreshToken,
	}
	mock.lockLogoutPublicClient.Lock()
	mock.calls.LogoutPublicClient = append(mock.calls.LogoutPublicClient, callInfo)
	mock.lockLogoutPublicClient.Unlock()
	return mock.LogoutPublicClientFunc(ctx, clientID, realm, accessToken, refreshToken)
}

// LogoutPublicClientCalls gets all the calls that were made to LogoutPublicClient.
// Check the length with:
//     len(mockedGoCloak.LogoutPublicClientCalls())
func (mock *GoCloakMock) LogoutPublicClientCalls() []struct {
	Ctx          context.Context
	ClientID     string
	Realm        string
	AccessToken  string
	RefreshToken string
} {
	var calls []struct {
		Ctx          context.Context
		ClientID     string
		Realm        string
		AccessToken  string
		RefreshToken string
	}
	mock.lockLogoutPublicClient.RLock()
	calls = mock.calls.LogoutPublicClient
	mock.lockLogoutPublicClient.RUnlock()
	return calls
}

// LogoutUserSession calls LogoutUserSessionFunc.
func (mock *GoCloakMock) LogoutUserSession(ctx context.Context, accessToken string, realm string, session string) error {
	if mock.LogoutUserSessionFunc == nil {
		panic("GoCloakMock.LogoutUserSessionFunc: method is nil but GoCloak.LogoutUserSession was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Session     string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		Session:     session,
	}
	mock.lockLogoutUserSession.Lock()
	mock.calls.LogoutUserSession = append(mock.calls.LogoutUserSession, callInfo)
	mock.lockLogoutUserSession.Unlock()
	return mock.LogoutUserSessionFunc(ctx, accessToken, realm, session)
}

// LogoutUserSessionCalls gets all the calls that were made to LogoutUserSession.
// Check the length with:
//     len(mockedGoCloak.LogoutUserSessionCalls())
func (mock *GoCloakMock) LogoutUserSessionCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	Session     string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Session     string
	}
	mock.lockLogoutUserSession.RLock()
	calls = mock.calls.LogoutUserSession
	mock.lockLogoutUserSession.RUnlock()
	return calls
}

// MoveCredentialBehind calls MoveCredentialBehindFunc.
func (mock *GoCloakMock) MoveCredentialBehind(ctx context.Context, token string, realm string, userID string, credentialID string, newPreviousCredentialID string) error {
	if mock.MoveCredentialBehindFunc == nil {
		panic("GoCloakMock.MoveCredentialBehindFunc: method is nil but GoCloak.MoveCredentialBehind was just called")
	}
	callInfo := struct {
		Ctx                     context.Context
		Token                   string
		Realm                   string
		UserID                  string
		CredentialID            string
		NewPreviousCredentialID string
	}{
		Ctx:                     ctx,
		Token:                   token,
		Realm:                   realm,
		UserID:                  userID,
		CredentialID:            credentialID,
		NewPreviousCredentialID: newPreviousCredentialID,
	}
	mock.lockMoveCredentialBehind.Lock()
	mock.calls.MoveCredentialBehind = append(mock.calls.MoveCredentialBehind, callInfo)
	mock.lockMoveCredentialBehind.Unlock()
	return mock.MoveCredentialBehindFunc(ctx, token, realm, userID, credentialID, newPreviousCredentialID)
}

// MoveCredentialBehindCalls gets all the calls that were made to MoveCredentialBehind.
// Check the length with:
//     len(mockedGoCloak.MoveCredentialBehindCalls())
func (mock *GoCloakMock) MoveCredentialBehindCalls() []struct {
	Ctx                     context.Context
	Token                   string
	Realm                   string
	UserID                  string
	CredentialID            string
	NewPreviousCredentialID string
} {
	var calls []struct {
		Ctx                     context.Context
		Token                   string
		Realm                   string
		UserID                  string
		CredentialID            string
		NewPreviousCredentialID string
	}
	mock.lockMoveCredentialBehind.RLock()
	calls = mock.calls.MoveCredentialBehind
	mock.lockMoveCredentialBehind.RUnlock()
	return calls
}

// MoveCredentialToFirst calls MoveCredentialToFirstFunc.
func (mock *GoCloakMock) MoveCredentialToFirst(ctx context.Context, token string, realm string, userID string, credentialID string) error {
	if mock.MoveCredentialToFirstFunc == nil {
		panic("GoCloakMock.MoveCredentialToFirstFunc: method is nil but GoCloak.MoveCredentialToFirst was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Token        string
		Realm        string
		UserID       string
		CredentialID string
	}{
		Ctx:          ctx,
		Token:        token,
		Realm:        realm,
		UserID:       userID,
		CredentialID: credentialID,
	}
	mock.lockMoveCredentialToFirst.Lock()
	mock.calls.MoveCredentialToFirst = append(mock.calls.MoveCredentialToFirst, callInfo)
	mock.lockMoveCredentialToFirst.Unlock()
	return mock.MoveCredentialToFirstFunc(ctx, token, realm, userID, credentialID)
}

// MoveCredentialToFirstCalls gets all the calls that were made to MoveCredentialToFirst.
// Check the length with:
//     len(mockedGoCloak.MoveCredentialToFirstCalls())
func (mock *GoCloakMock) MoveCredentialToFirstCalls() []struct {
	Ctx          context.Context
	Token        string
	Realm        string
	UserID       string
	CredentialID string
} {
	var calls []struct {
		Ctx          context.Context
		Token        string
		Realm        string
		UserID       string
		CredentialID string
	}
	mock.lockMoveCredentialToFirst.RLock()
	calls = mock.calls.MoveCredentialToFirst
	mock.lockMoveCredentialToFirst.RUnlock()
	return calls
}

// RefreshToken calls RefreshTokenFunc.
func (mock *GoCloakMock) RefreshToken(ctx context.Context, refreshToken string, clientID string, clientSecret string, realm string) (*gocloak.JWT, error) {
	if mock.RefreshTokenFunc == nil {
		panic("GoCloakMock.RefreshTokenFunc: method is nil but GoCloak.RefreshToken was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		RefreshToken string
		ClientID     string
		ClientSecret string
		Realm        string
	}{
		Ctx:          ctx,
		RefreshToken: refreshToken,
		ClientID:     clientID,
		ClientSecret: clientSecret,
		Realm:        realm,
	}
	mock.lockRefreshToken.Lock()
	mock.calls.RefreshToken = append(mock.calls.RefreshToken, callInfo)
	mock.lockRefreshToken.Unlock()
	return mock.RefreshTokenFunc(ctx, refreshToken, clientID, clientSecret, realm)
}

// RefreshTokenCalls gets all the calls that were made to RefreshToken.
// Check the length with:
//     len(mockedGoCloak.RefreshTokenCalls())
func (mock *GoCloakMock) RefreshTokenCalls() []struct {
	Ctx          context.Context
	RefreshToken string
	ClientID     string
	ClientSecret string
	Realm        string
} {
	var calls []struct {
		Ctx          context.Context
		RefreshToken string
		ClientID     string
		ClientSecret string
		Realm        string
	}
	mock.lockRefreshToken.RLock()
	calls = mock.calls.RefreshToken
	mock.lockRefreshToken.RUnlock()
	return calls
}

// RegenerateClientSecret calls RegenerateClientSecretFunc.
func (mock *GoCloakMock) RegenerateClientSecret(ctx context.Context, token string, realm string, clientID string) (*gocloak.CredentialRepresentation, error) {
	if mock.RegenerateClientSecretFunc == nil {
		panic("GoCloakMock.RegenerateClientSecretFunc: method is nil but GoCloak.RegenerateClientSecret was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
	}
	mock.lockRegenerateClientSecret.Lock()
	mock.calls.RegenerateClientSecret = append(mock.calls.RegenerateClientSecret, callInfo)
	mock.lockRegenerateClientSecret.Unlock()
	return mock.RegenerateClientSecretFunc(ctx, token, realm, clientID)
}

// RegenerateClientSecretCalls gets all the calls that were made to RegenerateClientSecret.
// Check the length with:
//     len(mockedGoCloak.RegenerateClientSecretCalls())
func (mock *GoCloakMock) RegenerateClientSecretCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
	}
	mock.lockRegenerateClientSecret.RLock()
	calls = mock.calls.RegenerateClientSecret
	mock.lockRegenerateClientSecret.RUnlock()
	return calls
}

// RemoveDefaultGroup calls RemoveDefaultGroupFunc.
func (mock *GoCloakMock) RemoveDefaultGroup(ctx context.Context, accessToken string, realm string, groupID string) error {
	if mock.RemoveDefaultGroupFunc == nil {
		panic("GoCloakMock.RemoveDefaultGroupFunc: method is nil but GoCloak.RemoveDefaultGroup was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		GroupID     string
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		GroupID:     groupID,
	}
	mock.lockRemoveDefaultGroup.Lock()
	mock.calls.RemoveDefaultGroup = append(mock.calls.RemoveDefaultGroup, callInfo)
	mock.lockRemoveDefaultGroup.Unlock()
	return mock.RemoveDefaultGroupFunc(ctx, accessToken, realm, groupID)
}

// RemoveDefaultGroupCalls gets all the calls that were made to RemoveDefaultGroup.
// Check the length with:
//     len(mockedGoCloak.RemoveDefaultGroupCalls())
func (mock *GoCloakMock) RemoveDefaultGroupCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	GroupID     string
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		GroupID     string
	}
	mock.lockRemoveDefaultGroup.RLock()
	calls = mock.calls.RemoveDefaultGroup
	mock.lockRemoveDefaultGroup.RUnlock()
	return calls
}

// RemoveDefaultScopeFromClient calls RemoveDefaultScopeFromClientFunc.
func (mock *GoCloakMock) RemoveDefaultScopeFromClient(ctx context.Context, token string, realm string, clientID string, scopeID string) error {
	if mock.RemoveDefaultScopeFromClientFunc == nil {
		panic("GoCloakMock.RemoveDefaultScopeFromClientFunc: method is nil but GoCloak.RemoveDefaultScopeFromClient was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		ScopeID  string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		ScopeID:  scopeID,
	}
	mock.lockRemoveDefaultScopeFromClient.Lock()
	mock.calls.RemoveDefaultScopeFromClient = append(mock.calls.RemoveDefaultScopeFromClient, callInfo)
	mock.lockRemoveDefaultScopeFromClient.Unlock()
	return mock.RemoveDefaultScopeFromClientFunc(ctx, token, realm, clientID, scopeID)
}

// RemoveDefaultScopeFromClientCalls gets all the calls that were made to RemoveDefaultScopeFromClient.
// Check the length with:
//     len(mockedGoCloak.RemoveDefaultScopeFromClientCalls())
func (mock *GoCloakMock) RemoveDefaultScopeFromClientCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	ScopeID  string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		ScopeID  string
	}
	mock.lockRemoveDefaultScopeFromClient.RLock()
	calls = mock.calls.RemoveDefaultScopeFromClient
	mock.lockRemoveDefaultScopeFromClient.RUnlock()
	return calls
}

// RemoveOptionalScopeFromClient calls RemoveOptionalScopeFromClientFunc.
func (mock *GoCloakMock) RemoveOptionalScopeFromClient(ctx context.Context, token string, realm string, clientID string, scopeID string) error {
	if mock.RemoveOptionalScopeFromClientFunc == nil {
		panic("GoCloakMock.RemoveOptionalScopeFromClientFunc: method is nil but GoCloak.RemoveOptionalScopeFromClient was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		ScopeID  string
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		ScopeID:  scopeID,
	}
	mock.lockRemoveOptionalScopeFromClient.Lock()
	mock.calls.RemoveOptionalScopeFromClient = append(mock.calls.RemoveOptionalScopeFromClient, callInfo)
	mock.lockRemoveOptionalScopeFromClient.Unlock()
	return mock.RemoveOptionalScopeFromClientFunc(ctx, token, realm, clientID, scopeID)
}

// RemoveOptionalScopeFromClientCalls gets all the calls that were made to RemoveOptionalScopeFromClient.
// Check the length with:
//     len(mockedGoCloak.RemoveOptionalScopeFromClientCalls())
func (mock *GoCloakMock) RemoveOptionalScopeFromClientCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	ScopeID  string
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		ScopeID  string
	}
	mock.lockRemoveOptionalScopeFromClient.RLock()
	calls = mock.calls.RemoveOptionalScopeFromClient
	mock.lockRemoveOptionalScopeFromClient.RUnlock()
	return calls
}

// RestyClient calls RestyClientFunc.
func (mock *GoCloakMock) RestyClient() *resty.Client {
	if mock.RestyClientFunc == nil {
		panic("GoCloakMock.RestyClientFunc: method is nil but GoCloak.RestyClient was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRestyClient.Lock()
	mock.calls.RestyClient = append(mock.calls.RestyClient, callInfo)
	mock.lockRestyClient.Unlock()
	return mock.RestyClientFunc()
}

// RestyClientCalls gets all the calls that were made to RestyClient.
// Check the length with:
//     len(mockedGoCloak.RestyClientCalls())
func (mock *GoCloakMock) RestyClientCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRestyClient.RLock()
	calls = mock.calls.RestyClient
	mock.lockRestyClient.RUnlock()
	return calls
}

// RetrospectToken calls RetrospectTokenFunc.
func (mock *GoCloakMock) RetrospectToken(ctx context.Context, accessToken string, clientID string, clientSecret string, realm string) (*gocloak.RetrospecTokenResult, error) {
	if mock.RetrospectTokenFunc == nil {
		panic("GoCloakMock.RetrospectTokenFunc: method is nil but GoCloak.RetrospectToken was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		AccessToken  string
		ClientID     string
		ClientSecret string
		Realm        string
	}{
		Ctx:          ctx,
		AccessToken:  accessToken,
		ClientID:     clientID,
		ClientSecret: clientSecret,
		Realm:        realm,
	}
	mock.lockRetrospectToken.Lock()
	mock.calls.RetrospectToken = append(mock.calls.RetrospectToken, callInfo)
	mock.lockRetrospectToken.Unlock()
	return mock.RetrospectTokenFunc(ctx, accessToken, clientID, clientSecret, realm)
}

// RetrospectTokenCalls gets all the calls that were made to RetrospectToken.
// Check the length with:
//     len(mockedGoCloak.RetrospectTokenCalls())
func (mock *GoCloakMock) RetrospectTokenCalls() []struct {
	Ctx          context.Context
	AccessToken  string
	ClientID     string
	ClientSecret string
	Realm        string
} {
	var calls []struct {
		Ctx          context.Context
		AccessToken  string
		ClientID     string
		ClientSecret string
		Realm        string
	}
	mock.lockRetrospectToken.RLock()
	calls = mock.calls.RetrospectToken
	mock.lockRetrospectToken.RUnlock()
	return calls
}

// SetPassword calls SetPasswordFunc.
func (mock *GoCloakMock) SetPassword(ctx context.Context, token string, userID string, realm string, password string, temporary bool) error {
	if mock.SetPasswordFunc == nil {
		panic("GoCloakMock.SetPasswordFunc: method is nil but GoCloak.SetPassword was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Token     string
		UserID    string
		Realm     string
		Password  string
		Temporary bool
	}{
		Ctx:       ctx,
		Token:     token,
		UserID:    userID,
		Realm:     realm,
		Password:  password,
		Temporary: temporary,
	}
	mock.lockSetPassword.Lock()
	mock.calls.SetPassword = append(mock.calls.SetPassword, callInfo)
	mock.lockSetPassword.Unlock()
	return mock.SetPasswordFunc(ctx, token, userID, realm, password, temporary)
}

// SetPasswordCalls gets all the calls that were made to SetPassword.
// Check the length with:
//     len(mockedGoCloak.SetPasswordCalls())
func (mock *GoCloakMock) SetPasswordCalls() []struct {
	Ctx       context.Context
	Token     string
	UserID    string
	Realm     string
	Password  string
	Temporary bool
} {
	var calls []struct {
		Ctx       context.Context
		Token     string
		UserID    string
		Realm     string
		Password  string
		Temporary bool
	}
	mock.lockSetPassword.RLock()
	calls = mock.calls.SetPassword
	mock.lockSetPassword.RUnlock()
	return calls
}

// SetRestyClient calls SetRestyClientFunc.
func (mock *GoCloakMock) SetRestyClient(restyClient *resty.Client) {
	if mock.SetRestyClientFunc == nil {
		panic("GoCloakMock.SetRestyClientFunc: method is nil but GoCloak.SetRestyClient was just called")
	}
	callInfo := struct {
		RestyClient *resty.Client
	}{
		RestyClient: restyClient,
	}
	mock.lockSetRestyClient.Lock()
	mock.calls.SetRestyClient = append(mock.calls.SetRestyClient, callInfo)
	mock.lockSetRestyClient.Unlock()
	mock.SetRestyClientFunc(restyClient)
}

// SetRestyClientCalls gets all the calls that were made to SetRestyClient.
// Check the length with:
//     len(mockedGoCloak.SetRestyClientCalls())
func (mock *GoCloakMock) SetRestyClientCalls() []struct {
	RestyClient *resty.Client
} {
	var calls []struct {
		RestyClient *resty.Client
	}
	mock.lockSetRestyClient.RLock()
	calls = mock.calls.SetRestyClient
	mock.lockSetRestyClient.RUnlock()
	return calls
}

// UpdateClient calls UpdateClientFunc.
func (mock *GoCloakMock) UpdateClient(ctx context.Context, accessToken string, realm string, updatedClient gocloak.Client) error {
	if mock.UpdateClientFunc == nil {
		panic("GoCloakMock.UpdateClientFunc: method is nil but GoCloak.UpdateClient was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		AccessToken   string
		Realm         string
		UpdatedClient gocloak.Client
	}{
		Ctx:           ctx,
		AccessToken:   accessToken,
		Realm:         realm,
		UpdatedClient: updatedClient,
	}
	mock.lockUpdateClient.Lock()
	mock.calls.UpdateClient = append(mock.calls.UpdateClient, callInfo)
	mock.lockUpdateClient.Unlock()
	return mock.UpdateClientFunc(ctx, accessToken, realm, updatedClient)
}

// UpdateClientCalls gets all the calls that were made to UpdateClient.
// Check the length with:
//     len(mockedGoCloak.UpdateClientCalls())
func (mock *GoCloakMock) UpdateClientCalls() []struct {
	Ctx           context.Context
	AccessToken   string
	Realm         string
	UpdatedClient gocloak.Client
} {
	var calls []struct {
		Ctx           context.Context
		AccessToken   string
		Realm         string
		UpdatedClient gocloak.Client
	}
	mock.lockUpdateClient.RLock()
	calls = mock.calls.UpdateClient
	mock.lockUpdateClient.RUnlock()
	return calls
}

// UpdateClientProtocolMapper calls UpdateClientProtocolMapperFunc.
func (mock *GoCloakMock) UpdateClientProtocolMapper(ctx context.Context, token string, realm string, clientID string, mapperID string, mapper gocloak.ProtocolMapperRepresentation) error {
	if mock.UpdateClientProtocolMapperFunc == nil {
		panic("GoCloakMock.UpdateClientProtocolMapperFunc: method is nil but GoCloak.UpdateClientProtocolMapper was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		MapperID string
		Mapper   gocloak.ProtocolMapperRepresentation
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		MapperID: mapperID,
		Mapper:   mapper,
	}
	mock.lockUpdateClientProtocolMapper.Lock()
	mock.calls.UpdateClientProtocolMapper = append(mock.calls.UpdateClientProtocolMapper, callInfo)
	mock.lockUpdateClientProtocolMapper.Unlock()
	return mock.UpdateClientProtocolMapperFunc(ctx, token, realm, clientID, mapperID, mapper)
}

// UpdateClientProtocolMapperCalls gets all the calls that were made to UpdateClientProtocolMapper.
// Check the length with:
//     len(mockedGoCloak.UpdateClientProtocolMapperCalls())
func (mock *GoCloakMock) UpdateClientProtocolMapperCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	MapperID string
	Mapper   gocloak.ProtocolMapperRepresentation
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		MapperID string
		Mapper   gocloak.ProtocolMapperRepresentation
	}
	mock.lockUpdateClientProtocolMapper.RLock()
	calls = mock.calls.UpdateClientProtocolMapper
	mock.lockUpdateClientProtocolMapper.RUnlock()
	return calls
}

// UpdateClientScope calls UpdateClientScopeFunc.
func (mock *GoCloakMock) UpdateClientScope(ctx context.Context, accessToken string, realm string, scope gocloak.ClientScope) error {
	if mock.UpdateClientScopeFunc == nil {
		panic("GoCloakMock.UpdateClientScopeFunc: method is nil but GoCloak.UpdateClientScope was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Scope       gocloak.ClientScope
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		Scope:       scope,
	}
	mock.lockUpdateClientScope.Lock()
	mock.calls.UpdateClientScope = append(mock.calls.UpdateClientScope, callInfo)
	mock.lockUpdateClientScope.Unlock()
	return mock.UpdateClientScopeFunc(ctx, accessToken, realm, scope)
}

// UpdateClientScopeCalls gets all the calls that were made to UpdateClientScope.
// Check the length with:
//     len(mockedGoCloak.UpdateClientScopeCalls())
func (mock *GoCloakMock) UpdateClientScopeCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	Scope       gocloak.ClientScope
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		Scope       gocloak.ClientScope
	}
	mock.lockUpdateClientScope.RLock()
	calls = mock.calls.UpdateClientScope
	mock.lockUpdateClientScope.RUnlock()
	return calls
}

// UpdateCredentialUserLabel calls UpdateCredentialUserLabelFunc.
func (mock *GoCloakMock) UpdateCredentialUserLabel(ctx context.Context, token string, realm string, userID string, credentialID string, userLabel string) error {
	if mock.UpdateCredentialUserLabelFunc == nil {
		panic("GoCloakMock.UpdateCredentialUserLabelFunc: method is nil but GoCloak.UpdateCredentialUserLabel was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Token        string
		Realm        string
		UserID       string
		CredentialID string
		UserLabel    string
	}{
		Ctx:          ctx,
		Token:        token,
		Realm:        realm,
		UserID:       userID,
		CredentialID: credentialID,
		UserLabel:    userLabel,
	}
	mock.lockUpdateCredentialUserLabel.Lock()
	mock.calls.UpdateCredentialUserLabel = append(mock.calls.UpdateCredentialUserLabel, callInfo)
	mock.lockUpdateCredentialUserLabel.Unlock()
	return mock.UpdateCredentialUserLabelFunc(ctx, token, realm, userID, credentialID, userLabel)
}

// UpdateCredentialUserLabelCalls gets all the calls that were made to UpdateCredentialUserLabel.
// Check the length with:
//     len(mockedGoCloak.UpdateCredentialUserLabelCalls())
func (mock *GoCloakMock) UpdateCredentialUserLabelCalls() []struct {
	Ctx          context.Context
	Token        string
	Realm        string
	UserID       string
	CredentialID string
	UserLabel    string
} {
	var calls []struct {
		Ctx          context.Context
		Token        string
		Realm        string
		UserID       string
		CredentialID string
		UserLabel    string
	}
	mock.lockUpdateCredentialUserLabel.RLock()
	calls = mock.calls.UpdateCredentialUserLabel
	mock.lockUpdateCredentialUserLabel.RUnlock()
	return calls
}

// UpdateGroup calls UpdateGroupFunc.
func (mock *GoCloakMock) UpdateGroup(ctx context.Context, accessToken string, realm string, updatedGroup gocloak.Group) error {
	if mock.UpdateGroupFunc == nil {
		panic("GoCloakMock.UpdateGroupFunc: method is nil but GoCloak.UpdateGroup was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		AccessToken  string
		Realm        string
		UpdatedGroup gocloak.Group
	}{
		Ctx:          ctx,
		AccessToken:  accessToken,
		Realm:        realm,
		UpdatedGroup: updatedGroup,
	}
	mock.lockUpdateGroup.Lock()
	mock.calls.UpdateGroup = append(mock.calls.UpdateGroup, callInfo)
	mock.lockUpdateGroup.Unlock()
	return mock.UpdateGroupFunc(ctx, accessToken, realm, updatedGroup)
}

// UpdateGroupCalls gets all the calls that were made to UpdateGroup.
// Check the length with:
//     len(mockedGoCloak.UpdateGroupCalls())
func (mock *GoCloakMock) UpdateGroupCalls() []struct {
	Ctx          context.Context
	AccessToken  string
	Realm        string
	UpdatedGroup gocloak.Group
} {
	var calls []struct {
		Ctx          context.Context
		AccessToken  string
		Realm        string
		UpdatedGroup gocloak.Group
	}
	mock.lockUpdateGroup.RLock()
	calls = mock.calls.UpdateGroup
	mock.lockUpdateGroup.RUnlock()
	return calls
}

// UpdateIdentityProvider calls UpdateIdentityProviderFunc.
func (mock *GoCloakMock) UpdateIdentityProvider(ctx context.Context, token string, realm string, alias string, providerRep gocloak.IdentityProviderRepresentation) error {
	if mock.UpdateIdentityProviderFunc == nil {
		panic("GoCloakMock.UpdateIdentityProviderFunc: method is nil but GoCloak.UpdateIdentityProvider was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Token       string
		Realm       string
		Alias       string
		ProviderRep gocloak.IdentityProviderRepresentation
	}{
		Ctx:         ctx,
		Token:       token,
		Realm:       realm,
		Alias:       alias,
		ProviderRep: providerRep,
	}
	mock.lockUpdateIdentityProvider.Lock()
	mock.calls.UpdateIdentityProvider = append(mock.calls.UpdateIdentityProvider, callInfo)
	mock.lockUpdateIdentityProvider.Unlock()
	return mock.UpdateIdentityProviderFunc(ctx, token, realm, alias, providerRep)
}

// UpdateIdentityProviderCalls gets all the calls that were made to UpdateIdentityProvider.
// Check the length with:
//     len(mockedGoCloak.UpdateIdentityProviderCalls())
func (mock *GoCloakMock) UpdateIdentityProviderCalls() []struct {
	Ctx         context.Context
	Token       string
	Realm       string
	Alias       string
	ProviderRep gocloak.IdentityProviderRepresentation
} {
	var calls []struct {
		Ctx         context.Context
		Token       string
		Realm       string
		Alias       string
		ProviderRep gocloak.IdentityProviderRepresentation
	}
	mock.lockUpdateIdentityProvider.RLock()
	calls = mock.calls.UpdateIdentityProvider
	mock.lockUpdateIdentityProvider.RUnlock()
	return calls
}

// UpdatePermission calls UpdatePermissionFunc.
func (mock *GoCloakMock) UpdatePermission(ctx context.Context, token string, realm string, clientID string, permission gocloak.PermissionRepresentation) error {
	if mock.UpdatePermissionFunc == nil {
		panic("GoCloakMock.UpdatePermissionFunc: method is nil but GoCloak.UpdatePermission was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Token      string
		Realm      string
		ClientID   string
		Permission gocloak.PermissionRepresentation
	}{
		Ctx:        ctx,
		Token:      token,
		Realm:      realm,
		ClientID:   clientID,
		Permission: permission,
	}
	mock.lockUpdatePermission.Lock()
	mock.calls.UpdatePermission = append(mock.calls.UpdatePermission, callInfo)
	mock.lockUpdatePermission.Unlock()
	return mock.UpdatePermissionFunc(ctx, token, realm, clientID, permission)
}

// UpdatePermissionCalls gets all the calls that were made to UpdatePermission.
// Check the length with:
//     len(mockedGoCloak.UpdatePermissionCalls())
func (mock *GoCloakMock) UpdatePermissionCalls() []struct {
	Ctx        context.Context
	Token      string
	Realm      string
	ClientID   string
	Permission gocloak.PermissionRepresentation
} {
	var calls []struct {
		Ctx        context.Context
		Token      string
		Realm      string
		ClientID   string
		Permission gocloak.PermissionRepresentation
	}
	mock.lockUpdatePermission.RLock()
	calls = mock.calls.UpdatePermission
	mock.lockUpdatePermission.RUnlock()
	return calls
}

// UpdatePolicy calls UpdatePolicyFunc.
func (mock *GoCloakMock) UpdatePolicy(ctx context.Context, token string, realm string, clientID string, policy gocloak.PolicyRepresentation) error {
	if mock.UpdatePolicyFunc == nil {
		panic("GoCloakMock.UpdatePolicyFunc: method is nil but GoCloak.UpdatePolicy was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Policy   gocloak.PolicyRepresentation
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		Policy:   policy,
	}
	mock.lockUpdatePolicy.Lock()
	mock.calls.UpdatePolicy = append(mock.calls.UpdatePolicy, callInfo)
	mock.lockUpdatePolicy.Unlock()
	return mock.UpdatePolicyFunc(ctx, token, realm, clientID, policy)
}

// UpdatePolicyCalls gets all the calls that were made to UpdatePolicy.
// Check the length with:
//     len(mockedGoCloak.UpdatePolicyCalls())
func (mock *GoCloakMock) UpdatePolicyCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	Policy   gocloak.PolicyRepresentation
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Policy   gocloak.PolicyRepresentation
	}
	mock.lockUpdatePolicy.RLock()
	calls = mock.calls.UpdatePolicy
	mock.lockUpdatePolicy.RUnlock()
	return calls
}

// UpdateRealm calls UpdateRealmFunc.
func (mock *GoCloakMock) UpdateRealm(ctx context.Context, token string, realm gocloak.RealmRepresentation) error {
	if mock.UpdateRealmFunc == nil {
		panic("GoCloakMock.UpdateRealmFunc: method is nil but GoCloak.UpdateRealm was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
		Realm gocloak.RealmRepresentation
	}{
		Ctx:   ctx,
		Token: token,
		Realm: realm,
	}
	mock.lockUpdateRealm.Lock()
	mock.calls.UpdateRealm = append(mock.calls.UpdateRealm, callInfo)
	mock.lockUpdateRealm.Unlock()
	return mock.UpdateRealmFunc(ctx, token, realm)
}

// UpdateRealmCalls gets all the calls that were made to UpdateRealm.
// Check the length with:
//     len(mockedGoCloak.UpdateRealmCalls())
func (mock *GoCloakMock) UpdateRealmCalls() []struct {
	Ctx   context.Context
	Token string
	Realm gocloak.RealmRepresentation
} {
	var calls []struct {
		Ctx   context.Context
		Token string
		Realm gocloak.RealmRepresentation
	}
	mock.lockUpdateRealm.RLock()
	calls = mock.calls.UpdateRealm
	mock.lockUpdateRealm.RUnlock()
	return calls
}

// UpdateRealmRole calls UpdateRealmRoleFunc.
func (mock *GoCloakMock) UpdateRealmRole(ctx context.Context, token string, realm string, roleName string, role gocloak.Role) error {
	if mock.UpdateRealmRoleFunc == nil {
		panic("GoCloakMock.UpdateRealmRoleFunc: method is nil but GoCloak.UpdateRealmRole was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		RoleName string
		Role     gocloak.Role
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		RoleName: roleName,
		Role:     role,
	}
	mock.lockUpdateRealmRole.Lock()
	mock.calls.UpdateRealmRole = append(mock.calls.UpdateRealmRole, callInfo)
	mock.lockUpdateRealmRole.Unlock()
	return mock.UpdateRealmRoleFunc(ctx, token, realm, roleName, role)
}

// UpdateRealmRoleCalls gets all the calls that were made to UpdateRealmRole.
// Check the length with:
//     len(mockedGoCloak.UpdateRealmRoleCalls())
func (mock *GoCloakMock) UpdateRealmRoleCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	RoleName string
	Role     gocloak.Role
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		RoleName string
		Role     gocloak.Role
	}
	mock.lockUpdateRealmRole.RLock()
	calls = mock.calls.UpdateRealmRole
	mock.lockUpdateRealmRole.RUnlock()
	return calls
}

// UpdateResource calls UpdateResourceFunc.
func (mock *GoCloakMock) UpdateResource(ctx context.Context, token string, realm string, clientID string, resource gocloak.ResourceRepresentation) error {
	if mock.UpdateResourceFunc == nil {
		panic("GoCloakMock.UpdateResourceFunc: method is nil but GoCloak.UpdateResource was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Resource gocloak.ResourceRepresentation
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		Resource: resource,
	}
	mock.lockUpdateResource.Lock()
	mock.calls.UpdateResource = append(mock.calls.UpdateResource, callInfo)
	mock.lockUpdateResource.Unlock()
	return mock.UpdateResourceFunc(ctx, token, realm, clientID, resource)
}

// UpdateResourceCalls gets all the calls that were made to UpdateResource.
// Check the length with:
//     len(mockedGoCloak.UpdateResourceCalls())
func (mock *GoCloakMock) UpdateResourceCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	Resource gocloak.ResourceRepresentation
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Resource gocloak.ResourceRepresentation
	}
	mock.lockUpdateResource.RLock()
	calls = mock.calls.UpdateResource
	mock.lockUpdateResource.RUnlock()
	return calls
}

// UpdateResourceClient calls UpdateResourceClientFunc.
func (mock *GoCloakMock) UpdateResourceClient(ctx context.Context, token string, realm string, resource gocloak.ResourceRepresentation) error {
	if mock.UpdateResourceClientFunc == nil {
		panic("GoCloakMock.UpdateResourceClientFunc: method is nil but GoCloak.UpdateResourceClient was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		Resource gocloak.ResourceRepresentation
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		Resource: resource,
	}
	mock.lockUpdateResourceClient.Lock()
	mock.calls.UpdateResourceClient = append(mock.calls.UpdateResourceClient, callInfo)
	mock.lockUpdateResourceClient.Unlock()
	return mock.UpdateResourceClientFunc(ctx, token, realm, resource)
}

// UpdateResourceClientCalls gets all the calls that were made to UpdateResourceClient.
// Check the length with:
//     len(mockedGoCloak.UpdateResourceClientCalls())
func (mock *GoCloakMock) UpdateResourceClientCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	Resource gocloak.ResourceRepresentation
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		Resource gocloak.ResourceRepresentation
	}
	mock.lockUpdateResourceClient.RLock()
	calls = mock.calls.UpdateResourceClient
	mock.lockUpdateResourceClient.RUnlock()
	return calls
}

// UpdateResourcePolicy calls UpdateResourcePolicyFunc.
func (mock *GoCloakMock) UpdateResourcePolicy(ctx context.Context, token string, realm string, permissionID string, policy gocloak.ResourcePolicyRepresentation) error {
	if mock.UpdateResourcePolicyFunc == nil {
		panic("GoCloakMock.UpdateResourcePolicyFunc: method is nil but GoCloak.UpdateResourcePolicy was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Token        string
		Realm        string
		PermissionID string
		Policy       gocloak.ResourcePolicyRepresentation
	}{
		Ctx:          ctx,
		Token:        token,
		Realm:        realm,
		PermissionID: permissionID,
		Policy:       policy,
	}
	mock.lockUpdateResourcePolicy.Lock()
	mock.calls.UpdateResourcePolicy = append(mock.calls.UpdateResourcePolicy, callInfo)
	mock.lockUpdateResourcePolicy.Unlock()
	return mock.UpdateResourcePolicyFunc(ctx, token, realm, permissionID, policy)
}

// UpdateResourcePolicyCalls gets all the calls that were made to UpdateResourcePolicy.
// Check the length with:
//     len(mockedGoCloak.UpdateResourcePolicyCalls())
func (mock *GoCloakMock) UpdateResourcePolicyCalls() []struct {
	Ctx          context.Context
	Token        string
	Realm        string
	PermissionID string
	Policy       gocloak.ResourcePolicyRepresentation
} {
	var calls []struct {
		Ctx          context.Context
		Token        string
		Realm        string
		PermissionID string
		Policy       gocloak.ResourcePolicyRepresentation
	}
	mock.lockUpdateResourcePolicy.RLock()
	calls = mock.calls.UpdateResourcePolicy
	mock.lockUpdateResourcePolicy.RUnlock()
	return calls
}

// UpdateRole calls UpdateRoleFunc.
func (mock *GoCloakMock) UpdateRole(ctx context.Context, accessToken string, realm string, clientID string, role gocloak.Role) error {
	if mock.UpdateRoleFunc == nil {
		panic("GoCloakMock.UpdateRoleFunc: method is nil but GoCloak.UpdateRole was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ClientID    string
		Role        gocloak.Role
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		ClientID:    clientID,
		Role:        role,
	}
	mock.lockUpdateRole.Lock()
	mock.calls.UpdateRole = append(mock.calls.UpdateRole, callInfo)
	mock.lockUpdateRole.Unlock()
	return mock.UpdateRoleFunc(ctx, accessToken, realm, clientID, role)
}

// UpdateRoleCalls gets all the calls that were made to UpdateRole.
// Check the length with:
//     len(mockedGoCloak.UpdateRoleCalls())
func (mock *GoCloakMock) UpdateRoleCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	ClientID    string
	Role        gocloak.Role
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		ClientID    string
		Role        gocloak.Role
	}
	mock.lockUpdateRole.RLock()
	calls = mock.calls.UpdateRole
	mock.lockUpdateRole.RUnlock()
	return calls
}

// UpdateScope calls UpdateScopeFunc.
func (mock *GoCloakMock) UpdateScope(ctx context.Context, token string, realm string, clientID string, resource gocloak.ScopeRepresentation) error {
	if mock.UpdateScopeFunc == nil {
		panic("GoCloakMock.UpdateScopeFunc: method is nil but GoCloak.UpdateScope was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Resource gocloak.ScopeRepresentation
	}{
		Ctx:      ctx,
		Token:    token,
		Realm:    realm,
		ClientID: clientID,
		Resource: resource,
	}
	mock.lockUpdateScope.Lock()
	mock.calls.UpdateScope = append(mock.calls.UpdateScope, callInfo)
	mock.lockUpdateScope.Unlock()
	return mock.UpdateScopeFunc(ctx, token, realm, clientID, resource)
}

// UpdateScopeCalls gets all the calls that were made to UpdateScope.
// Check the length with:
//     len(mockedGoCloak.UpdateScopeCalls())
func (mock *GoCloakMock) UpdateScopeCalls() []struct {
	Ctx      context.Context
	Token    string
	Realm    string
	ClientID string
	Resource gocloak.ScopeRepresentation
} {
	var calls []struct {
		Ctx      context.Context
		Token    string
		Realm    string
		ClientID string
		Resource gocloak.ScopeRepresentation
	}
	mock.lockUpdateScope.RLock()
	calls = mock.calls.UpdateScope
	mock.lockUpdateScope.RUnlock()
	return calls
}

// UpdateUser calls UpdateUserFunc.
func (mock *GoCloakMock) UpdateUser(ctx context.Context, accessToken string, realm string, user gocloak.User) error {
	if mock.UpdateUserFunc == nil {
		panic("GoCloakMock.UpdateUserFunc: method is nil but GoCloak.UpdateUser was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		User        gocloak.User
	}{
		Ctx:         ctx,
		AccessToken: accessToken,
		Realm:       realm,
		User:        user,
	}
	mock.lockUpdateUser.Lock()
	mock.calls.UpdateUser = append(mock.calls.UpdateUser, callInfo)
	mock.lockUpdateUser.Unlock()
	return mock.UpdateUserFunc(ctx, accessToken, realm, user)
}

// UpdateUserCalls gets all the calls that were made to UpdateUser.
// Check the length with:
//     len(mockedGoCloak.UpdateUserCalls())
func (mock *GoCloakMock) UpdateUserCalls() []struct {
	Ctx         context.Context
	AccessToken string
	Realm       string
	User        gocloak.User
} {
	var calls []struct {
		Ctx         context.Context
		AccessToken string
		Realm       string
		User        gocloak.User
	}
	mock.lockUpdateUser.RLock()
	calls = mock.calls.UpdateUser
	mock.lockUpdateUser.RUnlock()
	return calls
}

// UpdateUserPermission calls UpdateUserPermissionFunc.
func (mock *GoCloakMock) UpdateUserPermission(ctx context.Context, token string, realm string, permission gocloak.PermissionGrantParams) (*gocloak.PermissionGrantResponseRepresentation, error) {
	if mock.UpdateUserPermissionFunc == nil {
		panic("GoCloakMock.UpdateUserPermissionFunc: method is nil but GoCloak.UpdateUserPermission was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Token      string
		Realm      string
		Permission gocloak.PermissionGrantParams
	}{
		Ctx:        ctx,
		Token:      token,
		Realm:      realm,
		Permission: permission,
	}
	mock.lockUpdateUserPermission.Lock()
	mock.calls.UpdateUserPermission = append(mock.calls.UpdateUserPermission, callInfo)
	mock.lockUpdateUserPermission.Unlock()
	return mock.UpdateUserPermissionFunc(ctx, token, realm, permission)
}

// UpdateUserPermissionCalls gets all the calls that were made to UpdateUserPermission.
// Check the length with:
//     len(mockedGoCloak.UpdateUserPermissionCalls())
func (mock *GoCloakMock) UpdateUserPermissionCalls() []struct {
	Ctx        context.Context
	Token      string
	Realm      string
	Permission gocloak.PermissionGrantParams
} {
	var calls []struct {
		Ctx        context.Context
		Token      string
		Realm      string
		Permission gocloak.PermissionGrantParams
	}
	mock.lockUpdateUserPermission.RLock()
	calls = mock.calls.UpdateUserPermission
	mock.lockUpdateUserPermission.RUnlock()
	return calls
}
