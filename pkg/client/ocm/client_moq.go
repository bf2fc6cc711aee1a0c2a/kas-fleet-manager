// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ocm

import (
	sdkClient "github.com/openshift-online/ocm-sdk-go"
	amsv1 "github.com/openshift-online/ocm-sdk-go/accountsmgmt/v1"
	clustersmgmtv1 "github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
	"sync"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
// 	func TestSomethingThatUsesClient(t *testing.T) {
//
// 		// make and configure a mocked Client
// 		mockedClient := &ClientMock{
// 			ClusterAuthorizationFunc: func(cb *amsv1.ClusterAuthorizationRequest) (*amsv1.ClusterAuthorizationResponse, error) {
// 				panic("mock out the ClusterAuthorization method")
// 			},
// 			ConnectionFunc: func() *sdkClient.Connection {
// 				panic("mock out the Connection method")
// 			},
// 			CreateAddonFunc: func(clusterId string, addonId string) (*clustersmgmtv1.AddOnInstallation, error) {
// 				panic("mock out the CreateAddon method")
// 			},
// 			CreateAddonWithParamsFunc: func(clusterId string, addonId string, parameters []Parameter) (*clustersmgmtv1.AddOnInstallation, error) {
// 				panic("mock out the CreateAddonWithParams method")
// 			},
// 			CreateClusterFunc: func(cluster *clustersmgmtv1.Cluster) (*clustersmgmtv1.Cluster, error) {
// 				panic("mock out the CreateCluster method")
// 			},
// 			CreateIdentityProviderFunc: func(clusterID string, identityProvider *clustersmgmtv1.IdentityProvider) (*clustersmgmtv1.IdentityProvider, error) {
// 				panic("mock out the CreateIdentityProvider method")
// 			},
// 			CreateSyncSetFunc: func(clusterID string, syncset *clustersmgmtv1.Syncset) (*clustersmgmtv1.Syncset, error) {
// 				panic("mock out the CreateSyncSet method")
// 			},
// 			DeleteClusterFunc: func(clusterID string) (int, error) {
// 				panic("mock out the DeleteCluster method")
// 			},
// 			DeleteSubscriptionFunc: func(id string) (int, error) {
// 				panic("mock out the DeleteSubscription method")
// 			},
// 			DeleteSyncSetFunc: func(clusterID string, syncsetID string) (int, error) {
// 				panic("mock out the DeleteSyncSet method")
// 			},
// 			FindSubscriptionsFunc: func(query string) (*amsv1.SubscriptionsListResponse, error) {
// 				panic("mock out the FindSubscriptions method")
// 			},
// 			GetAddonFunc: func(clusterId string, addonId string) (*clustersmgmtv1.AddOnInstallation, error) {
// 				panic("mock out the GetAddon method")
// 			},
// 			GetCloudProvidersFunc: func() (*clustersmgmtv1.CloudProviderList, error) {
// 				panic("mock out the GetCloudProviders method")
// 			},
// 			GetClusterFunc: func(clusterID string) (*clustersmgmtv1.Cluster, error) {
// 				panic("mock out the GetCluster method")
// 			},
// 			GetClusterDNSFunc: func(clusterID string) (string, error) {
// 				panic("mock out the GetClusterDNS method")
// 			},
// 			GetClusterIngressesFunc: func(clusterID string) (*clustersmgmtv1.IngressesListResponse, error) {
// 				panic("mock out the GetClusterIngresses method")
// 			},
// 			GetClusterStatusFunc: func(id string) (*clustersmgmtv1.ClusterStatus, error) {
// 				panic("mock out the GetClusterStatus method")
// 			},
// 			GetExistingClusterMetricsFunc: func(clusterID string) (*amsv1.SubscriptionMetrics, error) {
// 				panic("mock out the GetExistingClusterMetrics method")
// 			},
// 			GetIdentityProviderListFunc: func(clusterID string) (*clustersmgmtv1.IdentityProviderList, error) {
// 				panic("mock out the GetIdentityProviderList method")
// 			},
// 			GetOrganisationIdFromExternalIdFunc: func(externalId string) (string, error) {
// 				panic("mock out the GetOrganisationIdFromExternalId method")
// 			},
// 			GetQuotaCostsForProductFunc: func(organizationID string, resourceName string, product string) ([]*amsv1.QuotaCost, error) {
// 				panic("mock out the GetQuotaCostsForProduct method")
// 			},
// 			GetRegionsFunc: func(provider *clustersmgmtv1.CloudProvider) (*clustersmgmtv1.CloudRegionList, error) {
// 				panic("mock out the GetRegions method")
// 			},
// 			GetRequiresTermsAcceptanceFunc: func(username string) (bool, string, error) {
// 				panic("mock out the GetRequiresTermsAcceptance method")
// 			},
// 			GetSyncSetFunc: func(clusterID string, syncSetID string) (*clustersmgmtv1.Syncset, error) {
// 				panic("mock out the GetSyncSet method")
// 			},
// 			ScaleDownComputeNodesFunc: func(clusterID string, decrement int) (*clustersmgmtv1.Cluster, error) {
// 				panic("mock out the ScaleDownComputeNodes method")
// 			},
// 			ScaleUpComputeNodesFunc: func(clusterID string, increment int) (*clustersmgmtv1.Cluster, error) {
// 				panic("mock out the ScaleUpComputeNodes method")
// 			},
// 			SetComputeNodesFunc: func(clusterID string, numNodes int) (*clustersmgmtv1.Cluster, error) {
// 				panic("mock out the SetComputeNodes method")
// 			},
// 			UpdateAddonParametersFunc: func(clusterId string, addonId string, parameters []Parameter) (*clustersmgmtv1.AddOnInstallation, error) {
// 				panic("mock out the UpdateAddonParameters method")
// 			},
// 			UpdateSyncSetFunc: func(clusterID string, syncSetID string, syncset *clustersmgmtv1.Syncset) (*clustersmgmtv1.Syncset, error) {
// 				panic("mock out the UpdateSyncSet method")
// 			},
// 		}
//
// 		// use mockedClient in code that requires Client
// 		// and then make assertions.
//
// 	}
type ClientMock struct {
	// ClusterAuthorizationFunc mocks the ClusterAuthorization method.
	ClusterAuthorizationFunc func(cb *amsv1.ClusterAuthorizationRequest) (*amsv1.ClusterAuthorizationResponse, error)

	// ConnectionFunc mocks the Connection method.
	ConnectionFunc func() *sdkClient.Connection

	// CreateAddonFunc mocks the CreateAddon method.
	CreateAddonFunc func(clusterId string, addonId string) (*clustersmgmtv1.AddOnInstallation, error)

	// CreateAddonWithParamsFunc mocks the CreateAddonWithParams method.
	CreateAddonWithParamsFunc func(clusterId string, addonId string, parameters []Parameter) (*clustersmgmtv1.AddOnInstallation, error)

	// CreateClusterFunc mocks the CreateCluster method.
	CreateClusterFunc func(cluster *clustersmgmtv1.Cluster) (*clustersmgmtv1.Cluster, error)

	// CreateIdentityProviderFunc mocks the CreateIdentityProvider method.
	CreateIdentityProviderFunc func(clusterID string, identityProvider *clustersmgmtv1.IdentityProvider) (*clustersmgmtv1.IdentityProvider, error)

	// CreateSyncSetFunc mocks the CreateSyncSet method.
	CreateSyncSetFunc func(clusterID string, syncset *clustersmgmtv1.Syncset) (*clustersmgmtv1.Syncset, error)

	// DeleteClusterFunc mocks the DeleteCluster method.
	DeleteClusterFunc func(clusterID string) (int, error)

	// DeleteSubscriptionFunc mocks the DeleteSubscription method.
	DeleteSubscriptionFunc func(id string) (int, error)

	// DeleteSyncSetFunc mocks the DeleteSyncSet method.
	DeleteSyncSetFunc func(clusterID string, syncsetID string) (int, error)

	// FindSubscriptionsFunc mocks the FindSubscriptions method.
	FindSubscriptionsFunc func(query string) (*amsv1.SubscriptionsListResponse, error)

	// GetAddonFunc mocks the GetAddon method.
	GetAddonFunc func(clusterId string, addonId string) (*clustersmgmtv1.AddOnInstallation, error)

	// GetCloudProvidersFunc mocks the GetCloudProviders method.
	GetCloudProvidersFunc func() (*clustersmgmtv1.CloudProviderList, error)

	// GetClusterFunc mocks the GetCluster method.
	GetClusterFunc func(clusterID string) (*clustersmgmtv1.Cluster, error)

	// GetClusterDNSFunc mocks the GetClusterDNS method.
	GetClusterDNSFunc func(clusterID string) (string, error)

	// GetClusterIngressesFunc mocks the GetClusterIngresses method.
	GetClusterIngressesFunc func(clusterID string) (*clustersmgmtv1.IngressesListResponse, error)

	// GetClusterStatusFunc mocks the GetClusterStatus method.
	GetClusterStatusFunc func(id string) (*clustersmgmtv1.ClusterStatus, error)

	// GetExistingClusterMetricsFunc mocks the GetExistingClusterMetrics method.
	GetExistingClusterMetricsFunc func(clusterID string) (*amsv1.SubscriptionMetrics, error)

	// GetIdentityProviderListFunc mocks the GetIdentityProviderList method.
	GetIdentityProviderListFunc func(clusterID string) (*clustersmgmtv1.IdentityProviderList, error)

	// GetOrganisationIdFromExternalIdFunc mocks the GetOrganisationIdFromExternalId method.
	GetOrganisationIdFromExternalIdFunc func(externalId string) (string, error)

	// GetQuotaCostsForProductFunc mocks the GetQuotaCostsForProduct method.
	GetQuotaCostsForProductFunc func(organizationID string, resourceName string, product string) ([]*amsv1.QuotaCost, error)

	// GetRegionsFunc mocks the GetRegions method.
	GetRegionsFunc func(provider *clustersmgmtv1.CloudProvider) (*clustersmgmtv1.CloudRegionList, error)

	// GetRequiresTermsAcceptanceFunc mocks the GetRequiresTermsAcceptance method.
	GetRequiresTermsAcceptanceFunc func(username string) (bool, string, error)

	// GetSyncSetFunc mocks the GetSyncSet method.
	GetSyncSetFunc func(clusterID string, syncSetID string) (*clustersmgmtv1.Syncset, error)

	// ScaleDownComputeNodesFunc mocks the ScaleDownComputeNodes method.
	ScaleDownComputeNodesFunc func(clusterID string, decrement int) (*clustersmgmtv1.Cluster, error)

	// ScaleUpComputeNodesFunc mocks the ScaleUpComputeNodes method.
	ScaleUpComputeNodesFunc func(clusterID string, increment int) (*clustersmgmtv1.Cluster, error)

	// SetComputeNodesFunc mocks the SetComputeNodes method.
	SetComputeNodesFunc func(clusterID string, numNodes int) (*clustersmgmtv1.Cluster, error)

	// UpdateAddonParametersFunc mocks the UpdateAddonParameters method.
	UpdateAddonParametersFunc func(clusterId string, addonId string, parameters []Parameter) (*clustersmgmtv1.AddOnInstallation, error)

	// UpdateSyncSetFunc mocks the UpdateSyncSet method.
	UpdateSyncSetFunc func(clusterID string, syncSetID string, syncset *clustersmgmtv1.Syncset) (*clustersmgmtv1.Syncset, error)

	// calls tracks calls to the methods.
	calls struct {
		// ClusterAuthorization holds details about calls to the ClusterAuthorization method.
		ClusterAuthorization []struct {
			// Cb is the cb argument value.
			Cb *amsv1.ClusterAuthorizationRequest
		}
		// Connection holds details about calls to the Connection method.
		Connection []struct {
		}
		// CreateAddon holds details about calls to the CreateAddon method.
		CreateAddon []struct {
			// ClusterId is the clusterId argument value.
			ClusterId string
			// AddonId is the addonId argument value.
			AddonId string
		}
		// CreateAddonWithParams holds details about calls to the CreateAddonWithParams method.
		CreateAddonWithParams []struct {
			// ClusterId is the clusterId argument value.
			ClusterId string
			// AddonId is the addonId argument value.
			AddonId string
			// Parameters is the parameters argument value.
			Parameters []Parameter
		}
		// CreateCluster holds details about calls to the CreateCluster method.
		CreateCluster []struct {
			// Cluster is the cluster argument value.
			Cluster *clustersmgmtv1.Cluster
		}
		// CreateIdentityProvider holds details about calls to the CreateIdentityProvider method.
		CreateIdentityProvider []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// IdentityProvider is the identityProvider argument value.
			IdentityProvider *clustersmgmtv1.IdentityProvider
		}
		// CreateSyncSet holds details about calls to the CreateSyncSet method.
		CreateSyncSet []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// Syncset is the syncset argument value.
			Syncset *clustersmgmtv1.Syncset
		}
		// DeleteCluster holds details about calls to the DeleteCluster method.
		DeleteCluster []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// DeleteSubscription holds details about calls to the DeleteSubscription method.
		DeleteSubscription []struct {
			// ID is the id argument value.
			ID string
		}
		// DeleteSyncSet holds details about calls to the DeleteSyncSet method.
		DeleteSyncSet []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// SyncsetID is the syncsetID argument value.
			SyncsetID string
		}
		// FindSubscriptions holds details about calls to the FindSubscriptions method.
		FindSubscriptions []struct {
			// Query is the query argument value.
			Query string
		}
		// GetAddon holds details about calls to the GetAddon method.
		GetAddon []struct {
			// ClusterId is the clusterId argument value.
			ClusterId string
			// AddonId is the addonId argument value.
			AddonId string
		}
		// GetCloudProviders holds details about calls to the GetCloudProviders method.
		GetCloudProviders []struct {
		}
		// GetCluster holds details about calls to the GetCluster method.
		GetCluster []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetClusterDNS holds details about calls to the GetClusterDNS method.
		GetClusterDNS []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetClusterIngresses holds details about calls to the GetClusterIngresses method.
		GetClusterIngresses []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetClusterStatus holds details about calls to the GetClusterStatus method.
		GetClusterStatus []struct {
			// ID is the id argument value.
			ID string
		}
		// GetExistingClusterMetrics holds details about calls to the GetExistingClusterMetrics method.
		GetExistingClusterMetrics []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetIdentityProviderList holds details about calls to the GetIdentityProviderList method.
		GetIdentityProviderList []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// GetOrganisationIdFromExternalId holds details about calls to the GetOrganisationIdFromExternalId method.
		GetOrganisationIdFromExternalId []struct {
			// ExternalId is the externalId argument value.
			ExternalId string
		}
		// GetQuotaCostsForProduct holds details about calls to the GetQuotaCostsForProduct method.
		GetQuotaCostsForProduct []struct {
			// OrganizationID is the organizationID argument value.
			OrganizationID string
			// ResourceName is the resourceName argument value.
			ResourceName string
			// Product is the product argument value.
			Product string
		}
		// GetRegions holds details about calls to the GetRegions method.
		GetRegions []struct {
			// Provider is the provider argument value.
			Provider *clustersmgmtv1.CloudProvider
		}
		// GetRequiresTermsAcceptance holds details about calls to the GetRequiresTermsAcceptance method.
		GetRequiresTermsAcceptance []struct {
			// Username is the username argument value.
			Username string
		}
		// GetSyncSet holds details about calls to the GetSyncSet method.
		GetSyncSet []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// SyncSetID is the syncSetID argument value.
			SyncSetID string
		}
		// ScaleDownComputeNodes holds details about calls to the ScaleDownComputeNodes method.
		ScaleDownComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// Decrement is the decrement argument value.
			Decrement int
		}
		// ScaleUpComputeNodes holds details about calls to the ScaleUpComputeNodes method.
		ScaleUpComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// Increment is the increment argument value.
			Increment int
		}
		// SetComputeNodes holds details about calls to the SetComputeNodes method.
		SetComputeNodes []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// NumNodes is the numNodes argument value.
			NumNodes int
		}
		// UpdateAddonParameters holds details about calls to the UpdateAddonParameters method.
		UpdateAddonParameters []struct {
			// ClusterId is the clusterId argument value.
			ClusterId string
			// AddonId is the addonId argument value.
			AddonId string
			// Parameters is the parameters argument value.
			Parameters []Parameter
		}
		// UpdateSyncSet holds details about calls to the UpdateSyncSet method.
		UpdateSyncSet []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
			// SyncSetID is the syncSetID argument value.
			SyncSetID string
			// Syncset is the syncset argument value.
			Syncset *clustersmgmtv1.Syncset
		}
	}
	lockClusterAuthorization            sync.RWMutex
	lockConnection                      sync.RWMutex
	lockCreateAddon                     sync.RWMutex
	lockCreateAddonWithParams           sync.RWMutex
	lockCreateCluster                   sync.RWMutex
	lockCreateIdentityProvider          sync.RWMutex
	lockCreateSyncSet                   sync.RWMutex
	lockDeleteCluster                   sync.RWMutex
	lockDeleteSubscription              sync.RWMutex
	lockDeleteSyncSet                   sync.RWMutex
	lockFindSubscriptions               sync.RWMutex
	lockGetAddon                        sync.RWMutex
	lockGetCloudProviders               sync.RWMutex
	lockGetCluster                      sync.RWMutex
	lockGetClusterDNS                   sync.RWMutex
	lockGetClusterIngresses             sync.RWMutex
	lockGetClusterStatus                sync.RWMutex
	lockGetExistingClusterMetrics       sync.RWMutex
	lockGetIdentityProviderList         sync.RWMutex
	lockGetOrganisationIdFromExternalId sync.RWMutex
	lockGetQuotaCostsForProduct         sync.RWMutex
	lockGetRegions                      sync.RWMutex
	lockGetRequiresTermsAcceptance      sync.RWMutex
	lockGetSyncSet                      sync.RWMutex
	lockScaleDownComputeNodes           sync.RWMutex
	lockScaleUpComputeNodes             sync.RWMutex
	lockSetComputeNodes                 sync.RWMutex
	lockUpdateAddonParameters           sync.RWMutex
	lockUpdateSyncSet                   sync.RWMutex
}

// ClusterAuthorization calls ClusterAuthorizationFunc.
func (mock *ClientMock) ClusterAuthorization(cb *amsv1.ClusterAuthorizationRequest) (*amsv1.ClusterAuthorizationResponse, error) {
	if mock.ClusterAuthorizationFunc == nil {
		panic("ClientMock.ClusterAuthorizationFunc: method is nil but Client.ClusterAuthorization was just called")
	}
	callInfo := struct {
		Cb *amsv1.ClusterAuthorizationRequest
	}{
		Cb: cb,
	}
	mock.lockClusterAuthorization.Lock()
	mock.calls.ClusterAuthorization = append(mock.calls.ClusterAuthorization, callInfo)
	mock.lockClusterAuthorization.Unlock()
	return mock.ClusterAuthorizationFunc(cb)
}

// ClusterAuthorizationCalls gets all the calls that were made to ClusterAuthorization.
// Check the length with:
//     len(mockedClient.ClusterAuthorizationCalls())
func (mock *ClientMock) ClusterAuthorizationCalls() []struct {
	Cb *amsv1.ClusterAuthorizationRequest
} {
	var calls []struct {
		Cb *amsv1.ClusterAuthorizationRequest
	}
	mock.lockClusterAuthorization.RLock()
	calls = mock.calls.ClusterAuthorization
	mock.lockClusterAuthorization.RUnlock()
	return calls
}

// Connection calls ConnectionFunc.
func (mock *ClientMock) Connection() *sdkClient.Connection {
	if mock.ConnectionFunc == nil {
		panic("ClientMock.ConnectionFunc: method is nil but Client.Connection was just called")
	}
	callInfo := struct {
	}{}
	mock.lockConnection.Lock()
	mock.calls.Connection = append(mock.calls.Connection, callInfo)
	mock.lockConnection.Unlock()
	return mock.ConnectionFunc()
}

// ConnectionCalls gets all the calls that were made to Connection.
// Check the length with:
//     len(mockedClient.ConnectionCalls())
func (mock *ClientMock) ConnectionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConnection.RLock()
	calls = mock.calls.Connection
	mock.lockConnection.RUnlock()
	return calls
}

// CreateAddon calls CreateAddonFunc.
func (mock *ClientMock) CreateAddon(clusterId string, addonId string) (*clustersmgmtv1.AddOnInstallation, error) {
	if mock.CreateAddonFunc == nil {
		panic("ClientMock.CreateAddonFunc: method is nil but Client.CreateAddon was just called")
	}
	callInfo := struct {
		ClusterId string
		AddonId   string
	}{
		ClusterId: clusterId,
		AddonId:   addonId,
	}
	mock.lockCreateAddon.Lock()
	mock.calls.CreateAddon = append(mock.calls.CreateAddon, callInfo)
	mock.lockCreateAddon.Unlock()
	return mock.CreateAddonFunc(clusterId, addonId)
}

// CreateAddonCalls gets all the calls that were made to CreateAddon.
// Check the length with:
//     len(mockedClient.CreateAddonCalls())
func (mock *ClientMock) CreateAddonCalls() []struct {
	ClusterId string
	AddonId   string
} {
	var calls []struct {
		ClusterId string
		AddonId   string
	}
	mock.lockCreateAddon.RLock()
	calls = mock.calls.CreateAddon
	mock.lockCreateAddon.RUnlock()
	return calls
}

// CreateAddonWithParams calls CreateAddonWithParamsFunc.
func (mock *ClientMock) CreateAddonWithParams(clusterId string, addonId string, parameters []Parameter) (*clustersmgmtv1.AddOnInstallation, error) {
	if mock.CreateAddonWithParamsFunc == nil {
		panic("ClientMock.CreateAddonWithParamsFunc: method is nil but Client.CreateAddonWithParams was just called")
	}
	callInfo := struct {
		ClusterId  string
		AddonId    string
		Parameters []Parameter
	}{
		ClusterId:  clusterId,
		AddonId:    addonId,
		Parameters: parameters,
	}
	mock.lockCreateAddonWithParams.Lock()
	mock.calls.CreateAddonWithParams = append(mock.calls.CreateAddonWithParams, callInfo)
	mock.lockCreateAddonWithParams.Unlock()
	return mock.CreateAddonWithParamsFunc(clusterId, addonId, parameters)
}

// CreateAddonWithParamsCalls gets all the calls that were made to CreateAddonWithParams.
// Check the length with:
//     len(mockedClient.CreateAddonWithParamsCalls())
func (mock *ClientMock) CreateAddonWithParamsCalls() []struct {
	ClusterId  string
	AddonId    string
	Parameters []Parameter
} {
	var calls []struct {
		ClusterId  string
		AddonId    string
		Parameters []Parameter
	}
	mock.lockCreateAddonWithParams.RLock()
	calls = mock.calls.CreateAddonWithParams
	mock.lockCreateAddonWithParams.RUnlock()
	return calls
}

// CreateCluster calls CreateClusterFunc.
func (mock *ClientMock) CreateCluster(cluster *clustersmgmtv1.Cluster) (*clustersmgmtv1.Cluster, error) {
	if mock.CreateClusterFunc == nil {
		panic("ClientMock.CreateClusterFunc: method is nil but Client.CreateCluster was just called")
	}
	callInfo := struct {
		Cluster *clustersmgmtv1.Cluster
	}{
		Cluster: cluster,
	}
	mock.lockCreateCluster.Lock()
	mock.calls.CreateCluster = append(mock.calls.CreateCluster, callInfo)
	mock.lockCreateCluster.Unlock()
	return mock.CreateClusterFunc(cluster)
}

// CreateClusterCalls gets all the calls that were made to CreateCluster.
// Check the length with:
//     len(mockedClient.CreateClusterCalls())
func (mock *ClientMock) CreateClusterCalls() []struct {
	Cluster *clustersmgmtv1.Cluster
} {
	var calls []struct {
		Cluster *clustersmgmtv1.Cluster
	}
	mock.lockCreateCluster.RLock()
	calls = mock.calls.CreateCluster
	mock.lockCreateCluster.RUnlock()
	return calls
}

// CreateIdentityProvider calls CreateIdentityProviderFunc.
func (mock *ClientMock) CreateIdentityProvider(clusterID string, identityProvider *clustersmgmtv1.IdentityProvider) (*clustersmgmtv1.IdentityProvider, error) {
	if mock.CreateIdentityProviderFunc == nil {
		panic("ClientMock.CreateIdentityProviderFunc: method is nil but Client.CreateIdentityProvider was just called")
	}
	callInfo := struct {
		ClusterID        string
		IdentityProvider *clustersmgmtv1.IdentityProvider
	}{
		ClusterID:        clusterID,
		IdentityProvider: identityProvider,
	}
	mock.lockCreateIdentityProvider.Lock()
	mock.calls.CreateIdentityProvider = append(mock.calls.CreateIdentityProvider, callInfo)
	mock.lockCreateIdentityProvider.Unlock()
	return mock.CreateIdentityProviderFunc(clusterID, identityProvider)
}

// CreateIdentityProviderCalls gets all the calls that were made to CreateIdentityProvider.
// Check the length with:
//     len(mockedClient.CreateIdentityProviderCalls())
func (mock *ClientMock) CreateIdentityProviderCalls() []struct {
	ClusterID        string
	IdentityProvider *clustersmgmtv1.IdentityProvider
} {
	var calls []struct {
		ClusterID        string
		IdentityProvider *clustersmgmtv1.IdentityProvider
	}
	mock.lockCreateIdentityProvider.RLock()
	calls = mock.calls.CreateIdentityProvider
	mock.lockCreateIdentityProvider.RUnlock()
	return calls
}

// CreateSyncSet calls CreateSyncSetFunc.
func (mock *ClientMock) CreateSyncSet(clusterID string, syncset *clustersmgmtv1.Syncset) (*clustersmgmtv1.Syncset, error) {
	if mock.CreateSyncSetFunc == nil {
		panic("ClientMock.CreateSyncSetFunc: method is nil but Client.CreateSyncSet was just called")
	}
	callInfo := struct {
		ClusterID string
		Syncset   *clustersmgmtv1.Syncset
	}{
		ClusterID: clusterID,
		Syncset:   syncset,
	}
	mock.lockCreateSyncSet.Lock()
	mock.calls.CreateSyncSet = append(mock.calls.CreateSyncSet, callInfo)
	mock.lockCreateSyncSet.Unlock()
	return mock.CreateSyncSetFunc(clusterID, syncset)
}

// CreateSyncSetCalls gets all the calls that were made to CreateSyncSet.
// Check the length with:
//     len(mockedClient.CreateSyncSetCalls())
func (mock *ClientMock) CreateSyncSetCalls() []struct {
	ClusterID string
	Syncset   *clustersmgmtv1.Syncset
} {
	var calls []struct {
		ClusterID string
		Syncset   *clustersmgmtv1.Syncset
	}
	mock.lockCreateSyncSet.RLock()
	calls = mock.calls.CreateSyncSet
	mock.lockCreateSyncSet.RUnlock()
	return calls
}

// DeleteCluster calls DeleteClusterFunc.
func (mock *ClientMock) DeleteCluster(clusterID string) (int, error) {
	if mock.DeleteClusterFunc == nil {
		panic("ClientMock.DeleteClusterFunc: method is nil but Client.DeleteCluster was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockDeleteCluster.Lock()
	mock.calls.DeleteCluster = append(mock.calls.DeleteCluster, callInfo)
	mock.lockDeleteCluster.Unlock()
	return mock.DeleteClusterFunc(clusterID)
}

// DeleteClusterCalls gets all the calls that were made to DeleteCluster.
// Check the length with:
//     len(mockedClient.DeleteClusterCalls())
func (mock *ClientMock) DeleteClusterCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockDeleteCluster.RLock()
	calls = mock.calls.DeleteCluster
	mock.lockDeleteCluster.RUnlock()
	return calls
}

// DeleteSubscription calls DeleteSubscriptionFunc.
func (mock *ClientMock) DeleteSubscription(id string) (int, error) {
	if mock.DeleteSubscriptionFunc == nil {
		panic("ClientMock.DeleteSubscriptionFunc: method is nil but Client.DeleteSubscription was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockDeleteSubscription.Lock()
	mock.calls.DeleteSubscription = append(mock.calls.DeleteSubscription, callInfo)
	mock.lockDeleteSubscription.Unlock()
	return mock.DeleteSubscriptionFunc(id)
}

// DeleteSubscriptionCalls gets all the calls that were made to DeleteSubscription.
// Check the length with:
//     len(mockedClient.DeleteSubscriptionCalls())
func (mock *ClientMock) DeleteSubscriptionCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockDeleteSubscription.RLock()
	calls = mock.calls.DeleteSubscription
	mock.lockDeleteSubscription.RUnlock()
	return calls
}

// DeleteSyncSet calls DeleteSyncSetFunc.
func (mock *ClientMock) DeleteSyncSet(clusterID string, syncsetID string) (int, error) {
	if mock.DeleteSyncSetFunc == nil {
		panic("ClientMock.DeleteSyncSetFunc: method is nil but Client.DeleteSyncSet was just called")
	}
	callInfo := struct {
		ClusterID string
		SyncsetID string
	}{
		ClusterID: clusterID,
		SyncsetID: syncsetID,
	}
	mock.lockDeleteSyncSet.Lock()
	mock.calls.DeleteSyncSet = append(mock.calls.DeleteSyncSet, callInfo)
	mock.lockDeleteSyncSet.Unlock()
	return mock.DeleteSyncSetFunc(clusterID, syncsetID)
}

// DeleteSyncSetCalls gets all the calls that were made to DeleteSyncSet.
// Check the length with:
//     len(mockedClient.DeleteSyncSetCalls())
func (mock *ClientMock) DeleteSyncSetCalls() []struct {
	ClusterID string
	SyncsetID string
} {
	var calls []struct {
		ClusterID string
		SyncsetID string
	}
	mock.lockDeleteSyncSet.RLock()
	calls = mock.calls.DeleteSyncSet
	mock.lockDeleteSyncSet.RUnlock()
	return calls
}

// FindSubscriptions calls FindSubscriptionsFunc.
func (mock *ClientMock) FindSubscriptions(query string) (*amsv1.SubscriptionsListResponse, error) {
	if mock.FindSubscriptionsFunc == nil {
		panic("ClientMock.FindSubscriptionsFunc: method is nil but Client.FindSubscriptions was just called")
	}
	callInfo := struct {
		Query string
	}{
		Query: query,
	}
	mock.lockFindSubscriptions.Lock()
	mock.calls.FindSubscriptions = append(mock.calls.FindSubscriptions, callInfo)
	mock.lockFindSubscriptions.Unlock()
	return mock.FindSubscriptionsFunc(query)
}

// FindSubscriptionsCalls gets all the calls that were made to FindSubscriptions.
// Check the length with:
//     len(mockedClient.FindSubscriptionsCalls())
func (mock *ClientMock) FindSubscriptionsCalls() []struct {
	Query string
} {
	var calls []struct {
		Query string
	}
	mock.lockFindSubscriptions.RLock()
	calls = mock.calls.FindSubscriptions
	mock.lockFindSubscriptions.RUnlock()
	return calls
}

// GetAddon calls GetAddonFunc.
func (mock *ClientMock) GetAddon(clusterId string, addonId string) (*clustersmgmtv1.AddOnInstallation, error) {
	if mock.GetAddonFunc == nil {
		panic("ClientMock.GetAddonFunc: method is nil but Client.GetAddon was just called")
	}
	callInfo := struct {
		ClusterId string
		AddonId   string
	}{
		ClusterId: clusterId,
		AddonId:   addonId,
	}
	mock.lockGetAddon.Lock()
	mock.calls.GetAddon = append(mock.calls.GetAddon, callInfo)
	mock.lockGetAddon.Unlock()
	return mock.GetAddonFunc(clusterId, addonId)
}

// GetAddonCalls gets all the calls that were made to GetAddon.
// Check the length with:
//     len(mockedClient.GetAddonCalls())
func (mock *ClientMock) GetAddonCalls() []struct {
	ClusterId string
	AddonId   string
} {
	var calls []struct {
		ClusterId string
		AddonId   string
	}
	mock.lockGetAddon.RLock()
	calls = mock.calls.GetAddon
	mock.lockGetAddon.RUnlock()
	return calls
}

// GetCloudProviders calls GetCloudProvidersFunc.
func (mock *ClientMock) GetCloudProviders() (*clustersmgmtv1.CloudProviderList, error) {
	if mock.GetCloudProvidersFunc == nil {
		panic("ClientMock.GetCloudProvidersFunc: method is nil but Client.GetCloudProviders was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetCloudProviders.Lock()
	mock.calls.GetCloudProviders = append(mock.calls.GetCloudProviders, callInfo)
	mock.lockGetCloudProviders.Unlock()
	return mock.GetCloudProvidersFunc()
}

// GetCloudProvidersCalls gets all the calls that were made to GetCloudProviders.
// Check the length with:
//     len(mockedClient.GetCloudProvidersCalls())
func (mock *ClientMock) GetCloudProvidersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetCloudProviders.RLock()
	calls = mock.calls.GetCloudProviders
	mock.lockGetCloudProviders.RUnlock()
	return calls
}

// GetCluster calls GetClusterFunc.
func (mock *ClientMock) GetCluster(clusterID string) (*clustersmgmtv1.Cluster, error) {
	if mock.GetClusterFunc == nil {
		panic("ClientMock.GetClusterFunc: method is nil but Client.GetCluster was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetCluster.Lock()
	mock.calls.GetCluster = append(mock.calls.GetCluster, callInfo)
	mock.lockGetCluster.Unlock()
	return mock.GetClusterFunc(clusterID)
}

// GetClusterCalls gets all the calls that were made to GetCluster.
// Check the length with:
//     len(mockedClient.GetClusterCalls())
func (mock *ClientMock) GetClusterCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetCluster.RLock()
	calls = mock.calls.GetCluster
	mock.lockGetCluster.RUnlock()
	return calls
}

// GetClusterDNS calls GetClusterDNSFunc.
func (mock *ClientMock) GetClusterDNS(clusterID string) (string, error) {
	if mock.GetClusterDNSFunc == nil {
		panic("ClientMock.GetClusterDNSFunc: method is nil but Client.GetClusterDNS was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetClusterDNS.Lock()
	mock.calls.GetClusterDNS = append(mock.calls.GetClusterDNS, callInfo)
	mock.lockGetClusterDNS.Unlock()
	return mock.GetClusterDNSFunc(clusterID)
}

// GetClusterDNSCalls gets all the calls that were made to GetClusterDNS.
// Check the length with:
//     len(mockedClient.GetClusterDNSCalls())
func (mock *ClientMock) GetClusterDNSCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetClusterDNS.RLock()
	calls = mock.calls.GetClusterDNS
	mock.lockGetClusterDNS.RUnlock()
	return calls
}

// GetClusterIngresses calls GetClusterIngressesFunc.
func (mock *ClientMock) GetClusterIngresses(clusterID string) (*clustersmgmtv1.IngressesListResponse, error) {
	if mock.GetClusterIngressesFunc == nil {
		panic("ClientMock.GetClusterIngressesFunc: method is nil but Client.GetClusterIngresses was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetClusterIngresses.Lock()
	mock.calls.GetClusterIngresses = append(mock.calls.GetClusterIngresses, callInfo)
	mock.lockGetClusterIngresses.Unlock()
	return mock.GetClusterIngressesFunc(clusterID)
}

// GetClusterIngressesCalls gets all the calls that were made to GetClusterIngresses.
// Check the length with:
//     len(mockedClient.GetClusterIngressesCalls())
func (mock *ClientMock) GetClusterIngressesCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetClusterIngresses.RLock()
	calls = mock.calls.GetClusterIngresses
	mock.lockGetClusterIngresses.RUnlock()
	return calls
}

// GetClusterStatus calls GetClusterStatusFunc.
func (mock *ClientMock) GetClusterStatus(id string) (*clustersmgmtv1.ClusterStatus, error) {
	if mock.GetClusterStatusFunc == nil {
		panic("ClientMock.GetClusterStatusFunc: method is nil but Client.GetClusterStatus was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetClusterStatus.Lock()
	mock.calls.GetClusterStatus = append(mock.calls.GetClusterStatus, callInfo)
	mock.lockGetClusterStatus.Unlock()
	return mock.GetClusterStatusFunc(id)
}

// GetClusterStatusCalls gets all the calls that were made to GetClusterStatus.
// Check the length with:
//     len(mockedClient.GetClusterStatusCalls())
func (mock *ClientMock) GetClusterStatusCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetClusterStatus.RLock()
	calls = mock.calls.GetClusterStatus
	mock.lockGetClusterStatus.RUnlock()
	return calls
}

// GetExistingClusterMetrics calls GetExistingClusterMetricsFunc.
func (mock *ClientMock) GetExistingClusterMetrics(clusterID string) (*amsv1.SubscriptionMetrics, error) {
	if mock.GetExistingClusterMetricsFunc == nil {
		panic("ClientMock.GetExistingClusterMetricsFunc: method is nil but Client.GetExistingClusterMetrics was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetExistingClusterMetrics.Lock()
	mock.calls.GetExistingClusterMetrics = append(mock.calls.GetExistingClusterMetrics, callInfo)
	mock.lockGetExistingClusterMetrics.Unlock()
	return mock.GetExistingClusterMetricsFunc(clusterID)
}

// GetExistingClusterMetricsCalls gets all the calls that were made to GetExistingClusterMetrics.
// Check the length with:
//     len(mockedClient.GetExistingClusterMetricsCalls())
func (mock *ClientMock) GetExistingClusterMetricsCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetExistingClusterMetrics.RLock()
	calls = mock.calls.GetExistingClusterMetrics
	mock.lockGetExistingClusterMetrics.RUnlock()
	return calls
}

// GetIdentityProviderList calls GetIdentityProviderListFunc.
func (mock *ClientMock) GetIdentityProviderList(clusterID string) (*clustersmgmtv1.IdentityProviderList, error) {
	if mock.GetIdentityProviderListFunc == nil {
		panic("ClientMock.GetIdentityProviderListFunc: method is nil but Client.GetIdentityProviderList was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockGetIdentityProviderList.Lock()
	mock.calls.GetIdentityProviderList = append(mock.calls.GetIdentityProviderList, callInfo)
	mock.lockGetIdentityProviderList.Unlock()
	return mock.GetIdentityProviderListFunc(clusterID)
}

// GetIdentityProviderListCalls gets all the calls that were made to GetIdentityProviderList.
// Check the length with:
//     len(mockedClient.GetIdentityProviderListCalls())
func (mock *ClientMock) GetIdentityProviderListCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockGetIdentityProviderList.RLock()
	calls = mock.calls.GetIdentityProviderList
	mock.lockGetIdentityProviderList.RUnlock()
	return calls
}

// GetOrganisationIdFromExternalId calls GetOrganisationIdFromExternalIdFunc.
func (mock *ClientMock) GetOrganisationIdFromExternalId(externalId string) (string, error) {
	if mock.GetOrganisationIdFromExternalIdFunc == nil {
		panic("ClientMock.GetOrganisationIdFromExternalIdFunc: method is nil but Client.GetOrganisationIdFromExternalId was just called")
	}
	callInfo := struct {
		ExternalId string
	}{
		ExternalId: externalId,
	}
	mock.lockGetOrganisationIdFromExternalId.Lock()
	mock.calls.GetOrganisationIdFromExternalId = append(mock.calls.GetOrganisationIdFromExternalId, callInfo)
	mock.lockGetOrganisationIdFromExternalId.Unlock()
	return mock.GetOrganisationIdFromExternalIdFunc(externalId)
}

// GetOrganisationIdFromExternalIdCalls gets all the calls that were made to GetOrganisationIdFromExternalId.
// Check the length with:
//     len(mockedClient.GetOrganisationIdFromExternalIdCalls())
func (mock *ClientMock) GetOrganisationIdFromExternalIdCalls() []struct {
	ExternalId string
} {
	var calls []struct {
		ExternalId string
	}
	mock.lockGetOrganisationIdFromExternalId.RLock()
	calls = mock.calls.GetOrganisationIdFromExternalId
	mock.lockGetOrganisationIdFromExternalId.RUnlock()
	return calls
}

// GetQuotaCostsForProduct calls GetQuotaCostsForProductFunc.
func (mock *ClientMock) GetQuotaCostsForProduct(organizationID string, resourceName string, product string) ([]*amsv1.QuotaCost, error) {
	if mock.GetQuotaCostsForProductFunc == nil {
		panic("ClientMock.GetQuotaCostsForProductFunc: method is nil but Client.GetQuotaCostsForProduct was just called")
	}
	callInfo := struct {
		OrganizationID string
		ResourceName   string
		Product        string
	}{
		OrganizationID: organizationID,
		ResourceName:   resourceName,
		Product:        product,
	}
	mock.lockGetQuotaCostsForProduct.Lock()
	mock.calls.GetQuotaCostsForProduct = append(mock.calls.GetQuotaCostsForProduct, callInfo)
	mock.lockGetQuotaCostsForProduct.Unlock()
	return mock.GetQuotaCostsForProductFunc(organizationID, resourceName, product)
}

// GetQuotaCostsForProductCalls gets all the calls that were made to GetQuotaCostsForProduct.
// Check the length with:
//     len(mockedClient.GetQuotaCostsForProductCalls())
func (mock *ClientMock) GetQuotaCostsForProductCalls() []struct {
	OrganizationID string
	ResourceName   string
	Product        string
} {
	var calls []struct {
		OrganizationID string
		ResourceName   string
		Product        string
	}
	mock.lockGetQuotaCostsForProduct.RLock()
	calls = mock.calls.GetQuotaCostsForProduct
	mock.lockGetQuotaCostsForProduct.RUnlock()
	return calls
}

// GetRegions calls GetRegionsFunc.
func (mock *ClientMock) GetRegions(provider *clustersmgmtv1.CloudProvider) (*clustersmgmtv1.CloudRegionList, error) {
	if mock.GetRegionsFunc == nil {
		panic("ClientMock.GetRegionsFunc: method is nil but Client.GetRegions was just called")
	}
	callInfo := struct {
		Provider *clustersmgmtv1.CloudProvider
	}{
		Provider: provider,
	}
	mock.lockGetRegions.Lock()
	mock.calls.GetRegions = append(mock.calls.GetRegions, callInfo)
	mock.lockGetRegions.Unlock()
	return mock.GetRegionsFunc(provider)
}

// GetRegionsCalls gets all the calls that were made to GetRegions.
// Check the length with:
//     len(mockedClient.GetRegionsCalls())
func (mock *ClientMock) GetRegionsCalls() []struct {
	Provider *clustersmgmtv1.CloudProvider
} {
	var calls []struct {
		Provider *clustersmgmtv1.CloudProvider
	}
	mock.lockGetRegions.RLock()
	calls = mock.calls.GetRegions
	mock.lockGetRegions.RUnlock()
	return calls
}

// GetRequiresTermsAcceptance calls GetRequiresTermsAcceptanceFunc.
func (mock *ClientMock) GetRequiresTermsAcceptance(username string) (bool, string, error) {
	if mock.GetRequiresTermsAcceptanceFunc == nil {
		panic("ClientMock.GetRequiresTermsAcceptanceFunc: method is nil but Client.GetRequiresTermsAcceptance was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	mock.lockGetRequiresTermsAcceptance.Lock()
	mock.calls.GetRequiresTermsAcceptance = append(mock.calls.GetRequiresTermsAcceptance, callInfo)
	mock.lockGetRequiresTermsAcceptance.Unlock()
	return mock.GetRequiresTermsAcceptanceFunc(username)
}

// GetRequiresTermsAcceptanceCalls gets all the calls that were made to GetRequiresTermsAcceptance.
// Check the length with:
//     len(mockedClient.GetRequiresTermsAcceptanceCalls())
func (mock *ClientMock) GetRequiresTermsAcceptanceCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	mock.lockGetRequiresTermsAcceptance.RLock()
	calls = mock.calls.GetRequiresTermsAcceptance
	mock.lockGetRequiresTermsAcceptance.RUnlock()
	return calls
}

// GetSyncSet calls GetSyncSetFunc.
func (mock *ClientMock) GetSyncSet(clusterID string, syncSetID string) (*clustersmgmtv1.Syncset, error) {
	if mock.GetSyncSetFunc == nil {
		panic("ClientMock.GetSyncSetFunc: method is nil but Client.GetSyncSet was just called")
	}
	callInfo := struct {
		ClusterID string
		SyncSetID string
	}{
		ClusterID: clusterID,
		SyncSetID: syncSetID,
	}
	mock.lockGetSyncSet.Lock()
	mock.calls.GetSyncSet = append(mock.calls.GetSyncSet, callInfo)
	mock.lockGetSyncSet.Unlock()
	return mock.GetSyncSetFunc(clusterID, syncSetID)
}

// GetSyncSetCalls gets all the calls that were made to GetSyncSet.
// Check the length with:
//     len(mockedClient.GetSyncSetCalls())
func (mock *ClientMock) GetSyncSetCalls() []struct {
	ClusterID string
	SyncSetID string
} {
	var calls []struct {
		ClusterID string
		SyncSetID string
	}
	mock.lockGetSyncSet.RLock()
	calls = mock.calls.GetSyncSet
	mock.lockGetSyncSet.RUnlock()
	return calls
}

// ScaleDownComputeNodes calls ScaleDownComputeNodesFunc.
func (mock *ClientMock) ScaleDownComputeNodes(clusterID string, decrement int) (*clustersmgmtv1.Cluster, error) {
	if mock.ScaleDownComputeNodesFunc == nil {
		panic("ClientMock.ScaleDownComputeNodesFunc: method is nil but Client.ScaleDownComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
		Decrement int
	}{
		ClusterID: clusterID,
		Decrement: decrement,
	}
	mock.lockScaleDownComputeNodes.Lock()
	mock.calls.ScaleDownComputeNodes = append(mock.calls.ScaleDownComputeNodes, callInfo)
	mock.lockScaleDownComputeNodes.Unlock()
	return mock.ScaleDownComputeNodesFunc(clusterID, decrement)
}

// ScaleDownComputeNodesCalls gets all the calls that were made to ScaleDownComputeNodes.
// Check the length with:
//     len(mockedClient.ScaleDownComputeNodesCalls())
func (mock *ClientMock) ScaleDownComputeNodesCalls() []struct {
	ClusterID string
	Decrement int
} {
	var calls []struct {
		ClusterID string
		Decrement int
	}
	mock.lockScaleDownComputeNodes.RLock()
	calls = mock.calls.ScaleDownComputeNodes
	mock.lockScaleDownComputeNodes.RUnlock()
	return calls
}

// ScaleUpComputeNodes calls ScaleUpComputeNodesFunc.
func (mock *ClientMock) ScaleUpComputeNodes(clusterID string, increment int) (*clustersmgmtv1.Cluster, error) {
	if mock.ScaleUpComputeNodesFunc == nil {
		panic("ClientMock.ScaleUpComputeNodesFunc: method is nil but Client.ScaleUpComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
		Increment int
	}{
		ClusterID: clusterID,
		Increment: increment,
	}
	mock.lockScaleUpComputeNodes.Lock()
	mock.calls.ScaleUpComputeNodes = append(mock.calls.ScaleUpComputeNodes, callInfo)
	mock.lockScaleUpComputeNodes.Unlock()
	return mock.ScaleUpComputeNodesFunc(clusterID, increment)
}

// ScaleUpComputeNodesCalls gets all the calls that were made to ScaleUpComputeNodes.
// Check the length with:
//     len(mockedClient.ScaleUpComputeNodesCalls())
func (mock *ClientMock) ScaleUpComputeNodesCalls() []struct {
	ClusterID string
	Increment int
} {
	var calls []struct {
		ClusterID string
		Increment int
	}
	mock.lockScaleUpComputeNodes.RLock()
	calls = mock.calls.ScaleUpComputeNodes
	mock.lockScaleUpComputeNodes.RUnlock()
	return calls
}

// SetComputeNodes calls SetComputeNodesFunc.
func (mock *ClientMock) SetComputeNodes(clusterID string, numNodes int) (*clustersmgmtv1.Cluster, error) {
	if mock.SetComputeNodesFunc == nil {
		panic("ClientMock.SetComputeNodesFunc: method is nil but Client.SetComputeNodes was just called")
	}
	callInfo := struct {
		ClusterID string
		NumNodes  int
	}{
		ClusterID: clusterID,
		NumNodes:  numNodes,
	}
	mock.lockSetComputeNodes.Lock()
	mock.calls.SetComputeNodes = append(mock.calls.SetComputeNodes, callInfo)
	mock.lockSetComputeNodes.Unlock()
	return mock.SetComputeNodesFunc(clusterID, numNodes)
}

// SetComputeNodesCalls gets all the calls that were made to SetComputeNodes.
// Check the length with:
//     len(mockedClient.SetComputeNodesCalls())
func (mock *ClientMock) SetComputeNodesCalls() []struct {
	ClusterID string
	NumNodes  int
} {
	var calls []struct {
		ClusterID string
		NumNodes  int
	}
	mock.lockSetComputeNodes.RLock()
	calls = mock.calls.SetComputeNodes
	mock.lockSetComputeNodes.RUnlock()
	return calls
}

// UpdateAddonParameters calls UpdateAddonParametersFunc.
func (mock *ClientMock) UpdateAddonParameters(clusterId string, addonId string, parameters []Parameter) (*clustersmgmtv1.AddOnInstallation, error) {
	if mock.UpdateAddonParametersFunc == nil {
		panic("ClientMock.UpdateAddonParametersFunc: method is nil but Client.UpdateAddonParameters was just called")
	}
	callInfo := struct {
		ClusterId  string
		AddonId    string
		Parameters []Parameter
	}{
		ClusterId:  clusterId,
		AddonId:    addonId,
		Parameters: parameters,
	}
	mock.lockUpdateAddonParameters.Lock()
	mock.calls.UpdateAddonParameters = append(mock.calls.UpdateAddonParameters, callInfo)
	mock.lockUpdateAddonParameters.Unlock()
	return mock.UpdateAddonParametersFunc(clusterId, addonId, parameters)
}

// UpdateAddonParametersCalls gets all the calls that were made to UpdateAddonParameters.
// Check the length with:
//     len(mockedClient.UpdateAddonParametersCalls())
func (mock *ClientMock) UpdateAddonParametersCalls() []struct {
	ClusterId  string
	AddonId    string
	Parameters []Parameter
} {
	var calls []struct {
		ClusterId  string
		AddonId    string
		Parameters []Parameter
	}
	mock.lockUpdateAddonParameters.RLock()
	calls = mock.calls.UpdateAddonParameters
	mock.lockUpdateAddonParameters.RUnlock()
	return calls
}

// UpdateSyncSet calls UpdateSyncSetFunc.
func (mock *ClientMock) UpdateSyncSet(clusterID string, syncSetID string, syncset *clustersmgmtv1.Syncset) (*clustersmgmtv1.Syncset, error) {
	if mock.UpdateSyncSetFunc == nil {
		panic("ClientMock.UpdateSyncSetFunc: method is nil but Client.UpdateSyncSet was just called")
	}
	callInfo := struct {
		ClusterID string
		SyncSetID string
		Syncset   *clustersmgmtv1.Syncset
	}{
		ClusterID: clusterID,
		SyncSetID: syncSetID,
		Syncset:   syncset,
	}
	mock.lockUpdateSyncSet.Lock()
	mock.calls.UpdateSyncSet = append(mock.calls.UpdateSyncSet, callInfo)
	mock.lockUpdateSyncSet.Unlock()
	return mock.UpdateSyncSetFunc(clusterID, syncSetID, syncset)
}

// UpdateSyncSetCalls gets all the calls that were made to UpdateSyncSet.
// Check the length with:
//     len(mockedClient.UpdateSyncSetCalls())
func (mock *ClientMock) UpdateSyncSetCalls() []struct {
	ClusterID string
	SyncSetID string
	Syncset   *clustersmgmtv1.Syncset
} {
	var calls []struct {
		ClusterID string
		SyncSetID string
		Syncset   *clustersmgmtv1.Syncset
	}
	mock.lockUpdateSyncSet.RLock()
	calls = mock.calls.UpdateSyncSet
	mock.lockUpdateSyncSet.RUnlock()
	return calls
}
