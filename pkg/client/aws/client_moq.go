// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"github.com/aws/aws-sdk-go/service/route53"
	"sync"
)

// Ensure, that AWSClientMock does implement AWSClient.
// If this is not the case, regenerate this file with moq.
var _ AWSClient = &AWSClientMock{}

// AWSClientMock is a mock implementation of AWSClient.
//
//	func TestSomethingThatUsesAWSClient(t *testing.T) {
//
//		// make and configure a mocked AWSClient
//		mockedAWSClient := &AWSClientMock{
//			ChangeResourceRecordSetsFunc: func(dnsName string, recordChangeBatch *route53.ChangeBatch) (*route53.ChangeResourceRecordSetsOutput, error) {
//				panic("mock out the ChangeResourceRecordSets method")
//			},
//			GetChangeFunc: func(changeId string) (*route53.GetChangeOutput, error) {
//				panic("mock out the GetChange method")
//			},
//			ListHostedZonesByNameInputFunc: func(dnsName string) (*route53.ListHostedZonesByNameOutput, error) {
//				panic("mock out the ListHostedZonesByNameInput method")
//			},
//		}
//
//		// use mockedAWSClient in code that requires AWSClient
//		// and then make assertions.
//
//	}
type AWSClientMock struct {
	// ChangeResourceRecordSetsFunc mocks the ChangeResourceRecordSets method.
	ChangeResourceRecordSetsFunc func(dnsName string, recordChangeBatch *route53.ChangeBatch) (*route53.ChangeResourceRecordSetsOutput, error)

	// GetChangeFunc mocks the GetChange method.
	GetChangeFunc func(changeId string) (*route53.GetChangeOutput, error)

	// ListHostedZonesByNameInputFunc mocks the ListHostedZonesByNameInput method.
	ListHostedZonesByNameInputFunc func(dnsName string) (*route53.ListHostedZonesByNameOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// ChangeResourceRecordSets holds details about calls to the ChangeResourceRecordSets method.
		ChangeResourceRecordSets []struct {
			// DnsName is the dnsName argument value.
			DnsName string
			// RecordChangeBatch is the recordChangeBatch argument value.
			RecordChangeBatch *route53.ChangeBatch
		}
		// GetChange holds details about calls to the GetChange method.
		GetChange []struct {
			// ChangeId is the changeId argument value.
			ChangeId string
		}
		// ListHostedZonesByNameInput holds details about calls to the ListHostedZonesByNameInput method.
		ListHostedZonesByNameInput []struct {
			// DnsName is the dnsName argument value.
			DnsName string
		}
	}
	lockChangeResourceRecordSets   sync.RWMutex
	lockGetChange                  sync.RWMutex
	lockListHostedZonesByNameInput sync.RWMutex
}

// ChangeResourceRecordSets calls ChangeResourceRecordSetsFunc.
func (mock *AWSClientMock) ChangeResourceRecordSets(dnsName string, recordChangeBatch *route53.ChangeBatch) (*route53.ChangeResourceRecordSetsOutput, error) {
	if mock.ChangeResourceRecordSetsFunc == nil {
		panic("AWSClientMock.ChangeResourceRecordSetsFunc: method is nil but AWSClient.ChangeResourceRecordSets was just called")
	}
	callInfo := struct {
		DnsName           string
		RecordChangeBatch *route53.ChangeBatch
	}{
		DnsName:           dnsName,
		RecordChangeBatch: recordChangeBatch,
	}
	mock.lockChangeResourceRecordSets.Lock()
	mock.calls.ChangeResourceRecordSets = append(mock.calls.ChangeResourceRecordSets, callInfo)
	mock.lockChangeResourceRecordSets.Unlock()
	return mock.ChangeResourceRecordSetsFunc(dnsName, recordChangeBatch)
}

// ChangeResourceRecordSetsCalls gets all the calls that were made to ChangeResourceRecordSets.
// Check the length with:
//
//	len(mockedAWSClient.ChangeResourceRecordSetsCalls())
func (mock *AWSClientMock) ChangeResourceRecordSetsCalls() []struct {
	DnsName           string
	RecordChangeBatch *route53.ChangeBatch
} {
	var calls []struct {
		DnsName           string
		RecordChangeBatch *route53.ChangeBatch
	}
	mock.lockChangeResourceRecordSets.RLock()
	calls = mock.calls.ChangeResourceRecordSets
	mock.lockChangeResourceRecordSets.RUnlock()
	return calls
}

// GetChange calls GetChangeFunc.
func (mock *AWSClientMock) GetChange(changeId string) (*route53.GetChangeOutput, error) {
	if mock.GetChangeFunc == nil {
		panic("AWSClientMock.GetChangeFunc: method is nil but AWSClient.GetChange was just called")
	}
	callInfo := struct {
		ChangeId string
	}{
		ChangeId: changeId,
	}
	mock.lockGetChange.Lock()
	mock.calls.GetChange = append(mock.calls.GetChange, callInfo)
	mock.lockGetChange.Unlock()
	return mock.GetChangeFunc(changeId)
}

// GetChangeCalls gets all the calls that were made to GetChange.
// Check the length with:
//
//	len(mockedAWSClient.GetChangeCalls())
func (mock *AWSClientMock) GetChangeCalls() []struct {
	ChangeId string
} {
	var calls []struct {
		ChangeId string
	}
	mock.lockGetChange.RLock()
	calls = mock.calls.GetChange
	mock.lockGetChange.RUnlock()
	return calls
}

// ListHostedZonesByNameInput calls ListHostedZonesByNameInputFunc.
func (mock *AWSClientMock) ListHostedZonesByNameInput(dnsName string) (*route53.ListHostedZonesByNameOutput, error) {
	if mock.ListHostedZonesByNameInputFunc == nil {
		panic("AWSClientMock.ListHostedZonesByNameInputFunc: method is nil but AWSClient.ListHostedZonesByNameInput was just called")
	}
	callInfo := struct {
		DnsName string
	}{
		DnsName: dnsName,
	}
	mock.lockListHostedZonesByNameInput.Lock()
	mock.calls.ListHostedZonesByNameInput = append(mock.calls.ListHostedZonesByNameInput, callInfo)
	mock.lockListHostedZonesByNameInput.Unlock()
	return mock.ListHostedZonesByNameInputFunc(dnsName)
}

// ListHostedZonesByNameInputCalls gets all the calls that were made to ListHostedZonesByNameInput.
// Check the length with:
//
//	len(mockedAWSClient.ListHostedZonesByNameInputCalls())
func (mock *AWSClientMock) ListHostedZonesByNameInputCalls() []struct {
	DnsName string
} {
	var calls []struct {
		DnsName string
	}
	mock.lockListHostedZonesByNameInput.RLock()
	calls = mock.calls.ListHostedZonesByNameInput
	mock.lockListHostedZonesByNameInput.RUnlock()
	return calls
}
