// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/route53"
	"sync"
)

// Ensure, that Route53APIMock does implement Route53API.
// If this is not the case, regenerate this file with moq.
var _ Route53API = &Route53APIMock{}

// Route53APIMock is a mock implementation of Route53API.
//
//     func TestSomethingThatUsesRoute53API(t *testing.T) {
//
//         // make and configure a mocked Route53API
//         mockedRoute53API := &Route53APIMock{
//             AssociateVPCWithHostedZoneFunc: func(in1 *route53.AssociateVPCWithHostedZoneInput) (*route53.AssociateVPCWithHostedZoneOutput, error) {
// 	               panic("mock out the AssociateVPCWithHostedZone method")
//             },
//             AssociateVPCWithHostedZoneRequestFunc: func(in1 *route53.AssociateVPCWithHostedZoneInput) (*request.Request, *route53.AssociateVPCWithHostedZoneOutput) {
// 	               panic("mock out the AssociateVPCWithHostedZoneRequest method")
//             },
//             AssociateVPCWithHostedZoneWithContextFunc: func(in1 context.Context, in2 *route53.AssociateVPCWithHostedZoneInput, in3 ...request.Option) (*route53.AssociateVPCWithHostedZoneOutput, error) {
// 	               panic("mock out the AssociateVPCWithHostedZoneWithContext method")
//             },
//             ChangeResourceRecordSetsFunc: func(in1 *route53.ChangeResourceRecordSetsInput) (*route53.ChangeResourceRecordSetsOutput, error) {
// 	               panic("mock out the ChangeResourceRecordSets method")
//             },
//             ChangeResourceRecordSetsRequestFunc: func(in1 *route53.ChangeResourceRecordSetsInput) (*request.Request, *route53.ChangeResourceRecordSetsOutput) {
// 	               panic("mock out the ChangeResourceRecordSetsRequest method")
//             },
//             ChangeResourceRecordSetsWithContextFunc: func(in1 context.Context, in2 *route53.ChangeResourceRecordSetsInput, in3 ...request.Option) (*route53.ChangeResourceRecordSetsOutput, error) {
// 	               panic("mock out the ChangeResourceRecordSetsWithContext method")
//             },
//             ChangeTagsForResourceFunc: func(in1 *route53.ChangeTagsForResourceInput) (*route53.ChangeTagsForResourceOutput, error) {
// 	               panic("mock out the ChangeTagsForResource method")
//             },
//             ChangeTagsForResourceRequestFunc: func(in1 *route53.ChangeTagsForResourceInput) (*request.Request, *route53.ChangeTagsForResourceOutput) {
// 	               panic("mock out the ChangeTagsForResourceRequest method")
//             },
//             ChangeTagsForResourceWithContextFunc: func(in1 context.Context, in2 *route53.ChangeTagsForResourceInput, in3 ...request.Option) (*route53.ChangeTagsForResourceOutput, error) {
// 	               panic("mock out the ChangeTagsForResourceWithContext method")
//             },
//             CreateHealthCheckFunc: func(in1 *route53.CreateHealthCheckInput) (*route53.CreateHealthCheckOutput, error) {
// 	               panic("mock out the CreateHealthCheck method")
//             },
//             CreateHealthCheckRequestFunc: func(in1 *route53.CreateHealthCheckInput) (*request.Request, *route53.CreateHealthCheckOutput) {
// 	               panic("mock out the CreateHealthCheckRequest method")
//             },
//             CreateHealthCheckWithContextFunc: func(in1 context.Context, in2 *route53.CreateHealthCheckInput, in3 ...request.Option) (*route53.CreateHealthCheckOutput, error) {
// 	               panic("mock out the CreateHealthCheckWithContext method")
//             },
//             CreateHostedZoneFunc: func(in1 *route53.CreateHostedZoneInput) (*route53.CreateHostedZoneOutput, error) {
// 	               panic("mock out the CreateHostedZone method")
//             },
//             CreateHostedZoneRequestFunc: func(in1 *route53.CreateHostedZoneInput) (*request.Request, *route53.CreateHostedZoneOutput) {
// 	               panic("mock out the CreateHostedZoneRequest method")
//             },
//             CreateHostedZoneWithContextFunc: func(in1 context.Context, in2 *route53.CreateHostedZoneInput, in3 ...request.Option) (*route53.CreateHostedZoneOutput, error) {
// 	               panic("mock out the CreateHostedZoneWithContext method")
//             },
//             CreateQueryLoggingConfigFunc: func(in1 *route53.CreateQueryLoggingConfigInput) (*route53.CreateQueryLoggingConfigOutput, error) {
// 	               panic("mock out the CreateQueryLoggingConfig method")
//             },
//             CreateQueryLoggingConfigRequestFunc: func(in1 *route53.CreateQueryLoggingConfigInput) (*request.Request, *route53.CreateQueryLoggingConfigOutput) {
// 	               panic("mock out the CreateQueryLoggingConfigRequest method")
//             },
//             CreateQueryLoggingConfigWithContextFunc: func(in1 context.Context, in2 *route53.CreateQueryLoggingConfigInput, in3 ...request.Option) (*route53.CreateQueryLoggingConfigOutput, error) {
// 	               panic("mock out the CreateQueryLoggingConfigWithContext method")
//             },
//             CreateReusableDelegationSetFunc: func(in1 *route53.CreateReusableDelegationSetInput) (*route53.CreateReusableDelegationSetOutput, error) {
// 	               panic("mock out the CreateReusableDelegationSet method")
//             },
//             CreateReusableDelegationSetRequestFunc: func(in1 *route53.CreateReusableDelegationSetInput) (*request.Request, *route53.CreateReusableDelegationSetOutput) {
// 	               panic("mock out the CreateReusableDelegationSetRequest method")
//             },
//             CreateReusableDelegationSetWithContextFunc: func(in1 context.Context, in2 *route53.CreateReusableDelegationSetInput, in3 ...request.Option) (*route53.CreateReusableDelegationSetOutput, error) {
// 	               panic("mock out the CreateReusableDelegationSetWithContext method")
//             },
//             CreateTrafficPolicyFunc: func(in1 *route53.CreateTrafficPolicyInput) (*route53.CreateTrafficPolicyOutput, error) {
// 	               panic("mock out the CreateTrafficPolicy method")
//             },
//             CreateTrafficPolicyInstanceFunc: func(in1 *route53.CreateTrafficPolicyInstanceInput) (*route53.CreateTrafficPolicyInstanceOutput, error) {
// 	               panic("mock out the CreateTrafficPolicyInstance method")
//             },
//             CreateTrafficPolicyInstanceRequestFunc: func(in1 *route53.CreateTrafficPolicyInstanceInput) (*request.Request, *route53.CreateTrafficPolicyInstanceOutput) {
// 	               panic("mock out the CreateTrafficPolicyInstanceRequest method")
//             },
//             CreateTrafficPolicyInstanceWithContextFunc: func(in1 context.Context, in2 *route53.CreateTrafficPolicyInstanceInput, in3 ...request.Option) (*route53.CreateTrafficPolicyInstanceOutput, error) {
// 	               panic("mock out the CreateTrafficPolicyInstanceWithContext method")
//             },
//             CreateTrafficPolicyRequestFunc: func(in1 *route53.CreateTrafficPolicyInput) (*request.Request, *route53.CreateTrafficPolicyOutput) {
// 	               panic("mock out the CreateTrafficPolicyRequest method")
//             },
//             CreateTrafficPolicyVersionFunc: func(in1 *route53.CreateTrafficPolicyVersionInput) (*route53.CreateTrafficPolicyVersionOutput, error) {
// 	               panic("mock out the CreateTrafficPolicyVersion method")
//             },
//             CreateTrafficPolicyVersionRequestFunc: func(in1 *route53.CreateTrafficPolicyVersionInput) (*request.Request, *route53.CreateTrafficPolicyVersionOutput) {
// 	               panic("mock out the CreateTrafficPolicyVersionRequest method")
//             },
//             CreateTrafficPolicyVersionWithContextFunc: func(in1 context.Context, in2 *route53.CreateTrafficPolicyVersionInput, in3 ...request.Option) (*route53.CreateTrafficPolicyVersionOutput, error) {
// 	               panic("mock out the CreateTrafficPolicyVersionWithContext method")
//             },
//             CreateTrafficPolicyWithContextFunc: func(in1 context.Context, in2 *route53.CreateTrafficPolicyInput, in3 ...request.Option) (*route53.CreateTrafficPolicyOutput, error) {
// 	               panic("mock out the CreateTrafficPolicyWithContext method")
//             },
//             CreateVPCAssociationAuthorizationFunc: func(in1 *route53.CreateVPCAssociationAuthorizationInput) (*route53.CreateVPCAssociationAuthorizationOutput, error) {
// 	               panic("mock out the CreateVPCAssociationAuthorization method")
//             },
//             CreateVPCAssociationAuthorizationRequestFunc: func(in1 *route53.CreateVPCAssociationAuthorizationInput) (*request.Request, *route53.CreateVPCAssociationAuthorizationOutput) {
// 	               panic("mock out the CreateVPCAssociationAuthorizationRequest method")
//             },
//             CreateVPCAssociationAuthorizationWithContextFunc: func(in1 context.Context, in2 *route53.CreateVPCAssociationAuthorizationInput, in3 ...request.Option) (*route53.CreateVPCAssociationAuthorizationOutput, error) {
// 	               panic("mock out the CreateVPCAssociationAuthorizationWithContext method")
//             },
//             DeleteHealthCheckFunc: func(in1 *route53.DeleteHealthCheckInput) (*route53.DeleteHealthCheckOutput, error) {
// 	               panic("mock out the DeleteHealthCheck method")
//             },
//             DeleteHealthCheckRequestFunc: func(in1 *route53.DeleteHealthCheckInput) (*request.Request, *route53.DeleteHealthCheckOutput) {
// 	               panic("mock out the DeleteHealthCheckRequest method")
//             },
//             DeleteHealthCheckWithContextFunc: func(in1 context.Context, in2 *route53.DeleteHealthCheckInput, in3 ...request.Option) (*route53.DeleteHealthCheckOutput, error) {
// 	               panic("mock out the DeleteHealthCheckWithContext method")
//             },
//             DeleteHostedZoneFunc: func(in1 *route53.DeleteHostedZoneInput) (*route53.DeleteHostedZoneOutput, error) {
// 	               panic("mock out the DeleteHostedZone method")
//             },
//             DeleteHostedZoneRequestFunc: func(in1 *route53.DeleteHostedZoneInput) (*request.Request, *route53.DeleteHostedZoneOutput) {
// 	               panic("mock out the DeleteHostedZoneRequest method")
//             },
//             DeleteHostedZoneWithContextFunc: func(in1 context.Context, in2 *route53.DeleteHostedZoneInput, in3 ...request.Option) (*route53.DeleteHostedZoneOutput, error) {
// 	               panic("mock out the DeleteHostedZoneWithContext method")
//             },
//             DeleteQueryLoggingConfigFunc: func(in1 *route53.DeleteQueryLoggingConfigInput) (*route53.DeleteQueryLoggingConfigOutput, error) {
// 	               panic("mock out the DeleteQueryLoggingConfig method")
//             },
//             DeleteQueryLoggingConfigRequestFunc: func(in1 *route53.DeleteQueryLoggingConfigInput) (*request.Request, *route53.DeleteQueryLoggingConfigOutput) {
// 	               panic("mock out the DeleteQueryLoggingConfigRequest method")
//             },
//             DeleteQueryLoggingConfigWithContextFunc: func(in1 context.Context, in2 *route53.DeleteQueryLoggingConfigInput, in3 ...request.Option) (*route53.DeleteQueryLoggingConfigOutput, error) {
// 	               panic("mock out the DeleteQueryLoggingConfigWithContext method")
//             },
//             DeleteReusableDelegationSetFunc: func(in1 *route53.DeleteReusableDelegationSetInput) (*route53.DeleteReusableDelegationSetOutput, error) {
// 	               panic("mock out the DeleteReusableDelegationSet method")
//             },
//             DeleteReusableDelegationSetRequestFunc: func(in1 *route53.DeleteReusableDelegationSetInput) (*request.Request, *route53.DeleteReusableDelegationSetOutput) {
// 	               panic("mock out the DeleteReusableDelegationSetRequest method")
//             },
//             DeleteReusableDelegationSetWithContextFunc: func(in1 context.Context, in2 *route53.DeleteReusableDelegationSetInput, in3 ...request.Option) (*route53.DeleteReusableDelegationSetOutput, error) {
// 	               panic("mock out the DeleteReusableDelegationSetWithContext method")
//             },
//             DeleteTrafficPolicyFunc: func(in1 *route53.DeleteTrafficPolicyInput) (*route53.DeleteTrafficPolicyOutput, error) {
// 	               panic("mock out the DeleteTrafficPolicy method")
//             },
//             DeleteTrafficPolicyInstanceFunc: func(in1 *route53.DeleteTrafficPolicyInstanceInput) (*route53.DeleteTrafficPolicyInstanceOutput, error) {
// 	               panic("mock out the DeleteTrafficPolicyInstance method")
//             },
//             DeleteTrafficPolicyInstanceRequestFunc: func(in1 *route53.DeleteTrafficPolicyInstanceInput) (*request.Request, *route53.DeleteTrafficPolicyInstanceOutput) {
// 	               panic("mock out the DeleteTrafficPolicyInstanceRequest method")
//             },
//             DeleteTrafficPolicyInstanceWithContextFunc: func(in1 context.Context, in2 *route53.DeleteTrafficPolicyInstanceInput, in3 ...request.Option) (*route53.DeleteTrafficPolicyInstanceOutput, error) {
// 	               panic("mock out the DeleteTrafficPolicyInstanceWithContext method")
//             },
//             DeleteTrafficPolicyRequestFunc: func(in1 *route53.DeleteTrafficPolicyInput) (*request.Request, *route53.DeleteTrafficPolicyOutput) {
// 	               panic("mock out the DeleteTrafficPolicyRequest method")
//             },
//             DeleteTrafficPolicyWithContextFunc: func(in1 context.Context, in2 *route53.DeleteTrafficPolicyInput, in3 ...request.Option) (*route53.DeleteTrafficPolicyOutput, error) {
// 	               panic("mock out the DeleteTrafficPolicyWithContext method")
//             },
//             DeleteVPCAssociationAuthorizationFunc: func(in1 *route53.DeleteVPCAssociationAuthorizationInput) (*route53.DeleteVPCAssociationAuthorizationOutput, error) {
// 	               panic("mock out the DeleteVPCAssociationAuthorization method")
//             },
//             DeleteVPCAssociationAuthorizationRequestFunc: func(in1 *route53.DeleteVPCAssociationAuthorizationInput) (*request.Request, *route53.DeleteVPCAssociationAuthorizationOutput) {
// 	               panic("mock out the DeleteVPCAssociationAuthorizationRequest method")
//             },
//             DeleteVPCAssociationAuthorizationWithContextFunc: func(in1 context.Context, in2 *route53.DeleteVPCAssociationAuthorizationInput, in3 ...request.Option) (*route53.DeleteVPCAssociationAuthorizationOutput, error) {
// 	               panic("mock out the DeleteVPCAssociationAuthorizationWithContext method")
//             },
//             DisassociateVPCFromHostedZoneFunc: func(in1 *route53.DisassociateVPCFromHostedZoneInput) (*route53.DisassociateVPCFromHostedZoneOutput, error) {
// 	               panic("mock out the DisassociateVPCFromHostedZone method")
//             },
//             DisassociateVPCFromHostedZoneRequestFunc: func(in1 *route53.DisassociateVPCFromHostedZoneInput) (*request.Request, *route53.DisassociateVPCFromHostedZoneOutput) {
// 	               panic("mock out the DisassociateVPCFromHostedZoneRequest method")
//             },
//             DisassociateVPCFromHostedZoneWithContextFunc: func(in1 context.Context, in2 *route53.DisassociateVPCFromHostedZoneInput, in3 ...request.Option) (*route53.DisassociateVPCFromHostedZoneOutput, error) {
// 	               panic("mock out the DisassociateVPCFromHostedZoneWithContext method")
//             },
//             GetAccountLimitFunc: func(in1 *route53.GetAccountLimitInput) (*route53.GetAccountLimitOutput, error) {
// 	               panic("mock out the GetAccountLimit method")
//             },
//             GetAccountLimitRequestFunc: func(in1 *route53.GetAccountLimitInput) (*request.Request, *route53.GetAccountLimitOutput) {
// 	               panic("mock out the GetAccountLimitRequest method")
//             },
//             GetAccountLimitWithContextFunc: func(in1 context.Context, in2 *route53.GetAccountLimitInput, in3 ...request.Option) (*route53.GetAccountLimitOutput, error) {
// 	               panic("mock out the GetAccountLimitWithContext method")
//             },
//             GetChangeFunc: func(in1 *route53.GetChangeInput) (*route53.GetChangeOutput, error) {
// 	               panic("mock out the GetChange method")
//             },
//             GetChangeRequestFunc: func(in1 *route53.GetChangeInput) (*request.Request, *route53.GetChangeOutput) {
// 	               panic("mock out the GetChangeRequest method")
//             },
//             GetChangeWithContextFunc: func(in1 context.Context, in2 *route53.GetChangeInput, in3 ...request.Option) (*route53.GetChangeOutput, error) {
// 	               panic("mock out the GetChangeWithContext method")
//             },
//             GetCheckerIpRangesFunc: func(in1 *route53.GetCheckerIpRangesInput) (*route53.GetCheckerIpRangesOutput, error) {
// 	               panic("mock out the GetCheckerIpRanges method")
//             },
//             GetCheckerIpRangesRequestFunc: func(in1 *route53.GetCheckerIpRangesInput) (*request.Request, *route53.GetCheckerIpRangesOutput) {
// 	               panic("mock out the GetCheckerIpRangesRequest method")
//             },
//             GetCheckerIpRangesWithContextFunc: func(in1 context.Context, in2 *route53.GetCheckerIpRangesInput, in3 ...request.Option) (*route53.GetCheckerIpRangesOutput, error) {
// 	               panic("mock out the GetCheckerIpRangesWithContext method")
//             },
//             GetGeoLocationFunc: func(in1 *route53.GetGeoLocationInput) (*route53.GetGeoLocationOutput, error) {
// 	               panic("mock out the GetGeoLocation method")
//             },
//             GetGeoLocationRequestFunc: func(in1 *route53.GetGeoLocationInput) (*request.Request, *route53.GetGeoLocationOutput) {
// 	               panic("mock out the GetGeoLocationRequest method")
//             },
//             GetGeoLocationWithContextFunc: func(in1 context.Context, in2 *route53.GetGeoLocationInput, in3 ...request.Option) (*route53.GetGeoLocationOutput, error) {
// 	               panic("mock out the GetGeoLocationWithContext method")
//             },
//             GetHealthCheckFunc: func(in1 *route53.GetHealthCheckInput) (*route53.GetHealthCheckOutput, error) {
// 	               panic("mock out the GetHealthCheck method")
//             },
//             GetHealthCheckCountFunc: func(in1 *route53.GetHealthCheckCountInput) (*route53.GetHealthCheckCountOutput, error) {
// 	               panic("mock out the GetHealthCheckCount method")
//             },
//             GetHealthCheckCountRequestFunc: func(in1 *route53.GetHealthCheckCountInput) (*request.Request, *route53.GetHealthCheckCountOutput) {
// 	               panic("mock out the GetHealthCheckCountRequest method")
//             },
//             GetHealthCheckCountWithContextFunc: func(in1 context.Context, in2 *route53.GetHealthCheckCountInput, in3 ...request.Option) (*route53.GetHealthCheckCountOutput, error) {
// 	               panic("mock out the GetHealthCheckCountWithContext method")
//             },
//             GetHealthCheckLastFailureReasonFunc: func(in1 *route53.GetHealthCheckLastFailureReasonInput) (*route53.GetHealthCheckLastFailureReasonOutput, error) {
// 	               panic("mock out the GetHealthCheckLastFailureReason method")
//             },
//             GetHealthCheckLastFailureReasonRequestFunc: func(in1 *route53.GetHealthCheckLastFailureReasonInput) (*request.Request, *route53.GetHealthCheckLastFailureReasonOutput) {
// 	               panic("mock out the GetHealthCheckLastFailureReasonRequest method")
//             },
//             GetHealthCheckLastFailureReasonWithContextFunc: func(in1 context.Context, in2 *route53.GetHealthCheckLastFailureReasonInput, in3 ...request.Option) (*route53.GetHealthCheckLastFailureReasonOutput, error) {
// 	               panic("mock out the GetHealthCheckLastFailureReasonWithContext method")
//             },
//             GetHealthCheckRequestFunc: func(in1 *route53.GetHealthCheckInput) (*request.Request, *route53.GetHealthCheckOutput) {
// 	               panic("mock out the GetHealthCheckRequest method")
//             },
//             GetHealthCheckStatusFunc: func(in1 *route53.GetHealthCheckStatusInput) (*route53.GetHealthCheckStatusOutput, error) {
// 	               panic("mock out the GetHealthCheckStatus method")
//             },
//             GetHealthCheckStatusRequestFunc: func(in1 *route53.GetHealthCheckStatusInput) (*request.Request, *route53.GetHealthCheckStatusOutput) {
// 	               panic("mock out the GetHealthCheckStatusRequest method")
//             },
//             GetHealthCheckStatusWithContextFunc: func(in1 context.Context, in2 *route53.GetHealthCheckStatusInput, in3 ...request.Option) (*route53.GetHealthCheckStatusOutput, error) {
// 	               panic("mock out the GetHealthCheckStatusWithContext method")
//             },
//             GetHealthCheckWithContextFunc: func(in1 context.Context, in2 *route53.GetHealthCheckInput, in3 ...request.Option) (*route53.GetHealthCheckOutput, error) {
// 	               panic("mock out the GetHealthCheckWithContext method")
//             },
//             GetHostedZoneFunc: func(in1 *route53.GetHostedZoneInput) (*route53.GetHostedZoneOutput, error) {
// 	               panic("mock out the GetHostedZone method")
//             },
//             GetHostedZoneCountFunc: func(in1 *route53.GetHostedZoneCountInput) (*route53.GetHostedZoneCountOutput, error) {
// 	               panic("mock out the GetHostedZoneCount method")
//             },
//             GetHostedZoneCountRequestFunc: func(in1 *route53.GetHostedZoneCountInput) (*request.Request, *route53.GetHostedZoneCountOutput) {
// 	               panic("mock out the GetHostedZoneCountRequest method")
//             },
//             GetHostedZoneCountWithContextFunc: func(in1 context.Context, in2 *route53.GetHostedZoneCountInput, in3 ...request.Option) (*route53.GetHostedZoneCountOutput, error) {
// 	               panic("mock out the GetHostedZoneCountWithContext method")
//             },
//             GetHostedZoneLimitFunc: func(in1 *route53.GetHostedZoneLimitInput) (*route53.GetHostedZoneLimitOutput, error) {
// 	               panic("mock out the GetHostedZoneLimit method")
//             },
//             GetHostedZoneLimitRequestFunc: func(in1 *route53.GetHostedZoneLimitInput) (*request.Request, *route53.GetHostedZoneLimitOutput) {
// 	               panic("mock out the GetHostedZoneLimitRequest method")
//             },
//             GetHostedZoneLimitWithContextFunc: func(in1 context.Context, in2 *route53.GetHostedZoneLimitInput, in3 ...request.Option) (*route53.GetHostedZoneLimitOutput, error) {
// 	               panic("mock out the GetHostedZoneLimitWithContext method")
//             },
//             GetHostedZoneRequestFunc: func(in1 *route53.GetHostedZoneInput) (*request.Request, *route53.GetHostedZoneOutput) {
// 	               panic("mock out the GetHostedZoneRequest method")
//             },
//             GetHostedZoneWithContextFunc: func(in1 context.Context, in2 *route53.GetHostedZoneInput, in3 ...request.Option) (*route53.GetHostedZoneOutput, error) {
// 	               panic("mock out the GetHostedZoneWithContext method")
//             },
//             GetQueryLoggingConfigFunc: func(in1 *route53.GetQueryLoggingConfigInput) (*route53.GetQueryLoggingConfigOutput, error) {
// 	               panic("mock out the GetQueryLoggingConfig method")
//             },
//             GetQueryLoggingConfigRequestFunc: func(in1 *route53.GetQueryLoggingConfigInput) (*request.Request, *route53.GetQueryLoggingConfigOutput) {
// 	               panic("mock out the GetQueryLoggingConfigRequest method")
//             },
//             GetQueryLoggingConfigWithContextFunc: func(in1 context.Context, in2 *route53.GetQueryLoggingConfigInput, in3 ...request.Option) (*route53.GetQueryLoggingConfigOutput, error) {
// 	               panic("mock out the GetQueryLoggingConfigWithContext method")
//             },
//             GetReusableDelegationSetFunc: func(in1 *route53.GetReusableDelegationSetInput) (*route53.GetReusableDelegationSetOutput, error) {
// 	               panic("mock out the GetReusableDelegationSet method")
//             },
//             GetReusableDelegationSetLimitFunc: func(in1 *route53.GetReusableDelegationSetLimitInput) (*route53.GetReusableDelegationSetLimitOutput, error) {
// 	               panic("mock out the GetReusableDelegationSetLimit method")
//             },
//             GetReusableDelegationSetLimitRequestFunc: func(in1 *route53.GetReusableDelegationSetLimitInput) (*request.Request, *route53.GetReusableDelegationSetLimitOutput) {
// 	               panic("mock out the GetReusableDelegationSetLimitRequest method")
//             },
//             GetReusableDelegationSetLimitWithContextFunc: func(in1 context.Context, in2 *route53.GetReusableDelegationSetLimitInput, in3 ...request.Option) (*route53.GetReusableDelegationSetLimitOutput, error) {
// 	               panic("mock out the GetReusableDelegationSetLimitWithContext method")
//             },
//             GetReusableDelegationSetRequestFunc: func(in1 *route53.GetReusableDelegationSetInput) (*request.Request, *route53.GetReusableDelegationSetOutput) {
// 	               panic("mock out the GetReusableDelegationSetRequest method")
//             },
//             GetReusableDelegationSetWithContextFunc: func(in1 context.Context, in2 *route53.GetReusableDelegationSetInput, in3 ...request.Option) (*route53.GetReusableDelegationSetOutput, error) {
// 	               panic("mock out the GetReusableDelegationSetWithContext method")
//             },
//             GetTrafficPolicyFunc: func(in1 *route53.GetTrafficPolicyInput) (*route53.GetTrafficPolicyOutput, error) {
// 	               panic("mock out the GetTrafficPolicy method")
//             },
//             GetTrafficPolicyInstanceFunc: func(in1 *route53.GetTrafficPolicyInstanceInput) (*route53.GetTrafficPolicyInstanceOutput, error) {
// 	               panic("mock out the GetTrafficPolicyInstance method")
//             },
//             GetTrafficPolicyInstanceCountFunc: func(in1 *route53.GetTrafficPolicyInstanceCountInput) (*route53.GetTrafficPolicyInstanceCountOutput, error) {
// 	               panic("mock out the GetTrafficPolicyInstanceCount method")
//             },
//             GetTrafficPolicyInstanceCountRequestFunc: func(in1 *route53.GetTrafficPolicyInstanceCountInput) (*request.Request, *route53.GetTrafficPolicyInstanceCountOutput) {
// 	               panic("mock out the GetTrafficPolicyInstanceCountRequest method")
//             },
//             GetTrafficPolicyInstanceCountWithContextFunc: func(in1 context.Context, in2 *route53.GetTrafficPolicyInstanceCountInput, in3 ...request.Option) (*route53.GetTrafficPolicyInstanceCountOutput, error) {
// 	               panic("mock out the GetTrafficPolicyInstanceCountWithContext method")
//             },
//             GetTrafficPolicyInstanceRequestFunc: func(in1 *route53.GetTrafficPolicyInstanceInput) (*request.Request, *route53.GetTrafficPolicyInstanceOutput) {
// 	               panic("mock out the GetTrafficPolicyInstanceRequest method")
//             },
//             GetTrafficPolicyInstanceWithContextFunc: func(in1 context.Context, in2 *route53.GetTrafficPolicyInstanceInput, in3 ...request.Option) (*route53.GetTrafficPolicyInstanceOutput, error) {
// 	               panic("mock out the GetTrafficPolicyInstanceWithContext method")
//             },
//             GetTrafficPolicyRequestFunc: func(in1 *route53.GetTrafficPolicyInput) (*request.Request, *route53.GetTrafficPolicyOutput) {
// 	               panic("mock out the GetTrafficPolicyRequest method")
//             },
//             GetTrafficPolicyWithContextFunc: func(in1 context.Context, in2 *route53.GetTrafficPolicyInput, in3 ...request.Option) (*route53.GetTrafficPolicyOutput, error) {
// 	               panic("mock out the GetTrafficPolicyWithContext method")
//             },
//             ListGeoLocationsFunc: func(in1 *route53.ListGeoLocationsInput) (*route53.ListGeoLocationsOutput, error) {
// 	               panic("mock out the ListGeoLocations method")
//             },
//             ListGeoLocationsRequestFunc: func(in1 *route53.ListGeoLocationsInput) (*request.Request, *route53.ListGeoLocationsOutput) {
// 	               panic("mock out the ListGeoLocationsRequest method")
//             },
//             ListGeoLocationsWithContextFunc: func(in1 context.Context, in2 *route53.ListGeoLocationsInput, in3 ...request.Option) (*route53.ListGeoLocationsOutput, error) {
// 	               panic("mock out the ListGeoLocationsWithContext method")
//             },
//             ListHealthChecksFunc: func(in1 *route53.ListHealthChecksInput) (*route53.ListHealthChecksOutput, error) {
// 	               panic("mock out the ListHealthChecks method")
//             },
//             ListHealthChecksPagesFunc: func(in1 *route53.ListHealthChecksInput, in2 func(*route53.ListHealthChecksOutput, bool) bool) error {
// 	               panic("mock out the ListHealthChecksPages method")
//             },
//             ListHealthChecksPagesWithContextFunc: func(in1 context.Context, in2 *route53.ListHealthChecksInput, in3 func(*route53.ListHealthChecksOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListHealthChecksPagesWithContext method")
//             },
//             ListHealthChecksRequestFunc: func(in1 *route53.ListHealthChecksInput) (*request.Request, *route53.ListHealthChecksOutput) {
// 	               panic("mock out the ListHealthChecksRequest method")
//             },
//             ListHealthChecksWithContextFunc: func(in1 context.Context, in2 *route53.ListHealthChecksInput, in3 ...request.Option) (*route53.ListHealthChecksOutput, error) {
// 	               panic("mock out the ListHealthChecksWithContext method")
//             },
//             ListHostedZonesFunc: func(in1 *route53.ListHostedZonesInput) (*route53.ListHostedZonesOutput, error) {
// 	               panic("mock out the ListHostedZones method")
//             },
//             ListHostedZonesByNameFunc: func(in1 *route53.ListHostedZonesByNameInput) (*route53.ListHostedZonesByNameOutput, error) {
// 	               panic("mock out the ListHostedZonesByName method")
//             },
//             ListHostedZonesByNameRequestFunc: func(in1 *route53.ListHostedZonesByNameInput) (*request.Request, *route53.ListHostedZonesByNameOutput) {
// 	               panic("mock out the ListHostedZonesByNameRequest method")
//             },
//             ListHostedZonesByNameWithContextFunc: func(in1 context.Context, in2 *route53.ListHostedZonesByNameInput, in3 ...request.Option) (*route53.ListHostedZonesByNameOutput, error) {
// 	               panic("mock out the ListHostedZonesByNameWithContext method")
//             },
//             ListHostedZonesByVPCFunc: func(in1 *route53.ListHostedZonesByVPCInput) (*route53.ListHostedZonesByVPCOutput, error) {
// 	               panic("mock out the ListHostedZonesByVPC method")
//             },
//             ListHostedZonesByVPCRequestFunc: func(in1 *route53.ListHostedZonesByVPCInput) (*request.Request, *route53.ListHostedZonesByVPCOutput) {
// 	               panic("mock out the ListHostedZonesByVPCRequest method")
//             },
//             ListHostedZonesByVPCWithContextFunc: func(in1 context.Context, in2 *route53.ListHostedZonesByVPCInput, in3 ...request.Option) (*route53.ListHostedZonesByVPCOutput, error) {
// 	               panic("mock out the ListHostedZonesByVPCWithContext method")
//             },
//             ListHostedZonesPagesFunc: func(in1 *route53.ListHostedZonesInput, in2 func(*route53.ListHostedZonesOutput, bool) bool) error {
// 	               panic("mock out the ListHostedZonesPages method")
//             },
//             ListHostedZonesPagesWithContextFunc: func(in1 context.Context, in2 *route53.ListHostedZonesInput, in3 func(*route53.ListHostedZonesOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListHostedZonesPagesWithContext method")
//             },
//             ListHostedZonesRequestFunc: func(in1 *route53.ListHostedZonesInput) (*request.Request, *route53.ListHostedZonesOutput) {
// 	               panic("mock out the ListHostedZonesRequest method")
//             },
//             ListHostedZonesWithContextFunc: func(in1 context.Context, in2 *route53.ListHostedZonesInput, in3 ...request.Option) (*route53.ListHostedZonesOutput, error) {
// 	               panic("mock out the ListHostedZonesWithContext method")
//             },
//             ListQueryLoggingConfigsFunc: func(in1 *route53.ListQueryLoggingConfigsInput) (*route53.ListQueryLoggingConfigsOutput, error) {
// 	               panic("mock out the ListQueryLoggingConfigs method")
//             },
//             ListQueryLoggingConfigsPagesFunc: func(in1 *route53.ListQueryLoggingConfigsInput, in2 func(*route53.ListQueryLoggingConfigsOutput, bool) bool) error {
// 	               panic("mock out the ListQueryLoggingConfigsPages method")
//             },
//             ListQueryLoggingConfigsPagesWithContextFunc: func(in1 context.Context, in2 *route53.ListQueryLoggingConfigsInput, in3 func(*route53.ListQueryLoggingConfigsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListQueryLoggingConfigsPagesWithContext method")
//             },
//             ListQueryLoggingConfigsRequestFunc: func(in1 *route53.ListQueryLoggingConfigsInput) (*request.Request, *route53.ListQueryLoggingConfigsOutput) {
// 	               panic("mock out the ListQueryLoggingConfigsRequest method")
//             },
//             ListQueryLoggingConfigsWithContextFunc: func(in1 context.Context, in2 *route53.ListQueryLoggingConfigsInput, in3 ...request.Option) (*route53.ListQueryLoggingConfigsOutput, error) {
// 	               panic("mock out the ListQueryLoggingConfigsWithContext method")
//             },
//             ListResourceRecordSetsFunc: func(in1 *route53.ListResourceRecordSetsInput) (*route53.ListResourceRecordSetsOutput, error) {
// 	               panic("mock out the ListResourceRecordSets method")
//             },
//             ListResourceRecordSetsPagesFunc: func(in1 *route53.ListResourceRecordSetsInput, in2 func(*route53.ListResourceRecordSetsOutput, bool) bool) error {
// 	               panic("mock out the ListResourceRecordSetsPages method")
//             },
//             ListResourceRecordSetsPagesWithContextFunc: func(in1 context.Context, in2 *route53.ListResourceRecordSetsInput, in3 func(*route53.ListResourceRecordSetsOutput, bool) bool, in4 ...request.Option) error {
// 	               panic("mock out the ListResourceRecordSetsPagesWithContext method")
//             },
//             ListResourceRecordSetsRequestFunc: func(in1 *route53.ListResourceRecordSetsInput) (*request.Request, *route53.ListResourceRecordSetsOutput) {
// 	               panic("mock out the ListResourceRecordSetsRequest method")
//             },
//             ListResourceRecordSetsWithContextFunc: func(in1 context.Context, in2 *route53.ListResourceRecordSetsInput, in3 ...request.Option) (*route53.ListResourceRecordSetsOutput, error) {
// 	               panic("mock out the ListResourceRecordSetsWithContext method")
//             },
//             ListReusableDelegationSetsFunc: func(in1 *route53.ListReusableDelegationSetsInput) (*route53.ListReusableDelegationSetsOutput, error) {
// 	               panic("mock out the ListReusableDelegationSets method")
//             },
//             ListReusableDelegationSetsRequestFunc: func(in1 *route53.ListReusableDelegationSetsInput) (*request.Request, *route53.ListReusableDelegationSetsOutput) {
// 	               panic("mock out the ListReusableDelegationSetsRequest method")
//             },
//             ListReusableDelegationSetsWithContextFunc: func(in1 context.Context, in2 *route53.ListReusableDelegationSetsInput, in3 ...request.Option) (*route53.ListReusableDelegationSetsOutput, error) {
// 	               panic("mock out the ListReusableDelegationSetsWithContext method")
//             },
//             ListTagsForResourceFunc: func(in1 *route53.ListTagsForResourceInput) (*route53.ListTagsForResourceOutput, error) {
// 	               panic("mock out the ListTagsForResource method")
//             },
//             ListTagsForResourceRequestFunc: func(in1 *route53.ListTagsForResourceInput) (*request.Request, *route53.ListTagsForResourceOutput) {
// 	               panic("mock out the ListTagsForResourceRequest method")
//             },
//             ListTagsForResourceWithContextFunc: func(in1 context.Context, in2 *route53.ListTagsForResourceInput, in3 ...request.Option) (*route53.ListTagsForResourceOutput, error) {
// 	               panic("mock out the ListTagsForResourceWithContext method")
//             },
//             ListTagsForResourcesFunc: func(in1 *route53.ListTagsForResourcesInput) (*route53.ListTagsForResourcesOutput, error) {
// 	               panic("mock out the ListTagsForResources method")
//             },
//             ListTagsForResourcesRequestFunc: func(in1 *route53.ListTagsForResourcesInput) (*request.Request, *route53.ListTagsForResourcesOutput) {
// 	               panic("mock out the ListTagsForResourcesRequest method")
//             },
//             ListTagsForResourcesWithContextFunc: func(in1 context.Context, in2 *route53.ListTagsForResourcesInput, in3 ...request.Option) (*route53.ListTagsForResourcesOutput, error) {
// 	               panic("mock out the ListTagsForResourcesWithContext method")
//             },
//             ListTrafficPoliciesFunc: func(in1 *route53.ListTrafficPoliciesInput) (*route53.ListTrafficPoliciesOutput, error) {
// 	               panic("mock out the ListTrafficPolicies method")
//             },
//             ListTrafficPoliciesRequestFunc: func(in1 *route53.ListTrafficPoliciesInput) (*request.Request, *route53.ListTrafficPoliciesOutput) {
// 	               panic("mock out the ListTrafficPoliciesRequest method")
//             },
//             ListTrafficPoliciesWithContextFunc: func(in1 context.Context, in2 *route53.ListTrafficPoliciesInput, in3 ...request.Option) (*route53.ListTrafficPoliciesOutput, error) {
// 	               panic("mock out the ListTrafficPoliciesWithContext method")
//             },
//             ListTrafficPolicyInstancesFunc: func(in1 *route53.ListTrafficPolicyInstancesInput) (*route53.ListTrafficPolicyInstancesOutput, error) {
// 	               panic("mock out the ListTrafficPolicyInstances method")
//             },
//             ListTrafficPolicyInstancesByHostedZoneFunc: func(in1 *route53.ListTrafficPolicyInstancesByHostedZoneInput) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error) {
// 	               panic("mock out the ListTrafficPolicyInstancesByHostedZone method")
//             },
//             ListTrafficPolicyInstancesByHostedZoneRequestFunc: func(in1 *route53.ListTrafficPolicyInstancesByHostedZoneInput) (*request.Request, *route53.ListTrafficPolicyInstancesByHostedZoneOutput) {
// 	               panic("mock out the ListTrafficPolicyInstancesByHostedZoneRequest method")
//             },
//             ListTrafficPolicyInstancesByHostedZoneWithContextFunc: func(in1 context.Context, in2 *route53.ListTrafficPolicyInstancesByHostedZoneInput, in3 ...request.Option) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error) {
// 	               panic("mock out the ListTrafficPolicyInstancesByHostedZoneWithContext method")
//             },
//             ListTrafficPolicyInstancesByPolicyFunc: func(in1 *route53.ListTrafficPolicyInstancesByPolicyInput) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error) {
// 	               panic("mock out the ListTrafficPolicyInstancesByPolicy method")
//             },
//             ListTrafficPolicyInstancesByPolicyRequestFunc: func(in1 *route53.ListTrafficPolicyInstancesByPolicyInput) (*request.Request, *route53.ListTrafficPolicyInstancesByPolicyOutput) {
// 	               panic("mock out the ListTrafficPolicyInstancesByPolicyRequest method")
//             },
//             ListTrafficPolicyInstancesByPolicyWithContextFunc: func(in1 context.Context, in2 *route53.ListTrafficPolicyInstancesByPolicyInput, in3 ...request.Option) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error) {
// 	               panic("mock out the ListTrafficPolicyInstancesByPolicyWithContext method")
//             },
//             ListTrafficPolicyInstancesRequestFunc: func(in1 *route53.ListTrafficPolicyInstancesInput) (*request.Request, *route53.ListTrafficPolicyInstancesOutput) {
// 	               panic("mock out the ListTrafficPolicyInstancesRequest method")
//             },
//             ListTrafficPolicyInstancesWithContextFunc: func(in1 context.Context, in2 *route53.ListTrafficPolicyInstancesInput, in3 ...request.Option) (*route53.ListTrafficPolicyInstancesOutput, error) {
// 	               panic("mock out the ListTrafficPolicyInstancesWithContext method")
//             },
//             ListTrafficPolicyVersionsFunc: func(in1 *route53.ListTrafficPolicyVersionsInput) (*route53.ListTrafficPolicyVersionsOutput, error) {
// 	               panic("mock out the ListTrafficPolicyVersions method")
//             },
//             ListTrafficPolicyVersionsRequestFunc: func(in1 *route53.ListTrafficPolicyVersionsInput) (*request.Request, *route53.ListTrafficPolicyVersionsOutput) {
// 	               panic("mock out the ListTrafficPolicyVersionsRequest method")
//             },
//             ListTrafficPolicyVersionsWithContextFunc: func(in1 context.Context, in2 *route53.ListTrafficPolicyVersionsInput, in3 ...request.Option) (*route53.ListTrafficPolicyVersionsOutput, error) {
// 	               panic("mock out the ListTrafficPolicyVersionsWithContext method")
//             },
//             ListVPCAssociationAuthorizationsFunc: func(in1 *route53.ListVPCAssociationAuthorizationsInput) (*route53.ListVPCAssociationAuthorizationsOutput, error) {
// 	               panic("mock out the ListVPCAssociationAuthorizations method")
//             },
//             ListVPCAssociationAuthorizationsRequestFunc: func(in1 *route53.ListVPCAssociationAuthorizationsInput) (*request.Request, *route53.ListVPCAssociationAuthorizationsOutput) {
// 	               panic("mock out the ListVPCAssociationAuthorizationsRequest method")
//             },
//             ListVPCAssociationAuthorizationsWithContextFunc: func(in1 context.Context, in2 *route53.ListVPCAssociationAuthorizationsInput, in3 ...request.Option) (*route53.ListVPCAssociationAuthorizationsOutput, error) {
// 	               panic("mock out the ListVPCAssociationAuthorizationsWithContext method")
//             },
//             TestDNSAnswerFunc: func(in1 *route53.TestDNSAnswerInput) (*route53.TestDNSAnswerOutput, error) {
// 	               panic("mock out the TestDNSAnswer method")
//             },
//             TestDNSAnswerRequestFunc: func(in1 *route53.TestDNSAnswerInput) (*request.Request, *route53.TestDNSAnswerOutput) {
// 	               panic("mock out the TestDNSAnswerRequest method")
//             },
//             TestDNSAnswerWithContextFunc: func(in1 context.Context, in2 *route53.TestDNSAnswerInput, in3 ...request.Option) (*route53.TestDNSAnswerOutput, error) {
// 	               panic("mock out the TestDNSAnswerWithContext method")
//             },
//             UpdateHealthCheckFunc: func(in1 *route53.UpdateHealthCheckInput) (*route53.UpdateHealthCheckOutput, error) {
// 	               panic("mock out the UpdateHealthCheck method")
//             },
//             UpdateHealthCheckRequestFunc: func(in1 *route53.UpdateHealthCheckInput) (*request.Request, *route53.UpdateHealthCheckOutput) {
// 	               panic("mock out the UpdateHealthCheckRequest method")
//             },
//             UpdateHealthCheckWithContextFunc: func(in1 context.Context, in2 *route53.UpdateHealthCheckInput, in3 ...request.Option) (*route53.UpdateHealthCheckOutput, error) {
// 	               panic("mock out the UpdateHealthCheckWithContext method")
//             },
//             UpdateHostedZoneCommentFunc: func(in1 *route53.UpdateHostedZoneCommentInput) (*route53.UpdateHostedZoneCommentOutput, error) {
// 	               panic("mock out the UpdateHostedZoneComment method")
//             },
//             UpdateHostedZoneCommentRequestFunc: func(in1 *route53.UpdateHostedZoneCommentInput) (*request.Request, *route53.UpdateHostedZoneCommentOutput) {
// 	               panic("mock out the UpdateHostedZoneCommentRequest method")
//             },
//             UpdateHostedZoneCommentWithContextFunc: func(in1 context.Context, in2 *route53.UpdateHostedZoneCommentInput, in3 ...request.Option) (*route53.UpdateHostedZoneCommentOutput, error) {
// 	               panic("mock out the UpdateHostedZoneCommentWithContext method")
//             },
//             UpdateTrafficPolicyCommentFunc: func(in1 *route53.UpdateTrafficPolicyCommentInput) (*route53.UpdateTrafficPolicyCommentOutput, error) {
// 	               panic("mock out the UpdateTrafficPolicyComment method")
//             },
//             UpdateTrafficPolicyCommentRequestFunc: func(in1 *route53.UpdateTrafficPolicyCommentInput) (*request.Request, *route53.UpdateTrafficPolicyCommentOutput) {
// 	               panic("mock out the UpdateTrafficPolicyCommentRequest method")
//             },
//             UpdateTrafficPolicyCommentWithContextFunc: func(in1 context.Context, in2 *route53.UpdateTrafficPolicyCommentInput, in3 ...request.Option) (*route53.UpdateTrafficPolicyCommentOutput, error) {
// 	               panic("mock out the UpdateTrafficPolicyCommentWithContext method")
//             },
//             UpdateTrafficPolicyInstanceFunc: func(in1 *route53.UpdateTrafficPolicyInstanceInput) (*route53.UpdateTrafficPolicyInstanceOutput, error) {
// 	               panic("mock out the UpdateTrafficPolicyInstance method")
//             },
//             UpdateTrafficPolicyInstanceRequestFunc: func(in1 *route53.UpdateTrafficPolicyInstanceInput) (*request.Request, *route53.UpdateTrafficPolicyInstanceOutput) {
// 	               panic("mock out the UpdateTrafficPolicyInstanceRequest method")
//             },
//             UpdateTrafficPolicyInstanceWithContextFunc: func(in1 context.Context, in2 *route53.UpdateTrafficPolicyInstanceInput, in3 ...request.Option) (*route53.UpdateTrafficPolicyInstanceOutput, error) {
// 	               panic("mock out the UpdateTrafficPolicyInstanceWithContext method")
//             },
//             WaitUntilResourceRecordSetsChangedFunc: func(in1 *route53.GetChangeInput) error {
// 	               panic("mock out the WaitUntilResourceRecordSetsChanged method")
//             },
//             WaitUntilResourceRecordSetsChangedWithContextFunc: func(in1 context.Context, in2 *route53.GetChangeInput, in3 ...request.WaiterOption) error {
// 	               panic("mock out the WaitUntilResourceRecordSetsChangedWithContext method")
//             },
//         }
//
//         // use mockedRoute53API in code that requires Route53API
//         // and then make assertions.
//
//     }
type Route53APIMock struct {
	// AssociateVPCWithHostedZoneFunc mocks the AssociateVPCWithHostedZone method.
	AssociateVPCWithHostedZoneFunc func(in1 *route53.AssociateVPCWithHostedZoneInput) (*route53.AssociateVPCWithHostedZoneOutput, error)

	// AssociateVPCWithHostedZoneRequestFunc mocks the AssociateVPCWithHostedZoneRequest method.
	AssociateVPCWithHostedZoneRequestFunc func(in1 *route53.AssociateVPCWithHostedZoneInput) (*request.Request, *route53.AssociateVPCWithHostedZoneOutput)

	// AssociateVPCWithHostedZoneWithContextFunc mocks the AssociateVPCWithHostedZoneWithContext method.
	AssociateVPCWithHostedZoneWithContextFunc func(in1 context.Context, in2 *route53.AssociateVPCWithHostedZoneInput, in3 ...request.Option) (*route53.AssociateVPCWithHostedZoneOutput, error)

	// ChangeResourceRecordSetsFunc mocks the ChangeResourceRecordSets method.
	ChangeResourceRecordSetsFunc func(in1 *route53.ChangeResourceRecordSetsInput) (*route53.ChangeResourceRecordSetsOutput, error)

	// ChangeResourceRecordSetsRequestFunc mocks the ChangeResourceRecordSetsRequest method.
	ChangeResourceRecordSetsRequestFunc func(in1 *route53.ChangeResourceRecordSetsInput) (*request.Request, *route53.ChangeResourceRecordSetsOutput)

	// ChangeResourceRecordSetsWithContextFunc mocks the ChangeResourceRecordSetsWithContext method.
	ChangeResourceRecordSetsWithContextFunc func(in1 context.Context, in2 *route53.ChangeResourceRecordSetsInput, in3 ...request.Option) (*route53.ChangeResourceRecordSetsOutput, error)

	// ChangeTagsForResourceFunc mocks the ChangeTagsForResource method.
	ChangeTagsForResourceFunc func(in1 *route53.ChangeTagsForResourceInput) (*route53.ChangeTagsForResourceOutput, error)

	// ChangeTagsForResourceRequestFunc mocks the ChangeTagsForResourceRequest method.
	ChangeTagsForResourceRequestFunc func(in1 *route53.ChangeTagsForResourceInput) (*request.Request, *route53.ChangeTagsForResourceOutput)

	// ChangeTagsForResourceWithContextFunc mocks the ChangeTagsForResourceWithContext method.
	ChangeTagsForResourceWithContextFunc func(in1 context.Context, in2 *route53.ChangeTagsForResourceInput, in3 ...request.Option) (*route53.ChangeTagsForResourceOutput, error)

	// CreateHealthCheckFunc mocks the CreateHealthCheck method.
	CreateHealthCheckFunc func(in1 *route53.CreateHealthCheckInput) (*route53.CreateHealthCheckOutput, error)

	// CreateHealthCheckRequestFunc mocks the CreateHealthCheckRequest method.
	CreateHealthCheckRequestFunc func(in1 *route53.CreateHealthCheckInput) (*request.Request, *route53.CreateHealthCheckOutput)

	// CreateHealthCheckWithContextFunc mocks the CreateHealthCheckWithContext method.
	CreateHealthCheckWithContextFunc func(in1 context.Context, in2 *route53.CreateHealthCheckInput, in3 ...request.Option) (*route53.CreateHealthCheckOutput, error)

	// CreateHostedZoneFunc mocks the CreateHostedZone method.
	CreateHostedZoneFunc func(in1 *route53.CreateHostedZoneInput) (*route53.CreateHostedZoneOutput, error)

	// CreateHostedZoneRequestFunc mocks the CreateHostedZoneRequest method.
	CreateHostedZoneRequestFunc func(in1 *route53.CreateHostedZoneInput) (*request.Request, *route53.CreateHostedZoneOutput)

	// CreateHostedZoneWithContextFunc mocks the CreateHostedZoneWithContext method.
	CreateHostedZoneWithContextFunc func(in1 context.Context, in2 *route53.CreateHostedZoneInput, in3 ...request.Option) (*route53.CreateHostedZoneOutput, error)

	// CreateQueryLoggingConfigFunc mocks the CreateQueryLoggingConfig method.
	CreateQueryLoggingConfigFunc func(in1 *route53.CreateQueryLoggingConfigInput) (*route53.CreateQueryLoggingConfigOutput, error)

	// CreateQueryLoggingConfigRequestFunc mocks the CreateQueryLoggingConfigRequest method.
	CreateQueryLoggingConfigRequestFunc func(in1 *route53.CreateQueryLoggingConfigInput) (*request.Request, *route53.CreateQueryLoggingConfigOutput)

	// CreateQueryLoggingConfigWithContextFunc mocks the CreateQueryLoggingConfigWithContext method.
	CreateQueryLoggingConfigWithContextFunc func(in1 context.Context, in2 *route53.CreateQueryLoggingConfigInput, in3 ...request.Option) (*route53.CreateQueryLoggingConfigOutput, error)

	// CreateReusableDelegationSetFunc mocks the CreateReusableDelegationSet method.
	CreateReusableDelegationSetFunc func(in1 *route53.CreateReusableDelegationSetInput) (*route53.CreateReusableDelegationSetOutput, error)

	// CreateReusableDelegationSetRequestFunc mocks the CreateReusableDelegationSetRequest method.
	CreateReusableDelegationSetRequestFunc func(in1 *route53.CreateReusableDelegationSetInput) (*request.Request, *route53.CreateReusableDelegationSetOutput)

	// CreateReusableDelegationSetWithContextFunc mocks the CreateReusableDelegationSetWithContext method.
	CreateReusableDelegationSetWithContextFunc func(in1 context.Context, in2 *route53.CreateReusableDelegationSetInput, in3 ...request.Option) (*route53.CreateReusableDelegationSetOutput, error)

	// CreateTrafficPolicyFunc mocks the CreateTrafficPolicy method.
	CreateTrafficPolicyFunc func(in1 *route53.CreateTrafficPolicyInput) (*route53.CreateTrafficPolicyOutput, error)

	// CreateTrafficPolicyInstanceFunc mocks the CreateTrafficPolicyInstance method.
	CreateTrafficPolicyInstanceFunc func(in1 *route53.CreateTrafficPolicyInstanceInput) (*route53.CreateTrafficPolicyInstanceOutput, error)

	// CreateTrafficPolicyInstanceRequestFunc mocks the CreateTrafficPolicyInstanceRequest method.
	CreateTrafficPolicyInstanceRequestFunc func(in1 *route53.CreateTrafficPolicyInstanceInput) (*request.Request, *route53.CreateTrafficPolicyInstanceOutput)

	// CreateTrafficPolicyInstanceWithContextFunc mocks the CreateTrafficPolicyInstanceWithContext method.
	CreateTrafficPolicyInstanceWithContextFunc func(in1 context.Context, in2 *route53.CreateTrafficPolicyInstanceInput, in3 ...request.Option) (*route53.CreateTrafficPolicyInstanceOutput, error)

	// CreateTrafficPolicyRequestFunc mocks the CreateTrafficPolicyRequest method.
	CreateTrafficPolicyRequestFunc func(in1 *route53.CreateTrafficPolicyInput) (*request.Request, *route53.CreateTrafficPolicyOutput)

	// CreateTrafficPolicyVersionFunc mocks the CreateTrafficPolicyVersion method.
	CreateTrafficPolicyVersionFunc func(in1 *route53.CreateTrafficPolicyVersionInput) (*route53.CreateTrafficPolicyVersionOutput, error)

	// CreateTrafficPolicyVersionRequestFunc mocks the CreateTrafficPolicyVersionRequest method.
	CreateTrafficPolicyVersionRequestFunc func(in1 *route53.CreateTrafficPolicyVersionInput) (*request.Request, *route53.CreateTrafficPolicyVersionOutput)

	// CreateTrafficPolicyVersionWithContextFunc mocks the CreateTrafficPolicyVersionWithContext method.
	CreateTrafficPolicyVersionWithContextFunc func(in1 context.Context, in2 *route53.CreateTrafficPolicyVersionInput, in3 ...request.Option) (*route53.CreateTrafficPolicyVersionOutput, error)

	// CreateTrafficPolicyWithContextFunc mocks the CreateTrafficPolicyWithContext method.
	CreateTrafficPolicyWithContextFunc func(in1 context.Context, in2 *route53.CreateTrafficPolicyInput, in3 ...request.Option) (*route53.CreateTrafficPolicyOutput, error)

	// CreateVPCAssociationAuthorizationFunc mocks the CreateVPCAssociationAuthorization method.
	CreateVPCAssociationAuthorizationFunc func(in1 *route53.CreateVPCAssociationAuthorizationInput) (*route53.CreateVPCAssociationAuthorizationOutput, error)

	// CreateVPCAssociationAuthorizationRequestFunc mocks the CreateVPCAssociationAuthorizationRequest method.
	CreateVPCAssociationAuthorizationRequestFunc func(in1 *route53.CreateVPCAssociationAuthorizationInput) (*request.Request, *route53.CreateVPCAssociationAuthorizationOutput)

	// CreateVPCAssociationAuthorizationWithContextFunc mocks the CreateVPCAssociationAuthorizationWithContext method.
	CreateVPCAssociationAuthorizationWithContextFunc func(in1 context.Context, in2 *route53.CreateVPCAssociationAuthorizationInput, in3 ...request.Option) (*route53.CreateVPCAssociationAuthorizationOutput, error)

	// DeleteHealthCheckFunc mocks the DeleteHealthCheck method.
	DeleteHealthCheckFunc func(in1 *route53.DeleteHealthCheckInput) (*route53.DeleteHealthCheckOutput, error)

	// DeleteHealthCheckRequestFunc mocks the DeleteHealthCheckRequest method.
	DeleteHealthCheckRequestFunc func(in1 *route53.DeleteHealthCheckInput) (*request.Request, *route53.DeleteHealthCheckOutput)

	// DeleteHealthCheckWithContextFunc mocks the DeleteHealthCheckWithContext method.
	DeleteHealthCheckWithContextFunc func(in1 context.Context, in2 *route53.DeleteHealthCheckInput, in3 ...request.Option) (*route53.DeleteHealthCheckOutput, error)

	// DeleteHostedZoneFunc mocks the DeleteHostedZone method.
	DeleteHostedZoneFunc func(in1 *route53.DeleteHostedZoneInput) (*route53.DeleteHostedZoneOutput, error)

	// DeleteHostedZoneRequestFunc mocks the DeleteHostedZoneRequest method.
	DeleteHostedZoneRequestFunc func(in1 *route53.DeleteHostedZoneInput) (*request.Request, *route53.DeleteHostedZoneOutput)

	// DeleteHostedZoneWithContextFunc mocks the DeleteHostedZoneWithContext method.
	DeleteHostedZoneWithContextFunc func(in1 context.Context, in2 *route53.DeleteHostedZoneInput, in3 ...request.Option) (*route53.DeleteHostedZoneOutput, error)

	// DeleteQueryLoggingConfigFunc mocks the DeleteQueryLoggingConfig method.
	DeleteQueryLoggingConfigFunc func(in1 *route53.DeleteQueryLoggingConfigInput) (*route53.DeleteQueryLoggingConfigOutput, error)

	// DeleteQueryLoggingConfigRequestFunc mocks the DeleteQueryLoggingConfigRequest method.
	DeleteQueryLoggingConfigRequestFunc func(in1 *route53.DeleteQueryLoggingConfigInput) (*request.Request, *route53.DeleteQueryLoggingConfigOutput)

	// DeleteQueryLoggingConfigWithContextFunc mocks the DeleteQueryLoggingConfigWithContext method.
	DeleteQueryLoggingConfigWithContextFunc func(in1 context.Context, in2 *route53.DeleteQueryLoggingConfigInput, in3 ...request.Option) (*route53.DeleteQueryLoggingConfigOutput, error)

	// DeleteReusableDelegationSetFunc mocks the DeleteReusableDelegationSet method.
	DeleteReusableDelegationSetFunc func(in1 *route53.DeleteReusableDelegationSetInput) (*route53.DeleteReusableDelegationSetOutput, error)

	// DeleteReusableDelegationSetRequestFunc mocks the DeleteReusableDelegationSetRequest method.
	DeleteReusableDelegationSetRequestFunc func(in1 *route53.DeleteReusableDelegationSetInput) (*request.Request, *route53.DeleteReusableDelegationSetOutput)

	// DeleteReusableDelegationSetWithContextFunc mocks the DeleteReusableDelegationSetWithContext method.
	DeleteReusableDelegationSetWithContextFunc func(in1 context.Context, in2 *route53.DeleteReusableDelegationSetInput, in3 ...request.Option) (*route53.DeleteReusableDelegationSetOutput, error)

	// DeleteTrafficPolicyFunc mocks the DeleteTrafficPolicy method.
	DeleteTrafficPolicyFunc func(in1 *route53.DeleteTrafficPolicyInput) (*route53.DeleteTrafficPolicyOutput, error)

	// DeleteTrafficPolicyInstanceFunc mocks the DeleteTrafficPolicyInstance method.
	DeleteTrafficPolicyInstanceFunc func(in1 *route53.DeleteTrafficPolicyInstanceInput) (*route53.DeleteTrafficPolicyInstanceOutput, error)

	// DeleteTrafficPolicyInstanceRequestFunc mocks the DeleteTrafficPolicyInstanceRequest method.
	DeleteTrafficPolicyInstanceRequestFunc func(in1 *route53.DeleteTrafficPolicyInstanceInput) (*request.Request, *route53.DeleteTrafficPolicyInstanceOutput)

	// DeleteTrafficPolicyInstanceWithContextFunc mocks the DeleteTrafficPolicyInstanceWithContext method.
	DeleteTrafficPolicyInstanceWithContextFunc func(in1 context.Context, in2 *route53.DeleteTrafficPolicyInstanceInput, in3 ...request.Option) (*route53.DeleteTrafficPolicyInstanceOutput, error)

	// DeleteTrafficPolicyRequestFunc mocks the DeleteTrafficPolicyRequest method.
	DeleteTrafficPolicyRequestFunc func(in1 *route53.DeleteTrafficPolicyInput) (*request.Request, *route53.DeleteTrafficPolicyOutput)

	// DeleteTrafficPolicyWithContextFunc mocks the DeleteTrafficPolicyWithContext method.
	DeleteTrafficPolicyWithContextFunc func(in1 context.Context, in2 *route53.DeleteTrafficPolicyInput, in3 ...request.Option) (*route53.DeleteTrafficPolicyOutput, error)

	// DeleteVPCAssociationAuthorizationFunc mocks the DeleteVPCAssociationAuthorization method.
	DeleteVPCAssociationAuthorizationFunc func(in1 *route53.DeleteVPCAssociationAuthorizationInput) (*route53.DeleteVPCAssociationAuthorizationOutput, error)

	// DeleteVPCAssociationAuthorizationRequestFunc mocks the DeleteVPCAssociationAuthorizationRequest method.
	DeleteVPCAssociationAuthorizationRequestFunc func(in1 *route53.DeleteVPCAssociationAuthorizationInput) (*request.Request, *route53.DeleteVPCAssociationAuthorizationOutput)

	// DeleteVPCAssociationAuthorizationWithContextFunc mocks the DeleteVPCAssociationAuthorizationWithContext method.
	DeleteVPCAssociationAuthorizationWithContextFunc func(in1 context.Context, in2 *route53.DeleteVPCAssociationAuthorizationInput, in3 ...request.Option) (*route53.DeleteVPCAssociationAuthorizationOutput, error)

	// DisassociateVPCFromHostedZoneFunc mocks the DisassociateVPCFromHostedZone method.
	DisassociateVPCFromHostedZoneFunc func(in1 *route53.DisassociateVPCFromHostedZoneInput) (*route53.DisassociateVPCFromHostedZoneOutput, error)

	// DisassociateVPCFromHostedZoneRequestFunc mocks the DisassociateVPCFromHostedZoneRequest method.
	DisassociateVPCFromHostedZoneRequestFunc func(in1 *route53.DisassociateVPCFromHostedZoneInput) (*request.Request, *route53.DisassociateVPCFromHostedZoneOutput)

	// DisassociateVPCFromHostedZoneWithContextFunc mocks the DisassociateVPCFromHostedZoneWithContext method.
	DisassociateVPCFromHostedZoneWithContextFunc func(in1 context.Context, in2 *route53.DisassociateVPCFromHostedZoneInput, in3 ...request.Option) (*route53.DisassociateVPCFromHostedZoneOutput, error)

	// GetAccountLimitFunc mocks the GetAccountLimit method.
	GetAccountLimitFunc func(in1 *route53.GetAccountLimitInput) (*route53.GetAccountLimitOutput, error)

	// GetAccountLimitRequestFunc mocks the GetAccountLimitRequest method.
	GetAccountLimitRequestFunc func(in1 *route53.GetAccountLimitInput) (*request.Request, *route53.GetAccountLimitOutput)

	// GetAccountLimitWithContextFunc mocks the GetAccountLimitWithContext method.
	GetAccountLimitWithContextFunc func(in1 context.Context, in2 *route53.GetAccountLimitInput, in3 ...request.Option) (*route53.GetAccountLimitOutput, error)

	// GetChangeFunc mocks the GetChange method.
	GetChangeFunc func(in1 *route53.GetChangeInput) (*route53.GetChangeOutput, error)

	// GetChangeRequestFunc mocks the GetChangeRequest method.
	GetChangeRequestFunc func(in1 *route53.GetChangeInput) (*request.Request, *route53.GetChangeOutput)

	// GetChangeWithContextFunc mocks the GetChangeWithContext method.
	GetChangeWithContextFunc func(in1 context.Context, in2 *route53.GetChangeInput, in3 ...request.Option) (*route53.GetChangeOutput, error)

	// GetCheckerIpRangesFunc mocks the GetCheckerIpRanges method.
	GetCheckerIpRangesFunc func(in1 *route53.GetCheckerIpRangesInput) (*route53.GetCheckerIpRangesOutput, error)

	// GetCheckerIpRangesRequestFunc mocks the GetCheckerIpRangesRequest method.
	GetCheckerIpRangesRequestFunc func(in1 *route53.GetCheckerIpRangesInput) (*request.Request, *route53.GetCheckerIpRangesOutput)

	// GetCheckerIpRangesWithContextFunc mocks the GetCheckerIpRangesWithContext method.
	GetCheckerIpRangesWithContextFunc func(in1 context.Context, in2 *route53.GetCheckerIpRangesInput, in3 ...request.Option) (*route53.GetCheckerIpRangesOutput, error)

	// GetGeoLocationFunc mocks the GetGeoLocation method.
	GetGeoLocationFunc func(in1 *route53.GetGeoLocationInput) (*route53.GetGeoLocationOutput, error)

	// GetGeoLocationRequestFunc mocks the GetGeoLocationRequest method.
	GetGeoLocationRequestFunc func(in1 *route53.GetGeoLocationInput) (*request.Request, *route53.GetGeoLocationOutput)

	// GetGeoLocationWithContextFunc mocks the GetGeoLocationWithContext method.
	GetGeoLocationWithContextFunc func(in1 context.Context, in2 *route53.GetGeoLocationInput, in3 ...request.Option) (*route53.GetGeoLocationOutput, error)

	// GetHealthCheckFunc mocks the GetHealthCheck method.
	GetHealthCheckFunc func(in1 *route53.GetHealthCheckInput) (*route53.GetHealthCheckOutput, error)

	// GetHealthCheckCountFunc mocks the GetHealthCheckCount method.
	GetHealthCheckCountFunc func(in1 *route53.GetHealthCheckCountInput) (*route53.GetHealthCheckCountOutput, error)

	// GetHealthCheckCountRequestFunc mocks the GetHealthCheckCountRequest method.
	GetHealthCheckCountRequestFunc func(in1 *route53.GetHealthCheckCountInput) (*request.Request, *route53.GetHealthCheckCountOutput)

	// GetHealthCheckCountWithContextFunc mocks the GetHealthCheckCountWithContext method.
	GetHealthCheckCountWithContextFunc func(in1 context.Context, in2 *route53.GetHealthCheckCountInput, in3 ...request.Option) (*route53.GetHealthCheckCountOutput, error)

	// GetHealthCheckLastFailureReasonFunc mocks the GetHealthCheckLastFailureReason method.
	GetHealthCheckLastFailureReasonFunc func(in1 *route53.GetHealthCheckLastFailureReasonInput) (*route53.GetHealthCheckLastFailureReasonOutput, error)

	// GetHealthCheckLastFailureReasonRequestFunc mocks the GetHealthCheckLastFailureReasonRequest method.
	GetHealthCheckLastFailureReasonRequestFunc func(in1 *route53.GetHealthCheckLastFailureReasonInput) (*request.Request, *route53.GetHealthCheckLastFailureReasonOutput)

	// GetHealthCheckLastFailureReasonWithContextFunc mocks the GetHealthCheckLastFailureReasonWithContext method.
	GetHealthCheckLastFailureReasonWithContextFunc func(in1 context.Context, in2 *route53.GetHealthCheckLastFailureReasonInput, in3 ...request.Option) (*route53.GetHealthCheckLastFailureReasonOutput, error)

	// GetHealthCheckRequestFunc mocks the GetHealthCheckRequest method.
	GetHealthCheckRequestFunc func(in1 *route53.GetHealthCheckInput) (*request.Request, *route53.GetHealthCheckOutput)

	// GetHealthCheckStatusFunc mocks the GetHealthCheckStatus method.
	GetHealthCheckStatusFunc func(in1 *route53.GetHealthCheckStatusInput) (*route53.GetHealthCheckStatusOutput, error)

	// GetHealthCheckStatusRequestFunc mocks the GetHealthCheckStatusRequest method.
	GetHealthCheckStatusRequestFunc func(in1 *route53.GetHealthCheckStatusInput) (*request.Request, *route53.GetHealthCheckStatusOutput)

	// GetHealthCheckStatusWithContextFunc mocks the GetHealthCheckStatusWithContext method.
	GetHealthCheckStatusWithContextFunc func(in1 context.Context, in2 *route53.GetHealthCheckStatusInput, in3 ...request.Option) (*route53.GetHealthCheckStatusOutput, error)

	// GetHealthCheckWithContextFunc mocks the GetHealthCheckWithContext method.
	GetHealthCheckWithContextFunc func(in1 context.Context, in2 *route53.GetHealthCheckInput, in3 ...request.Option) (*route53.GetHealthCheckOutput, error)

	// GetHostedZoneFunc mocks the GetHostedZone method.
	GetHostedZoneFunc func(in1 *route53.GetHostedZoneInput) (*route53.GetHostedZoneOutput, error)

	// GetHostedZoneCountFunc mocks the GetHostedZoneCount method.
	GetHostedZoneCountFunc func(in1 *route53.GetHostedZoneCountInput) (*route53.GetHostedZoneCountOutput, error)

	// GetHostedZoneCountRequestFunc mocks the GetHostedZoneCountRequest method.
	GetHostedZoneCountRequestFunc func(in1 *route53.GetHostedZoneCountInput) (*request.Request, *route53.GetHostedZoneCountOutput)

	// GetHostedZoneCountWithContextFunc mocks the GetHostedZoneCountWithContext method.
	GetHostedZoneCountWithContextFunc func(in1 context.Context, in2 *route53.GetHostedZoneCountInput, in3 ...request.Option) (*route53.GetHostedZoneCountOutput, error)

	// GetHostedZoneLimitFunc mocks the GetHostedZoneLimit method.
	GetHostedZoneLimitFunc func(in1 *route53.GetHostedZoneLimitInput) (*route53.GetHostedZoneLimitOutput, error)

	// GetHostedZoneLimitRequestFunc mocks the GetHostedZoneLimitRequest method.
	GetHostedZoneLimitRequestFunc func(in1 *route53.GetHostedZoneLimitInput) (*request.Request, *route53.GetHostedZoneLimitOutput)

	// GetHostedZoneLimitWithContextFunc mocks the GetHostedZoneLimitWithContext method.
	GetHostedZoneLimitWithContextFunc func(in1 context.Context, in2 *route53.GetHostedZoneLimitInput, in3 ...request.Option) (*route53.GetHostedZoneLimitOutput, error)

	// GetHostedZoneRequestFunc mocks the GetHostedZoneRequest method.
	GetHostedZoneRequestFunc func(in1 *route53.GetHostedZoneInput) (*request.Request, *route53.GetHostedZoneOutput)

	// GetHostedZoneWithContextFunc mocks the GetHostedZoneWithContext method.
	GetHostedZoneWithContextFunc func(in1 context.Context, in2 *route53.GetHostedZoneInput, in3 ...request.Option) (*route53.GetHostedZoneOutput, error)

	// GetQueryLoggingConfigFunc mocks the GetQueryLoggingConfig method.
	GetQueryLoggingConfigFunc func(in1 *route53.GetQueryLoggingConfigInput) (*route53.GetQueryLoggingConfigOutput, error)

	// GetQueryLoggingConfigRequestFunc mocks the GetQueryLoggingConfigRequest method.
	GetQueryLoggingConfigRequestFunc func(in1 *route53.GetQueryLoggingConfigInput) (*request.Request, *route53.GetQueryLoggingConfigOutput)

	// GetQueryLoggingConfigWithContextFunc mocks the GetQueryLoggingConfigWithContext method.
	GetQueryLoggingConfigWithContextFunc func(in1 context.Context, in2 *route53.GetQueryLoggingConfigInput, in3 ...request.Option) (*route53.GetQueryLoggingConfigOutput, error)

	// GetReusableDelegationSetFunc mocks the GetReusableDelegationSet method.
	GetReusableDelegationSetFunc func(in1 *route53.GetReusableDelegationSetInput) (*route53.GetReusableDelegationSetOutput, error)

	// GetReusableDelegationSetLimitFunc mocks the GetReusableDelegationSetLimit method.
	GetReusableDelegationSetLimitFunc func(in1 *route53.GetReusableDelegationSetLimitInput) (*route53.GetReusableDelegationSetLimitOutput, error)

	// GetReusableDelegationSetLimitRequestFunc mocks the GetReusableDelegationSetLimitRequest method.
	GetReusableDelegationSetLimitRequestFunc func(in1 *route53.GetReusableDelegationSetLimitInput) (*request.Request, *route53.GetReusableDelegationSetLimitOutput)

	// GetReusableDelegationSetLimitWithContextFunc mocks the GetReusableDelegationSetLimitWithContext method.
	GetReusableDelegationSetLimitWithContextFunc func(in1 context.Context, in2 *route53.GetReusableDelegationSetLimitInput, in3 ...request.Option) (*route53.GetReusableDelegationSetLimitOutput, error)

	// GetReusableDelegationSetRequestFunc mocks the GetReusableDelegationSetRequest method.
	GetReusableDelegationSetRequestFunc func(in1 *route53.GetReusableDelegationSetInput) (*request.Request, *route53.GetReusableDelegationSetOutput)

	// GetReusableDelegationSetWithContextFunc mocks the GetReusableDelegationSetWithContext method.
	GetReusableDelegationSetWithContextFunc func(in1 context.Context, in2 *route53.GetReusableDelegationSetInput, in3 ...request.Option) (*route53.GetReusableDelegationSetOutput, error)

	// GetTrafficPolicyFunc mocks the GetTrafficPolicy method.
	GetTrafficPolicyFunc func(in1 *route53.GetTrafficPolicyInput) (*route53.GetTrafficPolicyOutput, error)

	// GetTrafficPolicyInstanceFunc mocks the GetTrafficPolicyInstance method.
	GetTrafficPolicyInstanceFunc func(in1 *route53.GetTrafficPolicyInstanceInput) (*route53.GetTrafficPolicyInstanceOutput, error)

	// GetTrafficPolicyInstanceCountFunc mocks the GetTrafficPolicyInstanceCount method.
	GetTrafficPolicyInstanceCountFunc func(in1 *route53.GetTrafficPolicyInstanceCountInput) (*route53.GetTrafficPolicyInstanceCountOutput, error)

	// GetTrafficPolicyInstanceCountRequestFunc mocks the GetTrafficPolicyInstanceCountRequest method.
	GetTrafficPolicyInstanceCountRequestFunc func(in1 *route53.GetTrafficPolicyInstanceCountInput) (*request.Request, *route53.GetTrafficPolicyInstanceCountOutput)

	// GetTrafficPolicyInstanceCountWithContextFunc mocks the GetTrafficPolicyInstanceCountWithContext method.
	GetTrafficPolicyInstanceCountWithContextFunc func(in1 context.Context, in2 *route53.GetTrafficPolicyInstanceCountInput, in3 ...request.Option) (*route53.GetTrafficPolicyInstanceCountOutput, error)

	// GetTrafficPolicyInstanceRequestFunc mocks the GetTrafficPolicyInstanceRequest method.
	GetTrafficPolicyInstanceRequestFunc func(in1 *route53.GetTrafficPolicyInstanceInput) (*request.Request, *route53.GetTrafficPolicyInstanceOutput)

	// GetTrafficPolicyInstanceWithContextFunc mocks the GetTrafficPolicyInstanceWithContext method.
	GetTrafficPolicyInstanceWithContextFunc func(in1 context.Context, in2 *route53.GetTrafficPolicyInstanceInput, in3 ...request.Option) (*route53.GetTrafficPolicyInstanceOutput, error)

	// GetTrafficPolicyRequestFunc mocks the GetTrafficPolicyRequest method.
	GetTrafficPolicyRequestFunc func(in1 *route53.GetTrafficPolicyInput) (*request.Request, *route53.GetTrafficPolicyOutput)

	// GetTrafficPolicyWithContextFunc mocks the GetTrafficPolicyWithContext method.
	GetTrafficPolicyWithContextFunc func(in1 context.Context, in2 *route53.GetTrafficPolicyInput, in3 ...request.Option) (*route53.GetTrafficPolicyOutput, error)

	// ListGeoLocationsFunc mocks the ListGeoLocations method.
	ListGeoLocationsFunc func(in1 *route53.ListGeoLocationsInput) (*route53.ListGeoLocationsOutput, error)

	// ListGeoLocationsRequestFunc mocks the ListGeoLocationsRequest method.
	ListGeoLocationsRequestFunc func(in1 *route53.ListGeoLocationsInput) (*request.Request, *route53.ListGeoLocationsOutput)

	// ListGeoLocationsWithContextFunc mocks the ListGeoLocationsWithContext method.
	ListGeoLocationsWithContextFunc func(in1 context.Context, in2 *route53.ListGeoLocationsInput, in3 ...request.Option) (*route53.ListGeoLocationsOutput, error)

	// ListHealthChecksFunc mocks the ListHealthChecks method.
	ListHealthChecksFunc func(in1 *route53.ListHealthChecksInput) (*route53.ListHealthChecksOutput, error)

	// ListHealthChecksPagesFunc mocks the ListHealthChecksPages method.
	ListHealthChecksPagesFunc func(in1 *route53.ListHealthChecksInput, in2 func(*route53.ListHealthChecksOutput, bool) bool) error

	// ListHealthChecksPagesWithContextFunc mocks the ListHealthChecksPagesWithContext method.
	ListHealthChecksPagesWithContextFunc func(in1 context.Context, in2 *route53.ListHealthChecksInput, in3 func(*route53.ListHealthChecksOutput, bool) bool, in4 ...request.Option) error

	// ListHealthChecksRequestFunc mocks the ListHealthChecksRequest method.
	ListHealthChecksRequestFunc func(in1 *route53.ListHealthChecksInput) (*request.Request, *route53.ListHealthChecksOutput)

	// ListHealthChecksWithContextFunc mocks the ListHealthChecksWithContext method.
	ListHealthChecksWithContextFunc func(in1 context.Context, in2 *route53.ListHealthChecksInput, in3 ...request.Option) (*route53.ListHealthChecksOutput, error)

	// ListHostedZonesFunc mocks the ListHostedZones method.
	ListHostedZonesFunc func(in1 *route53.ListHostedZonesInput) (*route53.ListHostedZonesOutput, error)

	// ListHostedZonesByNameFunc mocks the ListHostedZonesByName method.
	ListHostedZonesByNameFunc func(in1 *route53.ListHostedZonesByNameInput) (*route53.ListHostedZonesByNameOutput, error)

	// ListHostedZonesByNameRequestFunc mocks the ListHostedZonesByNameRequest method.
	ListHostedZonesByNameRequestFunc func(in1 *route53.ListHostedZonesByNameInput) (*request.Request, *route53.ListHostedZonesByNameOutput)

	// ListHostedZonesByNameWithContextFunc mocks the ListHostedZonesByNameWithContext method.
	ListHostedZonesByNameWithContextFunc func(in1 context.Context, in2 *route53.ListHostedZonesByNameInput, in3 ...request.Option) (*route53.ListHostedZonesByNameOutput, error)

	// ListHostedZonesByVPCFunc mocks the ListHostedZonesByVPC method.
	ListHostedZonesByVPCFunc func(in1 *route53.ListHostedZonesByVPCInput) (*route53.ListHostedZonesByVPCOutput, error)

	// ListHostedZonesByVPCRequestFunc mocks the ListHostedZonesByVPCRequest method.
	ListHostedZonesByVPCRequestFunc func(in1 *route53.ListHostedZonesByVPCInput) (*request.Request, *route53.ListHostedZonesByVPCOutput)

	// ListHostedZonesByVPCWithContextFunc mocks the ListHostedZonesByVPCWithContext method.
	ListHostedZonesByVPCWithContextFunc func(in1 context.Context, in2 *route53.ListHostedZonesByVPCInput, in3 ...request.Option) (*route53.ListHostedZonesByVPCOutput, error)

	// ListHostedZonesPagesFunc mocks the ListHostedZonesPages method.
	ListHostedZonesPagesFunc func(in1 *route53.ListHostedZonesInput, in2 func(*route53.ListHostedZonesOutput, bool) bool) error

	// ListHostedZonesPagesWithContextFunc mocks the ListHostedZonesPagesWithContext method.
	ListHostedZonesPagesWithContextFunc func(in1 context.Context, in2 *route53.ListHostedZonesInput, in3 func(*route53.ListHostedZonesOutput, bool) bool, in4 ...request.Option) error

	// ListHostedZonesRequestFunc mocks the ListHostedZonesRequest method.
	ListHostedZonesRequestFunc func(in1 *route53.ListHostedZonesInput) (*request.Request, *route53.ListHostedZonesOutput)

	// ListHostedZonesWithContextFunc mocks the ListHostedZonesWithContext method.
	ListHostedZonesWithContextFunc func(in1 context.Context, in2 *route53.ListHostedZonesInput, in3 ...request.Option) (*route53.ListHostedZonesOutput, error)

	// ListQueryLoggingConfigsFunc mocks the ListQueryLoggingConfigs method.
	ListQueryLoggingConfigsFunc func(in1 *route53.ListQueryLoggingConfigsInput) (*route53.ListQueryLoggingConfigsOutput, error)

	// ListQueryLoggingConfigsPagesFunc mocks the ListQueryLoggingConfigsPages method.
	ListQueryLoggingConfigsPagesFunc func(in1 *route53.ListQueryLoggingConfigsInput, in2 func(*route53.ListQueryLoggingConfigsOutput, bool) bool) error

	// ListQueryLoggingConfigsPagesWithContextFunc mocks the ListQueryLoggingConfigsPagesWithContext method.
	ListQueryLoggingConfigsPagesWithContextFunc func(in1 context.Context, in2 *route53.ListQueryLoggingConfigsInput, in3 func(*route53.ListQueryLoggingConfigsOutput, bool) bool, in4 ...request.Option) error

	// ListQueryLoggingConfigsRequestFunc mocks the ListQueryLoggingConfigsRequest method.
	ListQueryLoggingConfigsRequestFunc func(in1 *route53.ListQueryLoggingConfigsInput) (*request.Request, *route53.ListQueryLoggingConfigsOutput)

	// ListQueryLoggingConfigsWithContextFunc mocks the ListQueryLoggingConfigsWithContext method.
	ListQueryLoggingConfigsWithContextFunc func(in1 context.Context, in2 *route53.ListQueryLoggingConfigsInput, in3 ...request.Option) (*route53.ListQueryLoggingConfigsOutput, error)

	// ListResourceRecordSetsFunc mocks the ListResourceRecordSets method.
	ListResourceRecordSetsFunc func(in1 *route53.ListResourceRecordSetsInput) (*route53.ListResourceRecordSetsOutput, error)

	// ListResourceRecordSetsPagesFunc mocks the ListResourceRecordSetsPages method.
	ListResourceRecordSetsPagesFunc func(in1 *route53.ListResourceRecordSetsInput, in2 func(*route53.ListResourceRecordSetsOutput, bool) bool) error

	// ListResourceRecordSetsPagesWithContextFunc mocks the ListResourceRecordSetsPagesWithContext method.
	ListResourceRecordSetsPagesWithContextFunc func(in1 context.Context, in2 *route53.ListResourceRecordSetsInput, in3 func(*route53.ListResourceRecordSetsOutput, bool) bool, in4 ...request.Option) error

	// ListResourceRecordSetsRequestFunc mocks the ListResourceRecordSetsRequest method.
	ListResourceRecordSetsRequestFunc func(in1 *route53.ListResourceRecordSetsInput) (*request.Request, *route53.ListResourceRecordSetsOutput)

	// ListResourceRecordSetsWithContextFunc mocks the ListResourceRecordSetsWithContext method.
	ListResourceRecordSetsWithContextFunc func(in1 context.Context, in2 *route53.ListResourceRecordSetsInput, in3 ...request.Option) (*route53.ListResourceRecordSetsOutput, error)

	// ListReusableDelegationSetsFunc mocks the ListReusableDelegationSets method.
	ListReusableDelegationSetsFunc func(in1 *route53.ListReusableDelegationSetsInput) (*route53.ListReusableDelegationSetsOutput, error)

	// ListReusableDelegationSetsRequestFunc mocks the ListReusableDelegationSetsRequest method.
	ListReusableDelegationSetsRequestFunc func(in1 *route53.ListReusableDelegationSetsInput) (*request.Request, *route53.ListReusableDelegationSetsOutput)

	// ListReusableDelegationSetsWithContextFunc mocks the ListReusableDelegationSetsWithContext method.
	ListReusableDelegationSetsWithContextFunc func(in1 context.Context, in2 *route53.ListReusableDelegationSetsInput, in3 ...request.Option) (*route53.ListReusableDelegationSetsOutput, error)

	// ListTagsForResourceFunc mocks the ListTagsForResource method.
	ListTagsForResourceFunc func(in1 *route53.ListTagsForResourceInput) (*route53.ListTagsForResourceOutput, error)

	// ListTagsForResourceRequestFunc mocks the ListTagsForResourceRequest method.
	ListTagsForResourceRequestFunc func(in1 *route53.ListTagsForResourceInput) (*request.Request, *route53.ListTagsForResourceOutput)

	// ListTagsForResourceWithContextFunc mocks the ListTagsForResourceWithContext method.
	ListTagsForResourceWithContextFunc func(in1 context.Context, in2 *route53.ListTagsForResourceInput, in3 ...request.Option) (*route53.ListTagsForResourceOutput, error)

	// ListTagsForResourcesFunc mocks the ListTagsForResources method.
	ListTagsForResourcesFunc func(in1 *route53.ListTagsForResourcesInput) (*route53.ListTagsForResourcesOutput, error)

	// ListTagsForResourcesRequestFunc mocks the ListTagsForResourcesRequest method.
	ListTagsForResourcesRequestFunc func(in1 *route53.ListTagsForResourcesInput) (*request.Request, *route53.ListTagsForResourcesOutput)

	// ListTagsForResourcesWithContextFunc mocks the ListTagsForResourcesWithContext method.
	ListTagsForResourcesWithContextFunc func(in1 context.Context, in2 *route53.ListTagsForResourcesInput, in3 ...request.Option) (*route53.ListTagsForResourcesOutput, error)

	// ListTrafficPoliciesFunc mocks the ListTrafficPolicies method.
	ListTrafficPoliciesFunc func(in1 *route53.ListTrafficPoliciesInput) (*route53.ListTrafficPoliciesOutput, error)

	// ListTrafficPoliciesRequestFunc mocks the ListTrafficPoliciesRequest method.
	ListTrafficPoliciesRequestFunc func(in1 *route53.ListTrafficPoliciesInput) (*request.Request, *route53.ListTrafficPoliciesOutput)

	// ListTrafficPoliciesWithContextFunc mocks the ListTrafficPoliciesWithContext method.
	ListTrafficPoliciesWithContextFunc func(in1 context.Context, in2 *route53.ListTrafficPoliciesInput, in3 ...request.Option) (*route53.ListTrafficPoliciesOutput, error)

	// ListTrafficPolicyInstancesFunc mocks the ListTrafficPolicyInstances method.
	ListTrafficPolicyInstancesFunc func(in1 *route53.ListTrafficPolicyInstancesInput) (*route53.ListTrafficPolicyInstancesOutput, error)

	// ListTrafficPolicyInstancesByHostedZoneFunc mocks the ListTrafficPolicyInstancesByHostedZone method.
	ListTrafficPolicyInstancesByHostedZoneFunc func(in1 *route53.ListTrafficPolicyInstancesByHostedZoneInput) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error)

	// ListTrafficPolicyInstancesByHostedZoneRequestFunc mocks the ListTrafficPolicyInstancesByHostedZoneRequest method.
	ListTrafficPolicyInstancesByHostedZoneRequestFunc func(in1 *route53.ListTrafficPolicyInstancesByHostedZoneInput) (*request.Request, *route53.ListTrafficPolicyInstancesByHostedZoneOutput)

	// ListTrafficPolicyInstancesByHostedZoneWithContextFunc mocks the ListTrafficPolicyInstancesByHostedZoneWithContext method.
	ListTrafficPolicyInstancesByHostedZoneWithContextFunc func(in1 context.Context, in2 *route53.ListTrafficPolicyInstancesByHostedZoneInput, in3 ...request.Option) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error)

	// ListTrafficPolicyInstancesByPolicyFunc mocks the ListTrafficPolicyInstancesByPolicy method.
	ListTrafficPolicyInstancesByPolicyFunc func(in1 *route53.ListTrafficPolicyInstancesByPolicyInput) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error)

	// ListTrafficPolicyInstancesByPolicyRequestFunc mocks the ListTrafficPolicyInstancesByPolicyRequest method.
	ListTrafficPolicyInstancesByPolicyRequestFunc func(in1 *route53.ListTrafficPolicyInstancesByPolicyInput) (*request.Request, *route53.ListTrafficPolicyInstancesByPolicyOutput)

	// ListTrafficPolicyInstancesByPolicyWithContextFunc mocks the ListTrafficPolicyInstancesByPolicyWithContext method.
	ListTrafficPolicyInstancesByPolicyWithContextFunc func(in1 context.Context, in2 *route53.ListTrafficPolicyInstancesByPolicyInput, in3 ...request.Option) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error)

	// ListTrafficPolicyInstancesRequestFunc mocks the ListTrafficPolicyInstancesRequest method.
	ListTrafficPolicyInstancesRequestFunc func(in1 *route53.ListTrafficPolicyInstancesInput) (*request.Request, *route53.ListTrafficPolicyInstancesOutput)

	// ListTrafficPolicyInstancesWithContextFunc mocks the ListTrafficPolicyInstancesWithContext method.
	ListTrafficPolicyInstancesWithContextFunc func(in1 context.Context, in2 *route53.ListTrafficPolicyInstancesInput, in3 ...request.Option) (*route53.ListTrafficPolicyInstancesOutput, error)

	// ListTrafficPolicyVersionsFunc mocks the ListTrafficPolicyVersions method.
	ListTrafficPolicyVersionsFunc func(in1 *route53.ListTrafficPolicyVersionsInput) (*route53.ListTrafficPolicyVersionsOutput, error)

	// ListTrafficPolicyVersionsRequestFunc mocks the ListTrafficPolicyVersionsRequest method.
	ListTrafficPolicyVersionsRequestFunc func(in1 *route53.ListTrafficPolicyVersionsInput) (*request.Request, *route53.ListTrafficPolicyVersionsOutput)

	// ListTrafficPolicyVersionsWithContextFunc mocks the ListTrafficPolicyVersionsWithContext method.
	ListTrafficPolicyVersionsWithContextFunc func(in1 context.Context, in2 *route53.ListTrafficPolicyVersionsInput, in3 ...request.Option) (*route53.ListTrafficPolicyVersionsOutput, error)

	// ListVPCAssociationAuthorizationsFunc mocks the ListVPCAssociationAuthorizations method.
	ListVPCAssociationAuthorizationsFunc func(in1 *route53.ListVPCAssociationAuthorizationsInput) (*route53.ListVPCAssociationAuthorizationsOutput, error)

	// ListVPCAssociationAuthorizationsRequestFunc mocks the ListVPCAssociationAuthorizationsRequest method.
	ListVPCAssociationAuthorizationsRequestFunc func(in1 *route53.ListVPCAssociationAuthorizationsInput) (*request.Request, *route53.ListVPCAssociationAuthorizationsOutput)

	// ListVPCAssociationAuthorizationsWithContextFunc mocks the ListVPCAssociationAuthorizationsWithContext method.
	ListVPCAssociationAuthorizationsWithContextFunc func(in1 context.Context, in2 *route53.ListVPCAssociationAuthorizationsInput, in3 ...request.Option) (*route53.ListVPCAssociationAuthorizationsOutput, error)

	// TestDNSAnswerFunc mocks the TestDNSAnswer method.
	TestDNSAnswerFunc func(in1 *route53.TestDNSAnswerInput) (*route53.TestDNSAnswerOutput, error)

	// TestDNSAnswerRequestFunc mocks the TestDNSAnswerRequest method.
	TestDNSAnswerRequestFunc func(in1 *route53.TestDNSAnswerInput) (*request.Request, *route53.TestDNSAnswerOutput)

	// TestDNSAnswerWithContextFunc mocks the TestDNSAnswerWithContext method.
	TestDNSAnswerWithContextFunc func(in1 context.Context, in2 *route53.TestDNSAnswerInput, in3 ...request.Option) (*route53.TestDNSAnswerOutput, error)

	// UpdateHealthCheckFunc mocks the UpdateHealthCheck method.
	UpdateHealthCheckFunc func(in1 *route53.UpdateHealthCheckInput) (*route53.UpdateHealthCheckOutput, error)

	// UpdateHealthCheckRequestFunc mocks the UpdateHealthCheckRequest method.
	UpdateHealthCheckRequestFunc func(in1 *route53.UpdateHealthCheckInput) (*request.Request, *route53.UpdateHealthCheckOutput)

	// UpdateHealthCheckWithContextFunc mocks the UpdateHealthCheckWithContext method.
	UpdateHealthCheckWithContextFunc func(in1 context.Context, in2 *route53.UpdateHealthCheckInput, in3 ...request.Option) (*route53.UpdateHealthCheckOutput, error)

	// UpdateHostedZoneCommentFunc mocks the UpdateHostedZoneComment method.
	UpdateHostedZoneCommentFunc func(in1 *route53.UpdateHostedZoneCommentInput) (*route53.UpdateHostedZoneCommentOutput, error)

	// UpdateHostedZoneCommentRequestFunc mocks the UpdateHostedZoneCommentRequest method.
	UpdateHostedZoneCommentRequestFunc func(in1 *route53.UpdateHostedZoneCommentInput) (*request.Request, *route53.UpdateHostedZoneCommentOutput)

	// UpdateHostedZoneCommentWithContextFunc mocks the UpdateHostedZoneCommentWithContext method.
	UpdateHostedZoneCommentWithContextFunc func(in1 context.Context, in2 *route53.UpdateHostedZoneCommentInput, in3 ...request.Option) (*route53.UpdateHostedZoneCommentOutput, error)

	// UpdateTrafficPolicyCommentFunc mocks the UpdateTrafficPolicyComment method.
	UpdateTrafficPolicyCommentFunc func(in1 *route53.UpdateTrafficPolicyCommentInput) (*route53.UpdateTrafficPolicyCommentOutput, error)

	// UpdateTrafficPolicyCommentRequestFunc mocks the UpdateTrafficPolicyCommentRequest method.
	UpdateTrafficPolicyCommentRequestFunc func(in1 *route53.UpdateTrafficPolicyCommentInput) (*request.Request, *route53.UpdateTrafficPolicyCommentOutput)

	// UpdateTrafficPolicyCommentWithContextFunc mocks the UpdateTrafficPolicyCommentWithContext method.
	UpdateTrafficPolicyCommentWithContextFunc func(in1 context.Context, in2 *route53.UpdateTrafficPolicyCommentInput, in3 ...request.Option) (*route53.UpdateTrafficPolicyCommentOutput, error)

	// UpdateTrafficPolicyInstanceFunc mocks the UpdateTrafficPolicyInstance method.
	UpdateTrafficPolicyInstanceFunc func(in1 *route53.UpdateTrafficPolicyInstanceInput) (*route53.UpdateTrafficPolicyInstanceOutput, error)

	// UpdateTrafficPolicyInstanceRequestFunc mocks the UpdateTrafficPolicyInstanceRequest method.
	UpdateTrafficPolicyInstanceRequestFunc func(in1 *route53.UpdateTrafficPolicyInstanceInput) (*request.Request, *route53.UpdateTrafficPolicyInstanceOutput)

	// UpdateTrafficPolicyInstanceWithContextFunc mocks the UpdateTrafficPolicyInstanceWithContext method.
	UpdateTrafficPolicyInstanceWithContextFunc func(in1 context.Context, in2 *route53.UpdateTrafficPolicyInstanceInput, in3 ...request.Option) (*route53.UpdateTrafficPolicyInstanceOutput, error)

	// WaitUntilResourceRecordSetsChangedFunc mocks the WaitUntilResourceRecordSetsChanged method.
	WaitUntilResourceRecordSetsChangedFunc func(in1 *route53.GetChangeInput) error

	// WaitUntilResourceRecordSetsChangedWithContextFunc mocks the WaitUntilResourceRecordSetsChangedWithContext method.
	WaitUntilResourceRecordSetsChangedWithContextFunc func(in1 context.Context, in2 *route53.GetChangeInput, in3 ...request.WaiterOption) error

	// calls tracks calls to the methods.
	calls struct {
		// AssociateVPCWithHostedZone holds details about calls to the AssociateVPCWithHostedZone method.
		AssociateVPCWithHostedZone []struct {
			// In1 is the in1 argument value.
			In1 *route53.AssociateVPCWithHostedZoneInput
		}
		// AssociateVPCWithHostedZoneRequest holds details about calls to the AssociateVPCWithHostedZoneRequest method.
		AssociateVPCWithHostedZoneRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.AssociateVPCWithHostedZoneInput
		}
		// AssociateVPCWithHostedZoneWithContext holds details about calls to the AssociateVPCWithHostedZoneWithContext method.
		AssociateVPCWithHostedZoneWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.AssociateVPCWithHostedZoneInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ChangeResourceRecordSets holds details about calls to the ChangeResourceRecordSets method.
		ChangeResourceRecordSets []struct {
			// In1 is the in1 argument value.
			In1 *route53.ChangeResourceRecordSetsInput
		}
		// ChangeResourceRecordSetsRequest holds details about calls to the ChangeResourceRecordSetsRequest method.
		ChangeResourceRecordSetsRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ChangeResourceRecordSetsInput
		}
		// ChangeResourceRecordSetsWithContext holds details about calls to the ChangeResourceRecordSetsWithContext method.
		ChangeResourceRecordSetsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ChangeResourceRecordSetsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ChangeTagsForResource holds details about calls to the ChangeTagsForResource method.
		ChangeTagsForResource []struct {
			// In1 is the in1 argument value.
			In1 *route53.ChangeTagsForResourceInput
		}
		// ChangeTagsForResourceRequest holds details about calls to the ChangeTagsForResourceRequest method.
		ChangeTagsForResourceRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ChangeTagsForResourceInput
		}
		// ChangeTagsForResourceWithContext holds details about calls to the ChangeTagsForResourceWithContext method.
		ChangeTagsForResourceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ChangeTagsForResourceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateHealthCheck holds details about calls to the CreateHealthCheck method.
		CreateHealthCheck []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateHealthCheckInput
		}
		// CreateHealthCheckRequest holds details about calls to the CreateHealthCheckRequest method.
		CreateHealthCheckRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateHealthCheckInput
		}
		// CreateHealthCheckWithContext holds details about calls to the CreateHealthCheckWithContext method.
		CreateHealthCheckWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.CreateHealthCheckInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateHostedZone holds details about calls to the CreateHostedZone method.
		CreateHostedZone []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateHostedZoneInput
		}
		// CreateHostedZoneRequest holds details about calls to the CreateHostedZoneRequest method.
		CreateHostedZoneRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateHostedZoneInput
		}
		// CreateHostedZoneWithContext holds details about calls to the CreateHostedZoneWithContext method.
		CreateHostedZoneWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.CreateHostedZoneInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateQueryLoggingConfig holds details about calls to the CreateQueryLoggingConfig method.
		CreateQueryLoggingConfig []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateQueryLoggingConfigInput
		}
		// CreateQueryLoggingConfigRequest holds details about calls to the CreateQueryLoggingConfigRequest method.
		CreateQueryLoggingConfigRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateQueryLoggingConfigInput
		}
		// CreateQueryLoggingConfigWithContext holds details about calls to the CreateQueryLoggingConfigWithContext method.
		CreateQueryLoggingConfigWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.CreateQueryLoggingConfigInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateReusableDelegationSet holds details about calls to the CreateReusableDelegationSet method.
		CreateReusableDelegationSet []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateReusableDelegationSetInput
		}
		// CreateReusableDelegationSetRequest holds details about calls to the CreateReusableDelegationSetRequest method.
		CreateReusableDelegationSetRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateReusableDelegationSetInput
		}
		// CreateReusableDelegationSetWithContext holds details about calls to the CreateReusableDelegationSetWithContext method.
		CreateReusableDelegationSetWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.CreateReusableDelegationSetInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTrafficPolicy holds details about calls to the CreateTrafficPolicy method.
		CreateTrafficPolicy []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateTrafficPolicyInput
		}
		// CreateTrafficPolicyInstance holds details about calls to the CreateTrafficPolicyInstance method.
		CreateTrafficPolicyInstance []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateTrafficPolicyInstanceInput
		}
		// CreateTrafficPolicyInstanceRequest holds details about calls to the CreateTrafficPolicyInstanceRequest method.
		CreateTrafficPolicyInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateTrafficPolicyInstanceInput
		}
		// CreateTrafficPolicyInstanceWithContext holds details about calls to the CreateTrafficPolicyInstanceWithContext method.
		CreateTrafficPolicyInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.CreateTrafficPolicyInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTrafficPolicyRequest holds details about calls to the CreateTrafficPolicyRequest method.
		CreateTrafficPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateTrafficPolicyInput
		}
		// CreateTrafficPolicyVersion holds details about calls to the CreateTrafficPolicyVersion method.
		CreateTrafficPolicyVersion []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateTrafficPolicyVersionInput
		}
		// CreateTrafficPolicyVersionRequest holds details about calls to the CreateTrafficPolicyVersionRequest method.
		CreateTrafficPolicyVersionRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateTrafficPolicyVersionInput
		}
		// CreateTrafficPolicyVersionWithContext holds details about calls to the CreateTrafficPolicyVersionWithContext method.
		CreateTrafficPolicyVersionWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.CreateTrafficPolicyVersionInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateTrafficPolicyWithContext holds details about calls to the CreateTrafficPolicyWithContext method.
		CreateTrafficPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.CreateTrafficPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// CreateVPCAssociationAuthorization holds details about calls to the CreateVPCAssociationAuthorization method.
		CreateVPCAssociationAuthorization []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateVPCAssociationAuthorizationInput
		}
		// CreateVPCAssociationAuthorizationRequest holds details about calls to the CreateVPCAssociationAuthorizationRequest method.
		CreateVPCAssociationAuthorizationRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.CreateVPCAssociationAuthorizationInput
		}
		// CreateVPCAssociationAuthorizationWithContext holds details about calls to the CreateVPCAssociationAuthorizationWithContext method.
		CreateVPCAssociationAuthorizationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.CreateVPCAssociationAuthorizationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteHealthCheck holds details about calls to the DeleteHealthCheck method.
		DeleteHealthCheck []struct {
			// In1 is the in1 argument value.
			In1 *route53.DeleteHealthCheckInput
		}
		// DeleteHealthCheckRequest holds details about calls to the DeleteHealthCheckRequest method.
		DeleteHealthCheckRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.DeleteHealthCheckInput
		}
		// DeleteHealthCheckWithContext holds details about calls to the DeleteHealthCheckWithContext method.
		DeleteHealthCheckWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.DeleteHealthCheckInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteHostedZone holds details about calls to the DeleteHostedZone method.
		DeleteHostedZone []struct {
			// In1 is the in1 argument value.
			In1 *route53.DeleteHostedZoneInput
		}
		// DeleteHostedZoneRequest holds details about calls to the DeleteHostedZoneRequest method.
		DeleteHostedZoneRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.DeleteHostedZoneInput
		}
		// DeleteHostedZoneWithContext holds details about calls to the DeleteHostedZoneWithContext method.
		DeleteHostedZoneWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.DeleteHostedZoneInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteQueryLoggingConfig holds details about calls to the DeleteQueryLoggingConfig method.
		DeleteQueryLoggingConfig []struct {
			// In1 is the in1 argument value.
			In1 *route53.DeleteQueryLoggingConfigInput
		}
		// DeleteQueryLoggingConfigRequest holds details about calls to the DeleteQueryLoggingConfigRequest method.
		DeleteQueryLoggingConfigRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.DeleteQueryLoggingConfigInput
		}
		// DeleteQueryLoggingConfigWithContext holds details about calls to the DeleteQueryLoggingConfigWithContext method.
		DeleteQueryLoggingConfigWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.DeleteQueryLoggingConfigInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteReusableDelegationSet holds details about calls to the DeleteReusableDelegationSet method.
		DeleteReusableDelegationSet []struct {
			// In1 is the in1 argument value.
			In1 *route53.DeleteReusableDelegationSetInput
		}
		// DeleteReusableDelegationSetRequest holds details about calls to the DeleteReusableDelegationSetRequest method.
		DeleteReusableDelegationSetRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.DeleteReusableDelegationSetInput
		}
		// DeleteReusableDelegationSetWithContext holds details about calls to the DeleteReusableDelegationSetWithContext method.
		DeleteReusableDelegationSetWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.DeleteReusableDelegationSetInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteTrafficPolicy holds details about calls to the DeleteTrafficPolicy method.
		DeleteTrafficPolicy []struct {
			// In1 is the in1 argument value.
			In1 *route53.DeleteTrafficPolicyInput
		}
		// DeleteTrafficPolicyInstance holds details about calls to the DeleteTrafficPolicyInstance method.
		DeleteTrafficPolicyInstance []struct {
			// In1 is the in1 argument value.
			In1 *route53.DeleteTrafficPolicyInstanceInput
		}
		// DeleteTrafficPolicyInstanceRequest holds details about calls to the DeleteTrafficPolicyInstanceRequest method.
		DeleteTrafficPolicyInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.DeleteTrafficPolicyInstanceInput
		}
		// DeleteTrafficPolicyInstanceWithContext holds details about calls to the DeleteTrafficPolicyInstanceWithContext method.
		DeleteTrafficPolicyInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.DeleteTrafficPolicyInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteTrafficPolicyRequest holds details about calls to the DeleteTrafficPolicyRequest method.
		DeleteTrafficPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.DeleteTrafficPolicyInput
		}
		// DeleteTrafficPolicyWithContext holds details about calls to the DeleteTrafficPolicyWithContext method.
		DeleteTrafficPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.DeleteTrafficPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DeleteVPCAssociationAuthorization holds details about calls to the DeleteVPCAssociationAuthorization method.
		DeleteVPCAssociationAuthorization []struct {
			// In1 is the in1 argument value.
			In1 *route53.DeleteVPCAssociationAuthorizationInput
		}
		// DeleteVPCAssociationAuthorizationRequest holds details about calls to the DeleteVPCAssociationAuthorizationRequest method.
		DeleteVPCAssociationAuthorizationRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.DeleteVPCAssociationAuthorizationInput
		}
		// DeleteVPCAssociationAuthorizationWithContext holds details about calls to the DeleteVPCAssociationAuthorizationWithContext method.
		DeleteVPCAssociationAuthorizationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.DeleteVPCAssociationAuthorizationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// DisassociateVPCFromHostedZone holds details about calls to the DisassociateVPCFromHostedZone method.
		DisassociateVPCFromHostedZone []struct {
			// In1 is the in1 argument value.
			In1 *route53.DisassociateVPCFromHostedZoneInput
		}
		// DisassociateVPCFromHostedZoneRequest holds details about calls to the DisassociateVPCFromHostedZoneRequest method.
		DisassociateVPCFromHostedZoneRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.DisassociateVPCFromHostedZoneInput
		}
		// DisassociateVPCFromHostedZoneWithContext holds details about calls to the DisassociateVPCFromHostedZoneWithContext method.
		DisassociateVPCFromHostedZoneWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.DisassociateVPCFromHostedZoneInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetAccountLimit holds details about calls to the GetAccountLimit method.
		GetAccountLimit []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetAccountLimitInput
		}
		// GetAccountLimitRequest holds details about calls to the GetAccountLimitRequest method.
		GetAccountLimitRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetAccountLimitInput
		}
		// GetAccountLimitWithContext holds details about calls to the GetAccountLimitWithContext method.
		GetAccountLimitWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetAccountLimitInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetChange holds details about calls to the GetChange method.
		GetChange []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetChangeInput
		}
		// GetChangeRequest holds details about calls to the GetChangeRequest method.
		GetChangeRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetChangeInput
		}
		// GetChangeWithContext holds details about calls to the GetChangeWithContext method.
		GetChangeWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetChangeInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetCheckerIpRanges holds details about calls to the GetCheckerIpRanges method.
		GetCheckerIpRanges []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetCheckerIpRangesInput
		}
		// GetCheckerIpRangesRequest holds details about calls to the GetCheckerIpRangesRequest method.
		GetCheckerIpRangesRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetCheckerIpRangesInput
		}
		// GetCheckerIpRangesWithContext holds details about calls to the GetCheckerIpRangesWithContext method.
		GetCheckerIpRangesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetCheckerIpRangesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetGeoLocation holds details about calls to the GetGeoLocation method.
		GetGeoLocation []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetGeoLocationInput
		}
		// GetGeoLocationRequest holds details about calls to the GetGeoLocationRequest method.
		GetGeoLocationRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetGeoLocationInput
		}
		// GetGeoLocationWithContext holds details about calls to the GetGeoLocationWithContext method.
		GetGeoLocationWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetGeoLocationInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetHealthCheck holds details about calls to the GetHealthCheck method.
		GetHealthCheck []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetHealthCheckInput
		}
		// GetHealthCheckCount holds details about calls to the GetHealthCheckCount method.
		GetHealthCheckCount []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetHealthCheckCountInput
		}
		// GetHealthCheckCountRequest holds details about calls to the GetHealthCheckCountRequest method.
		GetHealthCheckCountRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetHealthCheckCountInput
		}
		// GetHealthCheckCountWithContext holds details about calls to the GetHealthCheckCountWithContext method.
		GetHealthCheckCountWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetHealthCheckCountInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetHealthCheckLastFailureReason holds details about calls to the GetHealthCheckLastFailureReason method.
		GetHealthCheckLastFailureReason []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetHealthCheckLastFailureReasonInput
		}
		// GetHealthCheckLastFailureReasonRequest holds details about calls to the GetHealthCheckLastFailureReasonRequest method.
		GetHealthCheckLastFailureReasonRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetHealthCheckLastFailureReasonInput
		}
		// GetHealthCheckLastFailureReasonWithContext holds details about calls to the GetHealthCheckLastFailureReasonWithContext method.
		GetHealthCheckLastFailureReasonWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetHealthCheckLastFailureReasonInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetHealthCheckRequest holds details about calls to the GetHealthCheckRequest method.
		GetHealthCheckRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetHealthCheckInput
		}
		// GetHealthCheckStatus holds details about calls to the GetHealthCheckStatus method.
		GetHealthCheckStatus []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetHealthCheckStatusInput
		}
		// GetHealthCheckStatusRequest holds details about calls to the GetHealthCheckStatusRequest method.
		GetHealthCheckStatusRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetHealthCheckStatusInput
		}
		// GetHealthCheckStatusWithContext holds details about calls to the GetHealthCheckStatusWithContext method.
		GetHealthCheckStatusWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetHealthCheckStatusInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetHealthCheckWithContext holds details about calls to the GetHealthCheckWithContext method.
		GetHealthCheckWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetHealthCheckInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetHostedZone holds details about calls to the GetHostedZone method.
		GetHostedZone []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetHostedZoneInput
		}
		// GetHostedZoneCount holds details about calls to the GetHostedZoneCount method.
		GetHostedZoneCount []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetHostedZoneCountInput
		}
		// GetHostedZoneCountRequest holds details about calls to the GetHostedZoneCountRequest method.
		GetHostedZoneCountRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetHostedZoneCountInput
		}
		// GetHostedZoneCountWithContext holds details about calls to the GetHostedZoneCountWithContext method.
		GetHostedZoneCountWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetHostedZoneCountInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetHostedZoneLimit holds details about calls to the GetHostedZoneLimit method.
		GetHostedZoneLimit []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetHostedZoneLimitInput
		}
		// GetHostedZoneLimitRequest holds details about calls to the GetHostedZoneLimitRequest method.
		GetHostedZoneLimitRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetHostedZoneLimitInput
		}
		// GetHostedZoneLimitWithContext holds details about calls to the GetHostedZoneLimitWithContext method.
		GetHostedZoneLimitWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetHostedZoneLimitInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetHostedZoneRequest holds details about calls to the GetHostedZoneRequest method.
		GetHostedZoneRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetHostedZoneInput
		}
		// GetHostedZoneWithContext holds details about calls to the GetHostedZoneWithContext method.
		GetHostedZoneWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetHostedZoneInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetQueryLoggingConfig holds details about calls to the GetQueryLoggingConfig method.
		GetQueryLoggingConfig []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetQueryLoggingConfigInput
		}
		// GetQueryLoggingConfigRequest holds details about calls to the GetQueryLoggingConfigRequest method.
		GetQueryLoggingConfigRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetQueryLoggingConfigInput
		}
		// GetQueryLoggingConfigWithContext holds details about calls to the GetQueryLoggingConfigWithContext method.
		GetQueryLoggingConfigWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetQueryLoggingConfigInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetReusableDelegationSet holds details about calls to the GetReusableDelegationSet method.
		GetReusableDelegationSet []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetReusableDelegationSetInput
		}
		// GetReusableDelegationSetLimit holds details about calls to the GetReusableDelegationSetLimit method.
		GetReusableDelegationSetLimit []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetReusableDelegationSetLimitInput
		}
		// GetReusableDelegationSetLimitRequest holds details about calls to the GetReusableDelegationSetLimitRequest method.
		GetReusableDelegationSetLimitRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetReusableDelegationSetLimitInput
		}
		// GetReusableDelegationSetLimitWithContext holds details about calls to the GetReusableDelegationSetLimitWithContext method.
		GetReusableDelegationSetLimitWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetReusableDelegationSetLimitInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetReusableDelegationSetRequest holds details about calls to the GetReusableDelegationSetRequest method.
		GetReusableDelegationSetRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetReusableDelegationSetInput
		}
		// GetReusableDelegationSetWithContext holds details about calls to the GetReusableDelegationSetWithContext method.
		GetReusableDelegationSetWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetReusableDelegationSetInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetTrafficPolicy holds details about calls to the GetTrafficPolicy method.
		GetTrafficPolicy []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetTrafficPolicyInput
		}
		// GetTrafficPolicyInstance holds details about calls to the GetTrafficPolicyInstance method.
		GetTrafficPolicyInstance []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetTrafficPolicyInstanceInput
		}
		// GetTrafficPolicyInstanceCount holds details about calls to the GetTrafficPolicyInstanceCount method.
		GetTrafficPolicyInstanceCount []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetTrafficPolicyInstanceCountInput
		}
		// GetTrafficPolicyInstanceCountRequest holds details about calls to the GetTrafficPolicyInstanceCountRequest method.
		GetTrafficPolicyInstanceCountRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetTrafficPolicyInstanceCountInput
		}
		// GetTrafficPolicyInstanceCountWithContext holds details about calls to the GetTrafficPolicyInstanceCountWithContext method.
		GetTrafficPolicyInstanceCountWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetTrafficPolicyInstanceCountInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetTrafficPolicyInstanceRequest holds details about calls to the GetTrafficPolicyInstanceRequest method.
		GetTrafficPolicyInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetTrafficPolicyInstanceInput
		}
		// GetTrafficPolicyInstanceWithContext holds details about calls to the GetTrafficPolicyInstanceWithContext method.
		GetTrafficPolicyInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetTrafficPolicyInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// GetTrafficPolicyRequest holds details about calls to the GetTrafficPolicyRequest method.
		GetTrafficPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetTrafficPolicyInput
		}
		// GetTrafficPolicyWithContext holds details about calls to the GetTrafficPolicyWithContext method.
		GetTrafficPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetTrafficPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListGeoLocations holds details about calls to the ListGeoLocations method.
		ListGeoLocations []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListGeoLocationsInput
		}
		// ListGeoLocationsRequest holds details about calls to the ListGeoLocationsRequest method.
		ListGeoLocationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListGeoLocationsInput
		}
		// ListGeoLocationsWithContext holds details about calls to the ListGeoLocationsWithContext method.
		ListGeoLocationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListGeoLocationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListHealthChecks holds details about calls to the ListHealthChecks method.
		ListHealthChecks []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListHealthChecksInput
		}
		// ListHealthChecksPages holds details about calls to the ListHealthChecksPages method.
		ListHealthChecksPages []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListHealthChecksInput
			// In2 is the in2 argument value.
			In2 func(*route53.ListHealthChecksOutput, bool) bool
		}
		// ListHealthChecksPagesWithContext holds details about calls to the ListHealthChecksPagesWithContext method.
		ListHealthChecksPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListHealthChecksInput
			// In3 is the in3 argument value.
			In3 func(*route53.ListHealthChecksOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListHealthChecksRequest holds details about calls to the ListHealthChecksRequest method.
		ListHealthChecksRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListHealthChecksInput
		}
		// ListHealthChecksWithContext holds details about calls to the ListHealthChecksWithContext method.
		ListHealthChecksWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListHealthChecksInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListHostedZones holds details about calls to the ListHostedZones method.
		ListHostedZones []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListHostedZonesInput
		}
		// ListHostedZonesByName holds details about calls to the ListHostedZonesByName method.
		ListHostedZonesByName []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListHostedZonesByNameInput
		}
		// ListHostedZonesByNameRequest holds details about calls to the ListHostedZonesByNameRequest method.
		ListHostedZonesByNameRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListHostedZonesByNameInput
		}
		// ListHostedZonesByNameWithContext holds details about calls to the ListHostedZonesByNameWithContext method.
		ListHostedZonesByNameWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListHostedZonesByNameInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListHostedZonesByVPC holds details about calls to the ListHostedZonesByVPC method.
		ListHostedZonesByVPC []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListHostedZonesByVPCInput
		}
		// ListHostedZonesByVPCRequest holds details about calls to the ListHostedZonesByVPCRequest method.
		ListHostedZonesByVPCRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListHostedZonesByVPCInput
		}
		// ListHostedZonesByVPCWithContext holds details about calls to the ListHostedZonesByVPCWithContext method.
		ListHostedZonesByVPCWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListHostedZonesByVPCInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListHostedZonesPages holds details about calls to the ListHostedZonesPages method.
		ListHostedZonesPages []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListHostedZonesInput
			// In2 is the in2 argument value.
			In2 func(*route53.ListHostedZonesOutput, bool) bool
		}
		// ListHostedZonesPagesWithContext holds details about calls to the ListHostedZonesPagesWithContext method.
		ListHostedZonesPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListHostedZonesInput
			// In3 is the in3 argument value.
			In3 func(*route53.ListHostedZonesOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListHostedZonesRequest holds details about calls to the ListHostedZonesRequest method.
		ListHostedZonesRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListHostedZonesInput
		}
		// ListHostedZonesWithContext holds details about calls to the ListHostedZonesWithContext method.
		ListHostedZonesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListHostedZonesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListQueryLoggingConfigs holds details about calls to the ListQueryLoggingConfigs method.
		ListQueryLoggingConfigs []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListQueryLoggingConfigsInput
		}
		// ListQueryLoggingConfigsPages holds details about calls to the ListQueryLoggingConfigsPages method.
		ListQueryLoggingConfigsPages []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListQueryLoggingConfigsInput
			// In2 is the in2 argument value.
			In2 func(*route53.ListQueryLoggingConfigsOutput, bool) bool
		}
		// ListQueryLoggingConfigsPagesWithContext holds details about calls to the ListQueryLoggingConfigsPagesWithContext method.
		ListQueryLoggingConfigsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListQueryLoggingConfigsInput
			// In3 is the in3 argument value.
			In3 func(*route53.ListQueryLoggingConfigsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListQueryLoggingConfigsRequest holds details about calls to the ListQueryLoggingConfigsRequest method.
		ListQueryLoggingConfigsRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListQueryLoggingConfigsInput
		}
		// ListQueryLoggingConfigsWithContext holds details about calls to the ListQueryLoggingConfigsWithContext method.
		ListQueryLoggingConfigsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListQueryLoggingConfigsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListResourceRecordSets holds details about calls to the ListResourceRecordSets method.
		ListResourceRecordSets []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListResourceRecordSetsInput
		}
		// ListResourceRecordSetsPages holds details about calls to the ListResourceRecordSetsPages method.
		ListResourceRecordSetsPages []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListResourceRecordSetsInput
			// In2 is the in2 argument value.
			In2 func(*route53.ListResourceRecordSetsOutput, bool) bool
		}
		// ListResourceRecordSetsPagesWithContext holds details about calls to the ListResourceRecordSetsPagesWithContext method.
		ListResourceRecordSetsPagesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListResourceRecordSetsInput
			// In3 is the in3 argument value.
			In3 func(*route53.ListResourceRecordSetsOutput, bool) bool
			// In4 is the in4 argument value.
			In4 []request.Option
		}
		// ListResourceRecordSetsRequest holds details about calls to the ListResourceRecordSetsRequest method.
		ListResourceRecordSetsRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListResourceRecordSetsInput
		}
		// ListResourceRecordSetsWithContext holds details about calls to the ListResourceRecordSetsWithContext method.
		ListResourceRecordSetsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListResourceRecordSetsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListReusableDelegationSets holds details about calls to the ListReusableDelegationSets method.
		ListReusableDelegationSets []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListReusableDelegationSetsInput
		}
		// ListReusableDelegationSetsRequest holds details about calls to the ListReusableDelegationSetsRequest method.
		ListReusableDelegationSetsRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListReusableDelegationSetsInput
		}
		// ListReusableDelegationSetsWithContext holds details about calls to the ListReusableDelegationSetsWithContext method.
		ListReusableDelegationSetsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListReusableDelegationSetsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListTagsForResource holds details about calls to the ListTagsForResource method.
		ListTagsForResource []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListTagsForResourceInput
		}
		// ListTagsForResourceRequest holds details about calls to the ListTagsForResourceRequest method.
		ListTagsForResourceRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListTagsForResourceInput
		}
		// ListTagsForResourceWithContext holds details about calls to the ListTagsForResourceWithContext method.
		ListTagsForResourceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListTagsForResourceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListTagsForResources holds details about calls to the ListTagsForResources method.
		ListTagsForResources []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListTagsForResourcesInput
		}
		// ListTagsForResourcesRequest holds details about calls to the ListTagsForResourcesRequest method.
		ListTagsForResourcesRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListTagsForResourcesInput
		}
		// ListTagsForResourcesWithContext holds details about calls to the ListTagsForResourcesWithContext method.
		ListTagsForResourcesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListTagsForResourcesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListTrafficPolicies holds details about calls to the ListTrafficPolicies method.
		ListTrafficPolicies []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListTrafficPoliciesInput
		}
		// ListTrafficPoliciesRequest holds details about calls to the ListTrafficPoliciesRequest method.
		ListTrafficPoliciesRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListTrafficPoliciesInput
		}
		// ListTrafficPoliciesWithContext holds details about calls to the ListTrafficPoliciesWithContext method.
		ListTrafficPoliciesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListTrafficPoliciesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListTrafficPolicyInstances holds details about calls to the ListTrafficPolicyInstances method.
		ListTrafficPolicyInstances []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListTrafficPolicyInstancesInput
		}
		// ListTrafficPolicyInstancesByHostedZone holds details about calls to the ListTrafficPolicyInstancesByHostedZone method.
		ListTrafficPolicyInstancesByHostedZone []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListTrafficPolicyInstancesByHostedZoneInput
		}
		// ListTrafficPolicyInstancesByHostedZoneRequest holds details about calls to the ListTrafficPolicyInstancesByHostedZoneRequest method.
		ListTrafficPolicyInstancesByHostedZoneRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListTrafficPolicyInstancesByHostedZoneInput
		}
		// ListTrafficPolicyInstancesByHostedZoneWithContext holds details about calls to the ListTrafficPolicyInstancesByHostedZoneWithContext method.
		ListTrafficPolicyInstancesByHostedZoneWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListTrafficPolicyInstancesByHostedZoneInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListTrafficPolicyInstancesByPolicy holds details about calls to the ListTrafficPolicyInstancesByPolicy method.
		ListTrafficPolicyInstancesByPolicy []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListTrafficPolicyInstancesByPolicyInput
		}
		// ListTrafficPolicyInstancesByPolicyRequest holds details about calls to the ListTrafficPolicyInstancesByPolicyRequest method.
		ListTrafficPolicyInstancesByPolicyRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListTrafficPolicyInstancesByPolicyInput
		}
		// ListTrafficPolicyInstancesByPolicyWithContext holds details about calls to the ListTrafficPolicyInstancesByPolicyWithContext method.
		ListTrafficPolicyInstancesByPolicyWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListTrafficPolicyInstancesByPolicyInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListTrafficPolicyInstancesRequest holds details about calls to the ListTrafficPolicyInstancesRequest method.
		ListTrafficPolicyInstancesRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListTrafficPolicyInstancesInput
		}
		// ListTrafficPolicyInstancesWithContext holds details about calls to the ListTrafficPolicyInstancesWithContext method.
		ListTrafficPolicyInstancesWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListTrafficPolicyInstancesInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListTrafficPolicyVersions holds details about calls to the ListTrafficPolicyVersions method.
		ListTrafficPolicyVersions []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListTrafficPolicyVersionsInput
		}
		// ListTrafficPolicyVersionsRequest holds details about calls to the ListTrafficPolicyVersionsRequest method.
		ListTrafficPolicyVersionsRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListTrafficPolicyVersionsInput
		}
		// ListTrafficPolicyVersionsWithContext holds details about calls to the ListTrafficPolicyVersionsWithContext method.
		ListTrafficPolicyVersionsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListTrafficPolicyVersionsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// ListVPCAssociationAuthorizations holds details about calls to the ListVPCAssociationAuthorizations method.
		ListVPCAssociationAuthorizations []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListVPCAssociationAuthorizationsInput
		}
		// ListVPCAssociationAuthorizationsRequest holds details about calls to the ListVPCAssociationAuthorizationsRequest method.
		ListVPCAssociationAuthorizationsRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.ListVPCAssociationAuthorizationsInput
		}
		// ListVPCAssociationAuthorizationsWithContext holds details about calls to the ListVPCAssociationAuthorizationsWithContext method.
		ListVPCAssociationAuthorizationsWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.ListVPCAssociationAuthorizationsInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// TestDNSAnswer holds details about calls to the TestDNSAnswer method.
		TestDNSAnswer []struct {
			// In1 is the in1 argument value.
			In1 *route53.TestDNSAnswerInput
		}
		// TestDNSAnswerRequest holds details about calls to the TestDNSAnswerRequest method.
		TestDNSAnswerRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.TestDNSAnswerInput
		}
		// TestDNSAnswerWithContext holds details about calls to the TestDNSAnswerWithContext method.
		TestDNSAnswerWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.TestDNSAnswerInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateHealthCheck holds details about calls to the UpdateHealthCheck method.
		UpdateHealthCheck []struct {
			// In1 is the in1 argument value.
			In1 *route53.UpdateHealthCheckInput
		}
		// UpdateHealthCheckRequest holds details about calls to the UpdateHealthCheckRequest method.
		UpdateHealthCheckRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.UpdateHealthCheckInput
		}
		// UpdateHealthCheckWithContext holds details about calls to the UpdateHealthCheckWithContext method.
		UpdateHealthCheckWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.UpdateHealthCheckInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateHostedZoneComment holds details about calls to the UpdateHostedZoneComment method.
		UpdateHostedZoneComment []struct {
			// In1 is the in1 argument value.
			In1 *route53.UpdateHostedZoneCommentInput
		}
		// UpdateHostedZoneCommentRequest holds details about calls to the UpdateHostedZoneCommentRequest method.
		UpdateHostedZoneCommentRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.UpdateHostedZoneCommentInput
		}
		// UpdateHostedZoneCommentWithContext holds details about calls to the UpdateHostedZoneCommentWithContext method.
		UpdateHostedZoneCommentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.UpdateHostedZoneCommentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateTrafficPolicyComment holds details about calls to the UpdateTrafficPolicyComment method.
		UpdateTrafficPolicyComment []struct {
			// In1 is the in1 argument value.
			In1 *route53.UpdateTrafficPolicyCommentInput
		}
		// UpdateTrafficPolicyCommentRequest holds details about calls to the UpdateTrafficPolicyCommentRequest method.
		UpdateTrafficPolicyCommentRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.UpdateTrafficPolicyCommentInput
		}
		// UpdateTrafficPolicyCommentWithContext holds details about calls to the UpdateTrafficPolicyCommentWithContext method.
		UpdateTrafficPolicyCommentWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.UpdateTrafficPolicyCommentInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// UpdateTrafficPolicyInstance holds details about calls to the UpdateTrafficPolicyInstance method.
		UpdateTrafficPolicyInstance []struct {
			// In1 is the in1 argument value.
			In1 *route53.UpdateTrafficPolicyInstanceInput
		}
		// UpdateTrafficPolicyInstanceRequest holds details about calls to the UpdateTrafficPolicyInstanceRequest method.
		UpdateTrafficPolicyInstanceRequest []struct {
			// In1 is the in1 argument value.
			In1 *route53.UpdateTrafficPolicyInstanceInput
		}
		// UpdateTrafficPolicyInstanceWithContext holds details about calls to the UpdateTrafficPolicyInstanceWithContext method.
		UpdateTrafficPolicyInstanceWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.UpdateTrafficPolicyInstanceInput
			// In3 is the in3 argument value.
			In3 []request.Option
		}
		// WaitUntilResourceRecordSetsChanged holds details about calls to the WaitUntilResourceRecordSetsChanged method.
		WaitUntilResourceRecordSetsChanged []struct {
			// In1 is the in1 argument value.
			In1 *route53.GetChangeInput
		}
		// WaitUntilResourceRecordSetsChangedWithContext holds details about calls to the WaitUntilResourceRecordSetsChangedWithContext method.
		WaitUntilResourceRecordSetsChangedWithContext []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *route53.GetChangeInput
			// In3 is the in3 argument value.
			In3 []request.WaiterOption
		}
	}
	lockAssociateVPCWithHostedZone                        sync.RWMutex
	lockAssociateVPCWithHostedZoneRequest                 sync.RWMutex
	lockAssociateVPCWithHostedZoneWithContext             sync.RWMutex
	lockChangeResourceRecordSets                          sync.RWMutex
	lockChangeResourceRecordSetsRequest                   sync.RWMutex
	lockChangeResourceRecordSetsWithContext               sync.RWMutex
	lockChangeTagsForResource                             sync.RWMutex
	lockChangeTagsForResourceRequest                      sync.RWMutex
	lockChangeTagsForResourceWithContext                  sync.RWMutex
	lockCreateHealthCheck                                 sync.RWMutex
	lockCreateHealthCheckRequest                          sync.RWMutex
	lockCreateHealthCheckWithContext                      sync.RWMutex
	lockCreateHostedZone                                  sync.RWMutex
	lockCreateHostedZoneRequest                           sync.RWMutex
	lockCreateHostedZoneWithContext                       sync.RWMutex
	lockCreateQueryLoggingConfig                          sync.RWMutex
	lockCreateQueryLoggingConfigRequest                   sync.RWMutex
	lockCreateQueryLoggingConfigWithContext               sync.RWMutex
	lockCreateReusableDelegationSet                       sync.RWMutex
	lockCreateReusableDelegationSetRequest                sync.RWMutex
	lockCreateReusableDelegationSetWithContext            sync.RWMutex
	lockCreateTrafficPolicy                               sync.RWMutex
	lockCreateTrafficPolicyInstance                       sync.RWMutex
	lockCreateTrafficPolicyInstanceRequest                sync.RWMutex
	lockCreateTrafficPolicyInstanceWithContext            sync.RWMutex
	lockCreateTrafficPolicyRequest                        sync.RWMutex
	lockCreateTrafficPolicyVersion                        sync.RWMutex
	lockCreateTrafficPolicyVersionRequest                 sync.RWMutex
	lockCreateTrafficPolicyVersionWithContext             sync.RWMutex
	lockCreateTrafficPolicyWithContext                    sync.RWMutex
	lockCreateVPCAssociationAuthorization                 sync.RWMutex
	lockCreateVPCAssociationAuthorizationRequest          sync.RWMutex
	lockCreateVPCAssociationAuthorizationWithContext      sync.RWMutex
	lockDeleteHealthCheck                                 sync.RWMutex
	lockDeleteHealthCheckRequest                          sync.RWMutex
	lockDeleteHealthCheckWithContext                      sync.RWMutex
	lockDeleteHostedZone                                  sync.RWMutex
	lockDeleteHostedZoneRequest                           sync.RWMutex
	lockDeleteHostedZoneWithContext                       sync.RWMutex
	lockDeleteQueryLoggingConfig                          sync.RWMutex
	lockDeleteQueryLoggingConfigRequest                   sync.RWMutex
	lockDeleteQueryLoggingConfigWithContext               sync.RWMutex
	lockDeleteReusableDelegationSet                       sync.RWMutex
	lockDeleteReusableDelegationSetRequest                sync.RWMutex
	lockDeleteReusableDelegationSetWithContext            sync.RWMutex
	lockDeleteTrafficPolicy                               sync.RWMutex
	lockDeleteTrafficPolicyInstance                       sync.RWMutex
	lockDeleteTrafficPolicyInstanceRequest                sync.RWMutex
	lockDeleteTrafficPolicyInstanceWithContext            sync.RWMutex
	lockDeleteTrafficPolicyRequest                        sync.RWMutex
	lockDeleteTrafficPolicyWithContext                    sync.RWMutex
	lockDeleteVPCAssociationAuthorization                 sync.RWMutex
	lockDeleteVPCAssociationAuthorizationRequest          sync.RWMutex
	lockDeleteVPCAssociationAuthorizationWithContext      sync.RWMutex
	lockDisassociateVPCFromHostedZone                     sync.RWMutex
	lockDisassociateVPCFromHostedZoneRequest              sync.RWMutex
	lockDisassociateVPCFromHostedZoneWithContext          sync.RWMutex
	lockGetAccountLimit                                   sync.RWMutex
	lockGetAccountLimitRequest                            sync.RWMutex
	lockGetAccountLimitWithContext                        sync.RWMutex
	lockGetChange                                         sync.RWMutex
	lockGetChangeRequest                                  sync.RWMutex
	lockGetChangeWithContext                              sync.RWMutex
	lockGetCheckerIpRanges                                sync.RWMutex
	lockGetCheckerIpRangesRequest                         sync.RWMutex
	lockGetCheckerIpRangesWithContext                     sync.RWMutex
	lockGetGeoLocation                                    sync.RWMutex
	lockGetGeoLocationRequest                             sync.RWMutex
	lockGetGeoLocationWithContext                         sync.RWMutex
	lockGetHealthCheck                                    sync.RWMutex
	lockGetHealthCheckCount                               sync.RWMutex
	lockGetHealthCheckCountRequest                        sync.RWMutex
	lockGetHealthCheckCountWithContext                    sync.RWMutex
	lockGetHealthCheckLastFailureReason                   sync.RWMutex
	lockGetHealthCheckLastFailureReasonRequest            sync.RWMutex
	lockGetHealthCheckLastFailureReasonWithContext        sync.RWMutex
	lockGetHealthCheckRequest                             sync.RWMutex
	lockGetHealthCheckStatus                              sync.RWMutex
	lockGetHealthCheckStatusRequest                       sync.RWMutex
	lockGetHealthCheckStatusWithContext                   sync.RWMutex
	lockGetHealthCheckWithContext                         sync.RWMutex
	lockGetHostedZone                                     sync.RWMutex
	lockGetHostedZoneCount                                sync.RWMutex
	lockGetHostedZoneCountRequest                         sync.RWMutex
	lockGetHostedZoneCountWithContext                     sync.RWMutex
	lockGetHostedZoneLimit                                sync.RWMutex
	lockGetHostedZoneLimitRequest                         sync.RWMutex
	lockGetHostedZoneLimitWithContext                     sync.RWMutex
	lockGetHostedZoneRequest                              sync.RWMutex
	lockGetHostedZoneWithContext                          sync.RWMutex
	lockGetQueryLoggingConfig                             sync.RWMutex
	lockGetQueryLoggingConfigRequest                      sync.RWMutex
	lockGetQueryLoggingConfigWithContext                  sync.RWMutex
	lockGetReusableDelegationSet                          sync.RWMutex
	lockGetReusableDelegationSetLimit                     sync.RWMutex
	lockGetReusableDelegationSetLimitRequest              sync.RWMutex
	lockGetReusableDelegationSetLimitWithContext          sync.RWMutex
	lockGetReusableDelegationSetRequest                   sync.RWMutex
	lockGetReusableDelegationSetWithContext               sync.RWMutex
	lockGetTrafficPolicy                                  sync.RWMutex
	lockGetTrafficPolicyInstance                          sync.RWMutex
	lockGetTrafficPolicyInstanceCount                     sync.RWMutex
	lockGetTrafficPolicyInstanceCountRequest              sync.RWMutex
	lockGetTrafficPolicyInstanceCountWithContext          sync.RWMutex
	lockGetTrafficPolicyInstanceRequest                   sync.RWMutex
	lockGetTrafficPolicyInstanceWithContext               sync.RWMutex
	lockGetTrafficPolicyRequest                           sync.RWMutex
	lockGetTrafficPolicyWithContext                       sync.RWMutex
	lockListGeoLocations                                  sync.RWMutex
	lockListGeoLocationsRequest                           sync.RWMutex
	lockListGeoLocationsWithContext                       sync.RWMutex
	lockListHealthChecks                                  sync.RWMutex
	lockListHealthChecksPages                             sync.RWMutex
	lockListHealthChecksPagesWithContext                  sync.RWMutex
	lockListHealthChecksRequest                           sync.RWMutex
	lockListHealthChecksWithContext                       sync.RWMutex
	lockListHostedZones                                   sync.RWMutex
	lockListHostedZonesByName                             sync.RWMutex
	lockListHostedZonesByNameRequest                      sync.RWMutex
	lockListHostedZonesByNameWithContext                  sync.RWMutex
	lockListHostedZonesByVPC                              sync.RWMutex
	lockListHostedZonesByVPCRequest                       sync.RWMutex
	lockListHostedZonesByVPCWithContext                   sync.RWMutex
	lockListHostedZonesPages                              sync.RWMutex
	lockListHostedZonesPagesWithContext                   sync.RWMutex
	lockListHostedZonesRequest                            sync.RWMutex
	lockListHostedZonesWithContext                        sync.RWMutex
	lockListQueryLoggingConfigs                           sync.RWMutex
	lockListQueryLoggingConfigsPages                      sync.RWMutex
	lockListQueryLoggingConfigsPagesWithContext           sync.RWMutex
	lockListQueryLoggingConfigsRequest                    sync.RWMutex
	lockListQueryLoggingConfigsWithContext                sync.RWMutex
	lockListResourceRecordSets                            sync.RWMutex
	lockListResourceRecordSetsPages                       sync.RWMutex
	lockListResourceRecordSetsPagesWithContext            sync.RWMutex
	lockListResourceRecordSetsRequest                     sync.RWMutex
	lockListResourceRecordSetsWithContext                 sync.RWMutex
	lockListReusableDelegationSets                        sync.RWMutex
	lockListReusableDelegationSetsRequest                 sync.RWMutex
	lockListReusableDelegationSetsWithContext             sync.RWMutex
	lockListTagsForResource                               sync.RWMutex
	lockListTagsForResourceRequest                        sync.RWMutex
	lockListTagsForResourceWithContext                    sync.RWMutex
	lockListTagsForResources                              sync.RWMutex
	lockListTagsForResourcesRequest                       sync.RWMutex
	lockListTagsForResourcesWithContext                   sync.RWMutex
	lockListTrafficPolicies                               sync.RWMutex
	lockListTrafficPoliciesRequest                        sync.RWMutex
	lockListTrafficPoliciesWithContext                    sync.RWMutex
	lockListTrafficPolicyInstances                        sync.RWMutex
	lockListTrafficPolicyInstancesByHostedZone            sync.RWMutex
	lockListTrafficPolicyInstancesByHostedZoneRequest     sync.RWMutex
	lockListTrafficPolicyInstancesByHostedZoneWithContext sync.RWMutex
	lockListTrafficPolicyInstancesByPolicy                sync.RWMutex
	lockListTrafficPolicyInstancesByPolicyRequest         sync.RWMutex
	lockListTrafficPolicyInstancesByPolicyWithContext     sync.RWMutex
	lockListTrafficPolicyInstancesRequest                 sync.RWMutex
	lockListTrafficPolicyInstancesWithContext             sync.RWMutex
	lockListTrafficPolicyVersions                         sync.RWMutex
	lockListTrafficPolicyVersionsRequest                  sync.RWMutex
	lockListTrafficPolicyVersionsWithContext              sync.RWMutex
	lockListVPCAssociationAuthorizations                  sync.RWMutex
	lockListVPCAssociationAuthorizationsRequest           sync.RWMutex
	lockListVPCAssociationAuthorizationsWithContext       sync.RWMutex
	lockTestDNSAnswer                                     sync.RWMutex
	lockTestDNSAnswerRequest                              sync.RWMutex
	lockTestDNSAnswerWithContext                          sync.RWMutex
	lockUpdateHealthCheck                                 sync.RWMutex
	lockUpdateHealthCheckRequest                          sync.RWMutex
	lockUpdateHealthCheckWithContext                      sync.RWMutex
	lockUpdateHostedZoneComment                           sync.RWMutex
	lockUpdateHostedZoneCommentRequest                    sync.RWMutex
	lockUpdateHostedZoneCommentWithContext                sync.RWMutex
	lockUpdateTrafficPolicyComment                        sync.RWMutex
	lockUpdateTrafficPolicyCommentRequest                 sync.RWMutex
	lockUpdateTrafficPolicyCommentWithContext             sync.RWMutex
	lockUpdateTrafficPolicyInstance                       sync.RWMutex
	lockUpdateTrafficPolicyInstanceRequest                sync.RWMutex
	lockUpdateTrafficPolicyInstanceWithContext            sync.RWMutex
	lockWaitUntilResourceRecordSetsChanged                sync.RWMutex
	lockWaitUntilResourceRecordSetsChangedWithContext     sync.RWMutex
}

// AssociateVPCWithHostedZone calls AssociateVPCWithHostedZoneFunc.
func (mock *Route53APIMock) AssociateVPCWithHostedZone(in1 *route53.AssociateVPCWithHostedZoneInput) (*route53.AssociateVPCWithHostedZoneOutput, error) {
	if mock.AssociateVPCWithHostedZoneFunc == nil {
		panic("Route53APIMock.AssociateVPCWithHostedZoneFunc: method is nil but Route53API.AssociateVPCWithHostedZone was just called")
	}
	callInfo := struct {
		In1 *route53.AssociateVPCWithHostedZoneInput
	}{
		In1: in1,
	}
	mock.lockAssociateVPCWithHostedZone.Lock()
	mock.calls.AssociateVPCWithHostedZone = append(mock.calls.AssociateVPCWithHostedZone, callInfo)
	mock.lockAssociateVPCWithHostedZone.Unlock()
	return mock.AssociateVPCWithHostedZoneFunc(in1)
}

// AssociateVPCWithHostedZoneCalls gets all the calls that were made to AssociateVPCWithHostedZone.
// Check the length with:
//     len(mockedRoute53API.AssociateVPCWithHostedZoneCalls())
func (mock *Route53APIMock) AssociateVPCWithHostedZoneCalls() []struct {
	In1 *route53.AssociateVPCWithHostedZoneInput
} {
	var calls []struct {
		In1 *route53.AssociateVPCWithHostedZoneInput
	}
	mock.lockAssociateVPCWithHostedZone.RLock()
	calls = mock.calls.AssociateVPCWithHostedZone
	mock.lockAssociateVPCWithHostedZone.RUnlock()
	return calls
}

// AssociateVPCWithHostedZoneRequest calls AssociateVPCWithHostedZoneRequestFunc.
func (mock *Route53APIMock) AssociateVPCWithHostedZoneRequest(in1 *route53.AssociateVPCWithHostedZoneInput) (*request.Request, *route53.AssociateVPCWithHostedZoneOutput) {
	if mock.AssociateVPCWithHostedZoneRequestFunc == nil {
		panic("Route53APIMock.AssociateVPCWithHostedZoneRequestFunc: method is nil but Route53API.AssociateVPCWithHostedZoneRequest was just called")
	}
	callInfo := struct {
		In1 *route53.AssociateVPCWithHostedZoneInput
	}{
		In1: in1,
	}
	mock.lockAssociateVPCWithHostedZoneRequest.Lock()
	mock.calls.AssociateVPCWithHostedZoneRequest = append(mock.calls.AssociateVPCWithHostedZoneRequest, callInfo)
	mock.lockAssociateVPCWithHostedZoneRequest.Unlock()
	return mock.AssociateVPCWithHostedZoneRequestFunc(in1)
}

// AssociateVPCWithHostedZoneRequestCalls gets all the calls that were made to AssociateVPCWithHostedZoneRequest.
// Check the length with:
//     len(mockedRoute53API.AssociateVPCWithHostedZoneRequestCalls())
func (mock *Route53APIMock) AssociateVPCWithHostedZoneRequestCalls() []struct {
	In1 *route53.AssociateVPCWithHostedZoneInput
} {
	var calls []struct {
		In1 *route53.AssociateVPCWithHostedZoneInput
	}
	mock.lockAssociateVPCWithHostedZoneRequest.RLock()
	calls = mock.calls.AssociateVPCWithHostedZoneRequest
	mock.lockAssociateVPCWithHostedZoneRequest.RUnlock()
	return calls
}

// AssociateVPCWithHostedZoneWithContext calls AssociateVPCWithHostedZoneWithContextFunc.
func (mock *Route53APIMock) AssociateVPCWithHostedZoneWithContext(in1 context.Context, in2 *route53.AssociateVPCWithHostedZoneInput, in3 ...request.Option) (*route53.AssociateVPCWithHostedZoneOutput, error) {
	if mock.AssociateVPCWithHostedZoneWithContextFunc == nil {
		panic("Route53APIMock.AssociateVPCWithHostedZoneWithContextFunc: method is nil but Route53API.AssociateVPCWithHostedZoneWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.AssociateVPCWithHostedZoneInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockAssociateVPCWithHostedZoneWithContext.Lock()
	mock.calls.AssociateVPCWithHostedZoneWithContext = append(mock.calls.AssociateVPCWithHostedZoneWithContext, callInfo)
	mock.lockAssociateVPCWithHostedZoneWithContext.Unlock()
	return mock.AssociateVPCWithHostedZoneWithContextFunc(in1, in2, in3...)
}

// AssociateVPCWithHostedZoneWithContextCalls gets all the calls that were made to AssociateVPCWithHostedZoneWithContext.
// Check the length with:
//     len(mockedRoute53API.AssociateVPCWithHostedZoneWithContextCalls())
func (mock *Route53APIMock) AssociateVPCWithHostedZoneWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.AssociateVPCWithHostedZoneInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.AssociateVPCWithHostedZoneInput
		In3 []request.Option
	}
	mock.lockAssociateVPCWithHostedZoneWithContext.RLock()
	calls = mock.calls.AssociateVPCWithHostedZoneWithContext
	mock.lockAssociateVPCWithHostedZoneWithContext.RUnlock()
	return calls
}

// ChangeResourceRecordSets calls ChangeResourceRecordSetsFunc.
func (mock *Route53APIMock) ChangeResourceRecordSets(in1 *route53.ChangeResourceRecordSetsInput) (*route53.ChangeResourceRecordSetsOutput, error) {
	if mock.ChangeResourceRecordSetsFunc == nil {
		panic("Route53APIMock.ChangeResourceRecordSetsFunc: method is nil but Route53API.ChangeResourceRecordSets was just called")
	}
	callInfo := struct {
		In1 *route53.ChangeResourceRecordSetsInput
	}{
		In1: in1,
	}
	mock.lockChangeResourceRecordSets.Lock()
	mock.calls.ChangeResourceRecordSets = append(mock.calls.ChangeResourceRecordSets, callInfo)
	mock.lockChangeResourceRecordSets.Unlock()
	return mock.ChangeResourceRecordSetsFunc(in1)
}

// ChangeResourceRecordSetsCalls gets all the calls that were made to ChangeResourceRecordSets.
// Check the length with:
//     len(mockedRoute53API.ChangeResourceRecordSetsCalls())
func (mock *Route53APIMock) ChangeResourceRecordSetsCalls() []struct {
	In1 *route53.ChangeResourceRecordSetsInput
} {
	var calls []struct {
		In1 *route53.ChangeResourceRecordSetsInput
	}
	mock.lockChangeResourceRecordSets.RLock()
	calls = mock.calls.ChangeResourceRecordSets
	mock.lockChangeResourceRecordSets.RUnlock()
	return calls
}

// ChangeResourceRecordSetsRequest calls ChangeResourceRecordSetsRequestFunc.
func (mock *Route53APIMock) ChangeResourceRecordSetsRequest(in1 *route53.ChangeResourceRecordSetsInput) (*request.Request, *route53.ChangeResourceRecordSetsOutput) {
	if mock.ChangeResourceRecordSetsRequestFunc == nil {
		panic("Route53APIMock.ChangeResourceRecordSetsRequestFunc: method is nil but Route53API.ChangeResourceRecordSetsRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ChangeResourceRecordSetsInput
	}{
		In1: in1,
	}
	mock.lockChangeResourceRecordSetsRequest.Lock()
	mock.calls.ChangeResourceRecordSetsRequest = append(mock.calls.ChangeResourceRecordSetsRequest, callInfo)
	mock.lockChangeResourceRecordSetsRequest.Unlock()
	return mock.ChangeResourceRecordSetsRequestFunc(in1)
}

// ChangeResourceRecordSetsRequestCalls gets all the calls that were made to ChangeResourceRecordSetsRequest.
// Check the length with:
//     len(mockedRoute53API.ChangeResourceRecordSetsRequestCalls())
func (mock *Route53APIMock) ChangeResourceRecordSetsRequestCalls() []struct {
	In1 *route53.ChangeResourceRecordSetsInput
} {
	var calls []struct {
		In1 *route53.ChangeResourceRecordSetsInput
	}
	mock.lockChangeResourceRecordSetsRequest.RLock()
	calls = mock.calls.ChangeResourceRecordSetsRequest
	mock.lockChangeResourceRecordSetsRequest.RUnlock()
	return calls
}

// ChangeResourceRecordSetsWithContext calls ChangeResourceRecordSetsWithContextFunc.
func (mock *Route53APIMock) ChangeResourceRecordSetsWithContext(in1 context.Context, in2 *route53.ChangeResourceRecordSetsInput, in3 ...request.Option) (*route53.ChangeResourceRecordSetsOutput, error) {
	if mock.ChangeResourceRecordSetsWithContextFunc == nil {
		panic("Route53APIMock.ChangeResourceRecordSetsWithContextFunc: method is nil but Route53API.ChangeResourceRecordSetsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ChangeResourceRecordSetsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockChangeResourceRecordSetsWithContext.Lock()
	mock.calls.ChangeResourceRecordSetsWithContext = append(mock.calls.ChangeResourceRecordSetsWithContext, callInfo)
	mock.lockChangeResourceRecordSetsWithContext.Unlock()
	return mock.ChangeResourceRecordSetsWithContextFunc(in1, in2, in3...)
}

// ChangeResourceRecordSetsWithContextCalls gets all the calls that were made to ChangeResourceRecordSetsWithContext.
// Check the length with:
//     len(mockedRoute53API.ChangeResourceRecordSetsWithContextCalls())
func (mock *Route53APIMock) ChangeResourceRecordSetsWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ChangeResourceRecordSetsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ChangeResourceRecordSetsInput
		In3 []request.Option
	}
	mock.lockChangeResourceRecordSetsWithContext.RLock()
	calls = mock.calls.ChangeResourceRecordSetsWithContext
	mock.lockChangeResourceRecordSetsWithContext.RUnlock()
	return calls
}

// ChangeTagsForResource calls ChangeTagsForResourceFunc.
func (mock *Route53APIMock) ChangeTagsForResource(in1 *route53.ChangeTagsForResourceInput) (*route53.ChangeTagsForResourceOutput, error) {
	if mock.ChangeTagsForResourceFunc == nil {
		panic("Route53APIMock.ChangeTagsForResourceFunc: method is nil but Route53API.ChangeTagsForResource was just called")
	}
	callInfo := struct {
		In1 *route53.ChangeTagsForResourceInput
	}{
		In1: in1,
	}
	mock.lockChangeTagsForResource.Lock()
	mock.calls.ChangeTagsForResource = append(mock.calls.ChangeTagsForResource, callInfo)
	mock.lockChangeTagsForResource.Unlock()
	return mock.ChangeTagsForResourceFunc(in1)
}

// ChangeTagsForResourceCalls gets all the calls that were made to ChangeTagsForResource.
// Check the length with:
//     len(mockedRoute53API.ChangeTagsForResourceCalls())
func (mock *Route53APIMock) ChangeTagsForResourceCalls() []struct {
	In1 *route53.ChangeTagsForResourceInput
} {
	var calls []struct {
		In1 *route53.ChangeTagsForResourceInput
	}
	mock.lockChangeTagsForResource.RLock()
	calls = mock.calls.ChangeTagsForResource
	mock.lockChangeTagsForResource.RUnlock()
	return calls
}

// ChangeTagsForResourceRequest calls ChangeTagsForResourceRequestFunc.
func (mock *Route53APIMock) ChangeTagsForResourceRequest(in1 *route53.ChangeTagsForResourceInput) (*request.Request, *route53.ChangeTagsForResourceOutput) {
	if mock.ChangeTagsForResourceRequestFunc == nil {
		panic("Route53APIMock.ChangeTagsForResourceRequestFunc: method is nil but Route53API.ChangeTagsForResourceRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ChangeTagsForResourceInput
	}{
		In1: in1,
	}
	mock.lockChangeTagsForResourceRequest.Lock()
	mock.calls.ChangeTagsForResourceRequest = append(mock.calls.ChangeTagsForResourceRequest, callInfo)
	mock.lockChangeTagsForResourceRequest.Unlock()
	return mock.ChangeTagsForResourceRequestFunc(in1)
}

// ChangeTagsForResourceRequestCalls gets all the calls that were made to ChangeTagsForResourceRequest.
// Check the length with:
//     len(mockedRoute53API.ChangeTagsForResourceRequestCalls())
func (mock *Route53APIMock) ChangeTagsForResourceRequestCalls() []struct {
	In1 *route53.ChangeTagsForResourceInput
} {
	var calls []struct {
		In1 *route53.ChangeTagsForResourceInput
	}
	mock.lockChangeTagsForResourceRequest.RLock()
	calls = mock.calls.ChangeTagsForResourceRequest
	mock.lockChangeTagsForResourceRequest.RUnlock()
	return calls
}

// ChangeTagsForResourceWithContext calls ChangeTagsForResourceWithContextFunc.
func (mock *Route53APIMock) ChangeTagsForResourceWithContext(in1 context.Context, in2 *route53.ChangeTagsForResourceInput, in3 ...request.Option) (*route53.ChangeTagsForResourceOutput, error) {
	if mock.ChangeTagsForResourceWithContextFunc == nil {
		panic("Route53APIMock.ChangeTagsForResourceWithContextFunc: method is nil but Route53API.ChangeTagsForResourceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ChangeTagsForResourceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockChangeTagsForResourceWithContext.Lock()
	mock.calls.ChangeTagsForResourceWithContext = append(mock.calls.ChangeTagsForResourceWithContext, callInfo)
	mock.lockChangeTagsForResourceWithContext.Unlock()
	return mock.ChangeTagsForResourceWithContextFunc(in1, in2, in3...)
}

// ChangeTagsForResourceWithContextCalls gets all the calls that were made to ChangeTagsForResourceWithContext.
// Check the length with:
//     len(mockedRoute53API.ChangeTagsForResourceWithContextCalls())
func (mock *Route53APIMock) ChangeTagsForResourceWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ChangeTagsForResourceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ChangeTagsForResourceInput
		In3 []request.Option
	}
	mock.lockChangeTagsForResourceWithContext.RLock()
	calls = mock.calls.ChangeTagsForResourceWithContext
	mock.lockChangeTagsForResourceWithContext.RUnlock()
	return calls
}

// CreateHealthCheck calls CreateHealthCheckFunc.
func (mock *Route53APIMock) CreateHealthCheck(in1 *route53.CreateHealthCheckInput) (*route53.CreateHealthCheckOutput, error) {
	if mock.CreateHealthCheckFunc == nil {
		panic("Route53APIMock.CreateHealthCheckFunc: method is nil but Route53API.CreateHealthCheck was just called")
	}
	callInfo := struct {
		In1 *route53.CreateHealthCheckInput
	}{
		In1: in1,
	}
	mock.lockCreateHealthCheck.Lock()
	mock.calls.CreateHealthCheck = append(mock.calls.CreateHealthCheck, callInfo)
	mock.lockCreateHealthCheck.Unlock()
	return mock.CreateHealthCheckFunc(in1)
}

// CreateHealthCheckCalls gets all the calls that were made to CreateHealthCheck.
// Check the length with:
//     len(mockedRoute53API.CreateHealthCheckCalls())
func (mock *Route53APIMock) CreateHealthCheckCalls() []struct {
	In1 *route53.CreateHealthCheckInput
} {
	var calls []struct {
		In1 *route53.CreateHealthCheckInput
	}
	mock.lockCreateHealthCheck.RLock()
	calls = mock.calls.CreateHealthCheck
	mock.lockCreateHealthCheck.RUnlock()
	return calls
}

// CreateHealthCheckRequest calls CreateHealthCheckRequestFunc.
func (mock *Route53APIMock) CreateHealthCheckRequest(in1 *route53.CreateHealthCheckInput) (*request.Request, *route53.CreateHealthCheckOutput) {
	if mock.CreateHealthCheckRequestFunc == nil {
		panic("Route53APIMock.CreateHealthCheckRequestFunc: method is nil but Route53API.CreateHealthCheckRequest was just called")
	}
	callInfo := struct {
		In1 *route53.CreateHealthCheckInput
	}{
		In1: in1,
	}
	mock.lockCreateHealthCheckRequest.Lock()
	mock.calls.CreateHealthCheckRequest = append(mock.calls.CreateHealthCheckRequest, callInfo)
	mock.lockCreateHealthCheckRequest.Unlock()
	return mock.CreateHealthCheckRequestFunc(in1)
}

// CreateHealthCheckRequestCalls gets all the calls that were made to CreateHealthCheckRequest.
// Check the length with:
//     len(mockedRoute53API.CreateHealthCheckRequestCalls())
func (mock *Route53APIMock) CreateHealthCheckRequestCalls() []struct {
	In1 *route53.CreateHealthCheckInput
} {
	var calls []struct {
		In1 *route53.CreateHealthCheckInput
	}
	mock.lockCreateHealthCheckRequest.RLock()
	calls = mock.calls.CreateHealthCheckRequest
	mock.lockCreateHealthCheckRequest.RUnlock()
	return calls
}

// CreateHealthCheckWithContext calls CreateHealthCheckWithContextFunc.
func (mock *Route53APIMock) CreateHealthCheckWithContext(in1 context.Context, in2 *route53.CreateHealthCheckInput, in3 ...request.Option) (*route53.CreateHealthCheckOutput, error) {
	if mock.CreateHealthCheckWithContextFunc == nil {
		panic("Route53APIMock.CreateHealthCheckWithContextFunc: method is nil but Route53API.CreateHealthCheckWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.CreateHealthCheckInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockCreateHealthCheckWithContext.Lock()
	mock.calls.CreateHealthCheckWithContext = append(mock.calls.CreateHealthCheckWithContext, callInfo)
	mock.lockCreateHealthCheckWithContext.Unlock()
	return mock.CreateHealthCheckWithContextFunc(in1, in2, in3...)
}

// CreateHealthCheckWithContextCalls gets all the calls that were made to CreateHealthCheckWithContext.
// Check the length with:
//     len(mockedRoute53API.CreateHealthCheckWithContextCalls())
func (mock *Route53APIMock) CreateHealthCheckWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.CreateHealthCheckInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.CreateHealthCheckInput
		In3 []request.Option
	}
	mock.lockCreateHealthCheckWithContext.RLock()
	calls = mock.calls.CreateHealthCheckWithContext
	mock.lockCreateHealthCheckWithContext.RUnlock()
	return calls
}

// CreateHostedZone calls CreateHostedZoneFunc.
func (mock *Route53APIMock) CreateHostedZone(in1 *route53.CreateHostedZoneInput) (*route53.CreateHostedZoneOutput, error) {
	if mock.CreateHostedZoneFunc == nil {
		panic("Route53APIMock.CreateHostedZoneFunc: method is nil but Route53API.CreateHostedZone was just called")
	}
	callInfo := struct {
		In1 *route53.CreateHostedZoneInput
	}{
		In1: in1,
	}
	mock.lockCreateHostedZone.Lock()
	mock.calls.CreateHostedZone = append(mock.calls.CreateHostedZone, callInfo)
	mock.lockCreateHostedZone.Unlock()
	return mock.CreateHostedZoneFunc(in1)
}

// CreateHostedZoneCalls gets all the calls that were made to CreateHostedZone.
// Check the length with:
//     len(mockedRoute53API.CreateHostedZoneCalls())
func (mock *Route53APIMock) CreateHostedZoneCalls() []struct {
	In1 *route53.CreateHostedZoneInput
} {
	var calls []struct {
		In1 *route53.CreateHostedZoneInput
	}
	mock.lockCreateHostedZone.RLock()
	calls = mock.calls.CreateHostedZone
	mock.lockCreateHostedZone.RUnlock()
	return calls
}

// CreateHostedZoneRequest calls CreateHostedZoneRequestFunc.
func (mock *Route53APIMock) CreateHostedZoneRequest(in1 *route53.CreateHostedZoneInput) (*request.Request, *route53.CreateHostedZoneOutput) {
	if mock.CreateHostedZoneRequestFunc == nil {
		panic("Route53APIMock.CreateHostedZoneRequestFunc: method is nil but Route53API.CreateHostedZoneRequest was just called")
	}
	callInfo := struct {
		In1 *route53.CreateHostedZoneInput
	}{
		In1: in1,
	}
	mock.lockCreateHostedZoneRequest.Lock()
	mock.calls.CreateHostedZoneRequest = append(mock.calls.CreateHostedZoneRequest, callInfo)
	mock.lockCreateHostedZoneRequest.Unlock()
	return mock.CreateHostedZoneRequestFunc(in1)
}

// CreateHostedZoneRequestCalls gets all the calls that were made to CreateHostedZoneRequest.
// Check the length with:
//     len(mockedRoute53API.CreateHostedZoneRequestCalls())
func (mock *Route53APIMock) CreateHostedZoneRequestCalls() []struct {
	In1 *route53.CreateHostedZoneInput
} {
	var calls []struct {
		In1 *route53.CreateHostedZoneInput
	}
	mock.lockCreateHostedZoneRequest.RLock()
	calls = mock.calls.CreateHostedZoneRequest
	mock.lockCreateHostedZoneRequest.RUnlock()
	return calls
}

// CreateHostedZoneWithContext calls CreateHostedZoneWithContextFunc.
func (mock *Route53APIMock) CreateHostedZoneWithContext(in1 context.Context, in2 *route53.CreateHostedZoneInput, in3 ...request.Option) (*route53.CreateHostedZoneOutput, error) {
	if mock.CreateHostedZoneWithContextFunc == nil {
		panic("Route53APIMock.CreateHostedZoneWithContextFunc: method is nil but Route53API.CreateHostedZoneWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.CreateHostedZoneInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockCreateHostedZoneWithContext.Lock()
	mock.calls.CreateHostedZoneWithContext = append(mock.calls.CreateHostedZoneWithContext, callInfo)
	mock.lockCreateHostedZoneWithContext.Unlock()
	return mock.CreateHostedZoneWithContextFunc(in1, in2, in3...)
}

// CreateHostedZoneWithContextCalls gets all the calls that were made to CreateHostedZoneWithContext.
// Check the length with:
//     len(mockedRoute53API.CreateHostedZoneWithContextCalls())
func (mock *Route53APIMock) CreateHostedZoneWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.CreateHostedZoneInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.CreateHostedZoneInput
		In3 []request.Option
	}
	mock.lockCreateHostedZoneWithContext.RLock()
	calls = mock.calls.CreateHostedZoneWithContext
	mock.lockCreateHostedZoneWithContext.RUnlock()
	return calls
}

// CreateQueryLoggingConfig calls CreateQueryLoggingConfigFunc.
func (mock *Route53APIMock) CreateQueryLoggingConfig(in1 *route53.CreateQueryLoggingConfigInput) (*route53.CreateQueryLoggingConfigOutput, error) {
	if mock.CreateQueryLoggingConfigFunc == nil {
		panic("Route53APIMock.CreateQueryLoggingConfigFunc: method is nil but Route53API.CreateQueryLoggingConfig was just called")
	}
	callInfo := struct {
		In1 *route53.CreateQueryLoggingConfigInput
	}{
		In1: in1,
	}
	mock.lockCreateQueryLoggingConfig.Lock()
	mock.calls.CreateQueryLoggingConfig = append(mock.calls.CreateQueryLoggingConfig, callInfo)
	mock.lockCreateQueryLoggingConfig.Unlock()
	return mock.CreateQueryLoggingConfigFunc(in1)
}

// CreateQueryLoggingConfigCalls gets all the calls that were made to CreateQueryLoggingConfig.
// Check the length with:
//     len(mockedRoute53API.CreateQueryLoggingConfigCalls())
func (mock *Route53APIMock) CreateQueryLoggingConfigCalls() []struct {
	In1 *route53.CreateQueryLoggingConfigInput
} {
	var calls []struct {
		In1 *route53.CreateQueryLoggingConfigInput
	}
	mock.lockCreateQueryLoggingConfig.RLock()
	calls = mock.calls.CreateQueryLoggingConfig
	mock.lockCreateQueryLoggingConfig.RUnlock()
	return calls
}

// CreateQueryLoggingConfigRequest calls CreateQueryLoggingConfigRequestFunc.
func (mock *Route53APIMock) CreateQueryLoggingConfigRequest(in1 *route53.CreateQueryLoggingConfigInput) (*request.Request, *route53.CreateQueryLoggingConfigOutput) {
	if mock.CreateQueryLoggingConfigRequestFunc == nil {
		panic("Route53APIMock.CreateQueryLoggingConfigRequestFunc: method is nil but Route53API.CreateQueryLoggingConfigRequest was just called")
	}
	callInfo := struct {
		In1 *route53.CreateQueryLoggingConfigInput
	}{
		In1: in1,
	}
	mock.lockCreateQueryLoggingConfigRequest.Lock()
	mock.calls.CreateQueryLoggingConfigRequest = append(mock.calls.CreateQueryLoggingConfigRequest, callInfo)
	mock.lockCreateQueryLoggingConfigRequest.Unlock()
	return mock.CreateQueryLoggingConfigRequestFunc(in1)
}

// CreateQueryLoggingConfigRequestCalls gets all the calls that were made to CreateQueryLoggingConfigRequest.
// Check the length with:
//     len(mockedRoute53API.CreateQueryLoggingConfigRequestCalls())
func (mock *Route53APIMock) CreateQueryLoggingConfigRequestCalls() []struct {
	In1 *route53.CreateQueryLoggingConfigInput
} {
	var calls []struct {
		In1 *route53.CreateQueryLoggingConfigInput
	}
	mock.lockCreateQueryLoggingConfigRequest.RLock()
	calls = mock.calls.CreateQueryLoggingConfigRequest
	mock.lockCreateQueryLoggingConfigRequest.RUnlock()
	return calls
}

// CreateQueryLoggingConfigWithContext calls CreateQueryLoggingConfigWithContextFunc.
func (mock *Route53APIMock) CreateQueryLoggingConfigWithContext(in1 context.Context, in2 *route53.CreateQueryLoggingConfigInput, in3 ...request.Option) (*route53.CreateQueryLoggingConfigOutput, error) {
	if mock.CreateQueryLoggingConfigWithContextFunc == nil {
		panic("Route53APIMock.CreateQueryLoggingConfigWithContextFunc: method is nil but Route53API.CreateQueryLoggingConfigWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.CreateQueryLoggingConfigInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockCreateQueryLoggingConfigWithContext.Lock()
	mock.calls.CreateQueryLoggingConfigWithContext = append(mock.calls.CreateQueryLoggingConfigWithContext, callInfo)
	mock.lockCreateQueryLoggingConfigWithContext.Unlock()
	return mock.CreateQueryLoggingConfigWithContextFunc(in1, in2, in3...)
}

// CreateQueryLoggingConfigWithContextCalls gets all the calls that were made to CreateQueryLoggingConfigWithContext.
// Check the length with:
//     len(mockedRoute53API.CreateQueryLoggingConfigWithContextCalls())
func (mock *Route53APIMock) CreateQueryLoggingConfigWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.CreateQueryLoggingConfigInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.CreateQueryLoggingConfigInput
		In3 []request.Option
	}
	mock.lockCreateQueryLoggingConfigWithContext.RLock()
	calls = mock.calls.CreateQueryLoggingConfigWithContext
	mock.lockCreateQueryLoggingConfigWithContext.RUnlock()
	return calls
}

// CreateReusableDelegationSet calls CreateReusableDelegationSetFunc.
func (mock *Route53APIMock) CreateReusableDelegationSet(in1 *route53.CreateReusableDelegationSetInput) (*route53.CreateReusableDelegationSetOutput, error) {
	if mock.CreateReusableDelegationSetFunc == nil {
		panic("Route53APIMock.CreateReusableDelegationSetFunc: method is nil but Route53API.CreateReusableDelegationSet was just called")
	}
	callInfo := struct {
		In1 *route53.CreateReusableDelegationSetInput
	}{
		In1: in1,
	}
	mock.lockCreateReusableDelegationSet.Lock()
	mock.calls.CreateReusableDelegationSet = append(mock.calls.CreateReusableDelegationSet, callInfo)
	mock.lockCreateReusableDelegationSet.Unlock()
	return mock.CreateReusableDelegationSetFunc(in1)
}

// CreateReusableDelegationSetCalls gets all the calls that were made to CreateReusableDelegationSet.
// Check the length with:
//     len(mockedRoute53API.CreateReusableDelegationSetCalls())
func (mock *Route53APIMock) CreateReusableDelegationSetCalls() []struct {
	In1 *route53.CreateReusableDelegationSetInput
} {
	var calls []struct {
		In1 *route53.CreateReusableDelegationSetInput
	}
	mock.lockCreateReusableDelegationSet.RLock()
	calls = mock.calls.CreateReusableDelegationSet
	mock.lockCreateReusableDelegationSet.RUnlock()
	return calls
}

// CreateReusableDelegationSetRequest calls CreateReusableDelegationSetRequestFunc.
func (mock *Route53APIMock) CreateReusableDelegationSetRequest(in1 *route53.CreateReusableDelegationSetInput) (*request.Request, *route53.CreateReusableDelegationSetOutput) {
	if mock.CreateReusableDelegationSetRequestFunc == nil {
		panic("Route53APIMock.CreateReusableDelegationSetRequestFunc: method is nil but Route53API.CreateReusableDelegationSetRequest was just called")
	}
	callInfo := struct {
		In1 *route53.CreateReusableDelegationSetInput
	}{
		In1: in1,
	}
	mock.lockCreateReusableDelegationSetRequest.Lock()
	mock.calls.CreateReusableDelegationSetRequest = append(mock.calls.CreateReusableDelegationSetRequest, callInfo)
	mock.lockCreateReusableDelegationSetRequest.Unlock()
	return mock.CreateReusableDelegationSetRequestFunc(in1)
}

// CreateReusableDelegationSetRequestCalls gets all the calls that were made to CreateReusableDelegationSetRequest.
// Check the length with:
//     len(mockedRoute53API.CreateReusableDelegationSetRequestCalls())
func (mock *Route53APIMock) CreateReusableDelegationSetRequestCalls() []struct {
	In1 *route53.CreateReusableDelegationSetInput
} {
	var calls []struct {
		In1 *route53.CreateReusableDelegationSetInput
	}
	mock.lockCreateReusableDelegationSetRequest.RLock()
	calls = mock.calls.CreateReusableDelegationSetRequest
	mock.lockCreateReusableDelegationSetRequest.RUnlock()
	return calls
}

// CreateReusableDelegationSetWithContext calls CreateReusableDelegationSetWithContextFunc.
func (mock *Route53APIMock) CreateReusableDelegationSetWithContext(in1 context.Context, in2 *route53.CreateReusableDelegationSetInput, in3 ...request.Option) (*route53.CreateReusableDelegationSetOutput, error) {
	if mock.CreateReusableDelegationSetWithContextFunc == nil {
		panic("Route53APIMock.CreateReusableDelegationSetWithContextFunc: method is nil but Route53API.CreateReusableDelegationSetWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.CreateReusableDelegationSetInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockCreateReusableDelegationSetWithContext.Lock()
	mock.calls.CreateReusableDelegationSetWithContext = append(mock.calls.CreateReusableDelegationSetWithContext, callInfo)
	mock.lockCreateReusableDelegationSetWithContext.Unlock()
	return mock.CreateReusableDelegationSetWithContextFunc(in1, in2, in3...)
}

// CreateReusableDelegationSetWithContextCalls gets all the calls that were made to CreateReusableDelegationSetWithContext.
// Check the length with:
//     len(mockedRoute53API.CreateReusableDelegationSetWithContextCalls())
func (mock *Route53APIMock) CreateReusableDelegationSetWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.CreateReusableDelegationSetInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.CreateReusableDelegationSetInput
		In3 []request.Option
	}
	mock.lockCreateReusableDelegationSetWithContext.RLock()
	calls = mock.calls.CreateReusableDelegationSetWithContext
	mock.lockCreateReusableDelegationSetWithContext.RUnlock()
	return calls
}

// CreateTrafficPolicy calls CreateTrafficPolicyFunc.
func (mock *Route53APIMock) CreateTrafficPolicy(in1 *route53.CreateTrafficPolicyInput) (*route53.CreateTrafficPolicyOutput, error) {
	if mock.CreateTrafficPolicyFunc == nil {
		panic("Route53APIMock.CreateTrafficPolicyFunc: method is nil but Route53API.CreateTrafficPolicy was just called")
	}
	callInfo := struct {
		In1 *route53.CreateTrafficPolicyInput
	}{
		In1: in1,
	}
	mock.lockCreateTrafficPolicy.Lock()
	mock.calls.CreateTrafficPolicy = append(mock.calls.CreateTrafficPolicy, callInfo)
	mock.lockCreateTrafficPolicy.Unlock()
	return mock.CreateTrafficPolicyFunc(in1)
}

// CreateTrafficPolicyCalls gets all the calls that were made to CreateTrafficPolicy.
// Check the length with:
//     len(mockedRoute53API.CreateTrafficPolicyCalls())
func (mock *Route53APIMock) CreateTrafficPolicyCalls() []struct {
	In1 *route53.CreateTrafficPolicyInput
} {
	var calls []struct {
		In1 *route53.CreateTrafficPolicyInput
	}
	mock.lockCreateTrafficPolicy.RLock()
	calls = mock.calls.CreateTrafficPolicy
	mock.lockCreateTrafficPolicy.RUnlock()
	return calls
}

// CreateTrafficPolicyInstance calls CreateTrafficPolicyInstanceFunc.
func (mock *Route53APIMock) CreateTrafficPolicyInstance(in1 *route53.CreateTrafficPolicyInstanceInput) (*route53.CreateTrafficPolicyInstanceOutput, error) {
	if mock.CreateTrafficPolicyInstanceFunc == nil {
		panic("Route53APIMock.CreateTrafficPolicyInstanceFunc: method is nil but Route53API.CreateTrafficPolicyInstance was just called")
	}
	callInfo := struct {
		In1 *route53.CreateTrafficPolicyInstanceInput
	}{
		In1: in1,
	}
	mock.lockCreateTrafficPolicyInstance.Lock()
	mock.calls.CreateTrafficPolicyInstance = append(mock.calls.CreateTrafficPolicyInstance, callInfo)
	mock.lockCreateTrafficPolicyInstance.Unlock()
	return mock.CreateTrafficPolicyInstanceFunc(in1)
}

// CreateTrafficPolicyInstanceCalls gets all the calls that were made to CreateTrafficPolicyInstance.
// Check the length with:
//     len(mockedRoute53API.CreateTrafficPolicyInstanceCalls())
func (mock *Route53APIMock) CreateTrafficPolicyInstanceCalls() []struct {
	In1 *route53.CreateTrafficPolicyInstanceInput
} {
	var calls []struct {
		In1 *route53.CreateTrafficPolicyInstanceInput
	}
	mock.lockCreateTrafficPolicyInstance.RLock()
	calls = mock.calls.CreateTrafficPolicyInstance
	mock.lockCreateTrafficPolicyInstance.RUnlock()
	return calls
}

// CreateTrafficPolicyInstanceRequest calls CreateTrafficPolicyInstanceRequestFunc.
func (mock *Route53APIMock) CreateTrafficPolicyInstanceRequest(in1 *route53.CreateTrafficPolicyInstanceInput) (*request.Request, *route53.CreateTrafficPolicyInstanceOutput) {
	if mock.CreateTrafficPolicyInstanceRequestFunc == nil {
		panic("Route53APIMock.CreateTrafficPolicyInstanceRequestFunc: method is nil but Route53API.CreateTrafficPolicyInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *route53.CreateTrafficPolicyInstanceInput
	}{
		In1: in1,
	}
	mock.lockCreateTrafficPolicyInstanceRequest.Lock()
	mock.calls.CreateTrafficPolicyInstanceRequest = append(mock.calls.CreateTrafficPolicyInstanceRequest, callInfo)
	mock.lockCreateTrafficPolicyInstanceRequest.Unlock()
	return mock.CreateTrafficPolicyInstanceRequestFunc(in1)
}

// CreateTrafficPolicyInstanceRequestCalls gets all the calls that were made to CreateTrafficPolicyInstanceRequest.
// Check the length with:
//     len(mockedRoute53API.CreateTrafficPolicyInstanceRequestCalls())
func (mock *Route53APIMock) CreateTrafficPolicyInstanceRequestCalls() []struct {
	In1 *route53.CreateTrafficPolicyInstanceInput
} {
	var calls []struct {
		In1 *route53.CreateTrafficPolicyInstanceInput
	}
	mock.lockCreateTrafficPolicyInstanceRequest.RLock()
	calls = mock.calls.CreateTrafficPolicyInstanceRequest
	mock.lockCreateTrafficPolicyInstanceRequest.RUnlock()
	return calls
}

// CreateTrafficPolicyInstanceWithContext calls CreateTrafficPolicyInstanceWithContextFunc.
func (mock *Route53APIMock) CreateTrafficPolicyInstanceWithContext(in1 context.Context, in2 *route53.CreateTrafficPolicyInstanceInput, in3 ...request.Option) (*route53.CreateTrafficPolicyInstanceOutput, error) {
	if mock.CreateTrafficPolicyInstanceWithContextFunc == nil {
		panic("Route53APIMock.CreateTrafficPolicyInstanceWithContextFunc: method is nil but Route53API.CreateTrafficPolicyInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.CreateTrafficPolicyInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockCreateTrafficPolicyInstanceWithContext.Lock()
	mock.calls.CreateTrafficPolicyInstanceWithContext = append(mock.calls.CreateTrafficPolicyInstanceWithContext, callInfo)
	mock.lockCreateTrafficPolicyInstanceWithContext.Unlock()
	return mock.CreateTrafficPolicyInstanceWithContextFunc(in1, in2, in3...)
}

// CreateTrafficPolicyInstanceWithContextCalls gets all the calls that were made to CreateTrafficPolicyInstanceWithContext.
// Check the length with:
//     len(mockedRoute53API.CreateTrafficPolicyInstanceWithContextCalls())
func (mock *Route53APIMock) CreateTrafficPolicyInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.CreateTrafficPolicyInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.CreateTrafficPolicyInstanceInput
		In3 []request.Option
	}
	mock.lockCreateTrafficPolicyInstanceWithContext.RLock()
	calls = mock.calls.CreateTrafficPolicyInstanceWithContext
	mock.lockCreateTrafficPolicyInstanceWithContext.RUnlock()
	return calls
}

// CreateTrafficPolicyRequest calls CreateTrafficPolicyRequestFunc.
func (mock *Route53APIMock) CreateTrafficPolicyRequest(in1 *route53.CreateTrafficPolicyInput) (*request.Request, *route53.CreateTrafficPolicyOutput) {
	if mock.CreateTrafficPolicyRequestFunc == nil {
		panic("Route53APIMock.CreateTrafficPolicyRequestFunc: method is nil but Route53API.CreateTrafficPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *route53.CreateTrafficPolicyInput
	}{
		In1: in1,
	}
	mock.lockCreateTrafficPolicyRequest.Lock()
	mock.calls.CreateTrafficPolicyRequest = append(mock.calls.CreateTrafficPolicyRequest, callInfo)
	mock.lockCreateTrafficPolicyRequest.Unlock()
	return mock.CreateTrafficPolicyRequestFunc(in1)
}

// CreateTrafficPolicyRequestCalls gets all the calls that were made to CreateTrafficPolicyRequest.
// Check the length with:
//     len(mockedRoute53API.CreateTrafficPolicyRequestCalls())
func (mock *Route53APIMock) CreateTrafficPolicyRequestCalls() []struct {
	In1 *route53.CreateTrafficPolicyInput
} {
	var calls []struct {
		In1 *route53.CreateTrafficPolicyInput
	}
	mock.lockCreateTrafficPolicyRequest.RLock()
	calls = mock.calls.CreateTrafficPolicyRequest
	mock.lockCreateTrafficPolicyRequest.RUnlock()
	return calls
}

// CreateTrafficPolicyVersion calls CreateTrafficPolicyVersionFunc.
func (mock *Route53APIMock) CreateTrafficPolicyVersion(in1 *route53.CreateTrafficPolicyVersionInput) (*route53.CreateTrafficPolicyVersionOutput, error) {
	if mock.CreateTrafficPolicyVersionFunc == nil {
		panic("Route53APIMock.CreateTrafficPolicyVersionFunc: method is nil but Route53API.CreateTrafficPolicyVersion was just called")
	}
	callInfo := struct {
		In1 *route53.CreateTrafficPolicyVersionInput
	}{
		In1: in1,
	}
	mock.lockCreateTrafficPolicyVersion.Lock()
	mock.calls.CreateTrafficPolicyVersion = append(mock.calls.CreateTrafficPolicyVersion, callInfo)
	mock.lockCreateTrafficPolicyVersion.Unlock()
	return mock.CreateTrafficPolicyVersionFunc(in1)
}

// CreateTrafficPolicyVersionCalls gets all the calls that were made to CreateTrafficPolicyVersion.
// Check the length with:
//     len(mockedRoute53API.CreateTrafficPolicyVersionCalls())
func (mock *Route53APIMock) CreateTrafficPolicyVersionCalls() []struct {
	In1 *route53.CreateTrafficPolicyVersionInput
} {
	var calls []struct {
		In1 *route53.CreateTrafficPolicyVersionInput
	}
	mock.lockCreateTrafficPolicyVersion.RLock()
	calls = mock.calls.CreateTrafficPolicyVersion
	mock.lockCreateTrafficPolicyVersion.RUnlock()
	return calls
}

// CreateTrafficPolicyVersionRequest calls CreateTrafficPolicyVersionRequestFunc.
func (mock *Route53APIMock) CreateTrafficPolicyVersionRequest(in1 *route53.CreateTrafficPolicyVersionInput) (*request.Request, *route53.CreateTrafficPolicyVersionOutput) {
	if mock.CreateTrafficPolicyVersionRequestFunc == nil {
		panic("Route53APIMock.CreateTrafficPolicyVersionRequestFunc: method is nil but Route53API.CreateTrafficPolicyVersionRequest was just called")
	}
	callInfo := struct {
		In1 *route53.CreateTrafficPolicyVersionInput
	}{
		In1: in1,
	}
	mock.lockCreateTrafficPolicyVersionRequest.Lock()
	mock.calls.CreateTrafficPolicyVersionRequest = append(mock.calls.CreateTrafficPolicyVersionRequest, callInfo)
	mock.lockCreateTrafficPolicyVersionRequest.Unlock()
	return mock.CreateTrafficPolicyVersionRequestFunc(in1)
}

// CreateTrafficPolicyVersionRequestCalls gets all the calls that were made to CreateTrafficPolicyVersionRequest.
// Check the length with:
//     len(mockedRoute53API.CreateTrafficPolicyVersionRequestCalls())
func (mock *Route53APIMock) CreateTrafficPolicyVersionRequestCalls() []struct {
	In1 *route53.CreateTrafficPolicyVersionInput
} {
	var calls []struct {
		In1 *route53.CreateTrafficPolicyVersionInput
	}
	mock.lockCreateTrafficPolicyVersionRequest.RLock()
	calls = mock.calls.CreateTrafficPolicyVersionRequest
	mock.lockCreateTrafficPolicyVersionRequest.RUnlock()
	return calls
}

// CreateTrafficPolicyVersionWithContext calls CreateTrafficPolicyVersionWithContextFunc.
func (mock *Route53APIMock) CreateTrafficPolicyVersionWithContext(in1 context.Context, in2 *route53.CreateTrafficPolicyVersionInput, in3 ...request.Option) (*route53.CreateTrafficPolicyVersionOutput, error) {
	if mock.CreateTrafficPolicyVersionWithContextFunc == nil {
		panic("Route53APIMock.CreateTrafficPolicyVersionWithContextFunc: method is nil but Route53API.CreateTrafficPolicyVersionWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.CreateTrafficPolicyVersionInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockCreateTrafficPolicyVersionWithContext.Lock()
	mock.calls.CreateTrafficPolicyVersionWithContext = append(mock.calls.CreateTrafficPolicyVersionWithContext, callInfo)
	mock.lockCreateTrafficPolicyVersionWithContext.Unlock()
	return mock.CreateTrafficPolicyVersionWithContextFunc(in1, in2, in3...)
}

// CreateTrafficPolicyVersionWithContextCalls gets all the calls that were made to CreateTrafficPolicyVersionWithContext.
// Check the length with:
//     len(mockedRoute53API.CreateTrafficPolicyVersionWithContextCalls())
func (mock *Route53APIMock) CreateTrafficPolicyVersionWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.CreateTrafficPolicyVersionInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.CreateTrafficPolicyVersionInput
		In3 []request.Option
	}
	mock.lockCreateTrafficPolicyVersionWithContext.RLock()
	calls = mock.calls.CreateTrafficPolicyVersionWithContext
	mock.lockCreateTrafficPolicyVersionWithContext.RUnlock()
	return calls
}

// CreateTrafficPolicyWithContext calls CreateTrafficPolicyWithContextFunc.
func (mock *Route53APIMock) CreateTrafficPolicyWithContext(in1 context.Context, in2 *route53.CreateTrafficPolicyInput, in3 ...request.Option) (*route53.CreateTrafficPolicyOutput, error) {
	if mock.CreateTrafficPolicyWithContextFunc == nil {
		panic("Route53APIMock.CreateTrafficPolicyWithContextFunc: method is nil but Route53API.CreateTrafficPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.CreateTrafficPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockCreateTrafficPolicyWithContext.Lock()
	mock.calls.CreateTrafficPolicyWithContext = append(mock.calls.CreateTrafficPolicyWithContext, callInfo)
	mock.lockCreateTrafficPolicyWithContext.Unlock()
	return mock.CreateTrafficPolicyWithContextFunc(in1, in2, in3...)
}

// CreateTrafficPolicyWithContextCalls gets all the calls that were made to CreateTrafficPolicyWithContext.
// Check the length with:
//     len(mockedRoute53API.CreateTrafficPolicyWithContextCalls())
func (mock *Route53APIMock) CreateTrafficPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.CreateTrafficPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.CreateTrafficPolicyInput
		In3 []request.Option
	}
	mock.lockCreateTrafficPolicyWithContext.RLock()
	calls = mock.calls.CreateTrafficPolicyWithContext
	mock.lockCreateTrafficPolicyWithContext.RUnlock()
	return calls
}

// CreateVPCAssociationAuthorization calls CreateVPCAssociationAuthorizationFunc.
func (mock *Route53APIMock) CreateVPCAssociationAuthorization(in1 *route53.CreateVPCAssociationAuthorizationInput) (*route53.CreateVPCAssociationAuthorizationOutput, error) {
	if mock.CreateVPCAssociationAuthorizationFunc == nil {
		panic("Route53APIMock.CreateVPCAssociationAuthorizationFunc: method is nil but Route53API.CreateVPCAssociationAuthorization was just called")
	}
	callInfo := struct {
		In1 *route53.CreateVPCAssociationAuthorizationInput
	}{
		In1: in1,
	}
	mock.lockCreateVPCAssociationAuthorization.Lock()
	mock.calls.CreateVPCAssociationAuthorization = append(mock.calls.CreateVPCAssociationAuthorization, callInfo)
	mock.lockCreateVPCAssociationAuthorization.Unlock()
	return mock.CreateVPCAssociationAuthorizationFunc(in1)
}

// CreateVPCAssociationAuthorizationCalls gets all the calls that were made to CreateVPCAssociationAuthorization.
// Check the length with:
//     len(mockedRoute53API.CreateVPCAssociationAuthorizationCalls())
func (mock *Route53APIMock) CreateVPCAssociationAuthorizationCalls() []struct {
	In1 *route53.CreateVPCAssociationAuthorizationInput
} {
	var calls []struct {
		In1 *route53.CreateVPCAssociationAuthorizationInput
	}
	mock.lockCreateVPCAssociationAuthorization.RLock()
	calls = mock.calls.CreateVPCAssociationAuthorization
	mock.lockCreateVPCAssociationAuthorization.RUnlock()
	return calls
}

// CreateVPCAssociationAuthorizationRequest calls CreateVPCAssociationAuthorizationRequestFunc.
func (mock *Route53APIMock) CreateVPCAssociationAuthorizationRequest(in1 *route53.CreateVPCAssociationAuthorizationInput) (*request.Request, *route53.CreateVPCAssociationAuthorizationOutput) {
	if mock.CreateVPCAssociationAuthorizationRequestFunc == nil {
		panic("Route53APIMock.CreateVPCAssociationAuthorizationRequestFunc: method is nil but Route53API.CreateVPCAssociationAuthorizationRequest was just called")
	}
	callInfo := struct {
		In1 *route53.CreateVPCAssociationAuthorizationInput
	}{
		In1: in1,
	}
	mock.lockCreateVPCAssociationAuthorizationRequest.Lock()
	mock.calls.CreateVPCAssociationAuthorizationRequest = append(mock.calls.CreateVPCAssociationAuthorizationRequest, callInfo)
	mock.lockCreateVPCAssociationAuthorizationRequest.Unlock()
	return mock.CreateVPCAssociationAuthorizationRequestFunc(in1)
}

// CreateVPCAssociationAuthorizationRequestCalls gets all the calls that were made to CreateVPCAssociationAuthorizationRequest.
// Check the length with:
//     len(mockedRoute53API.CreateVPCAssociationAuthorizationRequestCalls())
func (mock *Route53APIMock) CreateVPCAssociationAuthorizationRequestCalls() []struct {
	In1 *route53.CreateVPCAssociationAuthorizationInput
} {
	var calls []struct {
		In1 *route53.CreateVPCAssociationAuthorizationInput
	}
	mock.lockCreateVPCAssociationAuthorizationRequest.RLock()
	calls = mock.calls.CreateVPCAssociationAuthorizationRequest
	mock.lockCreateVPCAssociationAuthorizationRequest.RUnlock()
	return calls
}

// CreateVPCAssociationAuthorizationWithContext calls CreateVPCAssociationAuthorizationWithContextFunc.
func (mock *Route53APIMock) CreateVPCAssociationAuthorizationWithContext(in1 context.Context, in2 *route53.CreateVPCAssociationAuthorizationInput, in3 ...request.Option) (*route53.CreateVPCAssociationAuthorizationOutput, error) {
	if mock.CreateVPCAssociationAuthorizationWithContextFunc == nil {
		panic("Route53APIMock.CreateVPCAssociationAuthorizationWithContextFunc: method is nil but Route53API.CreateVPCAssociationAuthorizationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.CreateVPCAssociationAuthorizationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockCreateVPCAssociationAuthorizationWithContext.Lock()
	mock.calls.CreateVPCAssociationAuthorizationWithContext = append(mock.calls.CreateVPCAssociationAuthorizationWithContext, callInfo)
	mock.lockCreateVPCAssociationAuthorizationWithContext.Unlock()
	return mock.CreateVPCAssociationAuthorizationWithContextFunc(in1, in2, in3...)
}

// CreateVPCAssociationAuthorizationWithContextCalls gets all the calls that were made to CreateVPCAssociationAuthorizationWithContext.
// Check the length with:
//     len(mockedRoute53API.CreateVPCAssociationAuthorizationWithContextCalls())
func (mock *Route53APIMock) CreateVPCAssociationAuthorizationWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.CreateVPCAssociationAuthorizationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.CreateVPCAssociationAuthorizationInput
		In3 []request.Option
	}
	mock.lockCreateVPCAssociationAuthorizationWithContext.RLock()
	calls = mock.calls.CreateVPCAssociationAuthorizationWithContext
	mock.lockCreateVPCAssociationAuthorizationWithContext.RUnlock()
	return calls
}

// DeleteHealthCheck calls DeleteHealthCheckFunc.
func (mock *Route53APIMock) DeleteHealthCheck(in1 *route53.DeleteHealthCheckInput) (*route53.DeleteHealthCheckOutput, error) {
	if mock.DeleteHealthCheckFunc == nil {
		panic("Route53APIMock.DeleteHealthCheckFunc: method is nil but Route53API.DeleteHealthCheck was just called")
	}
	callInfo := struct {
		In1 *route53.DeleteHealthCheckInput
	}{
		In1: in1,
	}
	mock.lockDeleteHealthCheck.Lock()
	mock.calls.DeleteHealthCheck = append(mock.calls.DeleteHealthCheck, callInfo)
	mock.lockDeleteHealthCheck.Unlock()
	return mock.DeleteHealthCheckFunc(in1)
}

// DeleteHealthCheckCalls gets all the calls that were made to DeleteHealthCheck.
// Check the length with:
//     len(mockedRoute53API.DeleteHealthCheckCalls())
func (mock *Route53APIMock) DeleteHealthCheckCalls() []struct {
	In1 *route53.DeleteHealthCheckInput
} {
	var calls []struct {
		In1 *route53.DeleteHealthCheckInput
	}
	mock.lockDeleteHealthCheck.RLock()
	calls = mock.calls.DeleteHealthCheck
	mock.lockDeleteHealthCheck.RUnlock()
	return calls
}

// DeleteHealthCheckRequest calls DeleteHealthCheckRequestFunc.
func (mock *Route53APIMock) DeleteHealthCheckRequest(in1 *route53.DeleteHealthCheckInput) (*request.Request, *route53.DeleteHealthCheckOutput) {
	if mock.DeleteHealthCheckRequestFunc == nil {
		panic("Route53APIMock.DeleteHealthCheckRequestFunc: method is nil but Route53API.DeleteHealthCheckRequest was just called")
	}
	callInfo := struct {
		In1 *route53.DeleteHealthCheckInput
	}{
		In1: in1,
	}
	mock.lockDeleteHealthCheckRequest.Lock()
	mock.calls.DeleteHealthCheckRequest = append(mock.calls.DeleteHealthCheckRequest, callInfo)
	mock.lockDeleteHealthCheckRequest.Unlock()
	return mock.DeleteHealthCheckRequestFunc(in1)
}

// DeleteHealthCheckRequestCalls gets all the calls that were made to DeleteHealthCheckRequest.
// Check the length with:
//     len(mockedRoute53API.DeleteHealthCheckRequestCalls())
func (mock *Route53APIMock) DeleteHealthCheckRequestCalls() []struct {
	In1 *route53.DeleteHealthCheckInput
} {
	var calls []struct {
		In1 *route53.DeleteHealthCheckInput
	}
	mock.lockDeleteHealthCheckRequest.RLock()
	calls = mock.calls.DeleteHealthCheckRequest
	mock.lockDeleteHealthCheckRequest.RUnlock()
	return calls
}

// DeleteHealthCheckWithContext calls DeleteHealthCheckWithContextFunc.
func (mock *Route53APIMock) DeleteHealthCheckWithContext(in1 context.Context, in2 *route53.DeleteHealthCheckInput, in3 ...request.Option) (*route53.DeleteHealthCheckOutput, error) {
	if mock.DeleteHealthCheckWithContextFunc == nil {
		panic("Route53APIMock.DeleteHealthCheckWithContextFunc: method is nil but Route53API.DeleteHealthCheckWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.DeleteHealthCheckInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockDeleteHealthCheckWithContext.Lock()
	mock.calls.DeleteHealthCheckWithContext = append(mock.calls.DeleteHealthCheckWithContext, callInfo)
	mock.lockDeleteHealthCheckWithContext.Unlock()
	return mock.DeleteHealthCheckWithContextFunc(in1, in2, in3...)
}

// DeleteHealthCheckWithContextCalls gets all the calls that were made to DeleteHealthCheckWithContext.
// Check the length with:
//     len(mockedRoute53API.DeleteHealthCheckWithContextCalls())
func (mock *Route53APIMock) DeleteHealthCheckWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.DeleteHealthCheckInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.DeleteHealthCheckInput
		In3 []request.Option
	}
	mock.lockDeleteHealthCheckWithContext.RLock()
	calls = mock.calls.DeleteHealthCheckWithContext
	mock.lockDeleteHealthCheckWithContext.RUnlock()
	return calls
}

// DeleteHostedZone calls DeleteHostedZoneFunc.
func (mock *Route53APIMock) DeleteHostedZone(in1 *route53.DeleteHostedZoneInput) (*route53.DeleteHostedZoneOutput, error) {
	if mock.DeleteHostedZoneFunc == nil {
		panic("Route53APIMock.DeleteHostedZoneFunc: method is nil but Route53API.DeleteHostedZone was just called")
	}
	callInfo := struct {
		In1 *route53.DeleteHostedZoneInput
	}{
		In1: in1,
	}
	mock.lockDeleteHostedZone.Lock()
	mock.calls.DeleteHostedZone = append(mock.calls.DeleteHostedZone, callInfo)
	mock.lockDeleteHostedZone.Unlock()
	return mock.DeleteHostedZoneFunc(in1)
}

// DeleteHostedZoneCalls gets all the calls that were made to DeleteHostedZone.
// Check the length with:
//     len(mockedRoute53API.DeleteHostedZoneCalls())
func (mock *Route53APIMock) DeleteHostedZoneCalls() []struct {
	In1 *route53.DeleteHostedZoneInput
} {
	var calls []struct {
		In1 *route53.DeleteHostedZoneInput
	}
	mock.lockDeleteHostedZone.RLock()
	calls = mock.calls.DeleteHostedZone
	mock.lockDeleteHostedZone.RUnlock()
	return calls
}

// DeleteHostedZoneRequest calls DeleteHostedZoneRequestFunc.
func (mock *Route53APIMock) DeleteHostedZoneRequest(in1 *route53.DeleteHostedZoneInput) (*request.Request, *route53.DeleteHostedZoneOutput) {
	if mock.DeleteHostedZoneRequestFunc == nil {
		panic("Route53APIMock.DeleteHostedZoneRequestFunc: method is nil but Route53API.DeleteHostedZoneRequest was just called")
	}
	callInfo := struct {
		In1 *route53.DeleteHostedZoneInput
	}{
		In1: in1,
	}
	mock.lockDeleteHostedZoneRequest.Lock()
	mock.calls.DeleteHostedZoneRequest = append(mock.calls.DeleteHostedZoneRequest, callInfo)
	mock.lockDeleteHostedZoneRequest.Unlock()
	return mock.DeleteHostedZoneRequestFunc(in1)
}

// DeleteHostedZoneRequestCalls gets all the calls that were made to DeleteHostedZoneRequest.
// Check the length with:
//     len(mockedRoute53API.DeleteHostedZoneRequestCalls())
func (mock *Route53APIMock) DeleteHostedZoneRequestCalls() []struct {
	In1 *route53.DeleteHostedZoneInput
} {
	var calls []struct {
		In1 *route53.DeleteHostedZoneInput
	}
	mock.lockDeleteHostedZoneRequest.RLock()
	calls = mock.calls.DeleteHostedZoneRequest
	mock.lockDeleteHostedZoneRequest.RUnlock()
	return calls
}

// DeleteHostedZoneWithContext calls DeleteHostedZoneWithContextFunc.
func (mock *Route53APIMock) DeleteHostedZoneWithContext(in1 context.Context, in2 *route53.DeleteHostedZoneInput, in3 ...request.Option) (*route53.DeleteHostedZoneOutput, error) {
	if mock.DeleteHostedZoneWithContextFunc == nil {
		panic("Route53APIMock.DeleteHostedZoneWithContextFunc: method is nil but Route53API.DeleteHostedZoneWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.DeleteHostedZoneInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockDeleteHostedZoneWithContext.Lock()
	mock.calls.DeleteHostedZoneWithContext = append(mock.calls.DeleteHostedZoneWithContext, callInfo)
	mock.lockDeleteHostedZoneWithContext.Unlock()
	return mock.DeleteHostedZoneWithContextFunc(in1, in2, in3...)
}

// DeleteHostedZoneWithContextCalls gets all the calls that were made to DeleteHostedZoneWithContext.
// Check the length with:
//     len(mockedRoute53API.DeleteHostedZoneWithContextCalls())
func (mock *Route53APIMock) DeleteHostedZoneWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.DeleteHostedZoneInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.DeleteHostedZoneInput
		In3 []request.Option
	}
	mock.lockDeleteHostedZoneWithContext.RLock()
	calls = mock.calls.DeleteHostedZoneWithContext
	mock.lockDeleteHostedZoneWithContext.RUnlock()
	return calls
}

// DeleteQueryLoggingConfig calls DeleteQueryLoggingConfigFunc.
func (mock *Route53APIMock) DeleteQueryLoggingConfig(in1 *route53.DeleteQueryLoggingConfigInput) (*route53.DeleteQueryLoggingConfigOutput, error) {
	if mock.DeleteQueryLoggingConfigFunc == nil {
		panic("Route53APIMock.DeleteQueryLoggingConfigFunc: method is nil but Route53API.DeleteQueryLoggingConfig was just called")
	}
	callInfo := struct {
		In1 *route53.DeleteQueryLoggingConfigInput
	}{
		In1: in1,
	}
	mock.lockDeleteQueryLoggingConfig.Lock()
	mock.calls.DeleteQueryLoggingConfig = append(mock.calls.DeleteQueryLoggingConfig, callInfo)
	mock.lockDeleteQueryLoggingConfig.Unlock()
	return mock.DeleteQueryLoggingConfigFunc(in1)
}

// DeleteQueryLoggingConfigCalls gets all the calls that were made to DeleteQueryLoggingConfig.
// Check the length with:
//     len(mockedRoute53API.DeleteQueryLoggingConfigCalls())
func (mock *Route53APIMock) DeleteQueryLoggingConfigCalls() []struct {
	In1 *route53.DeleteQueryLoggingConfigInput
} {
	var calls []struct {
		In1 *route53.DeleteQueryLoggingConfigInput
	}
	mock.lockDeleteQueryLoggingConfig.RLock()
	calls = mock.calls.DeleteQueryLoggingConfig
	mock.lockDeleteQueryLoggingConfig.RUnlock()
	return calls
}

// DeleteQueryLoggingConfigRequest calls DeleteQueryLoggingConfigRequestFunc.
func (mock *Route53APIMock) DeleteQueryLoggingConfigRequest(in1 *route53.DeleteQueryLoggingConfigInput) (*request.Request, *route53.DeleteQueryLoggingConfigOutput) {
	if mock.DeleteQueryLoggingConfigRequestFunc == nil {
		panic("Route53APIMock.DeleteQueryLoggingConfigRequestFunc: method is nil but Route53API.DeleteQueryLoggingConfigRequest was just called")
	}
	callInfo := struct {
		In1 *route53.DeleteQueryLoggingConfigInput
	}{
		In1: in1,
	}
	mock.lockDeleteQueryLoggingConfigRequest.Lock()
	mock.calls.DeleteQueryLoggingConfigRequest = append(mock.calls.DeleteQueryLoggingConfigRequest, callInfo)
	mock.lockDeleteQueryLoggingConfigRequest.Unlock()
	return mock.DeleteQueryLoggingConfigRequestFunc(in1)
}

// DeleteQueryLoggingConfigRequestCalls gets all the calls that were made to DeleteQueryLoggingConfigRequest.
// Check the length with:
//     len(mockedRoute53API.DeleteQueryLoggingConfigRequestCalls())
func (mock *Route53APIMock) DeleteQueryLoggingConfigRequestCalls() []struct {
	In1 *route53.DeleteQueryLoggingConfigInput
} {
	var calls []struct {
		In1 *route53.DeleteQueryLoggingConfigInput
	}
	mock.lockDeleteQueryLoggingConfigRequest.RLock()
	calls = mock.calls.DeleteQueryLoggingConfigRequest
	mock.lockDeleteQueryLoggingConfigRequest.RUnlock()
	return calls
}

// DeleteQueryLoggingConfigWithContext calls DeleteQueryLoggingConfigWithContextFunc.
func (mock *Route53APIMock) DeleteQueryLoggingConfigWithContext(in1 context.Context, in2 *route53.DeleteQueryLoggingConfigInput, in3 ...request.Option) (*route53.DeleteQueryLoggingConfigOutput, error) {
	if mock.DeleteQueryLoggingConfigWithContextFunc == nil {
		panic("Route53APIMock.DeleteQueryLoggingConfigWithContextFunc: method is nil but Route53API.DeleteQueryLoggingConfigWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.DeleteQueryLoggingConfigInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockDeleteQueryLoggingConfigWithContext.Lock()
	mock.calls.DeleteQueryLoggingConfigWithContext = append(mock.calls.DeleteQueryLoggingConfigWithContext, callInfo)
	mock.lockDeleteQueryLoggingConfigWithContext.Unlock()
	return mock.DeleteQueryLoggingConfigWithContextFunc(in1, in2, in3...)
}

// DeleteQueryLoggingConfigWithContextCalls gets all the calls that were made to DeleteQueryLoggingConfigWithContext.
// Check the length with:
//     len(mockedRoute53API.DeleteQueryLoggingConfigWithContextCalls())
func (mock *Route53APIMock) DeleteQueryLoggingConfigWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.DeleteQueryLoggingConfigInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.DeleteQueryLoggingConfigInput
		In3 []request.Option
	}
	mock.lockDeleteQueryLoggingConfigWithContext.RLock()
	calls = mock.calls.DeleteQueryLoggingConfigWithContext
	mock.lockDeleteQueryLoggingConfigWithContext.RUnlock()
	return calls
}

// DeleteReusableDelegationSet calls DeleteReusableDelegationSetFunc.
func (mock *Route53APIMock) DeleteReusableDelegationSet(in1 *route53.DeleteReusableDelegationSetInput) (*route53.DeleteReusableDelegationSetOutput, error) {
	if mock.DeleteReusableDelegationSetFunc == nil {
		panic("Route53APIMock.DeleteReusableDelegationSetFunc: method is nil but Route53API.DeleteReusableDelegationSet was just called")
	}
	callInfo := struct {
		In1 *route53.DeleteReusableDelegationSetInput
	}{
		In1: in1,
	}
	mock.lockDeleteReusableDelegationSet.Lock()
	mock.calls.DeleteReusableDelegationSet = append(mock.calls.DeleteReusableDelegationSet, callInfo)
	mock.lockDeleteReusableDelegationSet.Unlock()
	return mock.DeleteReusableDelegationSetFunc(in1)
}

// DeleteReusableDelegationSetCalls gets all the calls that were made to DeleteReusableDelegationSet.
// Check the length with:
//     len(mockedRoute53API.DeleteReusableDelegationSetCalls())
func (mock *Route53APIMock) DeleteReusableDelegationSetCalls() []struct {
	In1 *route53.DeleteReusableDelegationSetInput
} {
	var calls []struct {
		In1 *route53.DeleteReusableDelegationSetInput
	}
	mock.lockDeleteReusableDelegationSet.RLock()
	calls = mock.calls.DeleteReusableDelegationSet
	mock.lockDeleteReusableDelegationSet.RUnlock()
	return calls
}

// DeleteReusableDelegationSetRequest calls DeleteReusableDelegationSetRequestFunc.
func (mock *Route53APIMock) DeleteReusableDelegationSetRequest(in1 *route53.DeleteReusableDelegationSetInput) (*request.Request, *route53.DeleteReusableDelegationSetOutput) {
	if mock.DeleteReusableDelegationSetRequestFunc == nil {
		panic("Route53APIMock.DeleteReusableDelegationSetRequestFunc: method is nil but Route53API.DeleteReusableDelegationSetRequest was just called")
	}
	callInfo := struct {
		In1 *route53.DeleteReusableDelegationSetInput
	}{
		In1: in1,
	}
	mock.lockDeleteReusableDelegationSetRequest.Lock()
	mock.calls.DeleteReusableDelegationSetRequest = append(mock.calls.DeleteReusableDelegationSetRequest, callInfo)
	mock.lockDeleteReusableDelegationSetRequest.Unlock()
	return mock.DeleteReusableDelegationSetRequestFunc(in1)
}

// DeleteReusableDelegationSetRequestCalls gets all the calls that were made to DeleteReusableDelegationSetRequest.
// Check the length with:
//     len(mockedRoute53API.DeleteReusableDelegationSetRequestCalls())
func (mock *Route53APIMock) DeleteReusableDelegationSetRequestCalls() []struct {
	In1 *route53.DeleteReusableDelegationSetInput
} {
	var calls []struct {
		In1 *route53.DeleteReusableDelegationSetInput
	}
	mock.lockDeleteReusableDelegationSetRequest.RLock()
	calls = mock.calls.DeleteReusableDelegationSetRequest
	mock.lockDeleteReusableDelegationSetRequest.RUnlock()
	return calls
}

// DeleteReusableDelegationSetWithContext calls DeleteReusableDelegationSetWithContextFunc.
func (mock *Route53APIMock) DeleteReusableDelegationSetWithContext(in1 context.Context, in2 *route53.DeleteReusableDelegationSetInput, in3 ...request.Option) (*route53.DeleteReusableDelegationSetOutput, error) {
	if mock.DeleteReusableDelegationSetWithContextFunc == nil {
		panic("Route53APIMock.DeleteReusableDelegationSetWithContextFunc: method is nil but Route53API.DeleteReusableDelegationSetWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.DeleteReusableDelegationSetInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockDeleteReusableDelegationSetWithContext.Lock()
	mock.calls.DeleteReusableDelegationSetWithContext = append(mock.calls.DeleteReusableDelegationSetWithContext, callInfo)
	mock.lockDeleteReusableDelegationSetWithContext.Unlock()
	return mock.DeleteReusableDelegationSetWithContextFunc(in1, in2, in3...)
}

// DeleteReusableDelegationSetWithContextCalls gets all the calls that were made to DeleteReusableDelegationSetWithContext.
// Check the length with:
//     len(mockedRoute53API.DeleteReusableDelegationSetWithContextCalls())
func (mock *Route53APIMock) DeleteReusableDelegationSetWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.DeleteReusableDelegationSetInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.DeleteReusableDelegationSetInput
		In3 []request.Option
	}
	mock.lockDeleteReusableDelegationSetWithContext.RLock()
	calls = mock.calls.DeleteReusableDelegationSetWithContext
	mock.lockDeleteReusableDelegationSetWithContext.RUnlock()
	return calls
}

// DeleteTrafficPolicy calls DeleteTrafficPolicyFunc.
func (mock *Route53APIMock) DeleteTrafficPolicy(in1 *route53.DeleteTrafficPolicyInput) (*route53.DeleteTrafficPolicyOutput, error) {
	if mock.DeleteTrafficPolicyFunc == nil {
		panic("Route53APIMock.DeleteTrafficPolicyFunc: method is nil but Route53API.DeleteTrafficPolicy was just called")
	}
	callInfo := struct {
		In1 *route53.DeleteTrafficPolicyInput
	}{
		In1: in1,
	}
	mock.lockDeleteTrafficPolicy.Lock()
	mock.calls.DeleteTrafficPolicy = append(mock.calls.DeleteTrafficPolicy, callInfo)
	mock.lockDeleteTrafficPolicy.Unlock()
	return mock.DeleteTrafficPolicyFunc(in1)
}

// DeleteTrafficPolicyCalls gets all the calls that were made to DeleteTrafficPolicy.
// Check the length with:
//     len(mockedRoute53API.DeleteTrafficPolicyCalls())
func (mock *Route53APIMock) DeleteTrafficPolicyCalls() []struct {
	In1 *route53.DeleteTrafficPolicyInput
} {
	var calls []struct {
		In1 *route53.DeleteTrafficPolicyInput
	}
	mock.lockDeleteTrafficPolicy.RLock()
	calls = mock.calls.DeleteTrafficPolicy
	mock.lockDeleteTrafficPolicy.RUnlock()
	return calls
}

// DeleteTrafficPolicyInstance calls DeleteTrafficPolicyInstanceFunc.
func (mock *Route53APIMock) DeleteTrafficPolicyInstance(in1 *route53.DeleteTrafficPolicyInstanceInput) (*route53.DeleteTrafficPolicyInstanceOutput, error) {
	if mock.DeleteTrafficPolicyInstanceFunc == nil {
		panic("Route53APIMock.DeleteTrafficPolicyInstanceFunc: method is nil but Route53API.DeleteTrafficPolicyInstance was just called")
	}
	callInfo := struct {
		In1 *route53.DeleteTrafficPolicyInstanceInput
	}{
		In1: in1,
	}
	mock.lockDeleteTrafficPolicyInstance.Lock()
	mock.calls.DeleteTrafficPolicyInstance = append(mock.calls.DeleteTrafficPolicyInstance, callInfo)
	mock.lockDeleteTrafficPolicyInstance.Unlock()
	return mock.DeleteTrafficPolicyInstanceFunc(in1)
}

// DeleteTrafficPolicyInstanceCalls gets all the calls that were made to DeleteTrafficPolicyInstance.
// Check the length with:
//     len(mockedRoute53API.DeleteTrafficPolicyInstanceCalls())
func (mock *Route53APIMock) DeleteTrafficPolicyInstanceCalls() []struct {
	In1 *route53.DeleteTrafficPolicyInstanceInput
} {
	var calls []struct {
		In1 *route53.DeleteTrafficPolicyInstanceInput
	}
	mock.lockDeleteTrafficPolicyInstance.RLock()
	calls = mock.calls.DeleteTrafficPolicyInstance
	mock.lockDeleteTrafficPolicyInstance.RUnlock()
	return calls
}

// DeleteTrafficPolicyInstanceRequest calls DeleteTrafficPolicyInstanceRequestFunc.
func (mock *Route53APIMock) DeleteTrafficPolicyInstanceRequest(in1 *route53.DeleteTrafficPolicyInstanceInput) (*request.Request, *route53.DeleteTrafficPolicyInstanceOutput) {
	if mock.DeleteTrafficPolicyInstanceRequestFunc == nil {
		panic("Route53APIMock.DeleteTrafficPolicyInstanceRequestFunc: method is nil but Route53API.DeleteTrafficPolicyInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *route53.DeleteTrafficPolicyInstanceInput
	}{
		In1: in1,
	}
	mock.lockDeleteTrafficPolicyInstanceRequest.Lock()
	mock.calls.DeleteTrafficPolicyInstanceRequest = append(mock.calls.DeleteTrafficPolicyInstanceRequest, callInfo)
	mock.lockDeleteTrafficPolicyInstanceRequest.Unlock()
	return mock.DeleteTrafficPolicyInstanceRequestFunc(in1)
}

// DeleteTrafficPolicyInstanceRequestCalls gets all the calls that were made to DeleteTrafficPolicyInstanceRequest.
// Check the length with:
//     len(mockedRoute53API.DeleteTrafficPolicyInstanceRequestCalls())
func (mock *Route53APIMock) DeleteTrafficPolicyInstanceRequestCalls() []struct {
	In1 *route53.DeleteTrafficPolicyInstanceInput
} {
	var calls []struct {
		In1 *route53.DeleteTrafficPolicyInstanceInput
	}
	mock.lockDeleteTrafficPolicyInstanceRequest.RLock()
	calls = mock.calls.DeleteTrafficPolicyInstanceRequest
	mock.lockDeleteTrafficPolicyInstanceRequest.RUnlock()
	return calls
}

// DeleteTrafficPolicyInstanceWithContext calls DeleteTrafficPolicyInstanceWithContextFunc.
func (mock *Route53APIMock) DeleteTrafficPolicyInstanceWithContext(in1 context.Context, in2 *route53.DeleteTrafficPolicyInstanceInput, in3 ...request.Option) (*route53.DeleteTrafficPolicyInstanceOutput, error) {
	if mock.DeleteTrafficPolicyInstanceWithContextFunc == nil {
		panic("Route53APIMock.DeleteTrafficPolicyInstanceWithContextFunc: method is nil but Route53API.DeleteTrafficPolicyInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.DeleteTrafficPolicyInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockDeleteTrafficPolicyInstanceWithContext.Lock()
	mock.calls.DeleteTrafficPolicyInstanceWithContext = append(mock.calls.DeleteTrafficPolicyInstanceWithContext, callInfo)
	mock.lockDeleteTrafficPolicyInstanceWithContext.Unlock()
	return mock.DeleteTrafficPolicyInstanceWithContextFunc(in1, in2, in3...)
}

// DeleteTrafficPolicyInstanceWithContextCalls gets all the calls that were made to DeleteTrafficPolicyInstanceWithContext.
// Check the length with:
//     len(mockedRoute53API.DeleteTrafficPolicyInstanceWithContextCalls())
func (mock *Route53APIMock) DeleteTrafficPolicyInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.DeleteTrafficPolicyInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.DeleteTrafficPolicyInstanceInput
		In3 []request.Option
	}
	mock.lockDeleteTrafficPolicyInstanceWithContext.RLock()
	calls = mock.calls.DeleteTrafficPolicyInstanceWithContext
	mock.lockDeleteTrafficPolicyInstanceWithContext.RUnlock()
	return calls
}

// DeleteTrafficPolicyRequest calls DeleteTrafficPolicyRequestFunc.
func (mock *Route53APIMock) DeleteTrafficPolicyRequest(in1 *route53.DeleteTrafficPolicyInput) (*request.Request, *route53.DeleteTrafficPolicyOutput) {
	if mock.DeleteTrafficPolicyRequestFunc == nil {
		panic("Route53APIMock.DeleteTrafficPolicyRequestFunc: method is nil but Route53API.DeleteTrafficPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *route53.DeleteTrafficPolicyInput
	}{
		In1: in1,
	}
	mock.lockDeleteTrafficPolicyRequest.Lock()
	mock.calls.DeleteTrafficPolicyRequest = append(mock.calls.DeleteTrafficPolicyRequest, callInfo)
	mock.lockDeleteTrafficPolicyRequest.Unlock()
	return mock.DeleteTrafficPolicyRequestFunc(in1)
}

// DeleteTrafficPolicyRequestCalls gets all the calls that were made to DeleteTrafficPolicyRequest.
// Check the length with:
//     len(mockedRoute53API.DeleteTrafficPolicyRequestCalls())
func (mock *Route53APIMock) DeleteTrafficPolicyRequestCalls() []struct {
	In1 *route53.DeleteTrafficPolicyInput
} {
	var calls []struct {
		In1 *route53.DeleteTrafficPolicyInput
	}
	mock.lockDeleteTrafficPolicyRequest.RLock()
	calls = mock.calls.DeleteTrafficPolicyRequest
	mock.lockDeleteTrafficPolicyRequest.RUnlock()
	return calls
}

// DeleteTrafficPolicyWithContext calls DeleteTrafficPolicyWithContextFunc.
func (mock *Route53APIMock) DeleteTrafficPolicyWithContext(in1 context.Context, in2 *route53.DeleteTrafficPolicyInput, in3 ...request.Option) (*route53.DeleteTrafficPolicyOutput, error) {
	if mock.DeleteTrafficPolicyWithContextFunc == nil {
		panic("Route53APIMock.DeleteTrafficPolicyWithContextFunc: method is nil but Route53API.DeleteTrafficPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.DeleteTrafficPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockDeleteTrafficPolicyWithContext.Lock()
	mock.calls.DeleteTrafficPolicyWithContext = append(mock.calls.DeleteTrafficPolicyWithContext, callInfo)
	mock.lockDeleteTrafficPolicyWithContext.Unlock()
	return mock.DeleteTrafficPolicyWithContextFunc(in1, in2, in3...)
}

// DeleteTrafficPolicyWithContextCalls gets all the calls that were made to DeleteTrafficPolicyWithContext.
// Check the length with:
//     len(mockedRoute53API.DeleteTrafficPolicyWithContextCalls())
func (mock *Route53APIMock) DeleteTrafficPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.DeleteTrafficPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.DeleteTrafficPolicyInput
		In3 []request.Option
	}
	mock.lockDeleteTrafficPolicyWithContext.RLock()
	calls = mock.calls.DeleteTrafficPolicyWithContext
	mock.lockDeleteTrafficPolicyWithContext.RUnlock()
	return calls
}

// DeleteVPCAssociationAuthorization calls DeleteVPCAssociationAuthorizationFunc.
func (mock *Route53APIMock) DeleteVPCAssociationAuthorization(in1 *route53.DeleteVPCAssociationAuthorizationInput) (*route53.DeleteVPCAssociationAuthorizationOutput, error) {
	if mock.DeleteVPCAssociationAuthorizationFunc == nil {
		panic("Route53APIMock.DeleteVPCAssociationAuthorizationFunc: method is nil but Route53API.DeleteVPCAssociationAuthorization was just called")
	}
	callInfo := struct {
		In1 *route53.DeleteVPCAssociationAuthorizationInput
	}{
		In1: in1,
	}
	mock.lockDeleteVPCAssociationAuthorization.Lock()
	mock.calls.DeleteVPCAssociationAuthorization = append(mock.calls.DeleteVPCAssociationAuthorization, callInfo)
	mock.lockDeleteVPCAssociationAuthorization.Unlock()
	return mock.DeleteVPCAssociationAuthorizationFunc(in1)
}

// DeleteVPCAssociationAuthorizationCalls gets all the calls that were made to DeleteVPCAssociationAuthorization.
// Check the length with:
//     len(mockedRoute53API.DeleteVPCAssociationAuthorizationCalls())
func (mock *Route53APIMock) DeleteVPCAssociationAuthorizationCalls() []struct {
	In1 *route53.DeleteVPCAssociationAuthorizationInput
} {
	var calls []struct {
		In1 *route53.DeleteVPCAssociationAuthorizationInput
	}
	mock.lockDeleteVPCAssociationAuthorization.RLock()
	calls = mock.calls.DeleteVPCAssociationAuthorization
	mock.lockDeleteVPCAssociationAuthorization.RUnlock()
	return calls
}

// DeleteVPCAssociationAuthorizationRequest calls DeleteVPCAssociationAuthorizationRequestFunc.
func (mock *Route53APIMock) DeleteVPCAssociationAuthorizationRequest(in1 *route53.DeleteVPCAssociationAuthorizationInput) (*request.Request, *route53.DeleteVPCAssociationAuthorizationOutput) {
	if mock.DeleteVPCAssociationAuthorizationRequestFunc == nil {
		panic("Route53APIMock.DeleteVPCAssociationAuthorizationRequestFunc: method is nil but Route53API.DeleteVPCAssociationAuthorizationRequest was just called")
	}
	callInfo := struct {
		In1 *route53.DeleteVPCAssociationAuthorizationInput
	}{
		In1: in1,
	}
	mock.lockDeleteVPCAssociationAuthorizationRequest.Lock()
	mock.calls.DeleteVPCAssociationAuthorizationRequest = append(mock.calls.DeleteVPCAssociationAuthorizationRequest, callInfo)
	mock.lockDeleteVPCAssociationAuthorizationRequest.Unlock()
	return mock.DeleteVPCAssociationAuthorizationRequestFunc(in1)
}

// DeleteVPCAssociationAuthorizationRequestCalls gets all the calls that were made to DeleteVPCAssociationAuthorizationRequest.
// Check the length with:
//     len(mockedRoute53API.DeleteVPCAssociationAuthorizationRequestCalls())
func (mock *Route53APIMock) DeleteVPCAssociationAuthorizationRequestCalls() []struct {
	In1 *route53.DeleteVPCAssociationAuthorizationInput
} {
	var calls []struct {
		In1 *route53.DeleteVPCAssociationAuthorizationInput
	}
	mock.lockDeleteVPCAssociationAuthorizationRequest.RLock()
	calls = mock.calls.DeleteVPCAssociationAuthorizationRequest
	mock.lockDeleteVPCAssociationAuthorizationRequest.RUnlock()
	return calls
}

// DeleteVPCAssociationAuthorizationWithContext calls DeleteVPCAssociationAuthorizationWithContextFunc.
func (mock *Route53APIMock) DeleteVPCAssociationAuthorizationWithContext(in1 context.Context, in2 *route53.DeleteVPCAssociationAuthorizationInput, in3 ...request.Option) (*route53.DeleteVPCAssociationAuthorizationOutput, error) {
	if mock.DeleteVPCAssociationAuthorizationWithContextFunc == nil {
		panic("Route53APIMock.DeleteVPCAssociationAuthorizationWithContextFunc: method is nil but Route53API.DeleteVPCAssociationAuthorizationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.DeleteVPCAssociationAuthorizationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockDeleteVPCAssociationAuthorizationWithContext.Lock()
	mock.calls.DeleteVPCAssociationAuthorizationWithContext = append(mock.calls.DeleteVPCAssociationAuthorizationWithContext, callInfo)
	mock.lockDeleteVPCAssociationAuthorizationWithContext.Unlock()
	return mock.DeleteVPCAssociationAuthorizationWithContextFunc(in1, in2, in3...)
}

// DeleteVPCAssociationAuthorizationWithContextCalls gets all the calls that were made to DeleteVPCAssociationAuthorizationWithContext.
// Check the length with:
//     len(mockedRoute53API.DeleteVPCAssociationAuthorizationWithContextCalls())
func (mock *Route53APIMock) DeleteVPCAssociationAuthorizationWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.DeleteVPCAssociationAuthorizationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.DeleteVPCAssociationAuthorizationInput
		In3 []request.Option
	}
	mock.lockDeleteVPCAssociationAuthorizationWithContext.RLock()
	calls = mock.calls.DeleteVPCAssociationAuthorizationWithContext
	mock.lockDeleteVPCAssociationAuthorizationWithContext.RUnlock()
	return calls
}

// DisassociateVPCFromHostedZone calls DisassociateVPCFromHostedZoneFunc.
func (mock *Route53APIMock) DisassociateVPCFromHostedZone(in1 *route53.DisassociateVPCFromHostedZoneInput) (*route53.DisassociateVPCFromHostedZoneOutput, error) {
	if mock.DisassociateVPCFromHostedZoneFunc == nil {
		panic("Route53APIMock.DisassociateVPCFromHostedZoneFunc: method is nil but Route53API.DisassociateVPCFromHostedZone was just called")
	}
	callInfo := struct {
		In1 *route53.DisassociateVPCFromHostedZoneInput
	}{
		In1: in1,
	}
	mock.lockDisassociateVPCFromHostedZone.Lock()
	mock.calls.DisassociateVPCFromHostedZone = append(mock.calls.DisassociateVPCFromHostedZone, callInfo)
	mock.lockDisassociateVPCFromHostedZone.Unlock()
	return mock.DisassociateVPCFromHostedZoneFunc(in1)
}

// DisassociateVPCFromHostedZoneCalls gets all the calls that were made to DisassociateVPCFromHostedZone.
// Check the length with:
//     len(mockedRoute53API.DisassociateVPCFromHostedZoneCalls())
func (mock *Route53APIMock) DisassociateVPCFromHostedZoneCalls() []struct {
	In1 *route53.DisassociateVPCFromHostedZoneInput
} {
	var calls []struct {
		In1 *route53.DisassociateVPCFromHostedZoneInput
	}
	mock.lockDisassociateVPCFromHostedZone.RLock()
	calls = mock.calls.DisassociateVPCFromHostedZone
	mock.lockDisassociateVPCFromHostedZone.RUnlock()
	return calls
}

// DisassociateVPCFromHostedZoneRequest calls DisassociateVPCFromHostedZoneRequestFunc.
func (mock *Route53APIMock) DisassociateVPCFromHostedZoneRequest(in1 *route53.DisassociateVPCFromHostedZoneInput) (*request.Request, *route53.DisassociateVPCFromHostedZoneOutput) {
	if mock.DisassociateVPCFromHostedZoneRequestFunc == nil {
		panic("Route53APIMock.DisassociateVPCFromHostedZoneRequestFunc: method is nil but Route53API.DisassociateVPCFromHostedZoneRequest was just called")
	}
	callInfo := struct {
		In1 *route53.DisassociateVPCFromHostedZoneInput
	}{
		In1: in1,
	}
	mock.lockDisassociateVPCFromHostedZoneRequest.Lock()
	mock.calls.DisassociateVPCFromHostedZoneRequest = append(mock.calls.DisassociateVPCFromHostedZoneRequest, callInfo)
	mock.lockDisassociateVPCFromHostedZoneRequest.Unlock()
	return mock.DisassociateVPCFromHostedZoneRequestFunc(in1)
}

// DisassociateVPCFromHostedZoneRequestCalls gets all the calls that were made to DisassociateVPCFromHostedZoneRequest.
// Check the length with:
//     len(mockedRoute53API.DisassociateVPCFromHostedZoneRequestCalls())
func (mock *Route53APIMock) DisassociateVPCFromHostedZoneRequestCalls() []struct {
	In1 *route53.DisassociateVPCFromHostedZoneInput
} {
	var calls []struct {
		In1 *route53.DisassociateVPCFromHostedZoneInput
	}
	mock.lockDisassociateVPCFromHostedZoneRequest.RLock()
	calls = mock.calls.DisassociateVPCFromHostedZoneRequest
	mock.lockDisassociateVPCFromHostedZoneRequest.RUnlock()
	return calls
}

// DisassociateVPCFromHostedZoneWithContext calls DisassociateVPCFromHostedZoneWithContextFunc.
func (mock *Route53APIMock) DisassociateVPCFromHostedZoneWithContext(in1 context.Context, in2 *route53.DisassociateVPCFromHostedZoneInput, in3 ...request.Option) (*route53.DisassociateVPCFromHostedZoneOutput, error) {
	if mock.DisassociateVPCFromHostedZoneWithContextFunc == nil {
		panic("Route53APIMock.DisassociateVPCFromHostedZoneWithContextFunc: method is nil but Route53API.DisassociateVPCFromHostedZoneWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.DisassociateVPCFromHostedZoneInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockDisassociateVPCFromHostedZoneWithContext.Lock()
	mock.calls.DisassociateVPCFromHostedZoneWithContext = append(mock.calls.DisassociateVPCFromHostedZoneWithContext, callInfo)
	mock.lockDisassociateVPCFromHostedZoneWithContext.Unlock()
	return mock.DisassociateVPCFromHostedZoneWithContextFunc(in1, in2, in3...)
}

// DisassociateVPCFromHostedZoneWithContextCalls gets all the calls that were made to DisassociateVPCFromHostedZoneWithContext.
// Check the length with:
//     len(mockedRoute53API.DisassociateVPCFromHostedZoneWithContextCalls())
func (mock *Route53APIMock) DisassociateVPCFromHostedZoneWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.DisassociateVPCFromHostedZoneInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.DisassociateVPCFromHostedZoneInput
		In3 []request.Option
	}
	mock.lockDisassociateVPCFromHostedZoneWithContext.RLock()
	calls = mock.calls.DisassociateVPCFromHostedZoneWithContext
	mock.lockDisassociateVPCFromHostedZoneWithContext.RUnlock()
	return calls
}

// GetAccountLimit calls GetAccountLimitFunc.
func (mock *Route53APIMock) GetAccountLimit(in1 *route53.GetAccountLimitInput) (*route53.GetAccountLimitOutput, error) {
	if mock.GetAccountLimitFunc == nil {
		panic("Route53APIMock.GetAccountLimitFunc: method is nil but Route53API.GetAccountLimit was just called")
	}
	callInfo := struct {
		In1 *route53.GetAccountLimitInput
	}{
		In1: in1,
	}
	mock.lockGetAccountLimit.Lock()
	mock.calls.GetAccountLimit = append(mock.calls.GetAccountLimit, callInfo)
	mock.lockGetAccountLimit.Unlock()
	return mock.GetAccountLimitFunc(in1)
}

// GetAccountLimitCalls gets all the calls that were made to GetAccountLimit.
// Check the length with:
//     len(mockedRoute53API.GetAccountLimitCalls())
func (mock *Route53APIMock) GetAccountLimitCalls() []struct {
	In1 *route53.GetAccountLimitInput
} {
	var calls []struct {
		In1 *route53.GetAccountLimitInput
	}
	mock.lockGetAccountLimit.RLock()
	calls = mock.calls.GetAccountLimit
	mock.lockGetAccountLimit.RUnlock()
	return calls
}

// GetAccountLimitRequest calls GetAccountLimitRequestFunc.
func (mock *Route53APIMock) GetAccountLimitRequest(in1 *route53.GetAccountLimitInput) (*request.Request, *route53.GetAccountLimitOutput) {
	if mock.GetAccountLimitRequestFunc == nil {
		panic("Route53APIMock.GetAccountLimitRequestFunc: method is nil but Route53API.GetAccountLimitRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetAccountLimitInput
	}{
		In1: in1,
	}
	mock.lockGetAccountLimitRequest.Lock()
	mock.calls.GetAccountLimitRequest = append(mock.calls.GetAccountLimitRequest, callInfo)
	mock.lockGetAccountLimitRequest.Unlock()
	return mock.GetAccountLimitRequestFunc(in1)
}

// GetAccountLimitRequestCalls gets all the calls that were made to GetAccountLimitRequest.
// Check the length with:
//     len(mockedRoute53API.GetAccountLimitRequestCalls())
func (mock *Route53APIMock) GetAccountLimitRequestCalls() []struct {
	In1 *route53.GetAccountLimitInput
} {
	var calls []struct {
		In1 *route53.GetAccountLimitInput
	}
	mock.lockGetAccountLimitRequest.RLock()
	calls = mock.calls.GetAccountLimitRequest
	mock.lockGetAccountLimitRequest.RUnlock()
	return calls
}

// GetAccountLimitWithContext calls GetAccountLimitWithContextFunc.
func (mock *Route53APIMock) GetAccountLimitWithContext(in1 context.Context, in2 *route53.GetAccountLimitInput, in3 ...request.Option) (*route53.GetAccountLimitOutput, error) {
	if mock.GetAccountLimitWithContextFunc == nil {
		panic("Route53APIMock.GetAccountLimitWithContextFunc: method is nil but Route53API.GetAccountLimitWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetAccountLimitInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetAccountLimitWithContext.Lock()
	mock.calls.GetAccountLimitWithContext = append(mock.calls.GetAccountLimitWithContext, callInfo)
	mock.lockGetAccountLimitWithContext.Unlock()
	return mock.GetAccountLimitWithContextFunc(in1, in2, in3...)
}

// GetAccountLimitWithContextCalls gets all the calls that were made to GetAccountLimitWithContext.
// Check the length with:
//     len(mockedRoute53API.GetAccountLimitWithContextCalls())
func (mock *Route53APIMock) GetAccountLimitWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetAccountLimitInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetAccountLimitInput
		In3 []request.Option
	}
	mock.lockGetAccountLimitWithContext.RLock()
	calls = mock.calls.GetAccountLimitWithContext
	mock.lockGetAccountLimitWithContext.RUnlock()
	return calls
}

// GetChange calls GetChangeFunc.
func (mock *Route53APIMock) GetChange(in1 *route53.GetChangeInput) (*route53.GetChangeOutput, error) {
	if mock.GetChangeFunc == nil {
		panic("Route53APIMock.GetChangeFunc: method is nil but Route53API.GetChange was just called")
	}
	callInfo := struct {
		In1 *route53.GetChangeInput
	}{
		In1: in1,
	}
	mock.lockGetChange.Lock()
	mock.calls.GetChange = append(mock.calls.GetChange, callInfo)
	mock.lockGetChange.Unlock()
	return mock.GetChangeFunc(in1)
}

// GetChangeCalls gets all the calls that were made to GetChange.
// Check the length with:
//     len(mockedRoute53API.GetChangeCalls())
func (mock *Route53APIMock) GetChangeCalls() []struct {
	In1 *route53.GetChangeInput
} {
	var calls []struct {
		In1 *route53.GetChangeInput
	}
	mock.lockGetChange.RLock()
	calls = mock.calls.GetChange
	mock.lockGetChange.RUnlock()
	return calls
}

// GetChangeRequest calls GetChangeRequestFunc.
func (mock *Route53APIMock) GetChangeRequest(in1 *route53.GetChangeInput) (*request.Request, *route53.GetChangeOutput) {
	if mock.GetChangeRequestFunc == nil {
		panic("Route53APIMock.GetChangeRequestFunc: method is nil but Route53API.GetChangeRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetChangeInput
	}{
		In1: in1,
	}
	mock.lockGetChangeRequest.Lock()
	mock.calls.GetChangeRequest = append(mock.calls.GetChangeRequest, callInfo)
	mock.lockGetChangeRequest.Unlock()
	return mock.GetChangeRequestFunc(in1)
}

// GetChangeRequestCalls gets all the calls that were made to GetChangeRequest.
// Check the length with:
//     len(mockedRoute53API.GetChangeRequestCalls())
func (mock *Route53APIMock) GetChangeRequestCalls() []struct {
	In1 *route53.GetChangeInput
} {
	var calls []struct {
		In1 *route53.GetChangeInput
	}
	mock.lockGetChangeRequest.RLock()
	calls = mock.calls.GetChangeRequest
	mock.lockGetChangeRequest.RUnlock()
	return calls
}

// GetChangeWithContext calls GetChangeWithContextFunc.
func (mock *Route53APIMock) GetChangeWithContext(in1 context.Context, in2 *route53.GetChangeInput, in3 ...request.Option) (*route53.GetChangeOutput, error) {
	if mock.GetChangeWithContextFunc == nil {
		panic("Route53APIMock.GetChangeWithContextFunc: method is nil but Route53API.GetChangeWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetChangeInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetChangeWithContext.Lock()
	mock.calls.GetChangeWithContext = append(mock.calls.GetChangeWithContext, callInfo)
	mock.lockGetChangeWithContext.Unlock()
	return mock.GetChangeWithContextFunc(in1, in2, in3...)
}

// GetChangeWithContextCalls gets all the calls that were made to GetChangeWithContext.
// Check the length with:
//     len(mockedRoute53API.GetChangeWithContextCalls())
func (mock *Route53APIMock) GetChangeWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetChangeInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetChangeInput
		In3 []request.Option
	}
	mock.lockGetChangeWithContext.RLock()
	calls = mock.calls.GetChangeWithContext
	mock.lockGetChangeWithContext.RUnlock()
	return calls
}

// GetCheckerIpRanges calls GetCheckerIpRangesFunc.
func (mock *Route53APIMock) GetCheckerIpRanges(in1 *route53.GetCheckerIpRangesInput) (*route53.GetCheckerIpRangesOutput, error) {
	if mock.GetCheckerIpRangesFunc == nil {
		panic("Route53APIMock.GetCheckerIpRangesFunc: method is nil but Route53API.GetCheckerIpRanges was just called")
	}
	callInfo := struct {
		In1 *route53.GetCheckerIpRangesInput
	}{
		In1: in1,
	}
	mock.lockGetCheckerIpRanges.Lock()
	mock.calls.GetCheckerIpRanges = append(mock.calls.GetCheckerIpRanges, callInfo)
	mock.lockGetCheckerIpRanges.Unlock()
	return mock.GetCheckerIpRangesFunc(in1)
}

// GetCheckerIpRangesCalls gets all the calls that were made to GetCheckerIpRanges.
// Check the length with:
//     len(mockedRoute53API.GetCheckerIpRangesCalls())
func (mock *Route53APIMock) GetCheckerIpRangesCalls() []struct {
	In1 *route53.GetCheckerIpRangesInput
} {
	var calls []struct {
		In1 *route53.GetCheckerIpRangesInput
	}
	mock.lockGetCheckerIpRanges.RLock()
	calls = mock.calls.GetCheckerIpRanges
	mock.lockGetCheckerIpRanges.RUnlock()
	return calls
}

// GetCheckerIpRangesRequest calls GetCheckerIpRangesRequestFunc.
func (mock *Route53APIMock) GetCheckerIpRangesRequest(in1 *route53.GetCheckerIpRangesInput) (*request.Request, *route53.GetCheckerIpRangesOutput) {
	if mock.GetCheckerIpRangesRequestFunc == nil {
		panic("Route53APIMock.GetCheckerIpRangesRequestFunc: method is nil but Route53API.GetCheckerIpRangesRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetCheckerIpRangesInput
	}{
		In1: in1,
	}
	mock.lockGetCheckerIpRangesRequest.Lock()
	mock.calls.GetCheckerIpRangesRequest = append(mock.calls.GetCheckerIpRangesRequest, callInfo)
	mock.lockGetCheckerIpRangesRequest.Unlock()
	return mock.GetCheckerIpRangesRequestFunc(in1)
}

// GetCheckerIpRangesRequestCalls gets all the calls that were made to GetCheckerIpRangesRequest.
// Check the length with:
//     len(mockedRoute53API.GetCheckerIpRangesRequestCalls())
func (mock *Route53APIMock) GetCheckerIpRangesRequestCalls() []struct {
	In1 *route53.GetCheckerIpRangesInput
} {
	var calls []struct {
		In1 *route53.GetCheckerIpRangesInput
	}
	mock.lockGetCheckerIpRangesRequest.RLock()
	calls = mock.calls.GetCheckerIpRangesRequest
	mock.lockGetCheckerIpRangesRequest.RUnlock()
	return calls
}

// GetCheckerIpRangesWithContext calls GetCheckerIpRangesWithContextFunc.
func (mock *Route53APIMock) GetCheckerIpRangesWithContext(in1 context.Context, in2 *route53.GetCheckerIpRangesInput, in3 ...request.Option) (*route53.GetCheckerIpRangesOutput, error) {
	if mock.GetCheckerIpRangesWithContextFunc == nil {
		panic("Route53APIMock.GetCheckerIpRangesWithContextFunc: method is nil but Route53API.GetCheckerIpRangesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetCheckerIpRangesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetCheckerIpRangesWithContext.Lock()
	mock.calls.GetCheckerIpRangesWithContext = append(mock.calls.GetCheckerIpRangesWithContext, callInfo)
	mock.lockGetCheckerIpRangesWithContext.Unlock()
	return mock.GetCheckerIpRangesWithContextFunc(in1, in2, in3...)
}

// GetCheckerIpRangesWithContextCalls gets all the calls that were made to GetCheckerIpRangesWithContext.
// Check the length with:
//     len(mockedRoute53API.GetCheckerIpRangesWithContextCalls())
func (mock *Route53APIMock) GetCheckerIpRangesWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetCheckerIpRangesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetCheckerIpRangesInput
		In3 []request.Option
	}
	mock.lockGetCheckerIpRangesWithContext.RLock()
	calls = mock.calls.GetCheckerIpRangesWithContext
	mock.lockGetCheckerIpRangesWithContext.RUnlock()
	return calls
}

// GetGeoLocation calls GetGeoLocationFunc.
func (mock *Route53APIMock) GetGeoLocation(in1 *route53.GetGeoLocationInput) (*route53.GetGeoLocationOutput, error) {
	if mock.GetGeoLocationFunc == nil {
		panic("Route53APIMock.GetGeoLocationFunc: method is nil but Route53API.GetGeoLocation was just called")
	}
	callInfo := struct {
		In1 *route53.GetGeoLocationInput
	}{
		In1: in1,
	}
	mock.lockGetGeoLocation.Lock()
	mock.calls.GetGeoLocation = append(mock.calls.GetGeoLocation, callInfo)
	mock.lockGetGeoLocation.Unlock()
	return mock.GetGeoLocationFunc(in1)
}

// GetGeoLocationCalls gets all the calls that were made to GetGeoLocation.
// Check the length with:
//     len(mockedRoute53API.GetGeoLocationCalls())
func (mock *Route53APIMock) GetGeoLocationCalls() []struct {
	In1 *route53.GetGeoLocationInput
} {
	var calls []struct {
		In1 *route53.GetGeoLocationInput
	}
	mock.lockGetGeoLocation.RLock()
	calls = mock.calls.GetGeoLocation
	mock.lockGetGeoLocation.RUnlock()
	return calls
}

// GetGeoLocationRequest calls GetGeoLocationRequestFunc.
func (mock *Route53APIMock) GetGeoLocationRequest(in1 *route53.GetGeoLocationInput) (*request.Request, *route53.GetGeoLocationOutput) {
	if mock.GetGeoLocationRequestFunc == nil {
		panic("Route53APIMock.GetGeoLocationRequestFunc: method is nil but Route53API.GetGeoLocationRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetGeoLocationInput
	}{
		In1: in1,
	}
	mock.lockGetGeoLocationRequest.Lock()
	mock.calls.GetGeoLocationRequest = append(mock.calls.GetGeoLocationRequest, callInfo)
	mock.lockGetGeoLocationRequest.Unlock()
	return mock.GetGeoLocationRequestFunc(in1)
}

// GetGeoLocationRequestCalls gets all the calls that were made to GetGeoLocationRequest.
// Check the length with:
//     len(mockedRoute53API.GetGeoLocationRequestCalls())
func (mock *Route53APIMock) GetGeoLocationRequestCalls() []struct {
	In1 *route53.GetGeoLocationInput
} {
	var calls []struct {
		In1 *route53.GetGeoLocationInput
	}
	mock.lockGetGeoLocationRequest.RLock()
	calls = mock.calls.GetGeoLocationRequest
	mock.lockGetGeoLocationRequest.RUnlock()
	return calls
}

// GetGeoLocationWithContext calls GetGeoLocationWithContextFunc.
func (mock *Route53APIMock) GetGeoLocationWithContext(in1 context.Context, in2 *route53.GetGeoLocationInput, in3 ...request.Option) (*route53.GetGeoLocationOutput, error) {
	if mock.GetGeoLocationWithContextFunc == nil {
		panic("Route53APIMock.GetGeoLocationWithContextFunc: method is nil but Route53API.GetGeoLocationWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetGeoLocationInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetGeoLocationWithContext.Lock()
	mock.calls.GetGeoLocationWithContext = append(mock.calls.GetGeoLocationWithContext, callInfo)
	mock.lockGetGeoLocationWithContext.Unlock()
	return mock.GetGeoLocationWithContextFunc(in1, in2, in3...)
}

// GetGeoLocationWithContextCalls gets all the calls that were made to GetGeoLocationWithContext.
// Check the length with:
//     len(mockedRoute53API.GetGeoLocationWithContextCalls())
func (mock *Route53APIMock) GetGeoLocationWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetGeoLocationInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetGeoLocationInput
		In3 []request.Option
	}
	mock.lockGetGeoLocationWithContext.RLock()
	calls = mock.calls.GetGeoLocationWithContext
	mock.lockGetGeoLocationWithContext.RUnlock()
	return calls
}

// GetHealthCheck calls GetHealthCheckFunc.
func (mock *Route53APIMock) GetHealthCheck(in1 *route53.GetHealthCheckInput) (*route53.GetHealthCheckOutput, error) {
	if mock.GetHealthCheckFunc == nil {
		panic("Route53APIMock.GetHealthCheckFunc: method is nil but Route53API.GetHealthCheck was just called")
	}
	callInfo := struct {
		In1 *route53.GetHealthCheckInput
	}{
		In1: in1,
	}
	mock.lockGetHealthCheck.Lock()
	mock.calls.GetHealthCheck = append(mock.calls.GetHealthCheck, callInfo)
	mock.lockGetHealthCheck.Unlock()
	return mock.GetHealthCheckFunc(in1)
}

// GetHealthCheckCalls gets all the calls that were made to GetHealthCheck.
// Check the length with:
//     len(mockedRoute53API.GetHealthCheckCalls())
func (mock *Route53APIMock) GetHealthCheckCalls() []struct {
	In1 *route53.GetHealthCheckInput
} {
	var calls []struct {
		In1 *route53.GetHealthCheckInput
	}
	mock.lockGetHealthCheck.RLock()
	calls = mock.calls.GetHealthCheck
	mock.lockGetHealthCheck.RUnlock()
	return calls
}

// GetHealthCheckCount calls GetHealthCheckCountFunc.
func (mock *Route53APIMock) GetHealthCheckCount(in1 *route53.GetHealthCheckCountInput) (*route53.GetHealthCheckCountOutput, error) {
	if mock.GetHealthCheckCountFunc == nil {
		panic("Route53APIMock.GetHealthCheckCountFunc: method is nil but Route53API.GetHealthCheckCount was just called")
	}
	callInfo := struct {
		In1 *route53.GetHealthCheckCountInput
	}{
		In1: in1,
	}
	mock.lockGetHealthCheckCount.Lock()
	mock.calls.GetHealthCheckCount = append(mock.calls.GetHealthCheckCount, callInfo)
	mock.lockGetHealthCheckCount.Unlock()
	return mock.GetHealthCheckCountFunc(in1)
}

// GetHealthCheckCountCalls gets all the calls that were made to GetHealthCheckCount.
// Check the length with:
//     len(mockedRoute53API.GetHealthCheckCountCalls())
func (mock *Route53APIMock) GetHealthCheckCountCalls() []struct {
	In1 *route53.GetHealthCheckCountInput
} {
	var calls []struct {
		In1 *route53.GetHealthCheckCountInput
	}
	mock.lockGetHealthCheckCount.RLock()
	calls = mock.calls.GetHealthCheckCount
	mock.lockGetHealthCheckCount.RUnlock()
	return calls
}

// GetHealthCheckCountRequest calls GetHealthCheckCountRequestFunc.
func (mock *Route53APIMock) GetHealthCheckCountRequest(in1 *route53.GetHealthCheckCountInput) (*request.Request, *route53.GetHealthCheckCountOutput) {
	if mock.GetHealthCheckCountRequestFunc == nil {
		panic("Route53APIMock.GetHealthCheckCountRequestFunc: method is nil but Route53API.GetHealthCheckCountRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetHealthCheckCountInput
	}{
		In1: in1,
	}
	mock.lockGetHealthCheckCountRequest.Lock()
	mock.calls.GetHealthCheckCountRequest = append(mock.calls.GetHealthCheckCountRequest, callInfo)
	mock.lockGetHealthCheckCountRequest.Unlock()
	return mock.GetHealthCheckCountRequestFunc(in1)
}

// GetHealthCheckCountRequestCalls gets all the calls that were made to GetHealthCheckCountRequest.
// Check the length with:
//     len(mockedRoute53API.GetHealthCheckCountRequestCalls())
func (mock *Route53APIMock) GetHealthCheckCountRequestCalls() []struct {
	In1 *route53.GetHealthCheckCountInput
} {
	var calls []struct {
		In1 *route53.GetHealthCheckCountInput
	}
	mock.lockGetHealthCheckCountRequest.RLock()
	calls = mock.calls.GetHealthCheckCountRequest
	mock.lockGetHealthCheckCountRequest.RUnlock()
	return calls
}

// GetHealthCheckCountWithContext calls GetHealthCheckCountWithContextFunc.
func (mock *Route53APIMock) GetHealthCheckCountWithContext(in1 context.Context, in2 *route53.GetHealthCheckCountInput, in3 ...request.Option) (*route53.GetHealthCheckCountOutput, error) {
	if mock.GetHealthCheckCountWithContextFunc == nil {
		panic("Route53APIMock.GetHealthCheckCountWithContextFunc: method is nil but Route53API.GetHealthCheckCountWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetHealthCheckCountInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetHealthCheckCountWithContext.Lock()
	mock.calls.GetHealthCheckCountWithContext = append(mock.calls.GetHealthCheckCountWithContext, callInfo)
	mock.lockGetHealthCheckCountWithContext.Unlock()
	return mock.GetHealthCheckCountWithContextFunc(in1, in2, in3...)
}

// GetHealthCheckCountWithContextCalls gets all the calls that were made to GetHealthCheckCountWithContext.
// Check the length with:
//     len(mockedRoute53API.GetHealthCheckCountWithContextCalls())
func (mock *Route53APIMock) GetHealthCheckCountWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetHealthCheckCountInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetHealthCheckCountInput
		In3 []request.Option
	}
	mock.lockGetHealthCheckCountWithContext.RLock()
	calls = mock.calls.GetHealthCheckCountWithContext
	mock.lockGetHealthCheckCountWithContext.RUnlock()
	return calls
}

// GetHealthCheckLastFailureReason calls GetHealthCheckLastFailureReasonFunc.
func (mock *Route53APIMock) GetHealthCheckLastFailureReason(in1 *route53.GetHealthCheckLastFailureReasonInput) (*route53.GetHealthCheckLastFailureReasonOutput, error) {
	if mock.GetHealthCheckLastFailureReasonFunc == nil {
		panic("Route53APIMock.GetHealthCheckLastFailureReasonFunc: method is nil but Route53API.GetHealthCheckLastFailureReason was just called")
	}
	callInfo := struct {
		In1 *route53.GetHealthCheckLastFailureReasonInput
	}{
		In1: in1,
	}
	mock.lockGetHealthCheckLastFailureReason.Lock()
	mock.calls.GetHealthCheckLastFailureReason = append(mock.calls.GetHealthCheckLastFailureReason, callInfo)
	mock.lockGetHealthCheckLastFailureReason.Unlock()
	return mock.GetHealthCheckLastFailureReasonFunc(in1)
}

// GetHealthCheckLastFailureReasonCalls gets all the calls that were made to GetHealthCheckLastFailureReason.
// Check the length with:
//     len(mockedRoute53API.GetHealthCheckLastFailureReasonCalls())
func (mock *Route53APIMock) GetHealthCheckLastFailureReasonCalls() []struct {
	In1 *route53.GetHealthCheckLastFailureReasonInput
} {
	var calls []struct {
		In1 *route53.GetHealthCheckLastFailureReasonInput
	}
	mock.lockGetHealthCheckLastFailureReason.RLock()
	calls = mock.calls.GetHealthCheckLastFailureReason
	mock.lockGetHealthCheckLastFailureReason.RUnlock()
	return calls
}

// GetHealthCheckLastFailureReasonRequest calls GetHealthCheckLastFailureReasonRequestFunc.
func (mock *Route53APIMock) GetHealthCheckLastFailureReasonRequest(in1 *route53.GetHealthCheckLastFailureReasonInput) (*request.Request, *route53.GetHealthCheckLastFailureReasonOutput) {
	if mock.GetHealthCheckLastFailureReasonRequestFunc == nil {
		panic("Route53APIMock.GetHealthCheckLastFailureReasonRequestFunc: method is nil but Route53API.GetHealthCheckLastFailureReasonRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetHealthCheckLastFailureReasonInput
	}{
		In1: in1,
	}
	mock.lockGetHealthCheckLastFailureReasonRequest.Lock()
	mock.calls.GetHealthCheckLastFailureReasonRequest = append(mock.calls.GetHealthCheckLastFailureReasonRequest, callInfo)
	mock.lockGetHealthCheckLastFailureReasonRequest.Unlock()
	return mock.GetHealthCheckLastFailureReasonRequestFunc(in1)
}

// GetHealthCheckLastFailureReasonRequestCalls gets all the calls that were made to GetHealthCheckLastFailureReasonRequest.
// Check the length with:
//     len(mockedRoute53API.GetHealthCheckLastFailureReasonRequestCalls())
func (mock *Route53APIMock) GetHealthCheckLastFailureReasonRequestCalls() []struct {
	In1 *route53.GetHealthCheckLastFailureReasonInput
} {
	var calls []struct {
		In1 *route53.GetHealthCheckLastFailureReasonInput
	}
	mock.lockGetHealthCheckLastFailureReasonRequest.RLock()
	calls = mock.calls.GetHealthCheckLastFailureReasonRequest
	mock.lockGetHealthCheckLastFailureReasonRequest.RUnlock()
	return calls
}

// GetHealthCheckLastFailureReasonWithContext calls GetHealthCheckLastFailureReasonWithContextFunc.
func (mock *Route53APIMock) GetHealthCheckLastFailureReasonWithContext(in1 context.Context, in2 *route53.GetHealthCheckLastFailureReasonInput, in3 ...request.Option) (*route53.GetHealthCheckLastFailureReasonOutput, error) {
	if mock.GetHealthCheckLastFailureReasonWithContextFunc == nil {
		panic("Route53APIMock.GetHealthCheckLastFailureReasonWithContextFunc: method is nil but Route53API.GetHealthCheckLastFailureReasonWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetHealthCheckLastFailureReasonInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetHealthCheckLastFailureReasonWithContext.Lock()
	mock.calls.GetHealthCheckLastFailureReasonWithContext = append(mock.calls.GetHealthCheckLastFailureReasonWithContext, callInfo)
	mock.lockGetHealthCheckLastFailureReasonWithContext.Unlock()
	return mock.GetHealthCheckLastFailureReasonWithContextFunc(in1, in2, in3...)
}

// GetHealthCheckLastFailureReasonWithContextCalls gets all the calls that were made to GetHealthCheckLastFailureReasonWithContext.
// Check the length with:
//     len(mockedRoute53API.GetHealthCheckLastFailureReasonWithContextCalls())
func (mock *Route53APIMock) GetHealthCheckLastFailureReasonWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetHealthCheckLastFailureReasonInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetHealthCheckLastFailureReasonInput
		In3 []request.Option
	}
	mock.lockGetHealthCheckLastFailureReasonWithContext.RLock()
	calls = mock.calls.GetHealthCheckLastFailureReasonWithContext
	mock.lockGetHealthCheckLastFailureReasonWithContext.RUnlock()
	return calls
}

// GetHealthCheckRequest calls GetHealthCheckRequestFunc.
func (mock *Route53APIMock) GetHealthCheckRequest(in1 *route53.GetHealthCheckInput) (*request.Request, *route53.GetHealthCheckOutput) {
	if mock.GetHealthCheckRequestFunc == nil {
		panic("Route53APIMock.GetHealthCheckRequestFunc: method is nil but Route53API.GetHealthCheckRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetHealthCheckInput
	}{
		In1: in1,
	}
	mock.lockGetHealthCheckRequest.Lock()
	mock.calls.GetHealthCheckRequest = append(mock.calls.GetHealthCheckRequest, callInfo)
	mock.lockGetHealthCheckRequest.Unlock()
	return mock.GetHealthCheckRequestFunc(in1)
}

// GetHealthCheckRequestCalls gets all the calls that were made to GetHealthCheckRequest.
// Check the length with:
//     len(mockedRoute53API.GetHealthCheckRequestCalls())
func (mock *Route53APIMock) GetHealthCheckRequestCalls() []struct {
	In1 *route53.GetHealthCheckInput
} {
	var calls []struct {
		In1 *route53.GetHealthCheckInput
	}
	mock.lockGetHealthCheckRequest.RLock()
	calls = mock.calls.GetHealthCheckRequest
	mock.lockGetHealthCheckRequest.RUnlock()
	return calls
}

// GetHealthCheckStatus calls GetHealthCheckStatusFunc.
func (mock *Route53APIMock) GetHealthCheckStatus(in1 *route53.GetHealthCheckStatusInput) (*route53.GetHealthCheckStatusOutput, error) {
	if mock.GetHealthCheckStatusFunc == nil {
		panic("Route53APIMock.GetHealthCheckStatusFunc: method is nil but Route53API.GetHealthCheckStatus was just called")
	}
	callInfo := struct {
		In1 *route53.GetHealthCheckStatusInput
	}{
		In1: in1,
	}
	mock.lockGetHealthCheckStatus.Lock()
	mock.calls.GetHealthCheckStatus = append(mock.calls.GetHealthCheckStatus, callInfo)
	mock.lockGetHealthCheckStatus.Unlock()
	return mock.GetHealthCheckStatusFunc(in1)
}

// GetHealthCheckStatusCalls gets all the calls that were made to GetHealthCheckStatus.
// Check the length with:
//     len(mockedRoute53API.GetHealthCheckStatusCalls())
func (mock *Route53APIMock) GetHealthCheckStatusCalls() []struct {
	In1 *route53.GetHealthCheckStatusInput
} {
	var calls []struct {
		In1 *route53.GetHealthCheckStatusInput
	}
	mock.lockGetHealthCheckStatus.RLock()
	calls = mock.calls.GetHealthCheckStatus
	mock.lockGetHealthCheckStatus.RUnlock()
	return calls
}

// GetHealthCheckStatusRequest calls GetHealthCheckStatusRequestFunc.
func (mock *Route53APIMock) GetHealthCheckStatusRequest(in1 *route53.GetHealthCheckStatusInput) (*request.Request, *route53.GetHealthCheckStatusOutput) {
	if mock.GetHealthCheckStatusRequestFunc == nil {
		panic("Route53APIMock.GetHealthCheckStatusRequestFunc: method is nil but Route53API.GetHealthCheckStatusRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetHealthCheckStatusInput
	}{
		In1: in1,
	}
	mock.lockGetHealthCheckStatusRequest.Lock()
	mock.calls.GetHealthCheckStatusRequest = append(mock.calls.GetHealthCheckStatusRequest, callInfo)
	mock.lockGetHealthCheckStatusRequest.Unlock()
	return mock.GetHealthCheckStatusRequestFunc(in1)
}

// GetHealthCheckStatusRequestCalls gets all the calls that were made to GetHealthCheckStatusRequest.
// Check the length with:
//     len(mockedRoute53API.GetHealthCheckStatusRequestCalls())
func (mock *Route53APIMock) GetHealthCheckStatusRequestCalls() []struct {
	In1 *route53.GetHealthCheckStatusInput
} {
	var calls []struct {
		In1 *route53.GetHealthCheckStatusInput
	}
	mock.lockGetHealthCheckStatusRequest.RLock()
	calls = mock.calls.GetHealthCheckStatusRequest
	mock.lockGetHealthCheckStatusRequest.RUnlock()
	return calls
}

// GetHealthCheckStatusWithContext calls GetHealthCheckStatusWithContextFunc.
func (mock *Route53APIMock) GetHealthCheckStatusWithContext(in1 context.Context, in2 *route53.GetHealthCheckStatusInput, in3 ...request.Option) (*route53.GetHealthCheckStatusOutput, error) {
	if mock.GetHealthCheckStatusWithContextFunc == nil {
		panic("Route53APIMock.GetHealthCheckStatusWithContextFunc: method is nil but Route53API.GetHealthCheckStatusWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetHealthCheckStatusInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetHealthCheckStatusWithContext.Lock()
	mock.calls.GetHealthCheckStatusWithContext = append(mock.calls.GetHealthCheckStatusWithContext, callInfo)
	mock.lockGetHealthCheckStatusWithContext.Unlock()
	return mock.GetHealthCheckStatusWithContextFunc(in1, in2, in3...)
}

// GetHealthCheckStatusWithContextCalls gets all the calls that were made to GetHealthCheckStatusWithContext.
// Check the length with:
//     len(mockedRoute53API.GetHealthCheckStatusWithContextCalls())
func (mock *Route53APIMock) GetHealthCheckStatusWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetHealthCheckStatusInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetHealthCheckStatusInput
		In3 []request.Option
	}
	mock.lockGetHealthCheckStatusWithContext.RLock()
	calls = mock.calls.GetHealthCheckStatusWithContext
	mock.lockGetHealthCheckStatusWithContext.RUnlock()
	return calls
}

// GetHealthCheckWithContext calls GetHealthCheckWithContextFunc.
func (mock *Route53APIMock) GetHealthCheckWithContext(in1 context.Context, in2 *route53.GetHealthCheckInput, in3 ...request.Option) (*route53.GetHealthCheckOutput, error) {
	if mock.GetHealthCheckWithContextFunc == nil {
		panic("Route53APIMock.GetHealthCheckWithContextFunc: method is nil but Route53API.GetHealthCheckWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetHealthCheckInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetHealthCheckWithContext.Lock()
	mock.calls.GetHealthCheckWithContext = append(mock.calls.GetHealthCheckWithContext, callInfo)
	mock.lockGetHealthCheckWithContext.Unlock()
	return mock.GetHealthCheckWithContextFunc(in1, in2, in3...)
}

// GetHealthCheckWithContextCalls gets all the calls that were made to GetHealthCheckWithContext.
// Check the length with:
//     len(mockedRoute53API.GetHealthCheckWithContextCalls())
func (mock *Route53APIMock) GetHealthCheckWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetHealthCheckInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetHealthCheckInput
		In3 []request.Option
	}
	mock.lockGetHealthCheckWithContext.RLock()
	calls = mock.calls.GetHealthCheckWithContext
	mock.lockGetHealthCheckWithContext.RUnlock()
	return calls
}

// GetHostedZone calls GetHostedZoneFunc.
func (mock *Route53APIMock) GetHostedZone(in1 *route53.GetHostedZoneInput) (*route53.GetHostedZoneOutput, error) {
	if mock.GetHostedZoneFunc == nil {
		panic("Route53APIMock.GetHostedZoneFunc: method is nil but Route53API.GetHostedZone was just called")
	}
	callInfo := struct {
		In1 *route53.GetHostedZoneInput
	}{
		In1: in1,
	}
	mock.lockGetHostedZone.Lock()
	mock.calls.GetHostedZone = append(mock.calls.GetHostedZone, callInfo)
	mock.lockGetHostedZone.Unlock()
	return mock.GetHostedZoneFunc(in1)
}

// GetHostedZoneCalls gets all the calls that were made to GetHostedZone.
// Check the length with:
//     len(mockedRoute53API.GetHostedZoneCalls())
func (mock *Route53APIMock) GetHostedZoneCalls() []struct {
	In1 *route53.GetHostedZoneInput
} {
	var calls []struct {
		In1 *route53.GetHostedZoneInput
	}
	mock.lockGetHostedZone.RLock()
	calls = mock.calls.GetHostedZone
	mock.lockGetHostedZone.RUnlock()
	return calls
}

// GetHostedZoneCount calls GetHostedZoneCountFunc.
func (mock *Route53APIMock) GetHostedZoneCount(in1 *route53.GetHostedZoneCountInput) (*route53.GetHostedZoneCountOutput, error) {
	if mock.GetHostedZoneCountFunc == nil {
		panic("Route53APIMock.GetHostedZoneCountFunc: method is nil but Route53API.GetHostedZoneCount was just called")
	}
	callInfo := struct {
		In1 *route53.GetHostedZoneCountInput
	}{
		In1: in1,
	}
	mock.lockGetHostedZoneCount.Lock()
	mock.calls.GetHostedZoneCount = append(mock.calls.GetHostedZoneCount, callInfo)
	mock.lockGetHostedZoneCount.Unlock()
	return mock.GetHostedZoneCountFunc(in1)
}

// GetHostedZoneCountCalls gets all the calls that were made to GetHostedZoneCount.
// Check the length with:
//     len(mockedRoute53API.GetHostedZoneCountCalls())
func (mock *Route53APIMock) GetHostedZoneCountCalls() []struct {
	In1 *route53.GetHostedZoneCountInput
} {
	var calls []struct {
		In1 *route53.GetHostedZoneCountInput
	}
	mock.lockGetHostedZoneCount.RLock()
	calls = mock.calls.GetHostedZoneCount
	mock.lockGetHostedZoneCount.RUnlock()
	return calls
}

// GetHostedZoneCountRequest calls GetHostedZoneCountRequestFunc.
func (mock *Route53APIMock) GetHostedZoneCountRequest(in1 *route53.GetHostedZoneCountInput) (*request.Request, *route53.GetHostedZoneCountOutput) {
	if mock.GetHostedZoneCountRequestFunc == nil {
		panic("Route53APIMock.GetHostedZoneCountRequestFunc: method is nil but Route53API.GetHostedZoneCountRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetHostedZoneCountInput
	}{
		In1: in1,
	}
	mock.lockGetHostedZoneCountRequest.Lock()
	mock.calls.GetHostedZoneCountRequest = append(mock.calls.GetHostedZoneCountRequest, callInfo)
	mock.lockGetHostedZoneCountRequest.Unlock()
	return mock.GetHostedZoneCountRequestFunc(in1)
}

// GetHostedZoneCountRequestCalls gets all the calls that were made to GetHostedZoneCountRequest.
// Check the length with:
//     len(mockedRoute53API.GetHostedZoneCountRequestCalls())
func (mock *Route53APIMock) GetHostedZoneCountRequestCalls() []struct {
	In1 *route53.GetHostedZoneCountInput
} {
	var calls []struct {
		In1 *route53.GetHostedZoneCountInput
	}
	mock.lockGetHostedZoneCountRequest.RLock()
	calls = mock.calls.GetHostedZoneCountRequest
	mock.lockGetHostedZoneCountRequest.RUnlock()
	return calls
}

// GetHostedZoneCountWithContext calls GetHostedZoneCountWithContextFunc.
func (mock *Route53APIMock) GetHostedZoneCountWithContext(in1 context.Context, in2 *route53.GetHostedZoneCountInput, in3 ...request.Option) (*route53.GetHostedZoneCountOutput, error) {
	if mock.GetHostedZoneCountWithContextFunc == nil {
		panic("Route53APIMock.GetHostedZoneCountWithContextFunc: method is nil but Route53API.GetHostedZoneCountWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetHostedZoneCountInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetHostedZoneCountWithContext.Lock()
	mock.calls.GetHostedZoneCountWithContext = append(mock.calls.GetHostedZoneCountWithContext, callInfo)
	mock.lockGetHostedZoneCountWithContext.Unlock()
	return mock.GetHostedZoneCountWithContextFunc(in1, in2, in3...)
}

// GetHostedZoneCountWithContextCalls gets all the calls that were made to GetHostedZoneCountWithContext.
// Check the length with:
//     len(mockedRoute53API.GetHostedZoneCountWithContextCalls())
func (mock *Route53APIMock) GetHostedZoneCountWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetHostedZoneCountInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetHostedZoneCountInput
		In3 []request.Option
	}
	mock.lockGetHostedZoneCountWithContext.RLock()
	calls = mock.calls.GetHostedZoneCountWithContext
	mock.lockGetHostedZoneCountWithContext.RUnlock()
	return calls
}

// GetHostedZoneLimit calls GetHostedZoneLimitFunc.
func (mock *Route53APIMock) GetHostedZoneLimit(in1 *route53.GetHostedZoneLimitInput) (*route53.GetHostedZoneLimitOutput, error) {
	if mock.GetHostedZoneLimitFunc == nil {
		panic("Route53APIMock.GetHostedZoneLimitFunc: method is nil but Route53API.GetHostedZoneLimit was just called")
	}
	callInfo := struct {
		In1 *route53.GetHostedZoneLimitInput
	}{
		In1: in1,
	}
	mock.lockGetHostedZoneLimit.Lock()
	mock.calls.GetHostedZoneLimit = append(mock.calls.GetHostedZoneLimit, callInfo)
	mock.lockGetHostedZoneLimit.Unlock()
	return mock.GetHostedZoneLimitFunc(in1)
}

// GetHostedZoneLimitCalls gets all the calls that were made to GetHostedZoneLimit.
// Check the length with:
//     len(mockedRoute53API.GetHostedZoneLimitCalls())
func (mock *Route53APIMock) GetHostedZoneLimitCalls() []struct {
	In1 *route53.GetHostedZoneLimitInput
} {
	var calls []struct {
		In1 *route53.GetHostedZoneLimitInput
	}
	mock.lockGetHostedZoneLimit.RLock()
	calls = mock.calls.GetHostedZoneLimit
	mock.lockGetHostedZoneLimit.RUnlock()
	return calls
}

// GetHostedZoneLimitRequest calls GetHostedZoneLimitRequestFunc.
func (mock *Route53APIMock) GetHostedZoneLimitRequest(in1 *route53.GetHostedZoneLimitInput) (*request.Request, *route53.GetHostedZoneLimitOutput) {
	if mock.GetHostedZoneLimitRequestFunc == nil {
		panic("Route53APIMock.GetHostedZoneLimitRequestFunc: method is nil but Route53API.GetHostedZoneLimitRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetHostedZoneLimitInput
	}{
		In1: in1,
	}
	mock.lockGetHostedZoneLimitRequest.Lock()
	mock.calls.GetHostedZoneLimitRequest = append(mock.calls.GetHostedZoneLimitRequest, callInfo)
	mock.lockGetHostedZoneLimitRequest.Unlock()
	return mock.GetHostedZoneLimitRequestFunc(in1)
}

// GetHostedZoneLimitRequestCalls gets all the calls that were made to GetHostedZoneLimitRequest.
// Check the length with:
//     len(mockedRoute53API.GetHostedZoneLimitRequestCalls())
func (mock *Route53APIMock) GetHostedZoneLimitRequestCalls() []struct {
	In1 *route53.GetHostedZoneLimitInput
} {
	var calls []struct {
		In1 *route53.GetHostedZoneLimitInput
	}
	mock.lockGetHostedZoneLimitRequest.RLock()
	calls = mock.calls.GetHostedZoneLimitRequest
	mock.lockGetHostedZoneLimitRequest.RUnlock()
	return calls
}

// GetHostedZoneLimitWithContext calls GetHostedZoneLimitWithContextFunc.
func (mock *Route53APIMock) GetHostedZoneLimitWithContext(in1 context.Context, in2 *route53.GetHostedZoneLimitInput, in3 ...request.Option) (*route53.GetHostedZoneLimitOutput, error) {
	if mock.GetHostedZoneLimitWithContextFunc == nil {
		panic("Route53APIMock.GetHostedZoneLimitWithContextFunc: method is nil but Route53API.GetHostedZoneLimitWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetHostedZoneLimitInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetHostedZoneLimitWithContext.Lock()
	mock.calls.GetHostedZoneLimitWithContext = append(mock.calls.GetHostedZoneLimitWithContext, callInfo)
	mock.lockGetHostedZoneLimitWithContext.Unlock()
	return mock.GetHostedZoneLimitWithContextFunc(in1, in2, in3...)
}

// GetHostedZoneLimitWithContextCalls gets all the calls that were made to GetHostedZoneLimitWithContext.
// Check the length with:
//     len(mockedRoute53API.GetHostedZoneLimitWithContextCalls())
func (mock *Route53APIMock) GetHostedZoneLimitWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetHostedZoneLimitInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetHostedZoneLimitInput
		In3 []request.Option
	}
	mock.lockGetHostedZoneLimitWithContext.RLock()
	calls = mock.calls.GetHostedZoneLimitWithContext
	mock.lockGetHostedZoneLimitWithContext.RUnlock()
	return calls
}

// GetHostedZoneRequest calls GetHostedZoneRequestFunc.
func (mock *Route53APIMock) GetHostedZoneRequest(in1 *route53.GetHostedZoneInput) (*request.Request, *route53.GetHostedZoneOutput) {
	if mock.GetHostedZoneRequestFunc == nil {
		panic("Route53APIMock.GetHostedZoneRequestFunc: method is nil but Route53API.GetHostedZoneRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetHostedZoneInput
	}{
		In1: in1,
	}
	mock.lockGetHostedZoneRequest.Lock()
	mock.calls.GetHostedZoneRequest = append(mock.calls.GetHostedZoneRequest, callInfo)
	mock.lockGetHostedZoneRequest.Unlock()
	return mock.GetHostedZoneRequestFunc(in1)
}

// GetHostedZoneRequestCalls gets all the calls that were made to GetHostedZoneRequest.
// Check the length with:
//     len(mockedRoute53API.GetHostedZoneRequestCalls())
func (mock *Route53APIMock) GetHostedZoneRequestCalls() []struct {
	In1 *route53.GetHostedZoneInput
} {
	var calls []struct {
		In1 *route53.GetHostedZoneInput
	}
	mock.lockGetHostedZoneRequest.RLock()
	calls = mock.calls.GetHostedZoneRequest
	mock.lockGetHostedZoneRequest.RUnlock()
	return calls
}

// GetHostedZoneWithContext calls GetHostedZoneWithContextFunc.
func (mock *Route53APIMock) GetHostedZoneWithContext(in1 context.Context, in2 *route53.GetHostedZoneInput, in3 ...request.Option) (*route53.GetHostedZoneOutput, error) {
	if mock.GetHostedZoneWithContextFunc == nil {
		panic("Route53APIMock.GetHostedZoneWithContextFunc: method is nil but Route53API.GetHostedZoneWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetHostedZoneInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetHostedZoneWithContext.Lock()
	mock.calls.GetHostedZoneWithContext = append(mock.calls.GetHostedZoneWithContext, callInfo)
	mock.lockGetHostedZoneWithContext.Unlock()
	return mock.GetHostedZoneWithContextFunc(in1, in2, in3...)
}

// GetHostedZoneWithContextCalls gets all the calls that were made to GetHostedZoneWithContext.
// Check the length with:
//     len(mockedRoute53API.GetHostedZoneWithContextCalls())
func (mock *Route53APIMock) GetHostedZoneWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetHostedZoneInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetHostedZoneInput
		In3 []request.Option
	}
	mock.lockGetHostedZoneWithContext.RLock()
	calls = mock.calls.GetHostedZoneWithContext
	mock.lockGetHostedZoneWithContext.RUnlock()
	return calls
}

// GetQueryLoggingConfig calls GetQueryLoggingConfigFunc.
func (mock *Route53APIMock) GetQueryLoggingConfig(in1 *route53.GetQueryLoggingConfigInput) (*route53.GetQueryLoggingConfigOutput, error) {
	if mock.GetQueryLoggingConfigFunc == nil {
		panic("Route53APIMock.GetQueryLoggingConfigFunc: method is nil but Route53API.GetQueryLoggingConfig was just called")
	}
	callInfo := struct {
		In1 *route53.GetQueryLoggingConfigInput
	}{
		In1: in1,
	}
	mock.lockGetQueryLoggingConfig.Lock()
	mock.calls.GetQueryLoggingConfig = append(mock.calls.GetQueryLoggingConfig, callInfo)
	mock.lockGetQueryLoggingConfig.Unlock()
	return mock.GetQueryLoggingConfigFunc(in1)
}

// GetQueryLoggingConfigCalls gets all the calls that were made to GetQueryLoggingConfig.
// Check the length with:
//     len(mockedRoute53API.GetQueryLoggingConfigCalls())
func (mock *Route53APIMock) GetQueryLoggingConfigCalls() []struct {
	In1 *route53.GetQueryLoggingConfigInput
} {
	var calls []struct {
		In1 *route53.GetQueryLoggingConfigInput
	}
	mock.lockGetQueryLoggingConfig.RLock()
	calls = mock.calls.GetQueryLoggingConfig
	mock.lockGetQueryLoggingConfig.RUnlock()
	return calls
}

// GetQueryLoggingConfigRequest calls GetQueryLoggingConfigRequestFunc.
func (mock *Route53APIMock) GetQueryLoggingConfigRequest(in1 *route53.GetQueryLoggingConfigInput) (*request.Request, *route53.GetQueryLoggingConfigOutput) {
	if mock.GetQueryLoggingConfigRequestFunc == nil {
		panic("Route53APIMock.GetQueryLoggingConfigRequestFunc: method is nil but Route53API.GetQueryLoggingConfigRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetQueryLoggingConfigInput
	}{
		In1: in1,
	}
	mock.lockGetQueryLoggingConfigRequest.Lock()
	mock.calls.GetQueryLoggingConfigRequest = append(mock.calls.GetQueryLoggingConfigRequest, callInfo)
	mock.lockGetQueryLoggingConfigRequest.Unlock()
	return mock.GetQueryLoggingConfigRequestFunc(in1)
}

// GetQueryLoggingConfigRequestCalls gets all the calls that were made to GetQueryLoggingConfigRequest.
// Check the length with:
//     len(mockedRoute53API.GetQueryLoggingConfigRequestCalls())
func (mock *Route53APIMock) GetQueryLoggingConfigRequestCalls() []struct {
	In1 *route53.GetQueryLoggingConfigInput
} {
	var calls []struct {
		In1 *route53.GetQueryLoggingConfigInput
	}
	mock.lockGetQueryLoggingConfigRequest.RLock()
	calls = mock.calls.GetQueryLoggingConfigRequest
	mock.lockGetQueryLoggingConfigRequest.RUnlock()
	return calls
}

// GetQueryLoggingConfigWithContext calls GetQueryLoggingConfigWithContextFunc.
func (mock *Route53APIMock) GetQueryLoggingConfigWithContext(in1 context.Context, in2 *route53.GetQueryLoggingConfigInput, in3 ...request.Option) (*route53.GetQueryLoggingConfigOutput, error) {
	if mock.GetQueryLoggingConfigWithContextFunc == nil {
		panic("Route53APIMock.GetQueryLoggingConfigWithContextFunc: method is nil but Route53API.GetQueryLoggingConfigWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetQueryLoggingConfigInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetQueryLoggingConfigWithContext.Lock()
	mock.calls.GetQueryLoggingConfigWithContext = append(mock.calls.GetQueryLoggingConfigWithContext, callInfo)
	mock.lockGetQueryLoggingConfigWithContext.Unlock()
	return mock.GetQueryLoggingConfigWithContextFunc(in1, in2, in3...)
}

// GetQueryLoggingConfigWithContextCalls gets all the calls that were made to GetQueryLoggingConfigWithContext.
// Check the length with:
//     len(mockedRoute53API.GetQueryLoggingConfigWithContextCalls())
func (mock *Route53APIMock) GetQueryLoggingConfigWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetQueryLoggingConfigInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetQueryLoggingConfigInput
		In3 []request.Option
	}
	mock.lockGetQueryLoggingConfigWithContext.RLock()
	calls = mock.calls.GetQueryLoggingConfigWithContext
	mock.lockGetQueryLoggingConfigWithContext.RUnlock()
	return calls
}

// GetReusableDelegationSet calls GetReusableDelegationSetFunc.
func (mock *Route53APIMock) GetReusableDelegationSet(in1 *route53.GetReusableDelegationSetInput) (*route53.GetReusableDelegationSetOutput, error) {
	if mock.GetReusableDelegationSetFunc == nil {
		panic("Route53APIMock.GetReusableDelegationSetFunc: method is nil but Route53API.GetReusableDelegationSet was just called")
	}
	callInfo := struct {
		In1 *route53.GetReusableDelegationSetInput
	}{
		In1: in1,
	}
	mock.lockGetReusableDelegationSet.Lock()
	mock.calls.GetReusableDelegationSet = append(mock.calls.GetReusableDelegationSet, callInfo)
	mock.lockGetReusableDelegationSet.Unlock()
	return mock.GetReusableDelegationSetFunc(in1)
}

// GetReusableDelegationSetCalls gets all the calls that were made to GetReusableDelegationSet.
// Check the length with:
//     len(mockedRoute53API.GetReusableDelegationSetCalls())
func (mock *Route53APIMock) GetReusableDelegationSetCalls() []struct {
	In1 *route53.GetReusableDelegationSetInput
} {
	var calls []struct {
		In1 *route53.GetReusableDelegationSetInput
	}
	mock.lockGetReusableDelegationSet.RLock()
	calls = mock.calls.GetReusableDelegationSet
	mock.lockGetReusableDelegationSet.RUnlock()
	return calls
}

// GetReusableDelegationSetLimit calls GetReusableDelegationSetLimitFunc.
func (mock *Route53APIMock) GetReusableDelegationSetLimit(in1 *route53.GetReusableDelegationSetLimitInput) (*route53.GetReusableDelegationSetLimitOutput, error) {
	if mock.GetReusableDelegationSetLimitFunc == nil {
		panic("Route53APIMock.GetReusableDelegationSetLimitFunc: method is nil but Route53API.GetReusableDelegationSetLimit was just called")
	}
	callInfo := struct {
		In1 *route53.GetReusableDelegationSetLimitInput
	}{
		In1: in1,
	}
	mock.lockGetReusableDelegationSetLimit.Lock()
	mock.calls.GetReusableDelegationSetLimit = append(mock.calls.GetReusableDelegationSetLimit, callInfo)
	mock.lockGetReusableDelegationSetLimit.Unlock()
	return mock.GetReusableDelegationSetLimitFunc(in1)
}

// GetReusableDelegationSetLimitCalls gets all the calls that were made to GetReusableDelegationSetLimit.
// Check the length with:
//     len(mockedRoute53API.GetReusableDelegationSetLimitCalls())
func (mock *Route53APIMock) GetReusableDelegationSetLimitCalls() []struct {
	In1 *route53.GetReusableDelegationSetLimitInput
} {
	var calls []struct {
		In1 *route53.GetReusableDelegationSetLimitInput
	}
	mock.lockGetReusableDelegationSetLimit.RLock()
	calls = mock.calls.GetReusableDelegationSetLimit
	mock.lockGetReusableDelegationSetLimit.RUnlock()
	return calls
}

// GetReusableDelegationSetLimitRequest calls GetReusableDelegationSetLimitRequestFunc.
func (mock *Route53APIMock) GetReusableDelegationSetLimitRequest(in1 *route53.GetReusableDelegationSetLimitInput) (*request.Request, *route53.GetReusableDelegationSetLimitOutput) {
	if mock.GetReusableDelegationSetLimitRequestFunc == nil {
		panic("Route53APIMock.GetReusableDelegationSetLimitRequestFunc: method is nil but Route53API.GetReusableDelegationSetLimitRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetReusableDelegationSetLimitInput
	}{
		In1: in1,
	}
	mock.lockGetReusableDelegationSetLimitRequest.Lock()
	mock.calls.GetReusableDelegationSetLimitRequest = append(mock.calls.GetReusableDelegationSetLimitRequest, callInfo)
	mock.lockGetReusableDelegationSetLimitRequest.Unlock()
	return mock.GetReusableDelegationSetLimitRequestFunc(in1)
}

// GetReusableDelegationSetLimitRequestCalls gets all the calls that were made to GetReusableDelegationSetLimitRequest.
// Check the length with:
//     len(mockedRoute53API.GetReusableDelegationSetLimitRequestCalls())
func (mock *Route53APIMock) GetReusableDelegationSetLimitRequestCalls() []struct {
	In1 *route53.GetReusableDelegationSetLimitInput
} {
	var calls []struct {
		In1 *route53.GetReusableDelegationSetLimitInput
	}
	mock.lockGetReusableDelegationSetLimitRequest.RLock()
	calls = mock.calls.GetReusableDelegationSetLimitRequest
	mock.lockGetReusableDelegationSetLimitRequest.RUnlock()
	return calls
}

// GetReusableDelegationSetLimitWithContext calls GetReusableDelegationSetLimitWithContextFunc.
func (mock *Route53APIMock) GetReusableDelegationSetLimitWithContext(in1 context.Context, in2 *route53.GetReusableDelegationSetLimitInput, in3 ...request.Option) (*route53.GetReusableDelegationSetLimitOutput, error) {
	if mock.GetReusableDelegationSetLimitWithContextFunc == nil {
		panic("Route53APIMock.GetReusableDelegationSetLimitWithContextFunc: method is nil but Route53API.GetReusableDelegationSetLimitWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetReusableDelegationSetLimitInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetReusableDelegationSetLimitWithContext.Lock()
	mock.calls.GetReusableDelegationSetLimitWithContext = append(mock.calls.GetReusableDelegationSetLimitWithContext, callInfo)
	mock.lockGetReusableDelegationSetLimitWithContext.Unlock()
	return mock.GetReusableDelegationSetLimitWithContextFunc(in1, in2, in3...)
}

// GetReusableDelegationSetLimitWithContextCalls gets all the calls that were made to GetReusableDelegationSetLimitWithContext.
// Check the length with:
//     len(mockedRoute53API.GetReusableDelegationSetLimitWithContextCalls())
func (mock *Route53APIMock) GetReusableDelegationSetLimitWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetReusableDelegationSetLimitInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetReusableDelegationSetLimitInput
		In3 []request.Option
	}
	mock.lockGetReusableDelegationSetLimitWithContext.RLock()
	calls = mock.calls.GetReusableDelegationSetLimitWithContext
	mock.lockGetReusableDelegationSetLimitWithContext.RUnlock()
	return calls
}

// GetReusableDelegationSetRequest calls GetReusableDelegationSetRequestFunc.
func (mock *Route53APIMock) GetReusableDelegationSetRequest(in1 *route53.GetReusableDelegationSetInput) (*request.Request, *route53.GetReusableDelegationSetOutput) {
	if mock.GetReusableDelegationSetRequestFunc == nil {
		panic("Route53APIMock.GetReusableDelegationSetRequestFunc: method is nil but Route53API.GetReusableDelegationSetRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetReusableDelegationSetInput
	}{
		In1: in1,
	}
	mock.lockGetReusableDelegationSetRequest.Lock()
	mock.calls.GetReusableDelegationSetRequest = append(mock.calls.GetReusableDelegationSetRequest, callInfo)
	mock.lockGetReusableDelegationSetRequest.Unlock()
	return mock.GetReusableDelegationSetRequestFunc(in1)
}

// GetReusableDelegationSetRequestCalls gets all the calls that were made to GetReusableDelegationSetRequest.
// Check the length with:
//     len(mockedRoute53API.GetReusableDelegationSetRequestCalls())
func (mock *Route53APIMock) GetReusableDelegationSetRequestCalls() []struct {
	In1 *route53.GetReusableDelegationSetInput
} {
	var calls []struct {
		In1 *route53.GetReusableDelegationSetInput
	}
	mock.lockGetReusableDelegationSetRequest.RLock()
	calls = mock.calls.GetReusableDelegationSetRequest
	mock.lockGetReusableDelegationSetRequest.RUnlock()
	return calls
}

// GetReusableDelegationSetWithContext calls GetReusableDelegationSetWithContextFunc.
func (mock *Route53APIMock) GetReusableDelegationSetWithContext(in1 context.Context, in2 *route53.GetReusableDelegationSetInput, in3 ...request.Option) (*route53.GetReusableDelegationSetOutput, error) {
	if mock.GetReusableDelegationSetWithContextFunc == nil {
		panic("Route53APIMock.GetReusableDelegationSetWithContextFunc: method is nil but Route53API.GetReusableDelegationSetWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetReusableDelegationSetInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetReusableDelegationSetWithContext.Lock()
	mock.calls.GetReusableDelegationSetWithContext = append(mock.calls.GetReusableDelegationSetWithContext, callInfo)
	mock.lockGetReusableDelegationSetWithContext.Unlock()
	return mock.GetReusableDelegationSetWithContextFunc(in1, in2, in3...)
}

// GetReusableDelegationSetWithContextCalls gets all the calls that were made to GetReusableDelegationSetWithContext.
// Check the length with:
//     len(mockedRoute53API.GetReusableDelegationSetWithContextCalls())
func (mock *Route53APIMock) GetReusableDelegationSetWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetReusableDelegationSetInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetReusableDelegationSetInput
		In3 []request.Option
	}
	mock.lockGetReusableDelegationSetWithContext.RLock()
	calls = mock.calls.GetReusableDelegationSetWithContext
	mock.lockGetReusableDelegationSetWithContext.RUnlock()
	return calls
}

// GetTrafficPolicy calls GetTrafficPolicyFunc.
func (mock *Route53APIMock) GetTrafficPolicy(in1 *route53.GetTrafficPolicyInput) (*route53.GetTrafficPolicyOutput, error) {
	if mock.GetTrafficPolicyFunc == nil {
		panic("Route53APIMock.GetTrafficPolicyFunc: method is nil but Route53API.GetTrafficPolicy was just called")
	}
	callInfo := struct {
		In1 *route53.GetTrafficPolicyInput
	}{
		In1: in1,
	}
	mock.lockGetTrafficPolicy.Lock()
	mock.calls.GetTrafficPolicy = append(mock.calls.GetTrafficPolicy, callInfo)
	mock.lockGetTrafficPolicy.Unlock()
	return mock.GetTrafficPolicyFunc(in1)
}

// GetTrafficPolicyCalls gets all the calls that were made to GetTrafficPolicy.
// Check the length with:
//     len(mockedRoute53API.GetTrafficPolicyCalls())
func (mock *Route53APIMock) GetTrafficPolicyCalls() []struct {
	In1 *route53.GetTrafficPolicyInput
} {
	var calls []struct {
		In1 *route53.GetTrafficPolicyInput
	}
	mock.lockGetTrafficPolicy.RLock()
	calls = mock.calls.GetTrafficPolicy
	mock.lockGetTrafficPolicy.RUnlock()
	return calls
}

// GetTrafficPolicyInstance calls GetTrafficPolicyInstanceFunc.
func (mock *Route53APIMock) GetTrafficPolicyInstance(in1 *route53.GetTrafficPolicyInstanceInput) (*route53.GetTrafficPolicyInstanceOutput, error) {
	if mock.GetTrafficPolicyInstanceFunc == nil {
		panic("Route53APIMock.GetTrafficPolicyInstanceFunc: method is nil but Route53API.GetTrafficPolicyInstance was just called")
	}
	callInfo := struct {
		In1 *route53.GetTrafficPolicyInstanceInput
	}{
		In1: in1,
	}
	mock.lockGetTrafficPolicyInstance.Lock()
	mock.calls.GetTrafficPolicyInstance = append(mock.calls.GetTrafficPolicyInstance, callInfo)
	mock.lockGetTrafficPolicyInstance.Unlock()
	return mock.GetTrafficPolicyInstanceFunc(in1)
}

// GetTrafficPolicyInstanceCalls gets all the calls that were made to GetTrafficPolicyInstance.
// Check the length with:
//     len(mockedRoute53API.GetTrafficPolicyInstanceCalls())
func (mock *Route53APIMock) GetTrafficPolicyInstanceCalls() []struct {
	In1 *route53.GetTrafficPolicyInstanceInput
} {
	var calls []struct {
		In1 *route53.GetTrafficPolicyInstanceInput
	}
	mock.lockGetTrafficPolicyInstance.RLock()
	calls = mock.calls.GetTrafficPolicyInstance
	mock.lockGetTrafficPolicyInstance.RUnlock()
	return calls
}

// GetTrafficPolicyInstanceCount calls GetTrafficPolicyInstanceCountFunc.
func (mock *Route53APIMock) GetTrafficPolicyInstanceCount(in1 *route53.GetTrafficPolicyInstanceCountInput) (*route53.GetTrafficPolicyInstanceCountOutput, error) {
	if mock.GetTrafficPolicyInstanceCountFunc == nil {
		panic("Route53APIMock.GetTrafficPolicyInstanceCountFunc: method is nil but Route53API.GetTrafficPolicyInstanceCount was just called")
	}
	callInfo := struct {
		In1 *route53.GetTrafficPolicyInstanceCountInput
	}{
		In1: in1,
	}
	mock.lockGetTrafficPolicyInstanceCount.Lock()
	mock.calls.GetTrafficPolicyInstanceCount = append(mock.calls.GetTrafficPolicyInstanceCount, callInfo)
	mock.lockGetTrafficPolicyInstanceCount.Unlock()
	return mock.GetTrafficPolicyInstanceCountFunc(in1)
}

// GetTrafficPolicyInstanceCountCalls gets all the calls that were made to GetTrafficPolicyInstanceCount.
// Check the length with:
//     len(mockedRoute53API.GetTrafficPolicyInstanceCountCalls())
func (mock *Route53APIMock) GetTrafficPolicyInstanceCountCalls() []struct {
	In1 *route53.GetTrafficPolicyInstanceCountInput
} {
	var calls []struct {
		In1 *route53.GetTrafficPolicyInstanceCountInput
	}
	mock.lockGetTrafficPolicyInstanceCount.RLock()
	calls = mock.calls.GetTrafficPolicyInstanceCount
	mock.lockGetTrafficPolicyInstanceCount.RUnlock()
	return calls
}

// GetTrafficPolicyInstanceCountRequest calls GetTrafficPolicyInstanceCountRequestFunc.
func (mock *Route53APIMock) GetTrafficPolicyInstanceCountRequest(in1 *route53.GetTrafficPolicyInstanceCountInput) (*request.Request, *route53.GetTrafficPolicyInstanceCountOutput) {
	if mock.GetTrafficPolicyInstanceCountRequestFunc == nil {
		panic("Route53APIMock.GetTrafficPolicyInstanceCountRequestFunc: method is nil but Route53API.GetTrafficPolicyInstanceCountRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetTrafficPolicyInstanceCountInput
	}{
		In1: in1,
	}
	mock.lockGetTrafficPolicyInstanceCountRequest.Lock()
	mock.calls.GetTrafficPolicyInstanceCountRequest = append(mock.calls.GetTrafficPolicyInstanceCountRequest, callInfo)
	mock.lockGetTrafficPolicyInstanceCountRequest.Unlock()
	return mock.GetTrafficPolicyInstanceCountRequestFunc(in1)
}

// GetTrafficPolicyInstanceCountRequestCalls gets all the calls that were made to GetTrafficPolicyInstanceCountRequest.
// Check the length with:
//     len(mockedRoute53API.GetTrafficPolicyInstanceCountRequestCalls())
func (mock *Route53APIMock) GetTrafficPolicyInstanceCountRequestCalls() []struct {
	In1 *route53.GetTrafficPolicyInstanceCountInput
} {
	var calls []struct {
		In1 *route53.GetTrafficPolicyInstanceCountInput
	}
	mock.lockGetTrafficPolicyInstanceCountRequest.RLock()
	calls = mock.calls.GetTrafficPolicyInstanceCountRequest
	mock.lockGetTrafficPolicyInstanceCountRequest.RUnlock()
	return calls
}

// GetTrafficPolicyInstanceCountWithContext calls GetTrafficPolicyInstanceCountWithContextFunc.
func (mock *Route53APIMock) GetTrafficPolicyInstanceCountWithContext(in1 context.Context, in2 *route53.GetTrafficPolicyInstanceCountInput, in3 ...request.Option) (*route53.GetTrafficPolicyInstanceCountOutput, error) {
	if mock.GetTrafficPolicyInstanceCountWithContextFunc == nil {
		panic("Route53APIMock.GetTrafficPolicyInstanceCountWithContextFunc: method is nil but Route53API.GetTrafficPolicyInstanceCountWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetTrafficPolicyInstanceCountInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetTrafficPolicyInstanceCountWithContext.Lock()
	mock.calls.GetTrafficPolicyInstanceCountWithContext = append(mock.calls.GetTrafficPolicyInstanceCountWithContext, callInfo)
	mock.lockGetTrafficPolicyInstanceCountWithContext.Unlock()
	return mock.GetTrafficPolicyInstanceCountWithContextFunc(in1, in2, in3...)
}

// GetTrafficPolicyInstanceCountWithContextCalls gets all the calls that were made to GetTrafficPolicyInstanceCountWithContext.
// Check the length with:
//     len(mockedRoute53API.GetTrafficPolicyInstanceCountWithContextCalls())
func (mock *Route53APIMock) GetTrafficPolicyInstanceCountWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetTrafficPolicyInstanceCountInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetTrafficPolicyInstanceCountInput
		In3 []request.Option
	}
	mock.lockGetTrafficPolicyInstanceCountWithContext.RLock()
	calls = mock.calls.GetTrafficPolicyInstanceCountWithContext
	mock.lockGetTrafficPolicyInstanceCountWithContext.RUnlock()
	return calls
}

// GetTrafficPolicyInstanceRequest calls GetTrafficPolicyInstanceRequestFunc.
func (mock *Route53APIMock) GetTrafficPolicyInstanceRequest(in1 *route53.GetTrafficPolicyInstanceInput) (*request.Request, *route53.GetTrafficPolicyInstanceOutput) {
	if mock.GetTrafficPolicyInstanceRequestFunc == nil {
		panic("Route53APIMock.GetTrafficPolicyInstanceRequestFunc: method is nil but Route53API.GetTrafficPolicyInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetTrafficPolicyInstanceInput
	}{
		In1: in1,
	}
	mock.lockGetTrafficPolicyInstanceRequest.Lock()
	mock.calls.GetTrafficPolicyInstanceRequest = append(mock.calls.GetTrafficPolicyInstanceRequest, callInfo)
	mock.lockGetTrafficPolicyInstanceRequest.Unlock()
	return mock.GetTrafficPolicyInstanceRequestFunc(in1)
}

// GetTrafficPolicyInstanceRequestCalls gets all the calls that were made to GetTrafficPolicyInstanceRequest.
// Check the length with:
//     len(mockedRoute53API.GetTrafficPolicyInstanceRequestCalls())
func (mock *Route53APIMock) GetTrafficPolicyInstanceRequestCalls() []struct {
	In1 *route53.GetTrafficPolicyInstanceInput
} {
	var calls []struct {
		In1 *route53.GetTrafficPolicyInstanceInput
	}
	mock.lockGetTrafficPolicyInstanceRequest.RLock()
	calls = mock.calls.GetTrafficPolicyInstanceRequest
	mock.lockGetTrafficPolicyInstanceRequest.RUnlock()
	return calls
}

// GetTrafficPolicyInstanceWithContext calls GetTrafficPolicyInstanceWithContextFunc.
func (mock *Route53APIMock) GetTrafficPolicyInstanceWithContext(in1 context.Context, in2 *route53.GetTrafficPolicyInstanceInput, in3 ...request.Option) (*route53.GetTrafficPolicyInstanceOutput, error) {
	if mock.GetTrafficPolicyInstanceWithContextFunc == nil {
		panic("Route53APIMock.GetTrafficPolicyInstanceWithContextFunc: method is nil but Route53API.GetTrafficPolicyInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetTrafficPolicyInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetTrafficPolicyInstanceWithContext.Lock()
	mock.calls.GetTrafficPolicyInstanceWithContext = append(mock.calls.GetTrafficPolicyInstanceWithContext, callInfo)
	mock.lockGetTrafficPolicyInstanceWithContext.Unlock()
	return mock.GetTrafficPolicyInstanceWithContextFunc(in1, in2, in3...)
}

// GetTrafficPolicyInstanceWithContextCalls gets all the calls that were made to GetTrafficPolicyInstanceWithContext.
// Check the length with:
//     len(mockedRoute53API.GetTrafficPolicyInstanceWithContextCalls())
func (mock *Route53APIMock) GetTrafficPolicyInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetTrafficPolicyInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetTrafficPolicyInstanceInput
		In3 []request.Option
	}
	mock.lockGetTrafficPolicyInstanceWithContext.RLock()
	calls = mock.calls.GetTrafficPolicyInstanceWithContext
	mock.lockGetTrafficPolicyInstanceWithContext.RUnlock()
	return calls
}

// GetTrafficPolicyRequest calls GetTrafficPolicyRequestFunc.
func (mock *Route53APIMock) GetTrafficPolicyRequest(in1 *route53.GetTrafficPolicyInput) (*request.Request, *route53.GetTrafficPolicyOutput) {
	if mock.GetTrafficPolicyRequestFunc == nil {
		panic("Route53APIMock.GetTrafficPolicyRequestFunc: method is nil but Route53API.GetTrafficPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *route53.GetTrafficPolicyInput
	}{
		In1: in1,
	}
	mock.lockGetTrafficPolicyRequest.Lock()
	mock.calls.GetTrafficPolicyRequest = append(mock.calls.GetTrafficPolicyRequest, callInfo)
	mock.lockGetTrafficPolicyRequest.Unlock()
	return mock.GetTrafficPolicyRequestFunc(in1)
}

// GetTrafficPolicyRequestCalls gets all the calls that were made to GetTrafficPolicyRequest.
// Check the length with:
//     len(mockedRoute53API.GetTrafficPolicyRequestCalls())
func (mock *Route53APIMock) GetTrafficPolicyRequestCalls() []struct {
	In1 *route53.GetTrafficPolicyInput
} {
	var calls []struct {
		In1 *route53.GetTrafficPolicyInput
	}
	mock.lockGetTrafficPolicyRequest.RLock()
	calls = mock.calls.GetTrafficPolicyRequest
	mock.lockGetTrafficPolicyRequest.RUnlock()
	return calls
}

// GetTrafficPolicyWithContext calls GetTrafficPolicyWithContextFunc.
func (mock *Route53APIMock) GetTrafficPolicyWithContext(in1 context.Context, in2 *route53.GetTrafficPolicyInput, in3 ...request.Option) (*route53.GetTrafficPolicyOutput, error) {
	if mock.GetTrafficPolicyWithContextFunc == nil {
		panic("Route53APIMock.GetTrafficPolicyWithContextFunc: method is nil but Route53API.GetTrafficPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetTrafficPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockGetTrafficPolicyWithContext.Lock()
	mock.calls.GetTrafficPolicyWithContext = append(mock.calls.GetTrafficPolicyWithContext, callInfo)
	mock.lockGetTrafficPolicyWithContext.Unlock()
	return mock.GetTrafficPolicyWithContextFunc(in1, in2, in3...)
}

// GetTrafficPolicyWithContextCalls gets all the calls that were made to GetTrafficPolicyWithContext.
// Check the length with:
//     len(mockedRoute53API.GetTrafficPolicyWithContextCalls())
func (mock *Route53APIMock) GetTrafficPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetTrafficPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetTrafficPolicyInput
		In3 []request.Option
	}
	mock.lockGetTrafficPolicyWithContext.RLock()
	calls = mock.calls.GetTrafficPolicyWithContext
	mock.lockGetTrafficPolicyWithContext.RUnlock()
	return calls
}

// ListGeoLocations calls ListGeoLocationsFunc.
func (mock *Route53APIMock) ListGeoLocations(in1 *route53.ListGeoLocationsInput) (*route53.ListGeoLocationsOutput, error) {
	if mock.ListGeoLocationsFunc == nil {
		panic("Route53APIMock.ListGeoLocationsFunc: method is nil but Route53API.ListGeoLocations was just called")
	}
	callInfo := struct {
		In1 *route53.ListGeoLocationsInput
	}{
		In1: in1,
	}
	mock.lockListGeoLocations.Lock()
	mock.calls.ListGeoLocations = append(mock.calls.ListGeoLocations, callInfo)
	mock.lockListGeoLocations.Unlock()
	return mock.ListGeoLocationsFunc(in1)
}

// ListGeoLocationsCalls gets all the calls that were made to ListGeoLocations.
// Check the length with:
//     len(mockedRoute53API.ListGeoLocationsCalls())
func (mock *Route53APIMock) ListGeoLocationsCalls() []struct {
	In1 *route53.ListGeoLocationsInput
} {
	var calls []struct {
		In1 *route53.ListGeoLocationsInput
	}
	mock.lockListGeoLocations.RLock()
	calls = mock.calls.ListGeoLocations
	mock.lockListGeoLocations.RUnlock()
	return calls
}

// ListGeoLocationsRequest calls ListGeoLocationsRequestFunc.
func (mock *Route53APIMock) ListGeoLocationsRequest(in1 *route53.ListGeoLocationsInput) (*request.Request, *route53.ListGeoLocationsOutput) {
	if mock.ListGeoLocationsRequestFunc == nil {
		panic("Route53APIMock.ListGeoLocationsRequestFunc: method is nil but Route53API.ListGeoLocationsRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListGeoLocationsInput
	}{
		In1: in1,
	}
	mock.lockListGeoLocationsRequest.Lock()
	mock.calls.ListGeoLocationsRequest = append(mock.calls.ListGeoLocationsRequest, callInfo)
	mock.lockListGeoLocationsRequest.Unlock()
	return mock.ListGeoLocationsRequestFunc(in1)
}

// ListGeoLocationsRequestCalls gets all the calls that were made to ListGeoLocationsRequest.
// Check the length with:
//     len(mockedRoute53API.ListGeoLocationsRequestCalls())
func (mock *Route53APIMock) ListGeoLocationsRequestCalls() []struct {
	In1 *route53.ListGeoLocationsInput
} {
	var calls []struct {
		In1 *route53.ListGeoLocationsInput
	}
	mock.lockListGeoLocationsRequest.RLock()
	calls = mock.calls.ListGeoLocationsRequest
	mock.lockListGeoLocationsRequest.RUnlock()
	return calls
}

// ListGeoLocationsWithContext calls ListGeoLocationsWithContextFunc.
func (mock *Route53APIMock) ListGeoLocationsWithContext(in1 context.Context, in2 *route53.ListGeoLocationsInput, in3 ...request.Option) (*route53.ListGeoLocationsOutput, error) {
	if mock.ListGeoLocationsWithContextFunc == nil {
		panic("Route53APIMock.ListGeoLocationsWithContextFunc: method is nil but Route53API.ListGeoLocationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListGeoLocationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListGeoLocationsWithContext.Lock()
	mock.calls.ListGeoLocationsWithContext = append(mock.calls.ListGeoLocationsWithContext, callInfo)
	mock.lockListGeoLocationsWithContext.Unlock()
	return mock.ListGeoLocationsWithContextFunc(in1, in2, in3...)
}

// ListGeoLocationsWithContextCalls gets all the calls that were made to ListGeoLocationsWithContext.
// Check the length with:
//     len(mockedRoute53API.ListGeoLocationsWithContextCalls())
func (mock *Route53APIMock) ListGeoLocationsWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListGeoLocationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListGeoLocationsInput
		In3 []request.Option
	}
	mock.lockListGeoLocationsWithContext.RLock()
	calls = mock.calls.ListGeoLocationsWithContext
	mock.lockListGeoLocationsWithContext.RUnlock()
	return calls
}

// ListHealthChecks calls ListHealthChecksFunc.
func (mock *Route53APIMock) ListHealthChecks(in1 *route53.ListHealthChecksInput) (*route53.ListHealthChecksOutput, error) {
	if mock.ListHealthChecksFunc == nil {
		panic("Route53APIMock.ListHealthChecksFunc: method is nil but Route53API.ListHealthChecks was just called")
	}
	callInfo := struct {
		In1 *route53.ListHealthChecksInput
	}{
		In1: in1,
	}
	mock.lockListHealthChecks.Lock()
	mock.calls.ListHealthChecks = append(mock.calls.ListHealthChecks, callInfo)
	mock.lockListHealthChecks.Unlock()
	return mock.ListHealthChecksFunc(in1)
}

// ListHealthChecksCalls gets all the calls that were made to ListHealthChecks.
// Check the length with:
//     len(mockedRoute53API.ListHealthChecksCalls())
func (mock *Route53APIMock) ListHealthChecksCalls() []struct {
	In1 *route53.ListHealthChecksInput
} {
	var calls []struct {
		In1 *route53.ListHealthChecksInput
	}
	mock.lockListHealthChecks.RLock()
	calls = mock.calls.ListHealthChecks
	mock.lockListHealthChecks.RUnlock()
	return calls
}

// ListHealthChecksPages calls ListHealthChecksPagesFunc.
func (mock *Route53APIMock) ListHealthChecksPages(in1 *route53.ListHealthChecksInput, in2 func(*route53.ListHealthChecksOutput, bool) bool) error {
	if mock.ListHealthChecksPagesFunc == nil {
		panic("Route53APIMock.ListHealthChecksPagesFunc: method is nil but Route53API.ListHealthChecksPages was just called")
	}
	callInfo := struct {
		In1 *route53.ListHealthChecksInput
		In2 func(*route53.ListHealthChecksOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	mock.lockListHealthChecksPages.Lock()
	mock.calls.ListHealthChecksPages = append(mock.calls.ListHealthChecksPages, callInfo)
	mock.lockListHealthChecksPages.Unlock()
	return mock.ListHealthChecksPagesFunc(in1, in2)
}

// ListHealthChecksPagesCalls gets all the calls that were made to ListHealthChecksPages.
// Check the length with:
//     len(mockedRoute53API.ListHealthChecksPagesCalls())
func (mock *Route53APIMock) ListHealthChecksPagesCalls() []struct {
	In1 *route53.ListHealthChecksInput
	In2 func(*route53.ListHealthChecksOutput, bool) bool
} {
	var calls []struct {
		In1 *route53.ListHealthChecksInput
		In2 func(*route53.ListHealthChecksOutput, bool) bool
	}
	mock.lockListHealthChecksPages.RLock()
	calls = mock.calls.ListHealthChecksPages
	mock.lockListHealthChecksPages.RUnlock()
	return calls
}

// ListHealthChecksPagesWithContext calls ListHealthChecksPagesWithContextFunc.
func (mock *Route53APIMock) ListHealthChecksPagesWithContext(in1 context.Context, in2 *route53.ListHealthChecksInput, in3 func(*route53.ListHealthChecksOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListHealthChecksPagesWithContextFunc == nil {
		panic("Route53APIMock.ListHealthChecksPagesWithContextFunc: method is nil but Route53API.ListHealthChecksPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListHealthChecksInput
		In3 func(*route53.ListHealthChecksOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	mock.lockListHealthChecksPagesWithContext.Lock()
	mock.calls.ListHealthChecksPagesWithContext = append(mock.calls.ListHealthChecksPagesWithContext, callInfo)
	mock.lockListHealthChecksPagesWithContext.Unlock()
	return mock.ListHealthChecksPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListHealthChecksPagesWithContextCalls gets all the calls that were made to ListHealthChecksPagesWithContext.
// Check the length with:
//     len(mockedRoute53API.ListHealthChecksPagesWithContextCalls())
func (mock *Route53APIMock) ListHealthChecksPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListHealthChecksInput
	In3 func(*route53.ListHealthChecksOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListHealthChecksInput
		In3 func(*route53.ListHealthChecksOutput, bool) bool
		In4 []request.Option
	}
	mock.lockListHealthChecksPagesWithContext.RLock()
	calls = mock.calls.ListHealthChecksPagesWithContext
	mock.lockListHealthChecksPagesWithContext.RUnlock()
	return calls
}

// ListHealthChecksRequest calls ListHealthChecksRequestFunc.
func (mock *Route53APIMock) ListHealthChecksRequest(in1 *route53.ListHealthChecksInput) (*request.Request, *route53.ListHealthChecksOutput) {
	if mock.ListHealthChecksRequestFunc == nil {
		panic("Route53APIMock.ListHealthChecksRequestFunc: method is nil but Route53API.ListHealthChecksRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListHealthChecksInput
	}{
		In1: in1,
	}
	mock.lockListHealthChecksRequest.Lock()
	mock.calls.ListHealthChecksRequest = append(mock.calls.ListHealthChecksRequest, callInfo)
	mock.lockListHealthChecksRequest.Unlock()
	return mock.ListHealthChecksRequestFunc(in1)
}

// ListHealthChecksRequestCalls gets all the calls that were made to ListHealthChecksRequest.
// Check the length with:
//     len(mockedRoute53API.ListHealthChecksRequestCalls())
func (mock *Route53APIMock) ListHealthChecksRequestCalls() []struct {
	In1 *route53.ListHealthChecksInput
} {
	var calls []struct {
		In1 *route53.ListHealthChecksInput
	}
	mock.lockListHealthChecksRequest.RLock()
	calls = mock.calls.ListHealthChecksRequest
	mock.lockListHealthChecksRequest.RUnlock()
	return calls
}

// ListHealthChecksWithContext calls ListHealthChecksWithContextFunc.
func (mock *Route53APIMock) ListHealthChecksWithContext(in1 context.Context, in2 *route53.ListHealthChecksInput, in3 ...request.Option) (*route53.ListHealthChecksOutput, error) {
	if mock.ListHealthChecksWithContextFunc == nil {
		panic("Route53APIMock.ListHealthChecksWithContextFunc: method is nil but Route53API.ListHealthChecksWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListHealthChecksInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListHealthChecksWithContext.Lock()
	mock.calls.ListHealthChecksWithContext = append(mock.calls.ListHealthChecksWithContext, callInfo)
	mock.lockListHealthChecksWithContext.Unlock()
	return mock.ListHealthChecksWithContextFunc(in1, in2, in3...)
}

// ListHealthChecksWithContextCalls gets all the calls that were made to ListHealthChecksWithContext.
// Check the length with:
//     len(mockedRoute53API.ListHealthChecksWithContextCalls())
func (mock *Route53APIMock) ListHealthChecksWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListHealthChecksInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListHealthChecksInput
		In3 []request.Option
	}
	mock.lockListHealthChecksWithContext.RLock()
	calls = mock.calls.ListHealthChecksWithContext
	mock.lockListHealthChecksWithContext.RUnlock()
	return calls
}

// ListHostedZones calls ListHostedZonesFunc.
func (mock *Route53APIMock) ListHostedZones(in1 *route53.ListHostedZonesInput) (*route53.ListHostedZonesOutput, error) {
	if mock.ListHostedZonesFunc == nil {
		panic("Route53APIMock.ListHostedZonesFunc: method is nil but Route53API.ListHostedZones was just called")
	}
	callInfo := struct {
		In1 *route53.ListHostedZonesInput
	}{
		In1: in1,
	}
	mock.lockListHostedZones.Lock()
	mock.calls.ListHostedZones = append(mock.calls.ListHostedZones, callInfo)
	mock.lockListHostedZones.Unlock()
	return mock.ListHostedZonesFunc(in1)
}

// ListHostedZonesCalls gets all the calls that were made to ListHostedZones.
// Check the length with:
//     len(mockedRoute53API.ListHostedZonesCalls())
func (mock *Route53APIMock) ListHostedZonesCalls() []struct {
	In1 *route53.ListHostedZonesInput
} {
	var calls []struct {
		In1 *route53.ListHostedZonesInput
	}
	mock.lockListHostedZones.RLock()
	calls = mock.calls.ListHostedZones
	mock.lockListHostedZones.RUnlock()
	return calls
}

// ListHostedZonesByName calls ListHostedZonesByNameFunc.
func (mock *Route53APIMock) ListHostedZonesByName(in1 *route53.ListHostedZonesByNameInput) (*route53.ListHostedZonesByNameOutput, error) {
	if mock.ListHostedZonesByNameFunc == nil {
		panic("Route53APIMock.ListHostedZonesByNameFunc: method is nil but Route53API.ListHostedZonesByName was just called")
	}
	callInfo := struct {
		In1 *route53.ListHostedZonesByNameInput
	}{
		In1: in1,
	}
	mock.lockListHostedZonesByName.Lock()
	mock.calls.ListHostedZonesByName = append(mock.calls.ListHostedZonesByName, callInfo)
	mock.lockListHostedZonesByName.Unlock()
	return mock.ListHostedZonesByNameFunc(in1)
}

// ListHostedZonesByNameCalls gets all the calls that were made to ListHostedZonesByName.
// Check the length with:
//     len(mockedRoute53API.ListHostedZonesByNameCalls())
func (mock *Route53APIMock) ListHostedZonesByNameCalls() []struct {
	In1 *route53.ListHostedZonesByNameInput
} {
	var calls []struct {
		In1 *route53.ListHostedZonesByNameInput
	}
	mock.lockListHostedZonesByName.RLock()
	calls = mock.calls.ListHostedZonesByName
	mock.lockListHostedZonesByName.RUnlock()
	return calls
}

// ListHostedZonesByNameRequest calls ListHostedZonesByNameRequestFunc.
func (mock *Route53APIMock) ListHostedZonesByNameRequest(in1 *route53.ListHostedZonesByNameInput) (*request.Request, *route53.ListHostedZonesByNameOutput) {
	if mock.ListHostedZonesByNameRequestFunc == nil {
		panic("Route53APIMock.ListHostedZonesByNameRequestFunc: method is nil but Route53API.ListHostedZonesByNameRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListHostedZonesByNameInput
	}{
		In1: in1,
	}
	mock.lockListHostedZonesByNameRequest.Lock()
	mock.calls.ListHostedZonesByNameRequest = append(mock.calls.ListHostedZonesByNameRequest, callInfo)
	mock.lockListHostedZonesByNameRequest.Unlock()
	return mock.ListHostedZonesByNameRequestFunc(in1)
}

// ListHostedZonesByNameRequestCalls gets all the calls that were made to ListHostedZonesByNameRequest.
// Check the length with:
//     len(mockedRoute53API.ListHostedZonesByNameRequestCalls())
func (mock *Route53APIMock) ListHostedZonesByNameRequestCalls() []struct {
	In1 *route53.ListHostedZonesByNameInput
} {
	var calls []struct {
		In1 *route53.ListHostedZonesByNameInput
	}
	mock.lockListHostedZonesByNameRequest.RLock()
	calls = mock.calls.ListHostedZonesByNameRequest
	mock.lockListHostedZonesByNameRequest.RUnlock()
	return calls
}

// ListHostedZonesByNameWithContext calls ListHostedZonesByNameWithContextFunc.
func (mock *Route53APIMock) ListHostedZonesByNameWithContext(in1 context.Context, in2 *route53.ListHostedZonesByNameInput, in3 ...request.Option) (*route53.ListHostedZonesByNameOutput, error) {
	if mock.ListHostedZonesByNameWithContextFunc == nil {
		panic("Route53APIMock.ListHostedZonesByNameWithContextFunc: method is nil but Route53API.ListHostedZonesByNameWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListHostedZonesByNameInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListHostedZonesByNameWithContext.Lock()
	mock.calls.ListHostedZonesByNameWithContext = append(mock.calls.ListHostedZonesByNameWithContext, callInfo)
	mock.lockListHostedZonesByNameWithContext.Unlock()
	return mock.ListHostedZonesByNameWithContextFunc(in1, in2, in3...)
}

// ListHostedZonesByNameWithContextCalls gets all the calls that were made to ListHostedZonesByNameWithContext.
// Check the length with:
//     len(mockedRoute53API.ListHostedZonesByNameWithContextCalls())
func (mock *Route53APIMock) ListHostedZonesByNameWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListHostedZonesByNameInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListHostedZonesByNameInput
		In3 []request.Option
	}
	mock.lockListHostedZonesByNameWithContext.RLock()
	calls = mock.calls.ListHostedZonesByNameWithContext
	mock.lockListHostedZonesByNameWithContext.RUnlock()
	return calls
}

// ListHostedZonesByVPC calls ListHostedZonesByVPCFunc.
func (mock *Route53APIMock) ListHostedZonesByVPC(in1 *route53.ListHostedZonesByVPCInput) (*route53.ListHostedZonesByVPCOutput, error) {
	if mock.ListHostedZonesByVPCFunc == nil {
		panic("Route53APIMock.ListHostedZonesByVPCFunc: method is nil but Route53API.ListHostedZonesByVPC was just called")
	}
	callInfo := struct {
		In1 *route53.ListHostedZonesByVPCInput
	}{
		In1: in1,
	}
	mock.lockListHostedZonesByVPC.Lock()
	mock.calls.ListHostedZonesByVPC = append(mock.calls.ListHostedZonesByVPC, callInfo)
	mock.lockListHostedZonesByVPC.Unlock()
	return mock.ListHostedZonesByVPCFunc(in1)
}

// ListHostedZonesByVPCCalls gets all the calls that were made to ListHostedZonesByVPC.
// Check the length with:
//     len(mockedRoute53API.ListHostedZonesByVPCCalls())
func (mock *Route53APIMock) ListHostedZonesByVPCCalls() []struct {
	In1 *route53.ListHostedZonesByVPCInput
} {
	var calls []struct {
		In1 *route53.ListHostedZonesByVPCInput
	}
	mock.lockListHostedZonesByVPC.RLock()
	calls = mock.calls.ListHostedZonesByVPC
	mock.lockListHostedZonesByVPC.RUnlock()
	return calls
}

// ListHostedZonesByVPCRequest calls ListHostedZonesByVPCRequestFunc.
func (mock *Route53APIMock) ListHostedZonesByVPCRequest(in1 *route53.ListHostedZonesByVPCInput) (*request.Request, *route53.ListHostedZonesByVPCOutput) {
	if mock.ListHostedZonesByVPCRequestFunc == nil {
		panic("Route53APIMock.ListHostedZonesByVPCRequestFunc: method is nil but Route53API.ListHostedZonesByVPCRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListHostedZonesByVPCInput
	}{
		In1: in1,
	}
	mock.lockListHostedZonesByVPCRequest.Lock()
	mock.calls.ListHostedZonesByVPCRequest = append(mock.calls.ListHostedZonesByVPCRequest, callInfo)
	mock.lockListHostedZonesByVPCRequest.Unlock()
	return mock.ListHostedZonesByVPCRequestFunc(in1)
}

// ListHostedZonesByVPCRequestCalls gets all the calls that were made to ListHostedZonesByVPCRequest.
// Check the length with:
//     len(mockedRoute53API.ListHostedZonesByVPCRequestCalls())
func (mock *Route53APIMock) ListHostedZonesByVPCRequestCalls() []struct {
	In1 *route53.ListHostedZonesByVPCInput
} {
	var calls []struct {
		In1 *route53.ListHostedZonesByVPCInput
	}
	mock.lockListHostedZonesByVPCRequest.RLock()
	calls = mock.calls.ListHostedZonesByVPCRequest
	mock.lockListHostedZonesByVPCRequest.RUnlock()
	return calls
}

// ListHostedZonesByVPCWithContext calls ListHostedZonesByVPCWithContextFunc.
func (mock *Route53APIMock) ListHostedZonesByVPCWithContext(in1 context.Context, in2 *route53.ListHostedZonesByVPCInput, in3 ...request.Option) (*route53.ListHostedZonesByVPCOutput, error) {
	if mock.ListHostedZonesByVPCWithContextFunc == nil {
		panic("Route53APIMock.ListHostedZonesByVPCWithContextFunc: method is nil but Route53API.ListHostedZonesByVPCWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListHostedZonesByVPCInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListHostedZonesByVPCWithContext.Lock()
	mock.calls.ListHostedZonesByVPCWithContext = append(mock.calls.ListHostedZonesByVPCWithContext, callInfo)
	mock.lockListHostedZonesByVPCWithContext.Unlock()
	return mock.ListHostedZonesByVPCWithContextFunc(in1, in2, in3...)
}

// ListHostedZonesByVPCWithContextCalls gets all the calls that were made to ListHostedZonesByVPCWithContext.
// Check the length with:
//     len(mockedRoute53API.ListHostedZonesByVPCWithContextCalls())
func (mock *Route53APIMock) ListHostedZonesByVPCWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListHostedZonesByVPCInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListHostedZonesByVPCInput
		In3 []request.Option
	}
	mock.lockListHostedZonesByVPCWithContext.RLock()
	calls = mock.calls.ListHostedZonesByVPCWithContext
	mock.lockListHostedZonesByVPCWithContext.RUnlock()
	return calls
}

// ListHostedZonesPages calls ListHostedZonesPagesFunc.
func (mock *Route53APIMock) ListHostedZonesPages(in1 *route53.ListHostedZonesInput, in2 func(*route53.ListHostedZonesOutput, bool) bool) error {
	if mock.ListHostedZonesPagesFunc == nil {
		panic("Route53APIMock.ListHostedZonesPagesFunc: method is nil but Route53API.ListHostedZonesPages was just called")
	}
	callInfo := struct {
		In1 *route53.ListHostedZonesInput
		In2 func(*route53.ListHostedZonesOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	mock.lockListHostedZonesPages.Lock()
	mock.calls.ListHostedZonesPages = append(mock.calls.ListHostedZonesPages, callInfo)
	mock.lockListHostedZonesPages.Unlock()
	return mock.ListHostedZonesPagesFunc(in1, in2)
}

// ListHostedZonesPagesCalls gets all the calls that were made to ListHostedZonesPages.
// Check the length with:
//     len(mockedRoute53API.ListHostedZonesPagesCalls())
func (mock *Route53APIMock) ListHostedZonesPagesCalls() []struct {
	In1 *route53.ListHostedZonesInput
	In2 func(*route53.ListHostedZonesOutput, bool) bool
} {
	var calls []struct {
		In1 *route53.ListHostedZonesInput
		In2 func(*route53.ListHostedZonesOutput, bool) bool
	}
	mock.lockListHostedZonesPages.RLock()
	calls = mock.calls.ListHostedZonesPages
	mock.lockListHostedZonesPages.RUnlock()
	return calls
}

// ListHostedZonesPagesWithContext calls ListHostedZonesPagesWithContextFunc.
func (mock *Route53APIMock) ListHostedZonesPagesWithContext(in1 context.Context, in2 *route53.ListHostedZonesInput, in3 func(*route53.ListHostedZonesOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListHostedZonesPagesWithContextFunc == nil {
		panic("Route53APIMock.ListHostedZonesPagesWithContextFunc: method is nil but Route53API.ListHostedZonesPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListHostedZonesInput
		In3 func(*route53.ListHostedZonesOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	mock.lockListHostedZonesPagesWithContext.Lock()
	mock.calls.ListHostedZonesPagesWithContext = append(mock.calls.ListHostedZonesPagesWithContext, callInfo)
	mock.lockListHostedZonesPagesWithContext.Unlock()
	return mock.ListHostedZonesPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListHostedZonesPagesWithContextCalls gets all the calls that were made to ListHostedZonesPagesWithContext.
// Check the length with:
//     len(mockedRoute53API.ListHostedZonesPagesWithContextCalls())
func (mock *Route53APIMock) ListHostedZonesPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListHostedZonesInput
	In3 func(*route53.ListHostedZonesOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListHostedZonesInput
		In3 func(*route53.ListHostedZonesOutput, bool) bool
		In4 []request.Option
	}
	mock.lockListHostedZonesPagesWithContext.RLock()
	calls = mock.calls.ListHostedZonesPagesWithContext
	mock.lockListHostedZonesPagesWithContext.RUnlock()
	return calls
}

// ListHostedZonesRequest calls ListHostedZonesRequestFunc.
func (mock *Route53APIMock) ListHostedZonesRequest(in1 *route53.ListHostedZonesInput) (*request.Request, *route53.ListHostedZonesOutput) {
	if mock.ListHostedZonesRequestFunc == nil {
		panic("Route53APIMock.ListHostedZonesRequestFunc: method is nil but Route53API.ListHostedZonesRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListHostedZonesInput
	}{
		In1: in1,
	}
	mock.lockListHostedZonesRequest.Lock()
	mock.calls.ListHostedZonesRequest = append(mock.calls.ListHostedZonesRequest, callInfo)
	mock.lockListHostedZonesRequest.Unlock()
	return mock.ListHostedZonesRequestFunc(in1)
}

// ListHostedZonesRequestCalls gets all the calls that were made to ListHostedZonesRequest.
// Check the length with:
//     len(mockedRoute53API.ListHostedZonesRequestCalls())
func (mock *Route53APIMock) ListHostedZonesRequestCalls() []struct {
	In1 *route53.ListHostedZonesInput
} {
	var calls []struct {
		In1 *route53.ListHostedZonesInput
	}
	mock.lockListHostedZonesRequest.RLock()
	calls = mock.calls.ListHostedZonesRequest
	mock.lockListHostedZonesRequest.RUnlock()
	return calls
}

// ListHostedZonesWithContext calls ListHostedZonesWithContextFunc.
func (mock *Route53APIMock) ListHostedZonesWithContext(in1 context.Context, in2 *route53.ListHostedZonesInput, in3 ...request.Option) (*route53.ListHostedZonesOutput, error) {
	if mock.ListHostedZonesWithContextFunc == nil {
		panic("Route53APIMock.ListHostedZonesWithContextFunc: method is nil but Route53API.ListHostedZonesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListHostedZonesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListHostedZonesWithContext.Lock()
	mock.calls.ListHostedZonesWithContext = append(mock.calls.ListHostedZonesWithContext, callInfo)
	mock.lockListHostedZonesWithContext.Unlock()
	return mock.ListHostedZonesWithContextFunc(in1, in2, in3...)
}

// ListHostedZonesWithContextCalls gets all the calls that were made to ListHostedZonesWithContext.
// Check the length with:
//     len(mockedRoute53API.ListHostedZonesWithContextCalls())
func (mock *Route53APIMock) ListHostedZonesWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListHostedZonesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListHostedZonesInput
		In3 []request.Option
	}
	mock.lockListHostedZonesWithContext.RLock()
	calls = mock.calls.ListHostedZonesWithContext
	mock.lockListHostedZonesWithContext.RUnlock()
	return calls
}

// ListQueryLoggingConfigs calls ListQueryLoggingConfigsFunc.
func (mock *Route53APIMock) ListQueryLoggingConfigs(in1 *route53.ListQueryLoggingConfigsInput) (*route53.ListQueryLoggingConfigsOutput, error) {
	if mock.ListQueryLoggingConfigsFunc == nil {
		panic("Route53APIMock.ListQueryLoggingConfigsFunc: method is nil but Route53API.ListQueryLoggingConfigs was just called")
	}
	callInfo := struct {
		In1 *route53.ListQueryLoggingConfigsInput
	}{
		In1: in1,
	}
	mock.lockListQueryLoggingConfigs.Lock()
	mock.calls.ListQueryLoggingConfigs = append(mock.calls.ListQueryLoggingConfigs, callInfo)
	mock.lockListQueryLoggingConfigs.Unlock()
	return mock.ListQueryLoggingConfigsFunc(in1)
}

// ListQueryLoggingConfigsCalls gets all the calls that were made to ListQueryLoggingConfigs.
// Check the length with:
//     len(mockedRoute53API.ListQueryLoggingConfigsCalls())
func (mock *Route53APIMock) ListQueryLoggingConfigsCalls() []struct {
	In1 *route53.ListQueryLoggingConfigsInput
} {
	var calls []struct {
		In1 *route53.ListQueryLoggingConfigsInput
	}
	mock.lockListQueryLoggingConfigs.RLock()
	calls = mock.calls.ListQueryLoggingConfigs
	mock.lockListQueryLoggingConfigs.RUnlock()
	return calls
}

// ListQueryLoggingConfigsPages calls ListQueryLoggingConfigsPagesFunc.
func (mock *Route53APIMock) ListQueryLoggingConfigsPages(in1 *route53.ListQueryLoggingConfigsInput, in2 func(*route53.ListQueryLoggingConfigsOutput, bool) bool) error {
	if mock.ListQueryLoggingConfigsPagesFunc == nil {
		panic("Route53APIMock.ListQueryLoggingConfigsPagesFunc: method is nil but Route53API.ListQueryLoggingConfigsPages was just called")
	}
	callInfo := struct {
		In1 *route53.ListQueryLoggingConfigsInput
		In2 func(*route53.ListQueryLoggingConfigsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	mock.lockListQueryLoggingConfigsPages.Lock()
	mock.calls.ListQueryLoggingConfigsPages = append(mock.calls.ListQueryLoggingConfigsPages, callInfo)
	mock.lockListQueryLoggingConfigsPages.Unlock()
	return mock.ListQueryLoggingConfigsPagesFunc(in1, in2)
}

// ListQueryLoggingConfigsPagesCalls gets all the calls that were made to ListQueryLoggingConfigsPages.
// Check the length with:
//     len(mockedRoute53API.ListQueryLoggingConfigsPagesCalls())
func (mock *Route53APIMock) ListQueryLoggingConfigsPagesCalls() []struct {
	In1 *route53.ListQueryLoggingConfigsInput
	In2 func(*route53.ListQueryLoggingConfigsOutput, bool) bool
} {
	var calls []struct {
		In1 *route53.ListQueryLoggingConfigsInput
		In2 func(*route53.ListQueryLoggingConfigsOutput, bool) bool
	}
	mock.lockListQueryLoggingConfigsPages.RLock()
	calls = mock.calls.ListQueryLoggingConfigsPages
	mock.lockListQueryLoggingConfigsPages.RUnlock()
	return calls
}

// ListQueryLoggingConfigsPagesWithContext calls ListQueryLoggingConfigsPagesWithContextFunc.
func (mock *Route53APIMock) ListQueryLoggingConfigsPagesWithContext(in1 context.Context, in2 *route53.ListQueryLoggingConfigsInput, in3 func(*route53.ListQueryLoggingConfigsOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListQueryLoggingConfigsPagesWithContextFunc == nil {
		panic("Route53APIMock.ListQueryLoggingConfigsPagesWithContextFunc: method is nil but Route53API.ListQueryLoggingConfigsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListQueryLoggingConfigsInput
		In3 func(*route53.ListQueryLoggingConfigsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	mock.lockListQueryLoggingConfigsPagesWithContext.Lock()
	mock.calls.ListQueryLoggingConfigsPagesWithContext = append(mock.calls.ListQueryLoggingConfigsPagesWithContext, callInfo)
	mock.lockListQueryLoggingConfigsPagesWithContext.Unlock()
	return mock.ListQueryLoggingConfigsPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListQueryLoggingConfigsPagesWithContextCalls gets all the calls that were made to ListQueryLoggingConfigsPagesWithContext.
// Check the length with:
//     len(mockedRoute53API.ListQueryLoggingConfigsPagesWithContextCalls())
func (mock *Route53APIMock) ListQueryLoggingConfigsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListQueryLoggingConfigsInput
	In3 func(*route53.ListQueryLoggingConfigsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListQueryLoggingConfigsInput
		In3 func(*route53.ListQueryLoggingConfigsOutput, bool) bool
		In4 []request.Option
	}
	mock.lockListQueryLoggingConfigsPagesWithContext.RLock()
	calls = mock.calls.ListQueryLoggingConfigsPagesWithContext
	mock.lockListQueryLoggingConfigsPagesWithContext.RUnlock()
	return calls
}

// ListQueryLoggingConfigsRequest calls ListQueryLoggingConfigsRequestFunc.
func (mock *Route53APIMock) ListQueryLoggingConfigsRequest(in1 *route53.ListQueryLoggingConfigsInput) (*request.Request, *route53.ListQueryLoggingConfigsOutput) {
	if mock.ListQueryLoggingConfigsRequestFunc == nil {
		panic("Route53APIMock.ListQueryLoggingConfigsRequestFunc: method is nil but Route53API.ListQueryLoggingConfigsRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListQueryLoggingConfigsInput
	}{
		In1: in1,
	}
	mock.lockListQueryLoggingConfigsRequest.Lock()
	mock.calls.ListQueryLoggingConfigsRequest = append(mock.calls.ListQueryLoggingConfigsRequest, callInfo)
	mock.lockListQueryLoggingConfigsRequest.Unlock()
	return mock.ListQueryLoggingConfigsRequestFunc(in1)
}

// ListQueryLoggingConfigsRequestCalls gets all the calls that were made to ListQueryLoggingConfigsRequest.
// Check the length with:
//     len(mockedRoute53API.ListQueryLoggingConfigsRequestCalls())
func (mock *Route53APIMock) ListQueryLoggingConfigsRequestCalls() []struct {
	In1 *route53.ListQueryLoggingConfigsInput
} {
	var calls []struct {
		In1 *route53.ListQueryLoggingConfigsInput
	}
	mock.lockListQueryLoggingConfigsRequest.RLock()
	calls = mock.calls.ListQueryLoggingConfigsRequest
	mock.lockListQueryLoggingConfigsRequest.RUnlock()
	return calls
}

// ListQueryLoggingConfigsWithContext calls ListQueryLoggingConfigsWithContextFunc.
func (mock *Route53APIMock) ListQueryLoggingConfigsWithContext(in1 context.Context, in2 *route53.ListQueryLoggingConfigsInput, in3 ...request.Option) (*route53.ListQueryLoggingConfigsOutput, error) {
	if mock.ListQueryLoggingConfigsWithContextFunc == nil {
		panic("Route53APIMock.ListQueryLoggingConfigsWithContextFunc: method is nil but Route53API.ListQueryLoggingConfigsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListQueryLoggingConfigsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListQueryLoggingConfigsWithContext.Lock()
	mock.calls.ListQueryLoggingConfigsWithContext = append(mock.calls.ListQueryLoggingConfigsWithContext, callInfo)
	mock.lockListQueryLoggingConfigsWithContext.Unlock()
	return mock.ListQueryLoggingConfigsWithContextFunc(in1, in2, in3...)
}

// ListQueryLoggingConfigsWithContextCalls gets all the calls that were made to ListQueryLoggingConfigsWithContext.
// Check the length with:
//     len(mockedRoute53API.ListQueryLoggingConfigsWithContextCalls())
func (mock *Route53APIMock) ListQueryLoggingConfigsWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListQueryLoggingConfigsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListQueryLoggingConfigsInput
		In3 []request.Option
	}
	mock.lockListQueryLoggingConfigsWithContext.RLock()
	calls = mock.calls.ListQueryLoggingConfigsWithContext
	mock.lockListQueryLoggingConfigsWithContext.RUnlock()
	return calls
}

// ListResourceRecordSets calls ListResourceRecordSetsFunc.
func (mock *Route53APIMock) ListResourceRecordSets(in1 *route53.ListResourceRecordSetsInput) (*route53.ListResourceRecordSetsOutput, error) {
	if mock.ListResourceRecordSetsFunc == nil {
		panic("Route53APIMock.ListResourceRecordSetsFunc: method is nil but Route53API.ListResourceRecordSets was just called")
	}
	callInfo := struct {
		In1 *route53.ListResourceRecordSetsInput
	}{
		In1: in1,
	}
	mock.lockListResourceRecordSets.Lock()
	mock.calls.ListResourceRecordSets = append(mock.calls.ListResourceRecordSets, callInfo)
	mock.lockListResourceRecordSets.Unlock()
	return mock.ListResourceRecordSetsFunc(in1)
}

// ListResourceRecordSetsCalls gets all the calls that were made to ListResourceRecordSets.
// Check the length with:
//     len(mockedRoute53API.ListResourceRecordSetsCalls())
func (mock *Route53APIMock) ListResourceRecordSetsCalls() []struct {
	In1 *route53.ListResourceRecordSetsInput
} {
	var calls []struct {
		In1 *route53.ListResourceRecordSetsInput
	}
	mock.lockListResourceRecordSets.RLock()
	calls = mock.calls.ListResourceRecordSets
	mock.lockListResourceRecordSets.RUnlock()
	return calls
}

// ListResourceRecordSetsPages calls ListResourceRecordSetsPagesFunc.
func (mock *Route53APIMock) ListResourceRecordSetsPages(in1 *route53.ListResourceRecordSetsInput, in2 func(*route53.ListResourceRecordSetsOutput, bool) bool) error {
	if mock.ListResourceRecordSetsPagesFunc == nil {
		panic("Route53APIMock.ListResourceRecordSetsPagesFunc: method is nil but Route53API.ListResourceRecordSetsPages was just called")
	}
	callInfo := struct {
		In1 *route53.ListResourceRecordSetsInput
		In2 func(*route53.ListResourceRecordSetsOutput, bool) bool
	}{
		In1: in1,
		In2: in2,
	}
	mock.lockListResourceRecordSetsPages.Lock()
	mock.calls.ListResourceRecordSetsPages = append(mock.calls.ListResourceRecordSetsPages, callInfo)
	mock.lockListResourceRecordSetsPages.Unlock()
	return mock.ListResourceRecordSetsPagesFunc(in1, in2)
}

// ListResourceRecordSetsPagesCalls gets all the calls that were made to ListResourceRecordSetsPages.
// Check the length with:
//     len(mockedRoute53API.ListResourceRecordSetsPagesCalls())
func (mock *Route53APIMock) ListResourceRecordSetsPagesCalls() []struct {
	In1 *route53.ListResourceRecordSetsInput
	In2 func(*route53.ListResourceRecordSetsOutput, bool) bool
} {
	var calls []struct {
		In1 *route53.ListResourceRecordSetsInput
		In2 func(*route53.ListResourceRecordSetsOutput, bool) bool
	}
	mock.lockListResourceRecordSetsPages.RLock()
	calls = mock.calls.ListResourceRecordSetsPages
	mock.lockListResourceRecordSetsPages.RUnlock()
	return calls
}

// ListResourceRecordSetsPagesWithContext calls ListResourceRecordSetsPagesWithContextFunc.
func (mock *Route53APIMock) ListResourceRecordSetsPagesWithContext(in1 context.Context, in2 *route53.ListResourceRecordSetsInput, in3 func(*route53.ListResourceRecordSetsOutput, bool) bool, in4 ...request.Option) error {
	if mock.ListResourceRecordSetsPagesWithContextFunc == nil {
		panic("Route53APIMock.ListResourceRecordSetsPagesWithContextFunc: method is nil but Route53API.ListResourceRecordSetsPagesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListResourceRecordSetsInput
		In3 func(*route53.ListResourceRecordSetsOutput, bool) bool
		In4 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
		In4: in4,
	}
	mock.lockListResourceRecordSetsPagesWithContext.Lock()
	mock.calls.ListResourceRecordSetsPagesWithContext = append(mock.calls.ListResourceRecordSetsPagesWithContext, callInfo)
	mock.lockListResourceRecordSetsPagesWithContext.Unlock()
	return mock.ListResourceRecordSetsPagesWithContextFunc(in1, in2, in3, in4...)
}

// ListResourceRecordSetsPagesWithContextCalls gets all the calls that were made to ListResourceRecordSetsPagesWithContext.
// Check the length with:
//     len(mockedRoute53API.ListResourceRecordSetsPagesWithContextCalls())
func (mock *Route53APIMock) ListResourceRecordSetsPagesWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListResourceRecordSetsInput
	In3 func(*route53.ListResourceRecordSetsOutput, bool) bool
	In4 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListResourceRecordSetsInput
		In3 func(*route53.ListResourceRecordSetsOutput, bool) bool
		In4 []request.Option
	}
	mock.lockListResourceRecordSetsPagesWithContext.RLock()
	calls = mock.calls.ListResourceRecordSetsPagesWithContext
	mock.lockListResourceRecordSetsPagesWithContext.RUnlock()
	return calls
}

// ListResourceRecordSetsRequest calls ListResourceRecordSetsRequestFunc.
func (mock *Route53APIMock) ListResourceRecordSetsRequest(in1 *route53.ListResourceRecordSetsInput) (*request.Request, *route53.ListResourceRecordSetsOutput) {
	if mock.ListResourceRecordSetsRequestFunc == nil {
		panic("Route53APIMock.ListResourceRecordSetsRequestFunc: method is nil but Route53API.ListResourceRecordSetsRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListResourceRecordSetsInput
	}{
		In1: in1,
	}
	mock.lockListResourceRecordSetsRequest.Lock()
	mock.calls.ListResourceRecordSetsRequest = append(mock.calls.ListResourceRecordSetsRequest, callInfo)
	mock.lockListResourceRecordSetsRequest.Unlock()
	return mock.ListResourceRecordSetsRequestFunc(in1)
}

// ListResourceRecordSetsRequestCalls gets all the calls that were made to ListResourceRecordSetsRequest.
// Check the length with:
//     len(mockedRoute53API.ListResourceRecordSetsRequestCalls())
func (mock *Route53APIMock) ListResourceRecordSetsRequestCalls() []struct {
	In1 *route53.ListResourceRecordSetsInput
} {
	var calls []struct {
		In1 *route53.ListResourceRecordSetsInput
	}
	mock.lockListResourceRecordSetsRequest.RLock()
	calls = mock.calls.ListResourceRecordSetsRequest
	mock.lockListResourceRecordSetsRequest.RUnlock()
	return calls
}

// ListResourceRecordSetsWithContext calls ListResourceRecordSetsWithContextFunc.
func (mock *Route53APIMock) ListResourceRecordSetsWithContext(in1 context.Context, in2 *route53.ListResourceRecordSetsInput, in3 ...request.Option) (*route53.ListResourceRecordSetsOutput, error) {
	if mock.ListResourceRecordSetsWithContextFunc == nil {
		panic("Route53APIMock.ListResourceRecordSetsWithContextFunc: method is nil but Route53API.ListResourceRecordSetsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListResourceRecordSetsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListResourceRecordSetsWithContext.Lock()
	mock.calls.ListResourceRecordSetsWithContext = append(mock.calls.ListResourceRecordSetsWithContext, callInfo)
	mock.lockListResourceRecordSetsWithContext.Unlock()
	return mock.ListResourceRecordSetsWithContextFunc(in1, in2, in3...)
}

// ListResourceRecordSetsWithContextCalls gets all the calls that were made to ListResourceRecordSetsWithContext.
// Check the length with:
//     len(mockedRoute53API.ListResourceRecordSetsWithContextCalls())
func (mock *Route53APIMock) ListResourceRecordSetsWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListResourceRecordSetsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListResourceRecordSetsInput
		In3 []request.Option
	}
	mock.lockListResourceRecordSetsWithContext.RLock()
	calls = mock.calls.ListResourceRecordSetsWithContext
	mock.lockListResourceRecordSetsWithContext.RUnlock()
	return calls
}

// ListReusableDelegationSets calls ListReusableDelegationSetsFunc.
func (mock *Route53APIMock) ListReusableDelegationSets(in1 *route53.ListReusableDelegationSetsInput) (*route53.ListReusableDelegationSetsOutput, error) {
	if mock.ListReusableDelegationSetsFunc == nil {
		panic("Route53APIMock.ListReusableDelegationSetsFunc: method is nil but Route53API.ListReusableDelegationSets was just called")
	}
	callInfo := struct {
		In1 *route53.ListReusableDelegationSetsInput
	}{
		In1: in1,
	}
	mock.lockListReusableDelegationSets.Lock()
	mock.calls.ListReusableDelegationSets = append(mock.calls.ListReusableDelegationSets, callInfo)
	mock.lockListReusableDelegationSets.Unlock()
	return mock.ListReusableDelegationSetsFunc(in1)
}

// ListReusableDelegationSetsCalls gets all the calls that were made to ListReusableDelegationSets.
// Check the length with:
//     len(mockedRoute53API.ListReusableDelegationSetsCalls())
func (mock *Route53APIMock) ListReusableDelegationSetsCalls() []struct {
	In1 *route53.ListReusableDelegationSetsInput
} {
	var calls []struct {
		In1 *route53.ListReusableDelegationSetsInput
	}
	mock.lockListReusableDelegationSets.RLock()
	calls = mock.calls.ListReusableDelegationSets
	mock.lockListReusableDelegationSets.RUnlock()
	return calls
}

// ListReusableDelegationSetsRequest calls ListReusableDelegationSetsRequestFunc.
func (mock *Route53APIMock) ListReusableDelegationSetsRequest(in1 *route53.ListReusableDelegationSetsInput) (*request.Request, *route53.ListReusableDelegationSetsOutput) {
	if mock.ListReusableDelegationSetsRequestFunc == nil {
		panic("Route53APIMock.ListReusableDelegationSetsRequestFunc: method is nil but Route53API.ListReusableDelegationSetsRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListReusableDelegationSetsInput
	}{
		In1: in1,
	}
	mock.lockListReusableDelegationSetsRequest.Lock()
	mock.calls.ListReusableDelegationSetsRequest = append(mock.calls.ListReusableDelegationSetsRequest, callInfo)
	mock.lockListReusableDelegationSetsRequest.Unlock()
	return mock.ListReusableDelegationSetsRequestFunc(in1)
}

// ListReusableDelegationSetsRequestCalls gets all the calls that were made to ListReusableDelegationSetsRequest.
// Check the length with:
//     len(mockedRoute53API.ListReusableDelegationSetsRequestCalls())
func (mock *Route53APIMock) ListReusableDelegationSetsRequestCalls() []struct {
	In1 *route53.ListReusableDelegationSetsInput
} {
	var calls []struct {
		In1 *route53.ListReusableDelegationSetsInput
	}
	mock.lockListReusableDelegationSetsRequest.RLock()
	calls = mock.calls.ListReusableDelegationSetsRequest
	mock.lockListReusableDelegationSetsRequest.RUnlock()
	return calls
}

// ListReusableDelegationSetsWithContext calls ListReusableDelegationSetsWithContextFunc.
func (mock *Route53APIMock) ListReusableDelegationSetsWithContext(in1 context.Context, in2 *route53.ListReusableDelegationSetsInput, in3 ...request.Option) (*route53.ListReusableDelegationSetsOutput, error) {
	if mock.ListReusableDelegationSetsWithContextFunc == nil {
		panic("Route53APIMock.ListReusableDelegationSetsWithContextFunc: method is nil but Route53API.ListReusableDelegationSetsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListReusableDelegationSetsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListReusableDelegationSetsWithContext.Lock()
	mock.calls.ListReusableDelegationSetsWithContext = append(mock.calls.ListReusableDelegationSetsWithContext, callInfo)
	mock.lockListReusableDelegationSetsWithContext.Unlock()
	return mock.ListReusableDelegationSetsWithContextFunc(in1, in2, in3...)
}

// ListReusableDelegationSetsWithContextCalls gets all the calls that were made to ListReusableDelegationSetsWithContext.
// Check the length with:
//     len(mockedRoute53API.ListReusableDelegationSetsWithContextCalls())
func (mock *Route53APIMock) ListReusableDelegationSetsWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListReusableDelegationSetsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListReusableDelegationSetsInput
		In3 []request.Option
	}
	mock.lockListReusableDelegationSetsWithContext.RLock()
	calls = mock.calls.ListReusableDelegationSetsWithContext
	mock.lockListReusableDelegationSetsWithContext.RUnlock()
	return calls
}

// ListTagsForResource calls ListTagsForResourceFunc.
func (mock *Route53APIMock) ListTagsForResource(in1 *route53.ListTagsForResourceInput) (*route53.ListTagsForResourceOutput, error) {
	if mock.ListTagsForResourceFunc == nil {
		panic("Route53APIMock.ListTagsForResourceFunc: method is nil but Route53API.ListTagsForResource was just called")
	}
	callInfo := struct {
		In1 *route53.ListTagsForResourceInput
	}{
		In1: in1,
	}
	mock.lockListTagsForResource.Lock()
	mock.calls.ListTagsForResource = append(mock.calls.ListTagsForResource, callInfo)
	mock.lockListTagsForResource.Unlock()
	return mock.ListTagsForResourceFunc(in1)
}

// ListTagsForResourceCalls gets all the calls that were made to ListTagsForResource.
// Check the length with:
//     len(mockedRoute53API.ListTagsForResourceCalls())
func (mock *Route53APIMock) ListTagsForResourceCalls() []struct {
	In1 *route53.ListTagsForResourceInput
} {
	var calls []struct {
		In1 *route53.ListTagsForResourceInput
	}
	mock.lockListTagsForResource.RLock()
	calls = mock.calls.ListTagsForResource
	mock.lockListTagsForResource.RUnlock()
	return calls
}

// ListTagsForResourceRequest calls ListTagsForResourceRequestFunc.
func (mock *Route53APIMock) ListTagsForResourceRequest(in1 *route53.ListTagsForResourceInput) (*request.Request, *route53.ListTagsForResourceOutput) {
	if mock.ListTagsForResourceRequestFunc == nil {
		panic("Route53APIMock.ListTagsForResourceRequestFunc: method is nil but Route53API.ListTagsForResourceRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListTagsForResourceInput
	}{
		In1: in1,
	}
	mock.lockListTagsForResourceRequest.Lock()
	mock.calls.ListTagsForResourceRequest = append(mock.calls.ListTagsForResourceRequest, callInfo)
	mock.lockListTagsForResourceRequest.Unlock()
	return mock.ListTagsForResourceRequestFunc(in1)
}

// ListTagsForResourceRequestCalls gets all the calls that were made to ListTagsForResourceRequest.
// Check the length with:
//     len(mockedRoute53API.ListTagsForResourceRequestCalls())
func (mock *Route53APIMock) ListTagsForResourceRequestCalls() []struct {
	In1 *route53.ListTagsForResourceInput
} {
	var calls []struct {
		In1 *route53.ListTagsForResourceInput
	}
	mock.lockListTagsForResourceRequest.RLock()
	calls = mock.calls.ListTagsForResourceRequest
	mock.lockListTagsForResourceRequest.RUnlock()
	return calls
}

// ListTagsForResourceWithContext calls ListTagsForResourceWithContextFunc.
func (mock *Route53APIMock) ListTagsForResourceWithContext(in1 context.Context, in2 *route53.ListTagsForResourceInput, in3 ...request.Option) (*route53.ListTagsForResourceOutput, error) {
	if mock.ListTagsForResourceWithContextFunc == nil {
		panic("Route53APIMock.ListTagsForResourceWithContextFunc: method is nil but Route53API.ListTagsForResourceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListTagsForResourceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListTagsForResourceWithContext.Lock()
	mock.calls.ListTagsForResourceWithContext = append(mock.calls.ListTagsForResourceWithContext, callInfo)
	mock.lockListTagsForResourceWithContext.Unlock()
	return mock.ListTagsForResourceWithContextFunc(in1, in2, in3...)
}

// ListTagsForResourceWithContextCalls gets all the calls that were made to ListTagsForResourceWithContext.
// Check the length with:
//     len(mockedRoute53API.ListTagsForResourceWithContextCalls())
func (mock *Route53APIMock) ListTagsForResourceWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListTagsForResourceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListTagsForResourceInput
		In3 []request.Option
	}
	mock.lockListTagsForResourceWithContext.RLock()
	calls = mock.calls.ListTagsForResourceWithContext
	mock.lockListTagsForResourceWithContext.RUnlock()
	return calls
}

// ListTagsForResources calls ListTagsForResourcesFunc.
func (mock *Route53APIMock) ListTagsForResources(in1 *route53.ListTagsForResourcesInput) (*route53.ListTagsForResourcesOutput, error) {
	if mock.ListTagsForResourcesFunc == nil {
		panic("Route53APIMock.ListTagsForResourcesFunc: method is nil but Route53API.ListTagsForResources was just called")
	}
	callInfo := struct {
		In1 *route53.ListTagsForResourcesInput
	}{
		In1: in1,
	}
	mock.lockListTagsForResources.Lock()
	mock.calls.ListTagsForResources = append(mock.calls.ListTagsForResources, callInfo)
	mock.lockListTagsForResources.Unlock()
	return mock.ListTagsForResourcesFunc(in1)
}

// ListTagsForResourcesCalls gets all the calls that were made to ListTagsForResources.
// Check the length with:
//     len(mockedRoute53API.ListTagsForResourcesCalls())
func (mock *Route53APIMock) ListTagsForResourcesCalls() []struct {
	In1 *route53.ListTagsForResourcesInput
} {
	var calls []struct {
		In1 *route53.ListTagsForResourcesInput
	}
	mock.lockListTagsForResources.RLock()
	calls = mock.calls.ListTagsForResources
	mock.lockListTagsForResources.RUnlock()
	return calls
}

// ListTagsForResourcesRequest calls ListTagsForResourcesRequestFunc.
func (mock *Route53APIMock) ListTagsForResourcesRequest(in1 *route53.ListTagsForResourcesInput) (*request.Request, *route53.ListTagsForResourcesOutput) {
	if mock.ListTagsForResourcesRequestFunc == nil {
		panic("Route53APIMock.ListTagsForResourcesRequestFunc: method is nil but Route53API.ListTagsForResourcesRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListTagsForResourcesInput
	}{
		In1: in1,
	}
	mock.lockListTagsForResourcesRequest.Lock()
	mock.calls.ListTagsForResourcesRequest = append(mock.calls.ListTagsForResourcesRequest, callInfo)
	mock.lockListTagsForResourcesRequest.Unlock()
	return mock.ListTagsForResourcesRequestFunc(in1)
}

// ListTagsForResourcesRequestCalls gets all the calls that were made to ListTagsForResourcesRequest.
// Check the length with:
//     len(mockedRoute53API.ListTagsForResourcesRequestCalls())
func (mock *Route53APIMock) ListTagsForResourcesRequestCalls() []struct {
	In1 *route53.ListTagsForResourcesInput
} {
	var calls []struct {
		In1 *route53.ListTagsForResourcesInput
	}
	mock.lockListTagsForResourcesRequest.RLock()
	calls = mock.calls.ListTagsForResourcesRequest
	mock.lockListTagsForResourcesRequest.RUnlock()
	return calls
}

// ListTagsForResourcesWithContext calls ListTagsForResourcesWithContextFunc.
func (mock *Route53APIMock) ListTagsForResourcesWithContext(in1 context.Context, in2 *route53.ListTagsForResourcesInput, in3 ...request.Option) (*route53.ListTagsForResourcesOutput, error) {
	if mock.ListTagsForResourcesWithContextFunc == nil {
		panic("Route53APIMock.ListTagsForResourcesWithContextFunc: method is nil but Route53API.ListTagsForResourcesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListTagsForResourcesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListTagsForResourcesWithContext.Lock()
	mock.calls.ListTagsForResourcesWithContext = append(mock.calls.ListTagsForResourcesWithContext, callInfo)
	mock.lockListTagsForResourcesWithContext.Unlock()
	return mock.ListTagsForResourcesWithContextFunc(in1, in2, in3...)
}

// ListTagsForResourcesWithContextCalls gets all the calls that were made to ListTagsForResourcesWithContext.
// Check the length with:
//     len(mockedRoute53API.ListTagsForResourcesWithContextCalls())
func (mock *Route53APIMock) ListTagsForResourcesWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListTagsForResourcesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListTagsForResourcesInput
		In3 []request.Option
	}
	mock.lockListTagsForResourcesWithContext.RLock()
	calls = mock.calls.ListTagsForResourcesWithContext
	mock.lockListTagsForResourcesWithContext.RUnlock()
	return calls
}

// ListTrafficPolicies calls ListTrafficPoliciesFunc.
func (mock *Route53APIMock) ListTrafficPolicies(in1 *route53.ListTrafficPoliciesInput) (*route53.ListTrafficPoliciesOutput, error) {
	if mock.ListTrafficPoliciesFunc == nil {
		panic("Route53APIMock.ListTrafficPoliciesFunc: method is nil but Route53API.ListTrafficPolicies was just called")
	}
	callInfo := struct {
		In1 *route53.ListTrafficPoliciesInput
	}{
		In1: in1,
	}
	mock.lockListTrafficPolicies.Lock()
	mock.calls.ListTrafficPolicies = append(mock.calls.ListTrafficPolicies, callInfo)
	mock.lockListTrafficPolicies.Unlock()
	return mock.ListTrafficPoliciesFunc(in1)
}

// ListTrafficPoliciesCalls gets all the calls that were made to ListTrafficPolicies.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPoliciesCalls())
func (mock *Route53APIMock) ListTrafficPoliciesCalls() []struct {
	In1 *route53.ListTrafficPoliciesInput
} {
	var calls []struct {
		In1 *route53.ListTrafficPoliciesInput
	}
	mock.lockListTrafficPolicies.RLock()
	calls = mock.calls.ListTrafficPolicies
	mock.lockListTrafficPolicies.RUnlock()
	return calls
}

// ListTrafficPoliciesRequest calls ListTrafficPoliciesRequestFunc.
func (mock *Route53APIMock) ListTrafficPoliciesRequest(in1 *route53.ListTrafficPoliciesInput) (*request.Request, *route53.ListTrafficPoliciesOutput) {
	if mock.ListTrafficPoliciesRequestFunc == nil {
		panic("Route53APIMock.ListTrafficPoliciesRequestFunc: method is nil but Route53API.ListTrafficPoliciesRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListTrafficPoliciesInput
	}{
		In1: in1,
	}
	mock.lockListTrafficPoliciesRequest.Lock()
	mock.calls.ListTrafficPoliciesRequest = append(mock.calls.ListTrafficPoliciesRequest, callInfo)
	mock.lockListTrafficPoliciesRequest.Unlock()
	return mock.ListTrafficPoliciesRequestFunc(in1)
}

// ListTrafficPoliciesRequestCalls gets all the calls that were made to ListTrafficPoliciesRequest.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPoliciesRequestCalls())
func (mock *Route53APIMock) ListTrafficPoliciesRequestCalls() []struct {
	In1 *route53.ListTrafficPoliciesInput
} {
	var calls []struct {
		In1 *route53.ListTrafficPoliciesInput
	}
	mock.lockListTrafficPoliciesRequest.RLock()
	calls = mock.calls.ListTrafficPoliciesRequest
	mock.lockListTrafficPoliciesRequest.RUnlock()
	return calls
}

// ListTrafficPoliciesWithContext calls ListTrafficPoliciesWithContextFunc.
func (mock *Route53APIMock) ListTrafficPoliciesWithContext(in1 context.Context, in2 *route53.ListTrafficPoliciesInput, in3 ...request.Option) (*route53.ListTrafficPoliciesOutput, error) {
	if mock.ListTrafficPoliciesWithContextFunc == nil {
		panic("Route53APIMock.ListTrafficPoliciesWithContextFunc: method is nil but Route53API.ListTrafficPoliciesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListTrafficPoliciesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListTrafficPoliciesWithContext.Lock()
	mock.calls.ListTrafficPoliciesWithContext = append(mock.calls.ListTrafficPoliciesWithContext, callInfo)
	mock.lockListTrafficPoliciesWithContext.Unlock()
	return mock.ListTrafficPoliciesWithContextFunc(in1, in2, in3...)
}

// ListTrafficPoliciesWithContextCalls gets all the calls that were made to ListTrafficPoliciesWithContext.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPoliciesWithContextCalls())
func (mock *Route53APIMock) ListTrafficPoliciesWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListTrafficPoliciesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListTrafficPoliciesInput
		In3 []request.Option
	}
	mock.lockListTrafficPoliciesWithContext.RLock()
	calls = mock.calls.ListTrafficPoliciesWithContext
	mock.lockListTrafficPoliciesWithContext.RUnlock()
	return calls
}

// ListTrafficPolicyInstances calls ListTrafficPolicyInstancesFunc.
func (mock *Route53APIMock) ListTrafficPolicyInstances(in1 *route53.ListTrafficPolicyInstancesInput) (*route53.ListTrafficPolicyInstancesOutput, error) {
	if mock.ListTrafficPolicyInstancesFunc == nil {
		panic("Route53APIMock.ListTrafficPolicyInstancesFunc: method is nil but Route53API.ListTrafficPolicyInstances was just called")
	}
	callInfo := struct {
		In1 *route53.ListTrafficPolicyInstancesInput
	}{
		In1: in1,
	}
	mock.lockListTrafficPolicyInstances.Lock()
	mock.calls.ListTrafficPolicyInstances = append(mock.calls.ListTrafficPolicyInstances, callInfo)
	mock.lockListTrafficPolicyInstances.Unlock()
	return mock.ListTrafficPolicyInstancesFunc(in1)
}

// ListTrafficPolicyInstancesCalls gets all the calls that were made to ListTrafficPolicyInstances.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPolicyInstancesCalls())
func (mock *Route53APIMock) ListTrafficPolicyInstancesCalls() []struct {
	In1 *route53.ListTrafficPolicyInstancesInput
} {
	var calls []struct {
		In1 *route53.ListTrafficPolicyInstancesInput
	}
	mock.lockListTrafficPolicyInstances.RLock()
	calls = mock.calls.ListTrafficPolicyInstances
	mock.lockListTrafficPolicyInstances.RUnlock()
	return calls
}

// ListTrafficPolicyInstancesByHostedZone calls ListTrafficPolicyInstancesByHostedZoneFunc.
func (mock *Route53APIMock) ListTrafficPolicyInstancesByHostedZone(in1 *route53.ListTrafficPolicyInstancesByHostedZoneInput) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error) {
	if mock.ListTrafficPolicyInstancesByHostedZoneFunc == nil {
		panic("Route53APIMock.ListTrafficPolicyInstancesByHostedZoneFunc: method is nil but Route53API.ListTrafficPolicyInstancesByHostedZone was just called")
	}
	callInfo := struct {
		In1 *route53.ListTrafficPolicyInstancesByHostedZoneInput
	}{
		In1: in1,
	}
	mock.lockListTrafficPolicyInstancesByHostedZone.Lock()
	mock.calls.ListTrafficPolicyInstancesByHostedZone = append(mock.calls.ListTrafficPolicyInstancesByHostedZone, callInfo)
	mock.lockListTrafficPolicyInstancesByHostedZone.Unlock()
	return mock.ListTrafficPolicyInstancesByHostedZoneFunc(in1)
}

// ListTrafficPolicyInstancesByHostedZoneCalls gets all the calls that were made to ListTrafficPolicyInstancesByHostedZone.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPolicyInstancesByHostedZoneCalls())
func (mock *Route53APIMock) ListTrafficPolicyInstancesByHostedZoneCalls() []struct {
	In1 *route53.ListTrafficPolicyInstancesByHostedZoneInput
} {
	var calls []struct {
		In1 *route53.ListTrafficPolicyInstancesByHostedZoneInput
	}
	mock.lockListTrafficPolicyInstancesByHostedZone.RLock()
	calls = mock.calls.ListTrafficPolicyInstancesByHostedZone
	mock.lockListTrafficPolicyInstancesByHostedZone.RUnlock()
	return calls
}

// ListTrafficPolicyInstancesByHostedZoneRequest calls ListTrafficPolicyInstancesByHostedZoneRequestFunc.
func (mock *Route53APIMock) ListTrafficPolicyInstancesByHostedZoneRequest(in1 *route53.ListTrafficPolicyInstancesByHostedZoneInput) (*request.Request, *route53.ListTrafficPolicyInstancesByHostedZoneOutput) {
	if mock.ListTrafficPolicyInstancesByHostedZoneRequestFunc == nil {
		panic("Route53APIMock.ListTrafficPolicyInstancesByHostedZoneRequestFunc: method is nil but Route53API.ListTrafficPolicyInstancesByHostedZoneRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListTrafficPolicyInstancesByHostedZoneInput
	}{
		In1: in1,
	}
	mock.lockListTrafficPolicyInstancesByHostedZoneRequest.Lock()
	mock.calls.ListTrafficPolicyInstancesByHostedZoneRequest = append(mock.calls.ListTrafficPolicyInstancesByHostedZoneRequest, callInfo)
	mock.lockListTrafficPolicyInstancesByHostedZoneRequest.Unlock()
	return mock.ListTrafficPolicyInstancesByHostedZoneRequestFunc(in1)
}

// ListTrafficPolicyInstancesByHostedZoneRequestCalls gets all the calls that were made to ListTrafficPolicyInstancesByHostedZoneRequest.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPolicyInstancesByHostedZoneRequestCalls())
func (mock *Route53APIMock) ListTrafficPolicyInstancesByHostedZoneRequestCalls() []struct {
	In1 *route53.ListTrafficPolicyInstancesByHostedZoneInput
} {
	var calls []struct {
		In1 *route53.ListTrafficPolicyInstancesByHostedZoneInput
	}
	mock.lockListTrafficPolicyInstancesByHostedZoneRequest.RLock()
	calls = mock.calls.ListTrafficPolicyInstancesByHostedZoneRequest
	mock.lockListTrafficPolicyInstancesByHostedZoneRequest.RUnlock()
	return calls
}

// ListTrafficPolicyInstancesByHostedZoneWithContext calls ListTrafficPolicyInstancesByHostedZoneWithContextFunc.
func (mock *Route53APIMock) ListTrafficPolicyInstancesByHostedZoneWithContext(in1 context.Context, in2 *route53.ListTrafficPolicyInstancesByHostedZoneInput, in3 ...request.Option) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error) {
	if mock.ListTrafficPolicyInstancesByHostedZoneWithContextFunc == nil {
		panic("Route53APIMock.ListTrafficPolicyInstancesByHostedZoneWithContextFunc: method is nil but Route53API.ListTrafficPolicyInstancesByHostedZoneWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListTrafficPolicyInstancesByHostedZoneInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListTrafficPolicyInstancesByHostedZoneWithContext.Lock()
	mock.calls.ListTrafficPolicyInstancesByHostedZoneWithContext = append(mock.calls.ListTrafficPolicyInstancesByHostedZoneWithContext, callInfo)
	mock.lockListTrafficPolicyInstancesByHostedZoneWithContext.Unlock()
	return mock.ListTrafficPolicyInstancesByHostedZoneWithContextFunc(in1, in2, in3...)
}

// ListTrafficPolicyInstancesByHostedZoneWithContextCalls gets all the calls that were made to ListTrafficPolicyInstancesByHostedZoneWithContext.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPolicyInstancesByHostedZoneWithContextCalls())
func (mock *Route53APIMock) ListTrafficPolicyInstancesByHostedZoneWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListTrafficPolicyInstancesByHostedZoneInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListTrafficPolicyInstancesByHostedZoneInput
		In3 []request.Option
	}
	mock.lockListTrafficPolicyInstancesByHostedZoneWithContext.RLock()
	calls = mock.calls.ListTrafficPolicyInstancesByHostedZoneWithContext
	mock.lockListTrafficPolicyInstancesByHostedZoneWithContext.RUnlock()
	return calls
}

// ListTrafficPolicyInstancesByPolicy calls ListTrafficPolicyInstancesByPolicyFunc.
func (mock *Route53APIMock) ListTrafficPolicyInstancesByPolicy(in1 *route53.ListTrafficPolicyInstancesByPolicyInput) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error) {
	if mock.ListTrafficPolicyInstancesByPolicyFunc == nil {
		panic("Route53APIMock.ListTrafficPolicyInstancesByPolicyFunc: method is nil but Route53API.ListTrafficPolicyInstancesByPolicy was just called")
	}
	callInfo := struct {
		In1 *route53.ListTrafficPolicyInstancesByPolicyInput
	}{
		In1: in1,
	}
	mock.lockListTrafficPolicyInstancesByPolicy.Lock()
	mock.calls.ListTrafficPolicyInstancesByPolicy = append(mock.calls.ListTrafficPolicyInstancesByPolicy, callInfo)
	mock.lockListTrafficPolicyInstancesByPolicy.Unlock()
	return mock.ListTrafficPolicyInstancesByPolicyFunc(in1)
}

// ListTrafficPolicyInstancesByPolicyCalls gets all the calls that were made to ListTrafficPolicyInstancesByPolicy.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPolicyInstancesByPolicyCalls())
func (mock *Route53APIMock) ListTrafficPolicyInstancesByPolicyCalls() []struct {
	In1 *route53.ListTrafficPolicyInstancesByPolicyInput
} {
	var calls []struct {
		In1 *route53.ListTrafficPolicyInstancesByPolicyInput
	}
	mock.lockListTrafficPolicyInstancesByPolicy.RLock()
	calls = mock.calls.ListTrafficPolicyInstancesByPolicy
	mock.lockListTrafficPolicyInstancesByPolicy.RUnlock()
	return calls
}

// ListTrafficPolicyInstancesByPolicyRequest calls ListTrafficPolicyInstancesByPolicyRequestFunc.
func (mock *Route53APIMock) ListTrafficPolicyInstancesByPolicyRequest(in1 *route53.ListTrafficPolicyInstancesByPolicyInput) (*request.Request, *route53.ListTrafficPolicyInstancesByPolicyOutput) {
	if mock.ListTrafficPolicyInstancesByPolicyRequestFunc == nil {
		panic("Route53APIMock.ListTrafficPolicyInstancesByPolicyRequestFunc: method is nil but Route53API.ListTrafficPolicyInstancesByPolicyRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListTrafficPolicyInstancesByPolicyInput
	}{
		In1: in1,
	}
	mock.lockListTrafficPolicyInstancesByPolicyRequest.Lock()
	mock.calls.ListTrafficPolicyInstancesByPolicyRequest = append(mock.calls.ListTrafficPolicyInstancesByPolicyRequest, callInfo)
	mock.lockListTrafficPolicyInstancesByPolicyRequest.Unlock()
	return mock.ListTrafficPolicyInstancesByPolicyRequestFunc(in1)
}

// ListTrafficPolicyInstancesByPolicyRequestCalls gets all the calls that were made to ListTrafficPolicyInstancesByPolicyRequest.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPolicyInstancesByPolicyRequestCalls())
func (mock *Route53APIMock) ListTrafficPolicyInstancesByPolicyRequestCalls() []struct {
	In1 *route53.ListTrafficPolicyInstancesByPolicyInput
} {
	var calls []struct {
		In1 *route53.ListTrafficPolicyInstancesByPolicyInput
	}
	mock.lockListTrafficPolicyInstancesByPolicyRequest.RLock()
	calls = mock.calls.ListTrafficPolicyInstancesByPolicyRequest
	mock.lockListTrafficPolicyInstancesByPolicyRequest.RUnlock()
	return calls
}

// ListTrafficPolicyInstancesByPolicyWithContext calls ListTrafficPolicyInstancesByPolicyWithContextFunc.
func (mock *Route53APIMock) ListTrafficPolicyInstancesByPolicyWithContext(in1 context.Context, in2 *route53.ListTrafficPolicyInstancesByPolicyInput, in3 ...request.Option) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error) {
	if mock.ListTrafficPolicyInstancesByPolicyWithContextFunc == nil {
		panic("Route53APIMock.ListTrafficPolicyInstancesByPolicyWithContextFunc: method is nil but Route53API.ListTrafficPolicyInstancesByPolicyWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListTrafficPolicyInstancesByPolicyInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListTrafficPolicyInstancesByPolicyWithContext.Lock()
	mock.calls.ListTrafficPolicyInstancesByPolicyWithContext = append(mock.calls.ListTrafficPolicyInstancesByPolicyWithContext, callInfo)
	mock.lockListTrafficPolicyInstancesByPolicyWithContext.Unlock()
	return mock.ListTrafficPolicyInstancesByPolicyWithContextFunc(in1, in2, in3...)
}

// ListTrafficPolicyInstancesByPolicyWithContextCalls gets all the calls that were made to ListTrafficPolicyInstancesByPolicyWithContext.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPolicyInstancesByPolicyWithContextCalls())
func (mock *Route53APIMock) ListTrafficPolicyInstancesByPolicyWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListTrafficPolicyInstancesByPolicyInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListTrafficPolicyInstancesByPolicyInput
		In3 []request.Option
	}
	mock.lockListTrafficPolicyInstancesByPolicyWithContext.RLock()
	calls = mock.calls.ListTrafficPolicyInstancesByPolicyWithContext
	mock.lockListTrafficPolicyInstancesByPolicyWithContext.RUnlock()
	return calls
}

// ListTrafficPolicyInstancesRequest calls ListTrafficPolicyInstancesRequestFunc.
func (mock *Route53APIMock) ListTrafficPolicyInstancesRequest(in1 *route53.ListTrafficPolicyInstancesInput) (*request.Request, *route53.ListTrafficPolicyInstancesOutput) {
	if mock.ListTrafficPolicyInstancesRequestFunc == nil {
		panic("Route53APIMock.ListTrafficPolicyInstancesRequestFunc: method is nil but Route53API.ListTrafficPolicyInstancesRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListTrafficPolicyInstancesInput
	}{
		In1: in1,
	}
	mock.lockListTrafficPolicyInstancesRequest.Lock()
	mock.calls.ListTrafficPolicyInstancesRequest = append(mock.calls.ListTrafficPolicyInstancesRequest, callInfo)
	mock.lockListTrafficPolicyInstancesRequest.Unlock()
	return mock.ListTrafficPolicyInstancesRequestFunc(in1)
}

// ListTrafficPolicyInstancesRequestCalls gets all the calls that were made to ListTrafficPolicyInstancesRequest.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPolicyInstancesRequestCalls())
func (mock *Route53APIMock) ListTrafficPolicyInstancesRequestCalls() []struct {
	In1 *route53.ListTrafficPolicyInstancesInput
} {
	var calls []struct {
		In1 *route53.ListTrafficPolicyInstancesInput
	}
	mock.lockListTrafficPolicyInstancesRequest.RLock()
	calls = mock.calls.ListTrafficPolicyInstancesRequest
	mock.lockListTrafficPolicyInstancesRequest.RUnlock()
	return calls
}

// ListTrafficPolicyInstancesWithContext calls ListTrafficPolicyInstancesWithContextFunc.
func (mock *Route53APIMock) ListTrafficPolicyInstancesWithContext(in1 context.Context, in2 *route53.ListTrafficPolicyInstancesInput, in3 ...request.Option) (*route53.ListTrafficPolicyInstancesOutput, error) {
	if mock.ListTrafficPolicyInstancesWithContextFunc == nil {
		panic("Route53APIMock.ListTrafficPolicyInstancesWithContextFunc: method is nil but Route53API.ListTrafficPolicyInstancesWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListTrafficPolicyInstancesInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListTrafficPolicyInstancesWithContext.Lock()
	mock.calls.ListTrafficPolicyInstancesWithContext = append(mock.calls.ListTrafficPolicyInstancesWithContext, callInfo)
	mock.lockListTrafficPolicyInstancesWithContext.Unlock()
	return mock.ListTrafficPolicyInstancesWithContextFunc(in1, in2, in3...)
}

// ListTrafficPolicyInstancesWithContextCalls gets all the calls that were made to ListTrafficPolicyInstancesWithContext.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPolicyInstancesWithContextCalls())
func (mock *Route53APIMock) ListTrafficPolicyInstancesWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListTrafficPolicyInstancesInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListTrafficPolicyInstancesInput
		In3 []request.Option
	}
	mock.lockListTrafficPolicyInstancesWithContext.RLock()
	calls = mock.calls.ListTrafficPolicyInstancesWithContext
	mock.lockListTrafficPolicyInstancesWithContext.RUnlock()
	return calls
}

// ListTrafficPolicyVersions calls ListTrafficPolicyVersionsFunc.
func (mock *Route53APIMock) ListTrafficPolicyVersions(in1 *route53.ListTrafficPolicyVersionsInput) (*route53.ListTrafficPolicyVersionsOutput, error) {
	if mock.ListTrafficPolicyVersionsFunc == nil {
		panic("Route53APIMock.ListTrafficPolicyVersionsFunc: method is nil but Route53API.ListTrafficPolicyVersions was just called")
	}
	callInfo := struct {
		In1 *route53.ListTrafficPolicyVersionsInput
	}{
		In1: in1,
	}
	mock.lockListTrafficPolicyVersions.Lock()
	mock.calls.ListTrafficPolicyVersions = append(mock.calls.ListTrafficPolicyVersions, callInfo)
	mock.lockListTrafficPolicyVersions.Unlock()
	return mock.ListTrafficPolicyVersionsFunc(in1)
}

// ListTrafficPolicyVersionsCalls gets all the calls that were made to ListTrafficPolicyVersions.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPolicyVersionsCalls())
func (mock *Route53APIMock) ListTrafficPolicyVersionsCalls() []struct {
	In1 *route53.ListTrafficPolicyVersionsInput
} {
	var calls []struct {
		In1 *route53.ListTrafficPolicyVersionsInput
	}
	mock.lockListTrafficPolicyVersions.RLock()
	calls = mock.calls.ListTrafficPolicyVersions
	mock.lockListTrafficPolicyVersions.RUnlock()
	return calls
}

// ListTrafficPolicyVersionsRequest calls ListTrafficPolicyVersionsRequestFunc.
func (mock *Route53APIMock) ListTrafficPolicyVersionsRequest(in1 *route53.ListTrafficPolicyVersionsInput) (*request.Request, *route53.ListTrafficPolicyVersionsOutput) {
	if mock.ListTrafficPolicyVersionsRequestFunc == nil {
		panic("Route53APIMock.ListTrafficPolicyVersionsRequestFunc: method is nil but Route53API.ListTrafficPolicyVersionsRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListTrafficPolicyVersionsInput
	}{
		In1: in1,
	}
	mock.lockListTrafficPolicyVersionsRequest.Lock()
	mock.calls.ListTrafficPolicyVersionsRequest = append(mock.calls.ListTrafficPolicyVersionsRequest, callInfo)
	mock.lockListTrafficPolicyVersionsRequest.Unlock()
	return mock.ListTrafficPolicyVersionsRequestFunc(in1)
}

// ListTrafficPolicyVersionsRequestCalls gets all the calls that were made to ListTrafficPolicyVersionsRequest.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPolicyVersionsRequestCalls())
func (mock *Route53APIMock) ListTrafficPolicyVersionsRequestCalls() []struct {
	In1 *route53.ListTrafficPolicyVersionsInput
} {
	var calls []struct {
		In1 *route53.ListTrafficPolicyVersionsInput
	}
	mock.lockListTrafficPolicyVersionsRequest.RLock()
	calls = mock.calls.ListTrafficPolicyVersionsRequest
	mock.lockListTrafficPolicyVersionsRequest.RUnlock()
	return calls
}

// ListTrafficPolicyVersionsWithContext calls ListTrafficPolicyVersionsWithContextFunc.
func (mock *Route53APIMock) ListTrafficPolicyVersionsWithContext(in1 context.Context, in2 *route53.ListTrafficPolicyVersionsInput, in3 ...request.Option) (*route53.ListTrafficPolicyVersionsOutput, error) {
	if mock.ListTrafficPolicyVersionsWithContextFunc == nil {
		panic("Route53APIMock.ListTrafficPolicyVersionsWithContextFunc: method is nil but Route53API.ListTrafficPolicyVersionsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListTrafficPolicyVersionsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListTrafficPolicyVersionsWithContext.Lock()
	mock.calls.ListTrafficPolicyVersionsWithContext = append(mock.calls.ListTrafficPolicyVersionsWithContext, callInfo)
	mock.lockListTrafficPolicyVersionsWithContext.Unlock()
	return mock.ListTrafficPolicyVersionsWithContextFunc(in1, in2, in3...)
}

// ListTrafficPolicyVersionsWithContextCalls gets all the calls that were made to ListTrafficPolicyVersionsWithContext.
// Check the length with:
//     len(mockedRoute53API.ListTrafficPolicyVersionsWithContextCalls())
func (mock *Route53APIMock) ListTrafficPolicyVersionsWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListTrafficPolicyVersionsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListTrafficPolicyVersionsInput
		In3 []request.Option
	}
	mock.lockListTrafficPolicyVersionsWithContext.RLock()
	calls = mock.calls.ListTrafficPolicyVersionsWithContext
	mock.lockListTrafficPolicyVersionsWithContext.RUnlock()
	return calls
}

// ListVPCAssociationAuthorizations calls ListVPCAssociationAuthorizationsFunc.
func (mock *Route53APIMock) ListVPCAssociationAuthorizations(in1 *route53.ListVPCAssociationAuthorizationsInput) (*route53.ListVPCAssociationAuthorizationsOutput, error) {
	if mock.ListVPCAssociationAuthorizationsFunc == nil {
		panic("Route53APIMock.ListVPCAssociationAuthorizationsFunc: method is nil but Route53API.ListVPCAssociationAuthorizations was just called")
	}
	callInfo := struct {
		In1 *route53.ListVPCAssociationAuthorizationsInput
	}{
		In1: in1,
	}
	mock.lockListVPCAssociationAuthorizations.Lock()
	mock.calls.ListVPCAssociationAuthorizations = append(mock.calls.ListVPCAssociationAuthorizations, callInfo)
	mock.lockListVPCAssociationAuthorizations.Unlock()
	return mock.ListVPCAssociationAuthorizationsFunc(in1)
}

// ListVPCAssociationAuthorizationsCalls gets all the calls that were made to ListVPCAssociationAuthorizations.
// Check the length with:
//     len(mockedRoute53API.ListVPCAssociationAuthorizationsCalls())
func (mock *Route53APIMock) ListVPCAssociationAuthorizationsCalls() []struct {
	In1 *route53.ListVPCAssociationAuthorizationsInput
} {
	var calls []struct {
		In1 *route53.ListVPCAssociationAuthorizationsInput
	}
	mock.lockListVPCAssociationAuthorizations.RLock()
	calls = mock.calls.ListVPCAssociationAuthorizations
	mock.lockListVPCAssociationAuthorizations.RUnlock()
	return calls
}

// ListVPCAssociationAuthorizationsRequest calls ListVPCAssociationAuthorizationsRequestFunc.
func (mock *Route53APIMock) ListVPCAssociationAuthorizationsRequest(in1 *route53.ListVPCAssociationAuthorizationsInput) (*request.Request, *route53.ListVPCAssociationAuthorizationsOutput) {
	if mock.ListVPCAssociationAuthorizationsRequestFunc == nil {
		panic("Route53APIMock.ListVPCAssociationAuthorizationsRequestFunc: method is nil but Route53API.ListVPCAssociationAuthorizationsRequest was just called")
	}
	callInfo := struct {
		In1 *route53.ListVPCAssociationAuthorizationsInput
	}{
		In1: in1,
	}
	mock.lockListVPCAssociationAuthorizationsRequest.Lock()
	mock.calls.ListVPCAssociationAuthorizationsRequest = append(mock.calls.ListVPCAssociationAuthorizationsRequest, callInfo)
	mock.lockListVPCAssociationAuthorizationsRequest.Unlock()
	return mock.ListVPCAssociationAuthorizationsRequestFunc(in1)
}

// ListVPCAssociationAuthorizationsRequestCalls gets all the calls that were made to ListVPCAssociationAuthorizationsRequest.
// Check the length with:
//     len(mockedRoute53API.ListVPCAssociationAuthorizationsRequestCalls())
func (mock *Route53APIMock) ListVPCAssociationAuthorizationsRequestCalls() []struct {
	In1 *route53.ListVPCAssociationAuthorizationsInput
} {
	var calls []struct {
		In1 *route53.ListVPCAssociationAuthorizationsInput
	}
	mock.lockListVPCAssociationAuthorizationsRequest.RLock()
	calls = mock.calls.ListVPCAssociationAuthorizationsRequest
	mock.lockListVPCAssociationAuthorizationsRequest.RUnlock()
	return calls
}

// ListVPCAssociationAuthorizationsWithContext calls ListVPCAssociationAuthorizationsWithContextFunc.
func (mock *Route53APIMock) ListVPCAssociationAuthorizationsWithContext(in1 context.Context, in2 *route53.ListVPCAssociationAuthorizationsInput, in3 ...request.Option) (*route53.ListVPCAssociationAuthorizationsOutput, error) {
	if mock.ListVPCAssociationAuthorizationsWithContextFunc == nil {
		panic("Route53APIMock.ListVPCAssociationAuthorizationsWithContextFunc: method is nil but Route53API.ListVPCAssociationAuthorizationsWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.ListVPCAssociationAuthorizationsInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockListVPCAssociationAuthorizationsWithContext.Lock()
	mock.calls.ListVPCAssociationAuthorizationsWithContext = append(mock.calls.ListVPCAssociationAuthorizationsWithContext, callInfo)
	mock.lockListVPCAssociationAuthorizationsWithContext.Unlock()
	return mock.ListVPCAssociationAuthorizationsWithContextFunc(in1, in2, in3...)
}

// ListVPCAssociationAuthorizationsWithContextCalls gets all the calls that were made to ListVPCAssociationAuthorizationsWithContext.
// Check the length with:
//     len(mockedRoute53API.ListVPCAssociationAuthorizationsWithContextCalls())
func (mock *Route53APIMock) ListVPCAssociationAuthorizationsWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.ListVPCAssociationAuthorizationsInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.ListVPCAssociationAuthorizationsInput
		In3 []request.Option
	}
	mock.lockListVPCAssociationAuthorizationsWithContext.RLock()
	calls = mock.calls.ListVPCAssociationAuthorizationsWithContext
	mock.lockListVPCAssociationAuthorizationsWithContext.RUnlock()
	return calls
}

// TestDNSAnswer calls TestDNSAnswerFunc.
func (mock *Route53APIMock) TestDNSAnswer(in1 *route53.TestDNSAnswerInput) (*route53.TestDNSAnswerOutput, error) {
	if mock.TestDNSAnswerFunc == nil {
		panic("Route53APIMock.TestDNSAnswerFunc: method is nil but Route53API.TestDNSAnswer was just called")
	}
	callInfo := struct {
		In1 *route53.TestDNSAnswerInput
	}{
		In1: in1,
	}
	mock.lockTestDNSAnswer.Lock()
	mock.calls.TestDNSAnswer = append(mock.calls.TestDNSAnswer, callInfo)
	mock.lockTestDNSAnswer.Unlock()
	return mock.TestDNSAnswerFunc(in1)
}

// TestDNSAnswerCalls gets all the calls that were made to TestDNSAnswer.
// Check the length with:
//     len(mockedRoute53API.TestDNSAnswerCalls())
func (mock *Route53APIMock) TestDNSAnswerCalls() []struct {
	In1 *route53.TestDNSAnswerInput
} {
	var calls []struct {
		In1 *route53.TestDNSAnswerInput
	}
	mock.lockTestDNSAnswer.RLock()
	calls = mock.calls.TestDNSAnswer
	mock.lockTestDNSAnswer.RUnlock()
	return calls
}

// TestDNSAnswerRequest calls TestDNSAnswerRequestFunc.
func (mock *Route53APIMock) TestDNSAnswerRequest(in1 *route53.TestDNSAnswerInput) (*request.Request, *route53.TestDNSAnswerOutput) {
	if mock.TestDNSAnswerRequestFunc == nil {
		panic("Route53APIMock.TestDNSAnswerRequestFunc: method is nil but Route53API.TestDNSAnswerRequest was just called")
	}
	callInfo := struct {
		In1 *route53.TestDNSAnswerInput
	}{
		In1: in1,
	}
	mock.lockTestDNSAnswerRequest.Lock()
	mock.calls.TestDNSAnswerRequest = append(mock.calls.TestDNSAnswerRequest, callInfo)
	mock.lockTestDNSAnswerRequest.Unlock()
	return mock.TestDNSAnswerRequestFunc(in1)
}

// TestDNSAnswerRequestCalls gets all the calls that were made to TestDNSAnswerRequest.
// Check the length with:
//     len(mockedRoute53API.TestDNSAnswerRequestCalls())
func (mock *Route53APIMock) TestDNSAnswerRequestCalls() []struct {
	In1 *route53.TestDNSAnswerInput
} {
	var calls []struct {
		In1 *route53.TestDNSAnswerInput
	}
	mock.lockTestDNSAnswerRequest.RLock()
	calls = mock.calls.TestDNSAnswerRequest
	mock.lockTestDNSAnswerRequest.RUnlock()
	return calls
}

// TestDNSAnswerWithContext calls TestDNSAnswerWithContextFunc.
func (mock *Route53APIMock) TestDNSAnswerWithContext(in1 context.Context, in2 *route53.TestDNSAnswerInput, in3 ...request.Option) (*route53.TestDNSAnswerOutput, error) {
	if mock.TestDNSAnswerWithContextFunc == nil {
		panic("Route53APIMock.TestDNSAnswerWithContextFunc: method is nil but Route53API.TestDNSAnswerWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.TestDNSAnswerInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockTestDNSAnswerWithContext.Lock()
	mock.calls.TestDNSAnswerWithContext = append(mock.calls.TestDNSAnswerWithContext, callInfo)
	mock.lockTestDNSAnswerWithContext.Unlock()
	return mock.TestDNSAnswerWithContextFunc(in1, in2, in3...)
}

// TestDNSAnswerWithContextCalls gets all the calls that were made to TestDNSAnswerWithContext.
// Check the length with:
//     len(mockedRoute53API.TestDNSAnswerWithContextCalls())
func (mock *Route53APIMock) TestDNSAnswerWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.TestDNSAnswerInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.TestDNSAnswerInput
		In3 []request.Option
	}
	mock.lockTestDNSAnswerWithContext.RLock()
	calls = mock.calls.TestDNSAnswerWithContext
	mock.lockTestDNSAnswerWithContext.RUnlock()
	return calls
}

// UpdateHealthCheck calls UpdateHealthCheckFunc.
func (mock *Route53APIMock) UpdateHealthCheck(in1 *route53.UpdateHealthCheckInput) (*route53.UpdateHealthCheckOutput, error) {
	if mock.UpdateHealthCheckFunc == nil {
		panic("Route53APIMock.UpdateHealthCheckFunc: method is nil but Route53API.UpdateHealthCheck was just called")
	}
	callInfo := struct {
		In1 *route53.UpdateHealthCheckInput
	}{
		In1: in1,
	}
	mock.lockUpdateHealthCheck.Lock()
	mock.calls.UpdateHealthCheck = append(mock.calls.UpdateHealthCheck, callInfo)
	mock.lockUpdateHealthCheck.Unlock()
	return mock.UpdateHealthCheckFunc(in1)
}

// UpdateHealthCheckCalls gets all the calls that were made to UpdateHealthCheck.
// Check the length with:
//     len(mockedRoute53API.UpdateHealthCheckCalls())
func (mock *Route53APIMock) UpdateHealthCheckCalls() []struct {
	In1 *route53.UpdateHealthCheckInput
} {
	var calls []struct {
		In1 *route53.UpdateHealthCheckInput
	}
	mock.lockUpdateHealthCheck.RLock()
	calls = mock.calls.UpdateHealthCheck
	mock.lockUpdateHealthCheck.RUnlock()
	return calls
}

// UpdateHealthCheckRequest calls UpdateHealthCheckRequestFunc.
func (mock *Route53APIMock) UpdateHealthCheckRequest(in1 *route53.UpdateHealthCheckInput) (*request.Request, *route53.UpdateHealthCheckOutput) {
	if mock.UpdateHealthCheckRequestFunc == nil {
		panic("Route53APIMock.UpdateHealthCheckRequestFunc: method is nil but Route53API.UpdateHealthCheckRequest was just called")
	}
	callInfo := struct {
		In1 *route53.UpdateHealthCheckInput
	}{
		In1: in1,
	}
	mock.lockUpdateHealthCheckRequest.Lock()
	mock.calls.UpdateHealthCheckRequest = append(mock.calls.UpdateHealthCheckRequest, callInfo)
	mock.lockUpdateHealthCheckRequest.Unlock()
	return mock.UpdateHealthCheckRequestFunc(in1)
}

// UpdateHealthCheckRequestCalls gets all the calls that were made to UpdateHealthCheckRequest.
// Check the length with:
//     len(mockedRoute53API.UpdateHealthCheckRequestCalls())
func (mock *Route53APIMock) UpdateHealthCheckRequestCalls() []struct {
	In1 *route53.UpdateHealthCheckInput
} {
	var calls []struct {
		In1 *route53.UpdateHealthCheckInput
	}
	mock.lockUpdateHealthCheckRequest.RLock()
	calls = mock.calls.UpdateHealthCheckRequest
	mock.lockUpdateHealthCheckRequest.RUnlock()
	return calls
}

// UpdateHealthCheckWithContext calls UpdateHealthCheckWithContextFunc.
func (mock *Route53APIMock) UpdateHealthCheckWithContext(in1 context.Context, in2 *route53.UpdateHealthCheckInput, in3 ...request.Option) (*route53.UpdateHealthCheckOutput, error) {
	if mock.UpdateHealthCheckWithContextFunc == nil {
		panic("Route53APIMock.UpdateHealthCheckWithContextFunc: method is nil but Route53API.UpdateHealthCheckWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.UpdateHealthCheckInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockUpdateHealthCheckWithContext.Lock()
	mock.calls.UpdateHealthCheckWithContext = append(mock.calls.UpdateHealthCheckWithContext, callInfo)
	mock.lockUpdateHealthCheckWithContext.Unlock()
	return mock.UpdateHealthCheckWithContextFunc(in1, in2, in3...)
}

// UpdateHealthCheckWithContextCalls gets all the calls that were made to UpdateHealthCheckWithContext.
// Check the length with:
//     len(mockedRoute53API.UpdateHealthCheckWithContextCalls())
func (mock *Route53APIMock) UpdateHealthCheckWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.UpdateHealthCheckInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.UpdateHealthCheckInput
		In3 []request.Option
	}
	mock.lockUpdateHealthCheckWithContext.RLock()
	calls = mock.calls.UpdateHealthCheckWithContext
	mock.lockUpdateHealthCheckWithContext.RUnlock()
	return calls
}

// UpdateHostedZoneComment calls UpdateHostedZoneCommentFunc.
func (mock *Route53APIMock) UpdateHostedZoneComment(in1 *route53.UpdateHostedZoneCommentInput) (*route53.UpdateHostedZoneCommentOutput, error) {
	if mock.UpdateHostedZoneCommentFunc == nil {
		panic("Route53APIMock.UpdateHostedZoneCommentFunc: method is nil but Route53API.UpdateHostedZoneComment was just called")
	}
	callInfo := struct {
		In1 *route53.UpdateHostedZoneCommentInput
	}{
		In1: in1,
	}
	mock.lockUpdateHostedZoneComment.Lock()
	mock.calls.UpdateHostedZoneComment = append(mock.calls.UpdateHostedZoneComment, callInfo)
	mock.lockUpdateHostedZoneComment.Unlock()
	return mock.UpdateHostedZoneCommentFunc(in1)
}

// UpdateHostedZoneCommentCalls gets all the calls that were made to UpdateHostedZoneComment.
// Check the length with:
//     len(mockedRoute53API.UpdateHostedZoneCommentCalls())
func (mock *Route53APIMock) UpdateHostedZoneCommentCalls() []struct {
	In1 *route53.UpdateHostedZoneCommentInput
} {
	var calls []struct {
		In1 *route53.UpdateHostedZoneCommentInput
	}
	mock.lockUpdateHostedZoneComment.RLock()
	calls = mock.calls.UpdateHostedZoneComment
	mock.lockUpdateHostedZoneComment.RUnlock()
	return calls
}

// UpdateHostedZoneCommentRequest calls UpdateHostedZoneCommentRequestFunc.
func (mock *Route53APIMock) UpdateHostedZoneCommentRequest(in1 *route53.UpdateHostedZoneCommentInput) (*request.Request, *route53.UpdateHostedZoneCommentOutput) {
	if mock.UpdateHostedZoneCommentRequestFunc == nil {
		panic("Route53APIMock.UpdateHostedZoneCommentRequestFunc: method is nil but Route53API.UpdateHostedZoneCommentRequest was just called")
	}
	callInfo := struct {
		In1 *route53.UpdateHostedZoneCommentInput
	}{
		In1: in1,
	}
	mock.lockUpdateHostedZoneCommentRequest.Lock()
	mock.calls.UpdateHostedZoneCommentRequest = append(mock.calls.UpdateHostedZoneCommentRequest, callInfo)
	mock.lockUpdateHostedZoneCommentRequest.Unlock()
	return mock.UpdateHostedZoneCommentRequestFunc(in1)
}

// UpdateHostedZoneCommentRequestCalls gets all the calls that were made to UpdateHostedZoneCommentRequest.
// Check the length with:
//     len(mockedRoute53API.UpdateHostedZoneCommentRequestCalls())
func (mock *Route53APIMock) UpdateHostedZoneCommentRequestCalls() []struct {
	In1 *route53.UpdateHostedZoneCommentInput
} {
	var calls []struct {
		In1 *route53.UpdateHostedZoneCommentInput
	}
	mock.lockUpdateHostedZoneCommentRequest.RLock()
	calls = mock.calls.UpdateHostedZoneCommentRequest
	mock.lockUpdateHostedZoneCommentRequest.RUnlock()
	return calls
}

// UpdateHostedZoneCommentWithContext calls UpdateHostedZoneCommentWithContextFunc.
func (mock *Route53APIMock) UpdateHostedZoneCommentWithContext(in1 context.Context, in2 *route53.UpdateHostedZoneCommentInput, in3 ...request.Option) (*route53.UpdateHostedZoneCommentOutput, error) {
	if mock.UpdateHostedZoneCommentWithContextFunc == nil {
		panic("Route53APIMock.UpdateHostedZoneCommentWithContextFunc: method is nil but Route53API.UpdateHostedZoneCommentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.UpdateHostedZoneCommentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockUpdateHostedZoneCommentWithContext.Lock()
	mock.calls.UpdateHostedZoneCommentWithContext = append(mock.calls.UpdateHostedZoneCommentWithContext, callInfo)
	mock.lockUpdateHostedZoneCommentWithContext.Unlock()
	return mock.UpdateHostedZoneCommentWithContextFunc(in1, in2, in3...)
}

// UpdateHostedZoneCommentWithContextCalls gets all the calls that were made to UpdateHostedZoneCommentWithContext.
// Check the length with:
//     len(mockedRoute53API.UpdateHostedZoneCommentWithContextCalls())
func (mock *Route53APIMock) UpdateHostedZoneCommentWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.UpdateHostedZoneCommentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.UpdateHostedZoneCommentInput
		In3 []request.Option
	}
	mock.lockUpdateHostedZoneCommentWithContext.RLock()
	calls = mock.calls.UpdateHostedZoneCommentWithContext
	mock.lockUpdateHostedZoneCommentWithContext.RUnlock()
	return calls
}

// UpdateTrafficPolicyComment calls UpdateTrafficPolicyCommentFunc.
func (mock *Route53APIMock) UpdateTrafficPolicyComment(in1 *route53.UpdateTrafficPolicyCommentInput) (*route53.UpdateTrafficPolicyCommentOutput, error) {
	if mock.UpdateTrafficPolicyCommentFunc == nil {
		panic("Route53APIMock.UpdateTrafficPolicyCommentFunc: method is nil but Route53API.UpdateTrafficPolicyComment was just called")
	}
	callInfo := struct {
		In1 *route53.UpdateTrafficPolicyCommentInput
	}{
		In1: in1,
	}
	mock.lockUpdateTrafficPolicyComment.Lock()
	mock.calls.UpdateTrafficPolicyComment = append(mock.calls.UpdateTrafficPolicyComment, callInfo)
	mock.lockUpdateTrafficPolicyComment.Unlock()
	return mock.UpdateTrafficPolicyCommentFunc(in1)
}

// UpdateTrafficPolicyCommentCalls gets all the calls that were made to UpdateTrafficPolicyComment.
// Check the length with:
//     len(mockedRoute53API.UpdateTrafficPolicyCommentCalls())
func (mock *Route53APIMock) UpdateTrafficPolicyCommentCalls() []struct {
	In1 *route53.UpdateTrafficPolicyCommentInput
} {
	var calls []struct {
		In1 *route53.UpdateTrafficPolicyCommentInput
	}
	mock.lockUpdateTrafficPolicyComment.RLock()
	calls = mock.calls.UpdateTrafficPolicyComment
	mock.lockUpdateTrafficPolicyComment.RUnlock()
	return calls
}

// UpdateTrafficPolicyCommentRequest calls UpdateTrafficPolicyCommentRequestFunc.
func (mock *Route53APIMock) UpdateTrafficPolicyCommentRequest(in1 *route53.UpdateTrafficPolicyCommentInput) (*request.Request, *route53.UpdateTrafficPolicyCommentOutput) {
	if mock.UpdateTrafficPolicyCommentRequestFunc == nil {
		panic("Route53APIMock.UpdateTrafficPolicyCommentRequestFunc: method is nil but Route53API.UpdateTrafficPolicyCommentRequest was just called")
	}
	callInfo := struct {
		In1 *route53.UpdateTrafficPolicyCommentInput
	}{
		In1: in1,
	}
	mock.lockUpdateTrafficPolicyCommentRequest.Lock()
	mock.calls.UpdateTrafficPolicyCommentRequest = append(mock.calls.UpdateTrafficPolicyCommentRequest, callInfo)
	mock.lockUpdateTrafficPolicyCommentRequest.Unlock()
	return mock.UpdateTrafficPolicyCommentRequestFunc(in1)
}

// UpdateTrafficPolicyCommentRequestCalls gets all the calls that were made to UpdateTrafficPolicyCommentRequest.
// Check the length with:
//     len(mockedRoute53API.UpdateTrafficPolicyCommentRequestCalls())
func (mock *Route53APIMock) UpdateTrafficPolicyCommentRequestCalls() []struct {
	In1 *route53.UpdateTrafficPolicyCommentInput
} {
	var calls []struct {
		In1 *route53.UpdateTrafficPolicyCommentInput
	}
	mock.lockUpdateTrafficPolicyCommentRequest.RLock()
	calls = mock.calls.UpdateTrafficPolicyCommentRequest
	mock.lockUpdateTrafficPolicyCommentRequest.RUnlock()
	return calls
}

// UpdateTrafficPolicyCommentWithContext calls UpdateTrafficPolicyCommentWithContextFunc.
func (mock *Route53APIMock) UpdateTrafficPolicyCommentWithContext(in1 context.Context, in2 *route53.UpdateTrafficPolicyCommentInput, in3 ...request.Option) (*route53.UpdateTrafficPolicyCommentOutput, error) {
	if mock.UpdateTrafficPolicyCommentWithContextFunc == nil {
		panic("Route53APIMock.UpdateTrafficPolicyCommentWithContextFunc: method is nil but Route53API.UpdateTrafficPolicyCommentWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.UpdateTrafficPolicyCommentInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockUpdateTrafficPolicyCommentWithContext.Lock()
	mock.calls.UpdateTrafficPolicyCommentWithContext = append(mock.calls.UpdateTrafficPolicyCommentWithContext, callInfo)
	mock.lockUpdateTrafficPolicyCommentWithContext.Unlock()
	return mock.UpdateTrafficPolicyCommentWithContextFunc(in1, in2, in3...)
}

// UpdateTrafficPolicyCommentWithContextCalls gets all the calls that were made to UpdateTrafficPolicyCommentWithContext.
// Check the length with:
//     len(mockedRoute53API.UpdateTrafficPolicyCommentWithContextCalls())
func (mock *Route53APIMock) UpdateTrafficPolicyCommentWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.UpdateTrafficPolicyCommentInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.UpdateTrafficPolicyCommentInput
		In3 []request.Option
	}
	mock.lockUpdateTrafficPolicyCommentWithContext.RLock()
	calls = mock.calls.UpdateTrafficPolicyCommentWithContext
	mock.lockUpdateTrafficPolicyCommentWithContext.RUnlock()
	return calls
}

// UpdateTrafficPolicyInstance calls UpdateTrafficPolicyInstanceFunc.
func (mock *Route53APIMock) UpdateTrafficPolicyInstance(in1 *route53.UpdateTrafficPolicyInstanceInput) (*route53.UpdateTrafficPolicyInstanceOutput, error) {
	if mock.UpdateTrafficPolicyInstanceFunc == nil {
		panic("Route53APIMock.UpdateTrafficPolicyInstanceFunc: method is nil but Route53API.UpdateTrafficPolicyInstance was just called")
	}
	callInfo := struct {
		In1 *route53.UpdateTrafficPolicyInstanceInput
	}{
		In1: in1,
	}
	mock.lockUpdateTrafficPolicyInstance.Lock()
	mock.calls.UpdateTrafficPolicyInstance = append(mock.calls.UpdateTrafficPolicyInstance, callInfo)
	mock.lockUpdateTrafficPolicyInstance.Unlock()
	return mock.UpdateTrafficPolicyInstanceFunc(in1)
}

// UpdateTrafficPolicyInstanceCalls gets all the calls that were made to UpdateTrafficPolicyInstance.
// Check the length with:
//     len(mockedRoute53API.UpdateTrafficPolicyInstanceCalls())
func (mock *Route53APIMock) UpdateTrafficPolicyInstanceCalls() []struct {
	In1 *route53.UpdateTrafficPolicyInstanceInput
} {
	var calls []struct {
		In1 *route53.UpdateTrafficPolicyInstanceInput
	}
	mock.lockUpdateTrafficPolicyInstance.RLock()
	calls = mock.calls.UpdateTrafficPolicyInstance
	mock.lockUpdateTrafficPolicyInstance.RUnlock()
	return calls
}

// UpdateTrafficPolicyInstanceRequest calls UpdateTrafficPolicyInstanceRequestFunc.
func (mock *Route53APIMock) UpdateTrafficPolicyInstanceRequest(in1 *route53.UpdateTrafficPolicyInstanceInput) (*request.Request, *route53.UpdateTrafficPolicyInstanceOutput) {
	if mock.UpdateTrafficPolicyInstanceRequestFunc == nil {
		panic("Route53APIMock.UpdateTrafficPolicyInstanceRequestFunc: method is nil but Route53API.UpdateTrafficPolicyInstanceRequest was just called")
	}
	callInfo := struct {
		In1 *route53.UpdateTrafficPolicyInstanceInput
	}{
		In1: in1,
	}
	mock.lockUpdateTrafficPolicyInstanceRequest.Lock()
	mock.calls.UpdateTrafficPolicyInstanceRequest = append(mock.calls.UpdateTrafficPolicyInstanceRequest, callInfo)
	mock.lockUpdateTrafficPolicyInstanceRequest.Unlock()
	return mock.UpdateTrafficPolicyInstanceRequestFunc(in1)
}

// UpdateTrafficPolicyInstanceRequestCalls gets all the calls that were made to UpdateTrafficPolicyInstanceRequest.
// Check the length with:
//     len(mockedRoute53API.UpdateTrafficPolicyInstanceRequestCalls())
func (mock *Route53APIMock) UpdateTrafficPolicyInstanceRequestCalls() []struct {
	In1 *route53.UpdateTrafficPolicyInstanceInput
} {
	var calls []struct {
		In1 *route53.UpdateTrafficPolicyInstanceInput
	}
	mock.lockUpdateTrafficPolicyInstanceRequest.RLock()
	calls = mock.calls.UpdateTrafficPolicyInstanceRequest
	mock.lockUpdateTrafficPolicyInstanceRequest.RUnlock()
	return calls
}

// UpdateTrafficPolicyInstanceWithContext calls UpdateTrafficPolicyInstanceWithContextFunc.
func (mock *Route53APIMock) UpdateTrafficPolicyInstanceWithContext(in1 context.Context, in2 *route53.UpdateTrafficPolicyInstanceInput, in3 ...request.Option) (*route53.UpdateTrafficPolicyInstanceOutput, error) {
	if mock.UpdateTrafficPolicyInstanceWithContextFunc == nil {
		panic("Route53APIMock.UpdateTrafficPolicyInstanceWithContextFunc: method is nil but Route53API.UpdateTrafficPolicyInstanceWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.UpdateTrafficPolicyInstanceInput
		In3 []request.Option
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockUpdateTrafficPolicyInstanceWithContext.Lock()
	mock.calls.UpdateTrafficPolicyInstanceWithContext = append(mock.calls.UpdateTrafficPolicyInstanceWithContext, callInfo)
	mock.lockUpdateTrafficPolicyInstanceWithContext.Unlock()
	return mock.UpdateTrafficPolicyInstanceWithContextFunc(in1, in2, in3...)
}

// UpdateTrafficPolicyInstanceWithContextCalls gets all the calls that were made to UpdateTrafficPolicyInstanceWithContext.
// Check the length with:
//     len(mockedRoute53API.UpdateTrafficPolicyInstanceWithContextCalls())
func (mock *Route53APIMock) UpdateTrafficPolicyInstanceWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.UpdateTrafficPolicyInstanceInput
	In3 []request.Option
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.UpdateTrafficPolicyInstanceInput
		In3 []request.Option
	}
	mock.lockUpdateTrafficPolicyInstanceWithContext.RLock()
	calls = mock.calls.UpdateTrafficPolicyInstanceWithContext
	mock.lockUpdateTrafficPolicyInstanceWithContext.RUnlock()
	return calls
}

// WaitUntilResourceRecordSetsChanged calls WaitUntilResourceRecordSetsChangedFunc.
func (mock *Route53APIMock) WaitUntilResourceRecordSetsChanged(in1 *route53.GetChangeInput) error {
	if mock.WaitUntilResourceRecordSetsChangedFunc == nil {
		panic("Route53APIMock.WaitUntilResourceRecordSetsChangedFunc: method is nil but Route53API.WaitUntilResourceRecordSetsChanged was just called")
	}
	callInfo := struct {
		In1 *route53.GetChangeInput
	}{
		In1: in1,
	}
	mock.lockWaitUntilResourceRecordSetsChanged.Lock()
	mock.calls.WaitUntilResourceRecordSetsChanged = append(mock.calls.WaitUntilResourceRecordSetsChanged, callInfo)
	mock.lockWaitUntilResourceRecordSetsChanged.Unlock()
	return mock.WaitUntilResourceRecordSetsChangedFunc(in1)
}

// WaitUntilResourceRecordSetsChangedCalls gets all the calls that were made to WaitUntilResourceRecordSetsChanged.
// Check the length with:
//     len(mockedRoute53API.WaitUntilResourceRecordSetsChangedCalls())
func (mock *Route53APIMock) WaitUntilResourceRecordSetsChangedCalls() []struct {
	In1 *route53.GetChangeInput
} {
	var calls []struct {
		In1 *route53.GetChangeInput
	}
	mock.lockWaitUntilResourceRecordSetsChanged.RLock()
	calls = mock.calls.WaitUntilResourceRecordSetsChanged
	mock.lockWaitUntilResourceRecordSetsChanged.RUnlock()
	return calls
}

// WaitUntilResourceRecordSetsChangedWithContext calls WaitUntilResourceRecordSetsChangedWithContextFunc.
func (mock *Route53APIMock) WaitUntilResourceRecordSetsChangedWithContext(in1 context.Context, in2 *route53.GetChangeInput, in3 ...request.WaiterOption) error {
	if mock.WaitUntilResourceRecordSetsChangedWithContextFunc == nil {
		panic("Route53APIMock.WaitUntilResourceRecordSetsChangedWithContextFunc: method is nil but Route53API.WaitUntilResourceRecordSetsChangedWithContext was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *route53.GetChangeInput
		In3 []request.WaiterOption
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	mock.lockWaitUntilResourceRecordSetsChangedWithContext.Lock()
	mock.calls.WaitUntilResourceRecordSetsChangedWithContext = append(mock.calls.WaitUntilResourceRecordSetsChangedWithContext, callInfo)
	mock.lockWaitUntilResourceRecordSetsChangedWithContext.Unlock()
	return mock.WaitUntilResourceRecordSetsChangedWithContextFunc(in1, in2, in3...)
}

// WaitUntilResourceRecordSetsChangedWithContextCalls gets all the calls that were made to WaitUntilResourceRecordSetsChangedWithContext.
// Check the length with:
//     len(mockedRoute53API.WaitUntilResourceRecordSetsChangedWithContextCalls())
func (mock *Route53APIMock) WaitUntilResourceRecordSetsChangedWithContextCalls() []struct {
	In1 context.Context
	In2 *route53.GetChangeInput
	In3 []request.WaiterOption
} {
	var calls []struct {
		In1 context.Context
		In2 *route53.GetChangeInput
		In3 []request.WaiterOption
	}
	mock.lockWaitUntilResourceRecordSetsChangedWithContext.RLock()
	calls = mock.calls.WaitUntilResourceRecordSetsChangedWithContext
	mock.lockWaitUntilResourceRecordSetsChangedWithContext.RUnlock()
	return calls
}
