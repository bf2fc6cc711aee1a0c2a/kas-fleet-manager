openapi: 3.0.0
info:
  description: Kafka Service Fleet Manager is a Rest API to manage kafka instances
    and connectors.
  title: Kafka Service Fleet Manager
  version: 0.0.1
servers:
- description: Main (production) server
  url: https://api.openshift.com
- description: Staging server
  url: https://api.stage.openshift.com
- description: localhost
  url: http://localhost:8000
- description: current domain
  url: /
paths:
  /api/managed-services-api/v1/connector-types/{id}:
    get:
      operationId: getConnectorTypeByID
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorType'
          description: The connector type matching the request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector type exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a connector type by name and version
  /api/managed-services-api/v1/connector-types:
    get:
      operationId: listConnectorTypes
      parameters:
      - description: Page index
        examples:
          page:
            value: "1"
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: string
        style: form
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorTypeList'
          description: A list of connector types
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of connector types
  /api/managed-services-api/v1/kafkas/{id}/connector-deployments:
    get:
      operationId: listConnectors
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: string
        style: form
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorList'
          description: A list of connector deployments
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of connector types
    post:
      operationId: createConnector
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Perform the action in an asynchronous manner
        explode: true
        in: query
        name: async
        required: true
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connector'
        description: Connector data
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
          description: Accepted
        "400":
          content:
            application/json:
              examples:
                "400CreationExample":
                  $ref: '#/components/examples/400CreationExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource doesn't exist
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred creating the connector
      security:
      - Bearer: []
      summary: Create a new connector
  /api/managed-services-api/v1/kafkas/{id}/connector-deployments/{cid}:
    delete:
      operationId: deleteConnector
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404DeleteExample":
                  $ref: '#/components/examples/404DeleteExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: No kafka request with specified id exists
        "500":
          content:
            application/json:
              examples:
                "500DeleteExample":
                  $ref: '#/components/examples/500DeleteExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Delete a connector
    get:
      operationId: getConnector
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the connector
        explode: false
        in: path
        name: cid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
          description: The connector deployment matching the request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector type exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a connector deployment
  /api/managed-services-api/v1/kafka-connector-clusters:
    get:
      operationId: listConnectorClusters
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: string
        style: form
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorClusterList'
          description: A list of connector clusters
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of connector clusters
    post:
      operationId: createConnectorCluster
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Perform the action in an asynchronous manner
        explode: true
        in: query
        name: async
        required: true
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorCluster'
        description: Connector cluster data
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorCluster'
          description: Accepted
        "400":
          content:
            application/json:
              examples:
                "400CreationExample":
                  $ref: '#/components/examples/400CreationExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource doesn't exist
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred creating the connector cluster
      security:
      - Bearer: []
      summary: Create a new connector cluster
  /api/managed-services-api/v1/kafka-connector-clusters/{id}:
    delete:
      operationId: deleteConnectorCluster
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404DeleteExample":
                  $ref: '#/components/examples/404DeleteExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: No resource with specified id exists
        "500":
          content:
            application/json:
              examples:
                "500DeleteExample":
                  $ref: '#/components/examples/500DeleteExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Delete a connector cluster
    get:
      operationId: getConnectorCluster
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the connector cluster
        explode: false
        in: path
        name: cid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorCluster'
          description: The connector cluster matching the request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster type exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a connector cluster
  /api/managed-services-api/v1/kafka-connector-clusters/{id}/addon-parameters:
    get:
      operationId: getConnectorClusterAddonParameters
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the connector cluster
        explode: false
        in: path
        name: cid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddonParameterList'
          description: The parameters that should be used to configure the managed
            connector addon on the cluster.
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster type exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a connector cluster's addon parameters
  /api/managed-services-api/v1/kafka-connector-clusters/{id}/status:
    put:
      operationId: updateKafkaConnectorAgentClusterStatus
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorClusterUpdateStatus'
        description: Cluster status update data
        required: true
      responses:
        "200":
          description: Cluster status is updated
        "400":
          content:
            application/json:
              examples:
                "400InvalidIdExample":
                  $ref: '#/components/examples/400InvalidIdExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: id value is not valid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is not valid.
      security:
      - Bearer: []
      summary: Update the status of a connector agent cluster
  /api/managed-services-api/v1/kafka-connector-clusters/{id}/connectors:
    get:
      operationId: listClusterAsignedConnectors
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: Page index
        examples:
          page:
            value: "1"
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: string
        style: form
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: string
        style: form
      - description: filters the connectors to those with a version greater than the
          given value
        explode: true
        in: query
        name: gt_version
        required: false
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorList'
          description: A list of connector deployments
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of connector types
  /api/managed-services-api/v1/kafka-connector-clusters/{id}/connectors/{cid}/status:
    put:
      operationId: updateKafkaConnectorStatus
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the connector
        explode: false
        in: path
        name: cid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorUpdateStatus'
        description: Cluster status update data
        required: true
      responses:
        "200":
          description: Cluster status is updated
        "400":
          content:
            application/json:
              examples:
                "400InvalidIdExample":
                  $ref: '#/components/examples/400InvalidIdExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: id value is not valid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is not valid.
      security:
      - Bearer: []
      summary: Update the status of a connector agent cluster
  /api/managed-services-api/v1/agent-clusters/{id}/status:
    put:
      operationId: updateAgentClusterStatus
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataPlaneClusterUpdateStatusRequest'
        description: Cluster status update data
        required: true
      responses:
        "200":
          description: Cluster status is updated
        "400":
          content:
            application/json:
              examples:
                "400InvalidIdExample":
                  $ref: '#/components/examples/400InvalidIdExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: id value is not valid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is not valid.
      security:
      - Bearer: []
      summary: Update the status of an agent cluster
  /api/managed-services-api/v1/agent-clusters/{id}/kafkas/status:
    put:
      operationId: updateKafkaClusterStatus
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataPlaneKafkaStatusUpdateRequest'
        description: Kafka clusters status update data
        required: true
      responses:
        "200":
          description: Status is updated for Kafka clusters
        "400":
          content:
            application/json:
              examples:
                "400InvalidIdExample":
                  $ref: '#/components/examples/400InvalidIdExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: id value is not valid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is not valid.
      security:
      - Bearer: []
      summary: Update the status of Kafka clusters on an agent cluster
  /api/managed-services-api/v1/agent-clusters/{id}/kafkas:
    get:
      operationId: getKafkas
      parameters:
      - description: The id of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedKafkaList'
          description: The list of the ManagedKafkas for the specified agent cluster
        "400":
          content:
            application/json:
              examples:
                "400InvalidIdExample":
                  $ref: '#/components/examples/400InvalidIdExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: id value is not valid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is not valid.
      security:
      - Bearer: []
      summary: Get the list of ManagedaKafkas for the specified agent cluster
components:
  examples:
    ManagedKafkaExample:
      value: {}
    DataPlaneClusterUpdateStatusRequestExample:
      value: {}
    DataPlaneKafkaUpdateStatusRequestExample:
      value:
        "1iSY6RQ3JKI8Q0OTmjQFd3ocFRg":
          conditions:
          - type: Ready
            reason: KafkaInstanceReady
            message: installing
            status: "False"
            lastTransitionTime: 2018-01-01T00:00:00Z
          capacity:
            ingressEgressThroughputPerSec: 4Mi
            totalMaxConnections: 500
            maxDataRetentionSize: 100Gi
            maxPartitions: 100
            maxDataRetentionPeriod: P14D
          versions:
            kafka: 2.4.1
            strimzi: 0.21.2
    "400DeletionExample":
      value:
        id: "103"
        kind: Error
        href: /api/managed-services-api/v1/errors/103
        code: MGD-SERV-API-103
        reason: Synchronous action is not supported, use async=true parameter
        operation_id: 1iWIimqGcrDuL61aUxIZqBTqNRa
    "400CreationExample":
      value:
        id: "103"
        kind: Error
        href: /api/managed-services-api/v1/errors/103
        code: MGD-SERV-API-103
        reason: Synchronous action is not supported, use async=true parameter
        operation_id: 1iWIimqGcrDuL61aUxIZqBTqNRa
    "400InvalidQueryExample":
      value:
        id: "203"
        kind: Error
        href: /api/managed-services-api/v1/errors/23
        code: MGD-SERV-API-23
        reason: 'Failed to parse search query: Unable to list kafka requests for api_kafka_service:
          MGD-SERV-API-23: Failed to parse search query: Unsupported column name for
          search: ''id''. Supported column names are: region, name, cloud_provider,
          name, status. Query invalid: id = 123'
        operation_id: 1lWDGuybIrEnxrAem724gqkkiDv
    "400InvalidIdExample":
      value:
        id: "203"
        kind: Error
        href: /api/managed-services-api/v1/errors/21
        code: MGD-SERV-API-21
        reason: Bad request
        operation_id: 1lWDGuybIrEnxrAem724gqkkiDv
    "404Example":
      value:
        id: "404"
        kind: Error
        href: /api/managed-services-api/v1/errors/7
        code: MGD-SERV-API-7
        reason: The requested resource doesn't exist
    "404DeleteExample":
      value:
        id: "7"
        kind: Error
        href: /api/managed-services-api/v1/errors/7
        code: MGD-SERV-API-7
        reason: KafkaResource with id='1iK3duVYIvv5YvLlyz1mGR3JyqN' not found
        operation_id: 1iYO7g2g6HTdUKUa2ksH82kQD3y
    "401Example":
      value:
        id: "11"
        kind: Error
        href: /api/managed-services-api/v1/errors/11
        code: MGD-SERV-API-11
        reason: 'Unable to verify JWT token: Required authorization token not found'
        operation_id: 1iY3UhEhwmXBpWPfI2lNekpd4ZD
    "403Example":
      value:
        id: "4"
        kind: Error
        href: /api/managed-services-api/v1/errors/4
        code: MGD-SERV-API-4
        reason: User 'foo-bar' is not authorized to access the service.
        operation_id: 1lY3UiEhznXBpWPfI2lNejpd4YC
    "403MaxAllowedInstanceReachedExample":
      value:
        id: "5"
        kind: Error
        href: /api/managed-services-api/v1/errors/5
        code: MGD-SERV-API-5
        reason: User 'foo-bar' has reached a maximum number of 6 allowed instances.
        operation_id: 1lY3UiEkxnXBpVPeI2oNejd3XB
    "409NameConflictExample":
      value:
        id: "36"
        kind: Error
        href: /api/managed-services-api/v1/errors/36
        code: MGD-SERV-API-36
        reason: Kafka cluster name is already used
        operation_id: 6kY0UiEkzkXCzWPeI2oYehd3ED
    "500Example":
      value:
        id: "9"
        kind: Error
        href: /api/managed-services-api/v1/errors/9
        code: MGD-SERV-API-9
        reason: Unspecified error
        operation_id: 1ieELvF9jMQY6YghfM9gGRsHvEW
    "500DeleteExample":
      value:
        id: "9"
        kind: Error
        href: /api/managed-services-api/v1/errors/9
        code: MGD-SERV-API-9
        reason: 'error deleting syncset: OCM-EX-9: failed to delete syncset: ext-serviceapi-1ix03lndlmq0qfc7sita5sljv8e
          for cluster id: 1g5d88q0lrcdv4g7alb7slfgnj3dhbsj%!(EXTRA *errors.Error=identifier
          is ''404'', code is ''CLUSTERS-MGMT-404'' and operation identifier is ''1g5or50viu07oealuehrkc26dgftj1ac'':
          Cluster ''1g5d88q0lrcdv4g7alb7slfgnj3dhbsj'' not found)'
        operation_id: 1iYTsWry6nsqb2sNmFj5bXpD7Ca
  parameters:
    id:
      description: The id of record
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    page:
      description: Page index
      examples:
        page:
          value: "1"
      explode: true
      in: query
      name: page
      required: false
      schema:
        type: string
      style: form
    size:
      description: Number of items in each page
      examples:
        size:
          value: "100"
      explode: true
      in: query
      name: size
      required: false
      schema:
        type: string
      style: form
  schemas:
    ObjectReference:
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
      type: object
    List:
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
      required:
      - items
      - kind
      - page
      - size
      - total
      type: object
    Error:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Error_allOf'
    MetaV1Condition:
      properties:
        type:
          type: string
        reason:
          type: string
        message:
          type: string
        status:
          type: string
        lastTransitionTime:
          type: string
      type: object
    ManagedKafkaCapacity:
      properties:
        IngressEgressThroughputPerSec:
          type: string
        TotalMaxConnections:
          format: int
          type: integer
        MaxDataRetentionSize:
          type: string
        MaxPartitions:
          format: int
          type: integer
        MaxDataRetentionPeriod:
          type: string
      type: object
    ManagedKafkaVersions:
      properties:
        Kafka:
          type: string
        Strimzi:
          type: string
      type: object
    ManagedKafka:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ManagedKafka_allOf'
    ManagedKafkaList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ManagedKafkaList_allOf'
      description: A list of ManagedKafka
    ConnectorType:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConnectorType_allOf'
      description: Represents a connector type supported by the API
      required:
      - name
      - openAPIV3Schema
      - version
    ConnectorTypeList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorTypeList_allOf'
    ConnectorList:
      allOf:
        - $ref: '#/components/schemas/List'
        - $ref: '#/components/schemas/ConnectorList_allOf'
    Connector:
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - $ref: '#/components/schemas/Connector_allOf'
      description: A connector holds the configuration to connect a Kafka topic to
        another system.
    ClusterTarget:
      discriminator:
        mapping:
          addon: '#/components/schemas/AddonClusterTarget'
          cloud_provider: '#/components/schemas/CloudProviderClusterTarget'
        propertyName: kind
      oneOf:
        - $ref: '#/components/schemas/AddonClusterTarget'
        - $ref: '#/components/schemas/CloudProviderClusterTarget'
    AddonClusterTarget:
      description: Targets workloads to an addon cluster
      properties:
        kind:
          type: string
        group:
          type: string
      type: object
    CloudProviderClusterTarget:
      description: Targets workloads to a cloud provider
      properties:
        kind:
          type: string
        cloud_provider:
          type: string
        region:
          type: string
        multi_az:
          type: boolean
      type: object
    AddonParameterList:
      description: A list of addon parameters
      items:
        allOf:
          - $ref: '#/components/schemas/AddonParameter'
      type: array
    AddonParameter:
      description: A addon parameter
      properties:
        id:
          type: string
        value:
          type: string
      type: object
    ConnectorCluster:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConnectorCluster_allOf'
      description: Schema for the request to update a data plane cluster's status
    ConnectorClusterList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorClusterList_allOf'
    ConnectorClusterUpdateStatus:
      description: Schema for the request to update a data plane cluster's status
      example:
        status: status
      properties:
        status:
          type: string
      type: object
    ConnectorUpdateStatus:
      description: Schema for the request to update a data plane cluster's status
      example:
        status: status
      properties:
        status:
          type: string
      type: object
    DataPlaneClusterUpdateStatusRequest:
      description: Schema for the request to update a data plane cluster's status
      example:
        $ref: '#/components/examples/DataPlaneClusterUpdateStatusRequestExample'
      properties:
        conditions:
          description: The cluster data plane conditions
          items:
            $ref: '#/components/schemas/DataPlaneClusterUpdateStatusRequest_conditions'
          type: array
        total:
          $ref: '#/components/schemas/DataPlaneClusterUpdateStatusRequest_total'
        remaining:
          $ref: '#/components/schemas/DataPlaneClusterUpdateStatusRequest_total'
        nodeInfo:
          $ref: '#/components/schemas/DataPlaneClusterUpdateStatusRequest_nodeInfo'
        resizeInfo:
          $ref: '#/components/schemas/DataPlaneClusterUpdateStatusRequest_resizeInfo'
      type: object
    DataPlaneKafkaStatus:
      description: Schema of the status object for a Kafka cluster
      example:
        versions:
          strimzi: strimzi
          kafka: kafka
        conditions:
        - reason: reason
          type: type
          message: message
          lastTransitionTime: lastTransitionTime
          status: status
        - reason: reason
          type: type
          message: message
          lastTransitionTime: lastTransitionTime
          status: status
        capacity:
          maxPartitions: 6
          ingressEgressThroughputPerSec: ingressEgressThroughputPerSec
          maxDataRetentionSize: maxDataRetentionSize
          maxDataRetentionPeriod: maxDataRetentionPeriod
          totalMaxConnections: 0
      properties:
        conditions:
          description: The status conditions of a Kafka cluster
          items:
            $ref: '#/components/schemas/DataPlaneClusterUpdateStatusRequest_conditions'
          type: array
        capacity:
          $ref: '#/components/schemas/DataPlaneKafkaStatus_capacity'
        versions:
          $ref: '#/components/schemas/DataPlaneKafkaStatus_versions'
      type: object
    DataPlaneKafkaStatusUpdateRequest:
      additionalProperties:
        $ref: '#/components/schemas/DataPlaneKafkaStatus'
      description: Schema for the request to update the statuses of Kafka clusters
        from data plane
      example:
        $ref: '#/components/examples/DataPlaneKafkaUpdateStatusRequestExample'
      type: object
    Error_allOf:
      properties:
        code:
          type: string
        reason:
          type: string
        operation_id:
          type: string
    ManagedKafka_allOf_annotation:
      properties:
        id:
          type: string
        placementId:
          type: string
    ManagedKafka_allOf_spec_OAuth:
      properties:
        ClientId:
          type: string
        ClientSecret:
          type: string
        TokenEndpointURI:
          type: string
        JwksEndpointURI:
          type: string
        ValidIssuerEndpointURI:
          type: string
        UserNameClaim:
          type: string
        TlsTrustedCertificate:
          type: string
    ManagedKafka_allOf_spec_Endpoint_Tls:
      properties:
        Cert:
          type: string
        Key:
          type: string
    ManagedKafka_allOf_spec_Endpoint:
      properties:
        BootstrapServerHost:
          type: string
        Tls:
          $ref: '#/components/schemas/ManagedKafka_allOf_spec_Endpoint_Tls'
    ManagedKafka_allOf_spec:
      properties:
        Capacity:
          $ref: '#/components/schemas/ManagedKafkaCapacity'
        OAuth:
          $ref: '#/components/schemas/ManagedKafka_allOf_spec_OAuth'
        Endpoint:
          $ref: '#/components/schemas/ManagedKafka_allOf_spec_Endpoint'
        Versions:
          $ref: '#/components/schemas/ManagedKafkaVersions'
        Deleted:
          type: boolean
      required:
      - Deleted
    ManagedKafka_allOf_status:
      properties:
        Conditions:
          items:
            allOf:
            - $ref: '#/components/schemas/MetaV1Condition'
          type: array
        Capacity:
          $ref: '#/components/schemas/ManagedKafkaCapacity'
        Versions:
          $ref: '#/components/schemas/ManagedKafkaVersions'
    ManagedKafka_allOf:
      properties:
        name:
          type: string
        annotation:
          $ref: '#/components/schemas/ManagedKafka_allOf_annotation'
        spec:
          $ref: '#/components/schemas/ManagedKafka_allOf_spec'
        status:
          $ref: '#/components/schemas/ManagedKafka_allOf_status'
    ManagedKafkaList_allOf:
      example: '{"kind":"ManagedKafkaList","page":"1","size":"1","total":"1","item":{"$ref":"#/components/examples/ManagedKafkaExample"}}'
      properties:
        items:
          items:
            allOf:
            - $ref: '#/components/schemas/ManagedKafka'
          type: array
    ConnectorType_allOf:
      properties:
        name:
          description: Name of the connector type.
          type: string
        version:
          description: Version of the connector type.
          type: string
        description:
          description: A description of the connector.
          type: string
        json_schema:
          description: A json schema that can be used to validate a connectors connector_spec
            field.
          type: object
    ConnectorTypeList_allOf:
      properties:
        items:
          items:
            allOf:
            - $ref: '#/components/schemas/ConnectorType'
          type: array
    ConnectorList_allOf:
      properties:
        items:
          items:
            allOf:
            - $ref: '#/components/schemas/Connector'
          type: array
    Connector_allOf_metadata:
      properties:
        kafka_id:
          type: string
        owner:
          type: string
        name:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
        resource_version:
          format: int64
          type: integer
    Connector_allOf:
      properties:
        metadata:
          $ref: '#/components/schemas/Connector_allOf_metadata'
        deployment_location:
          $ref: '#/components/schemas/ClusterTarget'
        connector_type_id:
          type: string
        connector_spec:
          type: object
        status:
          type: string
    ConnectorCluster_allOf_metadata:
      properties:
        owner:
          type: string
        name:
          type: string
        group:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
    ConnectorCluster_allOf:
      properties:
        metadata:
          $ref: '#/components/schemas/ConnectorCluster_allOf_metadata'
        service_account:
          type: string
        status:
          type: string
    ConnectorClusterList_allOf:
      properties:
        items:
          items:
            allOf:
            - $ref: '#/components/schemas/ConnectorCluster'
          type: array
    DataPlaneClusterUpdateStatusRequest_conditions:
      example:
        reason: reason
        type: type
        message: message
        lastTransitionTime: lastTransitionTime
        status: status
      properties:
        type:
          type: string
        reason:
          type: string
        message:
          type: string
        status:
          type: string
        lastTransitionTime:
          type: string
    DataPlaneClusterUpdateStatusRequest_total:
      properties:
        ingressEgressThroughputPerSec:
          nullable: true
          type: string
        connections:
          nullable: true
          type: integer
        dataRetentionSize:
          nullable: true
          type: string
        partitions:
          nullable: true
          type: integer
    DataPlaneClusterUpdateStatusRequest_nodeInfo:
      properties:
        ceiling:
          nullable: true
          type: integer
        floor:
          nullable: true
          type: integer
        current:
          nullable: true
          type: integer
        currentWorkLoadMinimum:
          nullable: true
          type: integer
    DataPlaneClusterUpdateStatusRequest_resizeInfo_delta:
      nullable: true
      properties:
        ingressEgressThroughputPerSec:
          nullable: true
          type: string
        connections:
          nullable: true
          type: integer
        dataRetentionSize:
          nullable: true
          type: string
        maxPartitions:
          nullable: true
          type: integer
    DataPlaneClusterUpdateStatusRequest_resizeInfo:
      properties:
        nodeDelta:
          nullable: true
          type: integer
        delta:
          $ref: '#/components/schemas/DataPlaneClusterUpdateStatusRequest_resizeInfo_delta'
    DataPlaneKafkaStatus_capacity:
      description: Capacity information of the data plane cluster
      example:
        maxPartitions: 6
        ingressEgressThroughputPerSec: ingressEgressThroughputPerSec
        maxDataRetentionSize: maxDataRetentionSize
        maxDataRetentionPeriod: maxDataRetentionPeriod
        totalMaxConnections: 0
      properties:
        ingressEgressThroughputPerSec:
          type: string
        totalMaxConnections:
          type: integer
        maxDataRetentionSize:
          type: string
        maxPartitions:
          type: integer
        maxDataRetentionPeriod:
          type: string
    DataPlaneKafkaStatus_versions:
      description: Version information related to a Kafka cluster
      example:
        strimzi: strimzi
        kafka: kafka
      properties:
        kafka:
          type: string
        strimzi:
          type: string
