openapi: 3.0.0
info:
  description: Managed Service API
  title: Managed Service API
  version: 0.0.1
servers:
- description: Main (production) server
  url: https://api.openshift.com
- description: Staging server
  url: https://api.stage.openshift.com
- description: current domain
  url: /
paths:
  /api/managed-services-api/v1/kafkas:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KafkaRequest'
        description: Kafka data
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KafkaRequest'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized to perform operation
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka already exists
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred creating the Kafka Request
      security:
      - Bearer: []
      summary: Create a new kafka Request
components:
  parameters:
    id:
      description: The id of record
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    page:
      description: Page number of record list when record list exceeds specified page
        size
      explode: true
      in: query
      name: page
      required: false
      schema:
        default: 1
        minimum: 1
        type: integer
      style: form
    size:
      description: Maximum number of records to return
      explode: true
      in: query
      name: size
      required: false
      schema:
        default: 100
        minimum: 0
        type: integer
      style: form
    search:
      description: "Specifies the search criteria. The syntax of this parameter is\n\
        similar to the syntax of the _where_ clause of an SQL statement,\nusing the\
        \ names of the json attributes / column names of the account. \nFor example,\
        \ in order to retrieve all the accounts with a username\nstarting with `my`:\n\
        \n```sql\nusername like 'my%'\n```\n\nThe search criteria can also be applied\
        \ on related resource.\nFor example, in order to retrieve all the subscriptions\
        \ labeled by `foo=bar`,\n\n```sql\nsubscription_labels.key = 'foo' and subscription_labels.value\
        \ = 'bar'\n```\n\nIf the parameter isn't provided, or if the value is empty,\
        \ then\nall the accounts that the user has permission to see will be\nreturned."
      explode: true
      in: query
      name: search
      required: false
      schema:
        type: string
      style: form
    orderBy:
      description: |-
        Specifies the order by criteria. The syntax of this parameter is
        similar to the syntax of the _order by_ clause of an SQL statement,
        but using the names of the json attributes / column of the account.
        For example, in order to retrieve all accounts ordered by username:

        ```sql
        username asc
        ```

        Or in order to retrieve all accounts ordered by username _and_ first name:

        ```sql
        username asc, firstName asc
        ```

        If the parameter isn't provided, or if the value is empty, then
        no explicit ordering will be applied.
      explode: true
      in: query
      name: orderBy
      required: false
      schema:
        type: string
      style: form
  schemas:
    ObjectReference:
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
      type: object
    List:
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
      required:
      - items
      - kind
      - page
      - size
      - total
      type: object
    Error:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Error_allOf'
    ErrorList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ErrorList_allOf'
    KafkaRequest:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/KafkaRequest_allOf'
    KafkaRequestList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/KafkaRequestList_allOf'
    Error_allOf:
      properties:
        code:
          type: string
        reason:
          type: string
        operation_id:
          type: string
    ErrorList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Error'
          type: array
    KafkaRequest_allOf:
      properties:
        clusterID:
          type: string
        status:
          type: string
        cloud_provider:
          type: string
        multi_az:
          type: string
        region:
          type: string
        owner:
          type: string
        name:
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
    KafkaRequestList_allOf:
      properties:
        items:
          items:
            allOf:
            - $ref: '#/components/schemas/KafkaRequest'
          type: array
  securitySchemes:
    Bearer:
      bearerFormat: JWT
      scheme: bearer
      type: http
