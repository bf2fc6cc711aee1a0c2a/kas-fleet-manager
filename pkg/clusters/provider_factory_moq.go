// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package clusters

import (
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/api"
	"sync"
)

// Ensure, that ProviderFactoryMock does implement ProviderFactory.
// If this is not the case, regenerate this file with moq.
var _ ProviderFactory = &ProviderFactoryMock{}

// ProviderFactoryMock is a mock implementation of ProviderFactory.
//
// 	func TestSomethingThatUsesProviderFactory(t *testing.T) {
//
// 		// make and configure a mocked ProviderFactory
// 		mockedProviderFactory := &ProviderFactoryMock{
// 			GetAddonProviderFunc: func(providerType api.ClusterProviderType) (AddonProvider, error) {
// 				panic("mock out the GetAddonProvider method")
// 			},
// 			GetProviderFunc: func(providerType api.ClusterProviderType) (Provider, error) {
// 				panic("mock out the GetProvider method")
// 			},
// 		}
//
// 		// use mockedProviderFactory in code that requires ProviderFactory
// 		// and then make assertions.
//
// 	}
type ProviderFactoryMock struct {
	// GetAddonProviderFunc mocks the GetAddonProvider method.
	GetAddonProviderFunc func(providerType api.ClusterProviderType) (AddonProvider, error)

	// GetProviderFunc mocks the GetProvider method.
	GetProviderFunc func(providerType api.ClusterProviderType) (Provider, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAddonProvider holds details about calls to the GetAddonProvider method.
		GetAddonProvider []struct {
			// ProviderType is the providerType argument value.
			ProviderType api.ClusterProviderType
		}
		// GetProvider holds details about calls to the GetProvider method.
		GetProvider []struct {
			// ProviderType is the providerType argument value.
			ProviderType api.ClusterProviderType
		}
	}
	lockGetAddonProvider sync.RWMutex
	lockGetProvider      sync.RWMutex
}

// GetAddonProvider calls GetAddonProviderFunc.
func (mock *ProviderFactoryMock) GetAddonProvider(providerType api.ClusterProviderType) (AddonProvider, error) {
	if mock.GetAddonProviderFunc == nil {
		panic("ProviderFactoryMock.GetAddonProviderFunc: method is nil but ProviderFactory.GetAddonProvider was just called")
	}
	callInfo := struct {
		ProviderType api.ClusterProviderType
	}{
		ProviderType: providerType,
	}
	mock.lockGetAddonProvider.Lock()
	mock.calls.GetAddonProvider = append(mock.calls.GetAddonProvider, callInfo)
	mock.lockGetAddonProvider.Unlock()
	return mock.GetAddonProviderFunc(providerType)
}

// GetAddonProviderCalls gets all the calls that were made to GetAddonProvider.
// Check the length with:
//     len(mockedProviderFactory.GetAddonProviderCalls())
func (mock *ProviderFactoryMock) GetAddonProviderCalls() []struct {
	ProviderType api.ClusterProviderType
} {
	var calls []struct {
		ProviderType api.ClusterProviderType
	}
	mock.lockGetAddonProvider.RLock()
	calls = mock.calls.GetAddonProvider
	mock.lockGetAddonProvider.RUnlock()
	return calls
}

// GetProvider calls GetProviderFunc.
func (mock *ProviderFactoryMock) GetProvider(providerType api.ClusterProviderType) (Provider, error) {
	if mock.GetProviderFunc == nil {
		panic("ProviderFactoryMock.GetProviderFunc: method is nil but ProviderFactory.GetProvider was just called")
	}
	callInfo := struct {
		ProviderType api.ClusterProviderType
	}{
		ProviderType: providerType,
	}
	mock.lockGetProvider.Lock()
	mock.calls.GetProvider = append(mock.calls.GetProvider, callInfo)
	mock.lockGetProvider.Unlock()
	return mock.GetProviderFunc(providerType)
}

// GetProviderCalls gets all the calls that were made to GetProvider.
// Check the length with:
//     len(mockedProviderFactory.GetProviderCalls())
func (mock *ProviderFactoryMock) GetProviderCalls() []struct {
	ProviderType api.ClusterProviderType
} {
	var calls []struct {
		ProviderType api.ClusterProviderType
	}
	mock.lockGetProvider.RLock()
	calls = mock.calls.GetProvider
	mock.lockGetProvider.RUnlock()
	return calls
}
