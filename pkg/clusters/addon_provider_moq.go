// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package clusters

import (
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/clusters/ocm"
	"github.com/bf2fc6cc711aee1a0c2a/kas-fleet-manager/pkg/clusters/types"
	"sync"
)

// Ensure, that AddonProviderMock does implement AddonProvider.
// If this is not the case, regenerate this file with moq.
var _ AddonProvider = &AddonProviderMock{}

// AddonProviderMock is a mock implementation of AddonProvider.
//
// 	func TestSomethingThatUsesAddonProvider(t *testing.T) {
//
// 		// make and configure a mocked AddonProvider
// 		mockedAddonProvider := &AddonProviderMock{
// 			InstallAddonFunc: func(clusterSpec *types.ClusterSpec, addonID string) (bool, error) {
// 				panic("mock out the InstallAddon method")
// 			},
// 			InstallAddonWithParamsFunc: func(clusterSpec *types.ClusterSpec, addonId string, addonParams []ocm.AddonParameter) (bool, error) {
// 				panic("mock out the InstallAddonWithParams method")
// 			},
// 		}
//
// 		// use mockedAddonProvider in code that requires AddonProvider
// 		// and then make assertions.
//
// 	}
type AddonProviderMock struct {
	// InstallAddonFunc mocks the InstallAddon method.
	InstallAddonFunc func(clusterSpec *types.ClusterSpec, addonID string) (bool, error)

	// InstallAddonWithParamsFunc mocks the InstallAddonWithParams method.
	InstallAddonWithParamsFunc func(clusterSpec *types.ClusterSpec, addonId string, addonParams []ocm.AddonParameter) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// InstallAddon holds details about calls to the InstallAddon method.
		InstallAddon []struct {
			// ClusterSpec is the clusterSpec argument value.
			ClusterSpec *types.ClusterSpec
			// AddonID is the addonID argument value.
			AddonID string
		}
		// InstallAddonWithParams holds details about calls to the InstallAddonWithParams method.
		InstallAddonWithParams []struct {
			// ClusterSpec is the clusterSpec argument value.
			ClusterSpec *types.ClusterSpec
			// AddonId is the addonId argument value.
			AddonId string
			// AddonParams is the addonParams argument value.
			AddonParams []ocm.AddonParameter
		}
	}
	lockInstallAddon           sync.RWMutex
	lockInstallAddonWithParams sync.RWMutex
}

// InstallAddon calls InstallAddonFunc.
func (mock *AddonProviderMock) InstallAddon(clusterSpec *types.ClusterSpec, addonID string) (bool, error) {
	if mock.InstallAddonFunc == nil {
		panic("AddonProviderMock.InstallAddonFunc: method is nil but AddonProvider.InstallAddon was just called")
	}
	callInfo := struct {
		ClusterSpec *types.ClusterSpec
		AddonID     string
	}{
		ClusterSpec: clusterSpec,
		AddonID:     addonID,
	}
	mock.lockInstallAddon.Lock()
	mock.calls.InstallAddon = append(mock.calls.InstallAddon, callInfo)
	mock.lockInstallAddon.Unlock()
	return mock.InstallAddonFunc(clusterSpec, addonID)
}

// InstallAddonCalls gets all the calls that were made to InstallAddon.
// Check the length with:
//     len(mockedAddonProvider.InstallAddonCalls())
func (mock *AddonProviderMock) InstallAddonCalls() []struct {
	ClusterSpec *types.ClusterSpec
	AddonID     string
} {
	var calls []struct {
		ClusterSpec *types.ClusterSpec
		AddonID     string
	}
	mock.lockInstallAddon.RLock()
	calls = mock.calls.InstallAddon
	mock.lockInstallAddon.RUnlock()
	return calls
}

// InstallAddonWithParams calls InstallAddonWithParamsFunc.
func (mock *AddonProviderMock) InstallAddonWithParams(clusterSpec *types.ClusterSpec, addonId string, addonParams []ocm.AddonParameter) (bool, error) {
	if mock.InstallAddonWithParamsFunc == nil {
		panic("AddonProviderMock.InstallAddonWithParamsFunc: method is nil but AddonProvider.InstallAddonWithParams was just called")
	}
	callInfo := struct {
		ClusterSpec *types.ClusterSpec
		AddonId     string
		AddonParams []ocm.AddonParameter
	}{
		ClusterSpec: clusterSpec,
		AddonId:     addonId,
		AddonParams: addonParams,
	}
	mock.lockInstallAddonWithParams.Lock()
	mock.calls.InstallAddonWithParams = append(mock.calls.InstallAddonWithParams, callInfo)
	mock.lockInstallAddonWithParams.Unlock()
	return mock.InstallAddonWithParamsFunc(clusterSpec, addonId, addonParams)
}

// InstallAddonWithParamsCalls gets all the calls that were made to InstallAddonWithParams.
// Check the length with:
//     len(mockedAddonProvider.InstallAddonWithParamsCalls())
func (mock *AddonProviderMock) InstallAddonWithParamsCalls() []struct {
	ClusterSpec *types.ClusterSpec
	AddonId     string
	AddonParams []ocm.AddonParameter
} {
	var calls []struct {
		ClusterSpec *types.ClusterSpec
		AddonId     string
		AddonParams []ocm.AddonParameter
	}
	mock.lockInstallAddonWithParams.RLock()
	calls = mock.calls.InstallAddonWithParams
	mock.lockInstallAddonWithParams.RUnlock()
	return calls
}
